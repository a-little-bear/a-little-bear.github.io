<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>alittlebear&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://a-little-bear.github.io/"/>
  <updated>2020-08-06T02:12:47.612Z</updated>
  <id>https://a-little-bear.github.io/</id>
  
  <author>
    <name>alittlebear</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学python第六课-函数和模块的使用</title>
    <link href="https://a-little-bear.github.io/p/584b/"/>
    <id>https://a-little-bear.github.io/p/584b/</id>
    <published>2020-08-02T09:29:57.000Z</published>
    <updated>2020-08-06T02:12:47.612Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学python第六课-函数和模块的使用</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>我只是个学python拖了好久的小萌新，一直要学一直要学，刚来注册说到现在，终于开始了。。</p><p>这几个月一直在找适合自己的教程，看过几百本电子书，看过无数新老视频教程，最后还是决定用 骆昊大大 的：<a href="https://github.com/jackfrued/Python-100-Days">Python - 100天从新手到大师</a>（zzzain46大大友情推荐）</p><p>软件方面，没有用<code>PyCharm</code>，在用<code>VS Code</code>，还有<code>IDLE</code>。</p><p>python 版本：<code>3.8.1</code>              操作系统：<code>Windows 10</code></p><h1 id="要牢记的话"><a href="#要牢记的话" class="headerlink" title="要牢记的话"></a>要牢记的话</h1><hr><p>感谢：<a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></p><ul><li>Make English as your working language. （<strong>让英语成为你的工作语言</strong>）</li><li>Practice makes perfect. （<strong>熟能生巧</strong>）</li><li>All experience comes from mistakes. （<strong>所有的经验都源于你犯过的错误</strong>）</li><li>Don’t be one of the leeches. （<strong>不要当伸手党</strong>）</li><li>Either outstanding or out. （<strong>要么出众</strong>，<strong>要么出局</strong>）</li></ul><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><h2 id="Day06-函数和模块的使用"><a href="#Day06-函数和模块的使用" class="headerlink" title="Day06 - 函数和模块的使用"></a>Day06 - <a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/06.函数和模块的使用.md">函数和模块的使用</a></h2><ul><li>函数的作用 - 代码的坏味道 / 用函数封装功能模块</li><li>定义函数 - def语句 / 函数名 / 参数列表 / return语句 / 调用自定义函数</li><li>调用函数 - Python内置函数 / 导入模块和函数</li><li>函数的参数 - 默认参数 / 可变参数 / 关键字参数 / 命名关键字参数</li><li>函数的返回值 - 没有返回值 / 返回单个值 / 返回多个值</li><li>作用域问题 - 局部作用域 / 嵌套作用域 / 全局作用域 / 内置作用域 / 和作用域相关的关键字</li><li>用模块管理函数 - 模块的概念 / 用自定义模块管理函数 / 命名冲突的时候会怎样（同一个模块和不同的模块）</li></ul><h1 id="函数和模块的使用"><a href="#函数和模块的使用" class="headerlink" title="函数和模块的使用"></a>函数和模块的使用</h1><h2 id="函数和模块的使用-1"><a href="#函数和模块的使用-1" class="headerlink" title="函数和模块的使用"></a>函数和模块的使用</h2><p>在讲解本章节的内容之前，我们先来研究一道数学题，请说出下面的方程有多少组正整数解。</p><p><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/res/formula_3.png"><img src="https://github.com/jackfrued/Python-100-Days/raw/master/Day01-15/res/formula_3.png" alt="$$x_1 + x_2 + x_3 + x_4 = 8$$"></a></p><p>事实上，上面的问题等同于将8个苹果分成四组每组至少一个苹果有多少种方案。想到这一点问题的答案就呼之欲出了。</p><p><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/res/formula_4.png"><img src="https://github.com/jackfrued/Python-100-Days/raw/master/Day01-15/res/formula_4.png" alt="$$C_M^N =\frac{M!}{N!(M-N)!}, \text{(M=7, N=3)} $$"></a></p><p>可以用Python的程序来计算出这个值，代码如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">输入M和N计算C(M,N)</span><br><span class="line"></span><br><span class="line">Version: 0.1</span><br><span class="line">Author: 骆昊</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">m &#x3D; int(input(&#39;m &#x3D; &#39;))</span><br><span class="line">n &#x3D; int(input(&#39;n &#x3D; &#39;))</span><br><span class="line">fm &#x3D; 1</span><br><span class="line">for num in range(1, m + 1):</span><br><span class="line">    fm *&#x3D; num</span><br><span class="line">fn &#x3D; 1</span><br><span class="line">for num in range(1, n + 1):</span><br><span class="line">    fn *&#x3D; num</span><br><span class="line">fm_n &#x3D; 1</span><br><span class="line">for num in range(1, m - n + 1):</span><br><span class="line">    fm_n *&#x3D; num</span><br><span class="line">print(fm &#x2F;&#x2F; fn &#x2F;&#x2F; fm_n)</span><br></pre></td></tr></table></figure><h2 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用"></a>函数的作用</h2><p>不知道大家是否注意到，在上面的代码中，我们做了3次求阶乘，这样的代码实际上就是重复代码。编程大师<em>Martin Fowler</em>先生曾经说过：“<strong>代码有很多种坏味道，重复是最坏的一种！</strong>”，要写出高质量的代码首先要解决的就是重复代码的问题。对于上面的代码来说，我们可以将计算阶乘的功能封装到一个称之为“函数”的功能模块中，在需要计算阶乘的地方，我们只需要“调用”这个“函数”就可以了。</p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>在Python中可以使用<code>def</code>关键字来定义函数，和变量一样每个函数也有一个响亮的名字，而且命名规则跟变量的命名规则是一致的。在函数名后面的圆括号中可以放置传递给函数的参数，这一点和数学上的函数非常相似，程序中函数的参数就相当于是数学上说的函数的自变量，而函数执行完成后我们可以通过<code>return</code>关键字来返回一个值，这相当于数学上说的函数的因变量。</p><p>在了解了如何定义函数后，我们可以对上面的代码进行重构，所谓重构就是在不影响代码执行结果的前提下对代码的结构进行调整，重构之后的代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输入M和N计算C(M,N)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fac</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="string">"""求阶乘"""</span></span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>, num + <span class="number">1</span>):</span><br><span class="line">        result *= n</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = int(input(<span class="string">'m = '</span>))</span><br><span class="line">n = int(input(<span class="string">'n = '</span>))</span><br><span class="line"><span class="comment"># 当需要计算阶乘的时候不用再写循环求阶乘而是直接调用已经定义好的函数</span></span><br><span class="line">print(fac(m) // fac(n) // fac(m - n))</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> Python的<code>math</code>模块中其实已经有一个名为<code>factorial</code>函数实现了阶乘运算，事实上求阶乘并不用自己定义函数。下面的例子中，我们讲的函数在Python标准库已经实现过了，我们这里是为了讲解函数的定义和使用才把它们又实现了一遍，<strong>实际开发中并不建议做这种低级的重复劳动</strong>。</p></blockquote><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><p>函数是绝大多数编程语言中都支持的一个代码的”构建块”，但是Python中的函数与其他语言中的函数还是有很多不太相同的地方，其中一个显著的区别就是Python对函数参数的处理。在Python中，函数的参数可以有默认值，也支持使用可变参数，所以Python并不需要像其他语言一样支持<a href="https://zh.wikipedia.org/wiki/函数重载">函数的重载</a>，因为我们在定义一个函数的时候可以让它有多种不同的使用方式，下面是两个小例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">roll_dice</span><span class="params">(n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="string">"""摇色子"""</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</span><br><span class="line">        total += randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a=<span class="number">0</span>, b=<span class="number">0</span>, c=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"""三个数相加"""</span></span><br><span class="line">    <span class="keyword">return</span> a + b + c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有指定参数那么使用默认值摇两颗色子</span></span><br><span class="line">print(roll_dice())</span><br><span class="line"><span class="comment"># 摇三颗色子</span></span><br><span class="line">print(roll_dice(<span class="number">3</span>))</span><br><span class="line">print(add())</span><br><span class="line">print(add(<span class="number">1</span>))</span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># 传递参数时可以不按照设定的顺序进行传递</span></span><br><span class="line">print(add(c=<span class="number">50</span>, a=<span class="number">100</span>, b=<span class="number">200</span>))</span><br></pre></td></tr></table></figure><p>我们给上面两个函数的参数都设定了默认值，这也就意味着如果在调用函数的时候如果没有传入对应参数的值时将使用该参数的默认值，所以在上面的代码中我们可以用各种不同的方式去调用<code>add</code>函数，这跟其他很多语言中函数重载的效果是一致的。</p><p>其实上面的<code>add</code>函数还有更好的实现方案，因为我们可能会对0个或多个参数进行加法运算，而具体有多少个参数是由调用者来决定，我们作为函数的设计者对这一点是一无所知的，因此在不确定参数个数的时候，我们可以使用可变参数，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在参数名前面的*表示args是一个可变参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(*args)</span>:</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> args:</span><br><span class="line">        total += val</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在调用add函数时可以传入0个或多个参数</span></span><br><span class="line">print(add())</span><br><span class="line">print(add(<span class="number">1</span>))</span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>))</span><br></pre></td></tr></table></figure><h2 id="用模块管理函数"><a href="#用模块管理函数" class="headerlink" title="用模块管理函数"></a>用模块管理函数</h2><p>对于任何一种编程语言来说，给变量、函数这样的标识符起名字都是一个让人头疼的问题，因为我们会遇到命名冲突这种尴尬的情况。最简单的场景就是在同一个.py文件中定义了两个同名函数，由于Python没有函数重载的概念，那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello, world!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'goodbye, world!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的代码会输出什么呢？</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>当然上面的这种情况我们很容易就能避免，但是如果项目是由多人协作进行团队开发的时候，团队中可能有多个程序员都定义了名为<code>foo</code>的函数，那么怎么解决这种命名冲突呢？答案其实很简单，Python中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候我们通过<code>import</code>关键字导入指定的模块就可以区分到底要使用的是哪个模块中的<code>foo</code>函数，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">module1.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hello, world!'</span>)</span><br><span class="line">module2.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'goodbye, world!'</span>)</span><br><span class="line">test.py</span><br><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出hello, world!</span></span><br><span class="line">foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出goodbye, world!</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>也可以按照如下所示的方式来区分到底要使用哪一个<code>foo</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test.py</span><br><span class="line"><span class="keyword">import</span> module1 <span class="keyword">as</span> m1</span><br><span class="line"><span class="keyword">import</span> module2 <span class="keyword">as</span> m2</span><br><span class="line"></span><br><span class="line">m1.foo()</span><br><span class="line">m2.foo()</span><br></pre></td></tr></table></figure><p>但是如果将代码写成了下面的样子，那么程序中调用的是最后导入的那个<code>foo</code>，因为后导入的foo覆盖了之前导入的<code>foo</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test.py</span><br><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出goodbye, world!</span></span><br><span class="line">foo()</span><br><span class="line">test.py</span><br><span class="line"><span class="keyword">from</span> module2 <span class="keyword">import</span> foo</span><br><span class="line"><span class="keyword">from</span> module1 <span class="keyword">import</span> foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出hello, world!</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>需要说明的是，如果我们导入的模块除了定义函数之外还中有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是”<strong>main</strong>“。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">module3.py</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># __name__是Python中一个隐含的变量它代表了模块的名字</span></span><br><span class="line"><span class="comment"># 只有被Python解释器直接执行的模块的名字才是__main__</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'call foo()'</span>)</span><br><span class="line">    foo()</span><br><span class="line">    print(<span class="string">'call bar()'</span>)</span><br><span class="line">    bar()</span><br><span class="line">test.py</span><br><span class="line"><span class="keyword">import</span> module3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入module3时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main__</span></span><br></pre></td></tr></table></figure><h2 id="练习1：实现计算求最大公约数和最小公倍数的函数。"><a href="#练习1：实现计算求最大公约数和最小公倍数的函数。" class="headerlink" title="练习1：实现计算求最大公约数和最小公倍数的函数。"></a>练习1：实现计算求最大公约数和最小公倍数的函数。</h2><h3 id="个人成品"><a href="#个人成品" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第六课-练习1-实现计算求最大公约数和最小公倍数的函数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num1 &lt; num2 :</span><br><span class="line">        num1, num2 = num2, num1</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> range(<span class="number">1</span>, num1+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num1 % factor == num2 % factor == <span class="number">0</span> :</span><br><span class="line">            gcd = factor</span><br><span class="line">            </span><br><span class="line">    print(<span class="string">'最大公因数是：'</span>, int(gcd))</span><br><span class="line">    print(<span class="string">'最小公倍数是：'</span>, int(num1 * num2 / gcd))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span> :</span><br><span class="line">    <span class="comment">#calc (10,5)</span></span><br><span class="line">    calc (int(input(<span class="string">'第一个数字：'</span>)), int(input(<span class="string">'第二个数字：'</span>)))</span><br></pre></td></tr></table></figure><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""求最大公约数"""</span></span><br><span class="line">    (x, y) = (y, x) <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> (x, y)</span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> range(x, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> x % factor == <span class="number">0</span> <span class="keyword">and</span> y % factor == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> factor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lcm</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""求最小公倍数"""</span></span><br><span class="line">    <span class="keyword">return</span> x * y // gcd(x, y)</span><br></pre></td></tr></table></figure><h3 id="我的不足"><a href="#我的不足" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li><code>(x, y) = (y, x) if x &gt; y else (x, y)</code> 原来能这么做</li><li>作者是倒着来的最大公因数，感觉减少了很多运算</li><li>函数分两个吧。。</li></ol><h3 id="改进后的成品"><a href="#改进后的成品" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第六课-练习1-实现计算求最大公约数和最小公倍数的函数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.2</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(num1, num2)</span>:</span></span><br><span class="line"></span><br><span class="line">    (num1, num2) = (num2, num1) <span class="keyword">if</span> num1 &lt; num2 <span class="keyword">else</span> (num1, num2)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> range(num2, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> num1 % factor == num2 % factor == <span class="number">0</span> :</span><br><span class="line">            <span class="keyword">return</span> factor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lcm</span><span class="params">(num1,num2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> num1 * num2 / gcd (num1,num2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span> :</span><br><span class="line">    num1, num2 = int(input(<span class="string">'第一个数字：'</span>)), int(input(<span class="string">'第二个数字：'</span>))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'最大公因数是：'</span>, int(gcd(num1,num2)))</span><br><span class="line">    print(<span class="string">'最小公倍数是：'</span>, int(lcm(num1,num2)))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第一个数字：24</span></span><br><span class="line"><span class="string">第二个数字：36</span></span><br><span class="line"><span class="string">最大公因数是： 12</span></span><br><span class="line"><span class="string">最小公倍数是： 72</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">第一个数字：24</span></span><br><span class="line"><span class="string">第二个数字：96</span></span><br><span class="line"><span class="string">最大公因数是： 24</span></span><br><span class="line"><span class="string">最小公倍数是： 96</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">第一个数字：9999</span></span><br><span class="line"><span class="string">第二个数字：99990</span></span><br><span class="line"><span class="string">最大公因数是： 9999</span></span><br><span class="line"><span class="string">最小公倍数是： 99990</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h2 id="练习2：实现判断一个数是不是回文数的函数。"><a href="#练习2：实现判断一个数是不是回文数的函数。" class="headerlink" title="练习2：实现判断一个数是不是回文数的函数。"></a>练习2：实现判断一个数是不是回文数的函数。</h2><h3 id="个人成品-1"><a href="#个人成品-1" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第六课-练习2-实现判断一个数是不是回文数的函数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：“回文”是指正读反读都能读通的句子，</span></span><br><span class="line"><span class="string">它是古今中外都有的一种修辞方式和文字游戏，</span></span><br><span class="line"><span class="string">如“我为人人，人人为我”等。</span></span><br><span class="line"><span class="string">在数学中也有这样一类数字有这样的特征，</span></span><br><span class="line"><span class="string">称为回文数（palindrome number）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">palindrome_number</span><span class="params">(num)</span>:</span></span><br><span class="line"></span><br><span class="line">    mun, number = <span class="number">0</span>, num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> num &gt;= <span class="number">1</span>:</span><br><span class="line">        mun, num = mun * <span class="number">10</span> + num % <span class="number">10</span>, num // <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> mun == number:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这是一个回文数"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这不是一个回文数"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num = int(input(<span class="string">'请输入一个正整数：'</span>))</span><br><span class="line">    print(palindrome_number(num))</span><br></pre></td></tr></table></figure><h3 id="参考答案-1"><a href="#参考答案-1" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_palindrome</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="string">"""判断一个数是不是回文数"""</span></span><br><span class="line">    temp = num</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> temp &gt; <span class="number">0</span>:</span><br><span class="line">        total = total * <span class="number">10</span> + temp % <span class="number">10</span></span><br><span class="line">        temp //= <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> total == num</span><br></pre></td></tr></table></figure><h3 id="我的不足-1"><a href="#我的不足-1" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>感觉没啥好改的。。。</li></ol><h2 id="练习3：实现判断一个数是不是素数的函数。"><a href="#练习3：实现判断一个数是不是素数的函数。" class="headerlink" title="练习3：实现判断一个数是不是素数的函数。"></a>练习3：实现判断一个数是不是素数的函数。</h2><h3 id="个人成品-2"><a href="#个人成品-2" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第六课-练习3-实现判断一个数是不是素数的函数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：素数是只能被自己和1整除的正整数。。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_number</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> range(int(sqrt(num)), <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % factor == <span class="number">0</span> <span class="keyword">and</span> num != factor <span class="keyword">and</span> num != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"这不是一个素数"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"这是一个素数"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num = int(input(<span class="string">'请输入一个正整数：'</span>))</span><br><span class="line">    print(prime_number(num))</span><br></pre></td></tr></table></figure><h3 id="参考答案-2"><a href="#参考答案-2" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="string">"""判断一个数是不是素数"""</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> range(<span class="number">2</span>, int(num ** <span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % factor == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> num != <span class="number">1</span> <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="我的不足-2"><a href="#我的不足-2" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>还有微改的地方（for-in那里）</li><li>把import平方根直接改成 ** 0.5</li></ol><h3 id="改进后的成品-1"><a href="#改进后的成品-1" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第六课-练习3-实现判断一个数是不是素数的函数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：素数是只能被自己和1整除的正整数。。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.2</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_number</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> range(int(num ** <span class="number">0.5</span> + <span class="number">1</span>), <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % factor == <span class="number">0</span> <span class="keyword">and</span> num != factor <span class="keyword">and</span> num != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"这不是一个素数"</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"这是一个素数"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num = int(input(<span class="string">'请输入一个正整数：'</span>))</span><br><span class="line">    print(prime_number(num))</span><br></pre></td></tr></table></figure><h2 id="练习4：写一个程序判断输入的正整数是不是回文素数。"><a href="#练习4：写一个程序判断输入的正整数是不是回文素数。" class="headerlink" title="练习4：写一个程序判断输入的正整数是不是回文素数。"></a>练习4：写一个程序判断输入的正整数是不是回文素数。</h2><h3 id="个人成品-3"><a href="#个人成品-3" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第六课-练习4-写一个程序判断输入的正整数是不是回文素数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：素数是只能被自己和1整除的正整数。。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：“回文”是指正读反读都能读通的句子，</span></span><br><span class="line"><span class="string">它是古今中外都有的一种修辞方式和文字游戏，</span></span><br><span class="line"><span class="string">如“我为人人，人人为我”等。</span></span><br><span class="line"><span class="string">在数学中也有这样一类数字有这样的特征，</span></span><br><span class="line"><span class="string">称为回文数（palindrome number）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_number</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> range(int(num ** <span class="number">0.5</span> + <span class="number">1</span>), <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % factor == <span class="number">0</span> <span class="keyword">and</span> num != factor <span class="keyword">and</span> num != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">palindrome_number</span><span class="params">(num)</span>:</span></span><br><span class="line">    mun, number = <span class="number">0</span>, num</span><br><span class="line">    <span class="keyword">while</span> num &gt;= <span class="number">1</span>:</span><br><span class="line">        mun, num = mun * <span class="number">10</span> + num % <span class="number">10</span>, num // <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> mun == number:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num = int(input(<span class="string">'请输入一个正整数：'</span>))</span><br><span class="line">    <span class="keyword">if</span> prime_number(num) <span class="keyword">and</span> palindrome_number(num) == <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">'这是一个回文素数'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'这不是一个回文素数'</span>)</span><br></pre></td></tr></table></figure><h3 id="参考答案-3"><a href="#参考答案-3" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num = int(input(<span class="string">'请输入正整数: '</span>))</span><br><span class="line">    <span class="keyword">if</span> is_palindrome(num) <span class="keyword">and</span> is_prime(num):</span><br><span class="line">        print(<span class="string">'%d是回文素数'</span> % num)</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：通过上面的程序可以看出，当我们<strong>将代码中重复出现的和相对独立的功能抽取成函数</strong>后，我们可以<strong>组合使用这些函数</strong>来解决更为复杂的问题，这也是我们为什么要定义和使用函数的一个非常重要的原因。</p></blockquote><h3 id="我的不足-3"><a href="#我的不足-3" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>if a and b:直接就可以，不需要后面加个 == True</li><li>最后可以把具体的数字print出来</li></ol><h3 id="改进后的成品-2"><a href="#改进后的成品-2" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第六课-练习4-写一个程序判断输入的正整数是不是回文素数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：素数是只能被自己和1整除的正整数。。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：“回文”是指正读反读都能读通的句子，</span></span><br><span class="line"><span class="string">它是古今中外都有的一种修辞方式和文字游戏，</span></span><br><span class="line"><span class="string">如“我为人人，人人为我”等。</span></span><br><span class="line"><span class="string">在数学中也有这样一类数字有这样的特征，</span></span><br><span class="line"><span class="string">称为回文数（palindrome number）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.2</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime_number</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> range(int(num ** <span class="number">0.5</span> + <span class="number">1</span>), <span class="number">1</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % factor == <span class="number">0</span> <span class="keyword">and</span> num != factor <span class="keyword">and</span> num != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">palindrome_number</span><span class="params">(num)</span>:</span></span><br><span class="line">    mun, number = <span class="number">0</span>, num</span><br><span class="line">    <span class="keyword">while</span> num &gt;= <span class="number">1</span>:</span><br><span class="line">        mun, num = mun * <span class="number">10</span> + num % <span class="number">10</span>, num // <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> mun == number:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num = int(input(<span class="string">'请输入一个正整数：'</span>))</span><br><span class="line">    <span class="keyword">if</span> prime_number(num) <span class="keyword">and</span> palindrome_number(num):</span><br><span class="line">        print(<span class="string">'%d是回文素数'</span> % num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'%d不是回文素数'</span> % num)</span><br></pre></td></tr></table></figure><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><p>最后，我们来讨论一下Python中有关变量作用域的问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    b = <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Python中可以在函数内部再定义函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">        c = <span class="literal">True</span></span><br><span class="line">        print(a)</span><br><span class="line">        print(b)</span><br><span class="line">        print(c)</span><br><span class="line"></span><br><span class="line">    bar()</span><br><span class="line">    <span class="comment"># print(c)  # NameError: name 'c' is not defined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    <span class="comment"># print(b)  # NameError: name 'b' is not defined</span></span><br><span class="line">    foo()</span><br></pre></td></tr></table></figure><p>上面的代码能够顺利的执行并且打印出100、hello和True，但我们注意到了，在<code>bar</code>函数的内部并没有定义<code>a</code>和<code>b</code>两个变量，那么<code>a</code>和<code>b</code>是从哪里来的。我们在上面代码的<code>if</code>分支中定义了一个变量<code>a</code>，这是一个全局变量（global variable），属于全局作用域，因为它没有定义在任何一个函数中。在上面的<code>foo</code>函数中我们定义了变量<code>b</code>，这是一个定义在函数中的局部变量（local variable），属于局部作用域，在<code>foo</code>函数的外部并不能访问到它；但对于<code>foo</code>函数内部的<code>bar</code>函数来说，变量<code>b</code>属于嵌套作用域，在<code>bar</code>函数中我们是可以访问到它的。<code>bar</code>函数中的变量<code>c</code>属于局部作用域，在<code>bar</code>函数之外是无法访问的。事实上，Python查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”的顺序进行搜索，前三者我们在上面的代码中已经看到了，所谓的“内置作用域”就是Python内置的那些标识符，我们之前用过的<code>input</code>、<code>print</code>、<code>int</code>等都属于内置作用域。</p><p>再看看下面这段代码，我们希望通过函数调用修改全局变量<code>a</code>的值，但实际上下面的代码是做不到的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    print(a)  <span class="comment"># 200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    foo()</span><br><span class="line">    print(a)  <span class="comment"># 100</span></span><br></pre></td></tr></table></figure><p>在调用<code>foo</code>函数后，我们发现<code>a</code>的值仍然是100，这是因为当我们在函数<code>foo</code>中写<code>a = 200</code>的时候，是重新定义了一个名字为<code>a</code>的局部变量，它跟全局作用域的<code>a</code>并不是同一个变量，因为局部作用域中有了自己的变量<code>a</code>，因此<code>foo</code>函数不再搜索全局作用域中的<code>a</code>。如果我们希望在<code>foo</code>函数中修改全局作用域中的<code>a</code>，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = <span class="number">200</span></span><br><span class="line">    print(a)  <span class="comment"># 200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    foo()</span><br><span class="line">    print(a)  <span class="comment"># 200</span></span><br></pre></td></tr></table></figure><p>我们可以使用<code>global</code>关键字来指示<code>foo</code>函数中的变量<code>a</code>来自于全局作用域，如果全局作用域中没有<code>a</code>，那么下面一行的代码就会定义变量<code>a</code>并将其置于全局作用域。同理，如果我们希望函数内部的函数能够修改嵌套作用域中的变量，可以使用<code>nonlocal</code>关键字来指示变量来自于嵌套作用域，请大家自行试验。</p><p>在实际开发中，我们应该尽量减少对全局变量的使用，因为全局变量的作用域和影响过于广泛，可能会发生意料之外的修改和使用，除此之外全局变量比局部变量拥有更长的生命周期，可能导致对象占用的内存长时间无法被<a href="https://zh.wikipedia.org/wiki/垃圾回收_(計算機科學)">垃圾回收</a>。事实上，减少对全局变量的使用，也是降低代码之间耦合度的一个重要举措，同时也是对<a href="https://zh.wikipedia.org/zh-hans/得墨忒耳定律">迪米特法则</a>的践行。减少全局变量的使用就意味着我们应该尽量让变量的作用域在函数的内部，但是如果我们希望将一个局部变量的生命周期延长，使其在定义它的函数调用结束后依然可以使用它的值，这时候就需要使用<a href="https://zh.wikipedia.org/wiki/闭包_(计算机科学)">闭包</a>，这个我们在后续的内容中进行讲解。</p><blockquote><p><strong>说明：</strong> 很多人经常会将“闭包”和<a href="https://zh.wikipedia.org/wiki/匿名函数">“匿名函数”</a>混为一谈，但实际上它们并不是一回事，如果想了解这个概念，可以看看<a href="https://zh.wikipedia.org/wiki/">维基百科</a>的解释或者<a href="https://www.zhihu.com/">知乎</a>上对这个概念的讨论。</p></blockquote><p>说了那么多，其实结论很简单，从现在开始我们可以将Python代码按照下面的格式进行书写，这一点点的改进其实就是在我们理解了函数和作用域的基础上跨出的巨大的一步。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Todo: Add your code here</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>开始养成用 <code>if _ _name_ _ == &#39;_ _main_ _&#39;:</code>的习惯。。</li><li>巩固了之前所学知识，比如说看正整数是不是素数，看正整数是不是回文数，计算最大公约数和最小公倍数。。等</li><li>认识+了解了function（python中的def）函数</li><li>了解了变量的范围，比如说全局变量，本地变量啥的。。。。。</li></ol><h1 id="所有用到的链接"><a href="#所有用到的链接" class="headerlink" title="所有用到的链接"></a>所有用到的链接</h1><ul><li><a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></li><li><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/06.%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8.md">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/06.%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8.md</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学python第六课-函数和模块的使用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/python/"/>
    
    
  </entry>
  
  <entry>
    <title>学python第五课-构造程序逻辑</title>
    <link href="https://a-little-bear.github.io/p/1052/"/>
    <id>https://a-little-bear.github.io/p/1052/</id>
    <published>2020-08-01T02:26:02.000Z</published>
    <updated>2020-08-02T07:37:47.921Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学python第五课-构造程序逻辑</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>我只是个学python拖了好久的小萌新，一直要学一直要学，刚来注册说到现在，终于开始了。。</p><p>也不是特别萌新，会一个小语言（底子好），会一点bat（批处理），python基础知识也了解的不少了，编程逻辑自认为还可以。</p><p>这几个月一直在找适合自己的教程，看过几百本电子书，看过无数新老视频教程，最后还是决定用 骆昊大大 的：<a href="https://github.com/jackfrued/Python-100-Days">Python - 100天从新手到大师</a>（zzzain46大大友情推荐）</p><p>由于文章是给自己看的，所以肯定会精简掉不需要的东西，想学建议看原教程那里的</p><p>大纲是原文大纲，仅供参考，我的文章可能删减了一些</p><p>可能太简单了，勿喷！（主要是给自己看的）</p><p>然后软件方面，没有用<code>PyCharm</code>，在用<code>VS Code</code>，还有<code>IDLE</code>。</p><p>python 版本：<code>3.8.1</code>。</p><p>操作系统：<code>Windows 10</code></p><h1 id="要牢记的话"><a href="#要牢记的话" class="headerlink" title="要牢记的话"></a>要牢记的话</h1><hr><p>感谢：<a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></p><ul><li>Make English as your working language. （让英语成为你的工作语言）</li><li>Practice makes perfect. （熟能生巧）</li><li>All experience comes from mistakes. （所有的经验都源于你犯过的错误）</li><li>Don’t be one of the leeches. （不要当伸手党）</li><li>Either outstanding or out. （要么出众，要么出局）</li></ul><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><h2 id="Day05-构造程序逻辑"><a href="#Day05-构造程序逻辑" class="headerlink" title="Day05 - 构造程序逻辑"></a>Day05 - <a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/05.构造程序逻辑.md">构造程序逻辑</a></h2><ul><li>经典案例：水仙花数 / 百钱百鸡 / Craps赌博游戏</li><li>练习题目：斐波那契数列 / 完美数 / 素数</li></ul><h1 id="构造程序逻辑"><a href="#构造程序逻辑" class="headerlink" title="构造程序逻辑"></a>构造程序逻辑</h1><p>学完前面的几个章节后，我觉得有必要在这里带大家做一些练习来巩固之前所学的知识，虽然迄今为止我们学习的内容只是Python的冰山一角，但是这些内容已经足够我们来构建程序中的逻辑。对于编程语言的初学者来说，在学习了Python的核心语言元素（变量、类型、运算符、表达式、分支结构、循环结构等）之后，必须做的一件事情就是尝试用所学知识去解决现实中的问题，换句话说就是锻炼自己把用人类自然语言描述的算法（解决问题的方法和步骤）翻译成Python代码的能力，而这件事情必须通过大量的练习才能达成。</p><p>我们在本章为大家整理了一些经典的案例和习题，希望通过这些例子，一方面帮助大家巩固之前所学的Python知识，另一方面帮助大家了解如何建立程序中的逻辑以及如何运用一些简单的算法解决现实中的问题。</p><p><del>（简称：这是一堂巩固课）</del></p><h2 id="经典的例子"><a href="#经典的例子" class="headerlink" title="经典的例子"></a>经典的例子</h2><h3 id="1-寻找水仙花数。"><a href="#1-寻找水仙花数。" class="headerlink" title="1. 寻找水仙花数。"></a>1. 寻找水仙花数。</h3><blockquote><p><strong>说明</strong>：水仙花数也被称为超完全数字不变数、自恋数、自幂数、阿姆斯特朗数，它是一个3位数，该数字每个位上数字的立方之和正好等于它本身，例如：$1^3 + 5^3+ 3^3=153$。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">找出所有水仙花数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">注释by：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1000</span>): <span class="comment">#从100到1000</span></span><br><span class="line">    low = num % <span class="number">10</span> <span class="comment">#个位数</span></span><br><span class="line">    mid = num // <span class="number">10</span> % <span class="number">10</span> <span class="comment">#十位数</span></span><br><span class="line">    high = num // <span class="number">100</span> <span class="comment">#百位数</span></span><br><span class="line">    <span class="keyword">if</span> num == low ** <span class="number">3</span> + mid ** <span class="number">3</span> + high ** <span class="number">3</span>: </span><br><span class="line">        print(num) <span class="comment">#如果是水仙花数，则显示出来</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">153</span></span><br><span class="line"><span class="number">370</span></span><br><span class="line"><span class="number">371</span></span><br><span class="line"><span class="number">407</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们通过整除和求模运算分别找出了一个三位数的个位、十位和百位，这种小技巧在实际开发中还是常用的。用类似的方法，我们还可以实现将一个正整数反转，例如：将12345变成54321，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">正整数的反转</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">注释by：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">num = int(input(<span class="string">'num = '</span>)) <span class="comment">#输入数字</span></span><br><span class="line">reversed_num = <span class="number">0</span> <span class="comment">#倒过来的变量</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这里的流程就是这样：</span></span><br><span class="line"><span class="string">0：123456；</span></span><br><span class="line"><span class="string">6：12345；</span></span><br><span class="line"><span class="string">65：1234；</span></span><br><span class="line"><span class="string">654：123；</span></span><br><span class="line"><span class="string">6543：12；</span></span><br><span class="line"><span class="string">65432：1；</span></span><br><span class="line"><span class="string">654321：0；</span></span><br><span class="line"><span class="string">然后退出while（不大于0），显示</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">while</span> num &gt; <span class="number">0</span>: </span><br><span class="line">    reversed_num = reversed_num * <span class="number">10</span> + num % <span class="number">10</span></span><br><span class="line">    num //= <span class="number">10</span></span><br><span class="line">print(reversed_num)</span><br></pre></td></tr></table></figure><h3 id="2-百钱百鸡问题。"><a href="#2-百钱百鸡问题。" class="headerlink" title="2. 百钱百鸡问题。"></a>2. 百钱百鸡问题。</h3><blockquote><p><strong>说明</strong>：百钱百鸡是我国古代数学家<a href="https://baike.baidu.com/item/张丘建/10246238">张丘建</a>在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？翻译成现代文是：公鸡5元一只，母鸡3元一只，小鸡1元三只，用100块钱买一百只鸡，问公鸡、母鸡、小鸡各有多少只？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">《百钱百鸡》问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">33</span>):</span><br><span class="line">        z = <span class="number">100</span> - x - y</span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> * x + <span class="number">3</span> * y + z / <span class="number">3</span> == <span class="number">100</span>:</span><br><span class="line">            print(<span class="string">'公鸡: %d只, 母鸡: %d只, 小鸡: %d只'</span> % (x, y, z))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">公鸡: <span class="number">0</span>只, 母鸡: <span class="number">25</span>只, 小鸡: <span class="number">75</span>只</span><br><span class="line">公鸡: <span class="number">4</span>只, 母鸡: <span class="number">18</span>只, 小鸡: <span class="number">78</span>只</span><br><span class="line">公鸡: <span class="number">8</span>只, 母鸡: <span class="number">11</span>只, 小鸡: <span class="number">81</span>只</span><br><span class="line">公鸡: <span class="number">12</span>只, 母鸡: <span class="number">4</span>只, 小鸡: <span class="number">84</span>只</span><br></pre></td></tr></table></figure><p>上面使用的方法叫做<strong>穷举法</strong>，也称为<strong>暴力搜索法</strong>，这种方法通过一项一项的列举备选解决方案中所有可能的候选项并检查每个候选项是否符合问题的描述，最终得到问题的解。这种方法看起来比较笨拙，但对于运算能力非常强大的计算机来说，通常都是一个可行的甚至是不错的选择，而且问题的解如果存在，这种方法一定能够找到它。</p><h3 id="3-CRAPS赌博游戏。"><a href="#3-CRAPS赌博游戏。" class="headerlink" title="3. CRAPS赌博游戏。"></a>3. CRAPS赌博游戏。</h3><blockquote><p><strong>说明</strong>：CRAPS又称花旗骰，是美国拉斯维加斯非常受欢迎的一种的桌上赌博游戏。该游戏使用两粒骰子，玩家通过摇两粒骰子获得点数进行游戏。简单的规则是：玩家第一次摇骰子如果摇出了7点或11点，玩家胜；玩家第一次如果摇出2点、3点或12点，庄家胜；其他点数玩家继续摇骰子，如果玩家摇出了7点，庄家胜；如果玩家摇出了第一次摇的点数，玩家胜；其他点数，玩家继续要骰子，直到分出胜负。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Craps赌博游戏</span></span><br><span class="line"><span class="string">我们设定玩家开始游戏时有1000元的赌注</span></span><br><span class="line"><span class="string">游戏结束的条件是玩家输光所有的赌注</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line">money = <span class="number">1000</span></span><br><span class="line"><span class="keyword">while</span> money &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'你的总资产为:'</span>, money)</span><br><span class="line">    needs_go_on = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        debt = int(input(<span class="string">'请下注: '</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt; debt &lt;= money:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    first = randint(<span class="number">1</span>, <span class="number">6</span>) + randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">    print(<span class="string">'玩家摇出了%d点'</span> % first)</span><br><span class="line">    <span class="keyword">if</span> first == <span class="number">7</span> <span class="keyword">or</span> first == <span class="number">11</span>:</span><br><span class="line">        print(<span class="string">'玩家胜!'</span>)</span><br><span class="line">        money += debt</span><br><span class="line">    <span class="keyword">elif</span> first == <span class="number">2</span> <span class="keyword">or</span> first == <span class="number">3</span> <span class="keyword">or</span> first == <span class="number">12</span>:</span><br><span class="line">        print(<span class="string">'庄家胜!'</span>)</span><br><span class="line">        money -= debt</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        needs_go_on = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> needs_go_on:</span><br><span class="line">        needs_go_on = <span class="literal">False</span></span><br><span class="line">        current = randint(<span class="number">1</span>, <span class="number">6</span>) + randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">        print(<span class="string">'玩家摇出了%d点'</span> % current)</span><br><span class="line">        <span class="keyword">if</span> current == <span class="number">7</span>:</span><br><span class="line">            print(<span class="string">'庄家胜'</span>)</span><br><span class="line">            money -= debt</span><br><span class="line">        <span class="keyword">elif</span> current == first:</span><br><span class="line">            print(<span class="string">'玩家胜'</span>)</span><br><span class="line">            money += debt</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            needs_go_on = <span class="literal">True</span></span><br><span class="line">print(<span class="string">'你破产了, 游戏结束!'</span>)</span><br></pre></td></tr></table></figure><p><del>（真好玩）</del></p><h2 id="练习1：生成斐波那契数列的前20个数。"><a href="#练习1：生成斐波那契数列的前20个数。" class="headerlink" title="练习1：生成斐波那契数列的前20个数。"></a>练习1：生成斐波那契数列的前20个数。</h2><blockquote><p><strong>说明</strong>：斐波那契数列（Fibonacci sequence），又称黄金分割数列，是意大利数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）在《计算之书》中提出一个在理想假设条件下兔子成长率的问题而引入的数列，所以这个数列也被戏称为”兔子数列”。斐波那契数列的特点是数列的前两个数都是1，从第三个数开始，每个数都是它前面两个数的和，形如：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …。斐波那契数列在现代物理、准晶体结构、化学等领域都有直接的应用。</p></blockquote><h3 id="个人成品"><a href="#个人成品" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第五课-练习1-生成斐波那契数列的前20个数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：斐波那契数列的特点是数列的前两个数都是1，从第三个数开始，每个数都是它前面两个数的和，形如：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">num1 = <span class="number">1</span></span><br><span class="line">num2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"""</span></span><br><span class="line"><span class="string">下面是斐波那契数列的前20个数：</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            num1 += num2</span><br><span class="line">            <span class="keyword">print</span> (str(num1)+<span class="string">'，'</span>,end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            num2 += num1</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">9</span>:</span><br><span class="line">                <span class="keyword">print</span> (str(num2)+<span class="string">'。'</span>,end=<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">print</span> (str(num2)+<span class="string">'，'</span>,end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出斐波那契数列的前20个数</span></span><br><span class="line"><span class="string">1 1 2 3 5 8 13 21 ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">Date: 2018-03-02</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    a, b = b, a + b</span><br><span class="line">    print(a, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span> <span class="number">144</span> <span class="number">233</span> <span class="number">377</span> <span class="number">610</span> <span class="number">987</span> <span class="number">1597</span> <span class="number">2584</span> <span class="number">4181</span> <span class="number">6765</span></span><br></pre></td></tr></table></figure><h3 id="我的不足"><a href="#我的不足" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>woc这么简单？？？。。。。</li></ol><h3 id="改进后的成品"><a href="#改进后的成品" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第五课-练习1-生成斐波那契数列的前20个数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：斐波那契数列的特点是数列的前两个数都是1，从第三个数开始，每个数都是它前面两个数的和，形如：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">num1 = <span class="number">0</span></span><br><span class="line">num2 = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"""</span></span><br><span class="line"><span class="string">下面是斐波那契数列的前20个数："""</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">    num1, num2 = num2, num1 + num2</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">19</span>:</span><br><span class="line">        <span class="keyword">print</span> (str(num1)+<span class="string">'。'</span>,end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> (str(num1)+<span class="string">'，'</span>,end=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ps：我有标点我自豪嘿嘿。。。嘿....</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下面是斐波那契数列的前20个数：</span><br><span class="line">0，1，1，2，3，5，8，13，21，34，55，89，144，233，377，610，987，1597，2584，4181。</span><br></pre></td></tr></table></figure><h2 id="练习2：找出10000以内的完美数。"><a href="#练习2：找出10000以内的完美数。" class="headerlink" title="练习2：找出10000以内的完美数。"></a>练习2：找出10000以内的完美数。</h2><blockquote><p><strong>说明</strong>：完美数又称为完全数或完备数，它的所有的真因子（即除了自身以外的因子）的和（即因子函数）恰好等于它本身。例如：6（$6=1+2+3$）和28（$28=1+2+4+7+14$）就是完美数。完美数有很多神奇的特性，有兴趣的可以自行了解。</p></blockquote><h3 id="个人成品-1"><a href="#个人成品-1" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第五课-练习2-找出10000以内的完美数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：完美数又称为完全数或完备数，它的所有的真因子（即除了自身以外的因子）的和（即因子函数）恰好等于它本身。例如：6（$6=1+2+3$）和28（$28=1+2+4+7+14$）就是完美数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">10001</span>):</span><br><span class="line">    factors = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> range(<span class="number">1</span>,number//<span class="number">2</span>+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> number % factor == <span class="number">0</span>:</span><br><span class="line">            factors += factor</span><br><span class="line">            <span class="keyword">if</span> factors == number:</span><br><span class="line">                print(number, end=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure><h3 id="参考答案-1"><a href="#参考答案-1" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">找出1~9999之间的所有完美数</span></span><br><span class="line"><span class="string">完美数是除自身外其他所有因子的和正好等于这个数本身的数</span></span><br><span class="line"><span class="string">例如: 6 = 1 + 2 + 3, 28 = 1 + 2 + 4 + 7 + 14</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">Date: 2018-03-02</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10000</span>):</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> range(<span class="number">1</span>, int(math.sqrt(num)) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % factor == <span class="number">0</span>:</span><br><span class="line">            result += factor</span><br><span class="line">            <span class="keyword">if</span> factor &gt; <span class="number">1</span> <span class="keyword">and</span> num // factor != factor:</span><br><span class="line">                result += num // factor</span><br><span class="line">    <span class="keyword">if</span> result == num:</span><br><span class="line">        print(num)</span><br></pre></td></tr></table></figure><h3 id="我的不足-1"><a href="#我的不足-1" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>最后的if嵌套有点问题（难怪多了点数字）</li><li>输出数字多了（同上）</li><li>找出一万以内，似乎不包括10000哈。。</li><li>我是真的看不懂这个math.sqrt(num)。。。之前也出现过</li></ol><h3 id="改进后的成品-1"><a href="#改进后的成品-1" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第五课-练习2-找出10000以内的完美数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：完美数又称为完全数或完备数，它的所有的真因子（即除了自身以外的因子）的和（即因子函数）恰好等于它本身。例如：6（$6=1+2+3$）和28（$28=1+2+4+7+14$）就是完美数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.2</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'1'</span>, end=<span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10001</span>):</span><br><span class="line">    factors = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> range(<span class="number">1</span>,number//<span class="number">2</span>+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> number % factor == <span class="number">0</span>:</span><br><span class="line">            factors += factor</span><br><span class="line">    <span class="keyword">if</span> factors == number:</span><br><span class="line">        print(number, end=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure><h2 id="练习3：输出100以内所有的素数。"><a href="#练习3：输出100以内所有的素数。" class="headerlink" title="练习3：输出100以内所有的素数。"></a>练习3：输出100以内所有的素数。</h2><h3 id="个人成品-2"><a href="#个人成品-2" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第五课-练习3-输出100以内所有的素数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：素数指的是只能被1和自身整除的正整数（不包括1）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">100</span>):</span><br><span class="line">    is_prime = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">2</span>, i):</span><br><span class="line">        <span class="keyword">if</span> i % n == <span class="number">0</span>:</span><br><span class="line">            is_prime = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> is_prime:</span><br><span class="line">        print(i, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</span><br></pre></td></tr></table></figure><h3 id="参考答案-2"><a href="#参考答案-2" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出2~99之间的素数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">Date: 2018-03-02</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">100</span>):</span><br><span class="line">    is_prime = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> range(<span class="number">2</span>, int(math.sqrt(num)) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % factor == <span class="number">0</span>:</span><br><span class="line">            is_prime = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> is_prime:</span><br><span class="line">        print(num, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><h3 id="我的不足-2"><a href="#我的不足-2" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>除了看不懂的math.sqrt(num)，其他都跟作者大大一样哈哈。。。（思路看来是找对了）</li><li>作者大大加了个break，减少运算，我没加。。</li><li>我的for变量名应该改一下</li></ol><h3 id="改进后的成品-2"><a href="#改进后的成品-2" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第五课-练习3-输出100以内所有的素数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：素数指的是只能被1和自身整除的正整数（不包括1）。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.2</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">100</span>):</span><br><span class="line">    is_prime = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> range(<span class="number">2</span>, num//<span class="number">2</span>+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % factor == <span class="number">0</span>:</span><br><span class="line">            is_prime = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> is_prime:</span><br><span class="line">        print(num, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>俩练习的平方根我是真的看不懂！</li><li>巩固了前面所学知识（变量，for，if）</li></ol><h1 id="所有用到的链接"><a href="#所有用到的链接" class="headerlink" title="所有用到的链接"></a>所有用到的链接</h1><ul><li><a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></li><li><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/05.构造程序逻辑.md">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/05.%E6%9E%84%E9%80%A0%E7%A8%8B%E5%BA%8F%E9%80%BB%E8%BE%91.md</a></li></ul><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>（删除的已解决）</p><ol><li><del><code>a, b = b, a + b</code> 这个，是先算b？</del> 这个知道了是从左往右算。。</li><li><del>我还是看不懂，<code>int(math.sqrt(num)</code>这个为啥这么做？</del> 菜鸟大大跟我讲了，这个方法只适用于判断有没有因数，而不是找出所有因数，比如说16，是：1x16，2x8，4x4，16的平方根4，1算到4足以判断出有没有因数。感谢大大解惑！</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学python第五课-构造程序逻辑&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/python/"/>
    
    
  </entry>
  
  <entry>
    <title>学python第四课-循环结构</title>
    <link href="https://a-little-bear.github.io/p/bc2d/"/>
    <id>https://a-little-bear.github.io/p/bc2d/</id>
    <published>2020-07-28T21:54:10.000Z</published>
    <updated>2020-07-29T00:13:55.314Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学python第四课-循环结构</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>我只是个学python拖了好久的小萌新，一直要学一直要学，刚来注册说到现在，终于开始了。。</p><p>也不是特别萌新，会一个小语言（底子好），会一点bat（批处理），python基础知识也了解的不少了，编程逻辑自认为还可以。</p><p>这几个月一直在找适合自己的教程，看过几百本电子书，看过无数新老视频教程，最后还是决定用 骆昊大大 的：<a href="https://github.com/jackfrued/Python-100-Days">Python - 100天从新手到大师</a>（zzzain46大大友情推荐）</p><p>由于文章是给自己看的，所以肯定会精简掉不需要的东西，想学建议看原教程那里的</p><p>大纲是原文大纲，仅供参考，我的文章可能删减了一些</p><p>可能太简单了，勿喷！（主要是给自己看的）</p><p>然后软件方面，没有用<code>PyCharm</code>，在用<code>VS Code</code>，还有<code>IDLE</code>。</p><p>python 版本：<code>3.8.1</code>。</p><p>操作系统：<code>Windows 10</code></p><h1 id="要牢记的话"><a href="#要牢记的话" class="headerlink" title="要牢记的话"></a>要牢记的话</h1><hr><p>感谢：<a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></p><ul><li>Make English as your working language. （让英语成为你的工作语言）</li><li>Practice makes perfect. （熟能生巧）</li><li>All experience comes from mistakes. （所有的经验都源于你犯过的错误）</li><li>Don’t be one of the leeches. （不要当伸手党）</li><li>Either outstanding or out. （要么出众，要么出局）</li></ul><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><h2 id="Day04-循环结构"><a href="#Day04-循环结构" class="headerlink" title="Day04 - 循环结构"></a>Day04 - <a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/04.循环结构.md">循环结构</a></h2><ul><li>循环结构的应用场景 - 条件 / 缩进 / 代码块 / 流程图</li><li>while循环 - 基本结构 / break语句 / continue语句</li><li>for循环 - 基本结构 / range类型 / 循环中的分支结构 / 嵌套的循环 / 提前结束程序</li><li>应用案例 - 1~100求和 / 判断素数 / 猜数字游戏 / 打印九九表 / 打印三角形图案 / 猴子吃桃 / 百钱百鸡</li></ul><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>我们在写程序的时候，一定会遇到需要重复执行某条或某些指令的场景。例如用程序控制机器人踢足球，如果机器人持球而且还没有进入射门范围，那么我们就要一直发出让机器人向球门方向移动的指令。在这个场景中，让机器人向球门方向移动就是一个需要重复的动作，当然这里还会用到上一课讲的分支结构来判断机器人是否持球以及是否进入射门范围。再举一个简单的例子，如果要实现每隔1秒中在屏幕上打印一次“hello, world”并持续打印一个小时，我们肯定不能够直接把<code>print(&#39;hello, world&#39;)</code>这句代码写3600遍，这里同样需要循环结构。</p><p>循环结构就是程序中控制某条或某些指令重复执行的结构。在Python中构造循环结构有两种做法，一种是<code>for-in</code>循环，一种是<code>while</code>循环。</p><h2 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h2><p>如果明确的知道循环执行的次数或者要对一个容器进行迭代（后面会讲到），那么我们推荐使用<code>for-in</code>循环，例如下面代码中计算1~100求和的结果（$\displaystyle \sum \limits_{n=1}^{100}n$）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用for循环实现1~100求和</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">    sum += x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>需要说明的是上面代码中的<code>range(1, 101)</code>可以用来构造一个从1到100的范围，当我们把这样一个范围放到<code>for-in</code>循环中，就可以通过前面的循环变量<code>x</code>依次取出从1到100的整数。当然，<code>range</code>的用法非常灵活，下面给出了一个例子：</p><ul><li><code>range(101)</code>：可以用来产生0到100范围的整数，需要注意的是取不到101。</li><li><code>range(1, 101)</code>：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。</li><li><code>range(1, 101, 2)</code>：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。</li><li><code>range(100, 0, -2)</code>：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。</li></ul><p>知道了这一点，我们可以用下面的代码来实现1~100之间的偶数求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用for循环实现1~100之间的偶数求和</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">101</span>, <span class="number">2</span>):</span><br><span class="line">    sum += x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>当然，也可以通过在循环中使用分支结构的方式来实现相同的功能，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用for循环实现1~100之间的偶数求和</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        sum += x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：相较于上面直接跳过奇数的做法，下面这种做法很明显并不是很好的选择。</p></blockquote><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用<code>while</code>循环。<code>while</code>循环通过一个能够产生或转换出<code>bool</code>值的表达式来控制循环，表达式的值为<code>True</code>则继续循环；表达式的值为<code>False</code>则结束循环。</p><p>下面我们通过一个“猜数字”的小游戏来看看如何使用<code>while</code>循环。猜数字游戏的规则是：计算机出一个1到100之间的随机数，玩家输入自己猜的数字，计算机给出对应的提示信息（大一点、小一点或猜对了），如果玩家猜中了数字，计算机提示用户一共猜了多少次，游戏结束，否则游戏继续。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">猜数字游戏</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">answer = random.randint(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    number = int(input(<span class="string">'请输入: '</span>))</span><br><span class="line">    <span class="keyword">if</span> number &lt; answer:</span><br><span class="line">        print(<span class="string">'大一点'</span>)</span><br><span class="line">    <span class="keyword">elif</span> number &gt; answer:</span><br><span class="line">        print(<span class="string">'小一点'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'恭喜你猜对了!'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">'你总共猜了%d次'</span> % counter)</span><br><span class="line"><span class="keyword">if</span> counter &gt; <span class="number">7</span>:</span><br><span class="line">    print(<span class="string">'你的智商余额明显不足'</span>)</span><br></pre></td></tr></table></figure><p>上面的代码中使用了<code>break</code>关键字来提前终止循环，需要注意的是<code>break</code>只能终止它所在的那个循环，这一点在使用嵌套的循环结构（下面会讲到）需要引起注意。除了<code>break</code>之外，还有另一个关键字是<code>continue</code>，它可以用来放弃本次循环后续的代码直接让循环进入下一轮。</p><p>和分支结构一样，循环结构也是可以嵌套的，也就是说在循环中还可以构造循环结构。下面的例子演示了如何通过嵌套的循环来输出一个九九乘法表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出乘法口诀表(九九表)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'%d*%d=%d'</span> % (i, j, i * j), end=<span class="string">'\t'</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p>输出是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1*1&#x3D;1</span><br><span class="line">2*1&#x3D;2   2*2&#x3D;4</span><br><span class="line">3*1&#x3D;3   3*2&#x3D;6   3*3&#x3D;9</span><br><span class="line">4*1&#x3D;4   4*2&#x3D;8   4*3&#x3D;12  4*4&#x3D;16</span><br><span class="line">5*1&#x3D;5   5*2&#x3D;10  5*3&#x3D;15  5*4&#x3D;20  5*5&#x3D;25</span><br><span class="line">6*1&#x3D;6   6*2&#x3D;12  6*3&#x3D;18  6*4&#x3D;24  6*5&#x3D;30  6*6&#x3D;36</span><br><span class="line">7*1&#x3D;7   7*2&#x3D;14  7*3&#x3D;21  7*4&#x3D;28  7*5&#x3D;35  7*6&#x3D;42  7*7&#x3D;49</span><br><span class="line">8*1&#x3D;8   8*2&#x3D;16  8*3&#x3D;24  8*4&#x3D;32  8*5&#x3D;40  8*6&#x3D;48  8*7&#x3D;56  8*8&#x3D;64</span><br><span class="line">9*1&#x3D;9   9*2&#x3D;18  9*3&#x3D;27  9*4&#x3D;36  9*5&#x3D;45  9*6&#x3D;54  9*7&#x3D;63  9*8&#x3D;72  9*9&#x3D;81</span><br></pre></td></tr></table></figure><h2 id="练习1：输入一个正整数判断是不是素数。"><a href="#练习1：输入一个正整数判断是不是素数。" class="headerlink" title="练习1：输入一个正整数判断是不是素数。"></a>练习1：输入一个正整数判断是不是素数。</h2><blockquote><p><strong>提示</strong>：素数指的是只能被1和自身整除的大于1的整数。</p></blockquote><h3 id="个人成品"><a href="#个人成品" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第四课-练习1-输入一个正整数判断是不是素数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：素数指的是只能被1和自身整除的大于1的整数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">number = int(input(<span class="string">'请输入一个正整数：'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, number):</span><br><span class="line">    <span class="keyword">if</span> number % i == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'这不是一个素数！'</span>)</span><br><span class="line">        number = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> number != <span class="literal">False</span>:</span><br><span class="line">    print(<span class="string">'这是一个素数！'</span>)</span><br></pre></td></tr></table></figure><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输入一个正整数判断它是不是素数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">Date: 2018-03-01</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line">num = int(input(<span class="string">'请输入一个正整数: '</span>))</span><br><span class="line">end = int(sqrt(num))</span><br><span class="line">is_prime = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">2</span>, end + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> num % x == <span class="number">0</span>:</span><br><span class="line">        is_prime = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> is_prime <span class="keyword">and</span> num != <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'%d是素数'</span> % num)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'%d不是素数'</span> % num)</span><br></pre></td></tr></table></figure><h3 id="我的不足"><a href="#我的不足" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>大佬用的运算更少，虽然不是很懂，不过似乎算到这个数的平方根就知道是不是素数了。。</li><li>我把number又当成输入数字，又当成判断，可以像大佬一样分开来</li><li>我可以将不是素数放到后面一起。</li><li>没考虑到数字是1的情况</li></ol><h3 id="改进后的成品"><a href="#改进后的成品" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第四课-练习1-输入一个正整数判断是不是素数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：素数指的是只能被1和自身整除的大于1的整数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.2</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">（感觉跟作者大大的很像了，噗）</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line">number = int(input(<span class="string">'请输入一个正整数：'</span>))</span><br><span class="line">end = int(sqrt(num))</span><br><span class="line">is_prime = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, end + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> number % i == <span class="number">0</span>:</span><br><span class="line">        is_prime = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> is_prime <span class="keyword">and</span> num != <span class="number">1</span>:</span><br><span class="line">    print(number,<span class="string">'是一个素数！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(number,<span class="string">'不是一个素数！'</span>)</span><br></pre></td></tr></table></figure><h2 id="练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。"><a href="#练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。" class="headerlink" title="练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。"></a>练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。</h2><blockquote><p><strong>提示</strong>：两个数的最大公约数是两个数的公共因子中最大的那个数；两个数的最小公倍数则是能够同时被两个数整除的最小的那个数。</p></blockquote><h3 id="个人成品-1"><a href="#个人成品-1" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第四课-练习2-输入两个正整数，计算它们的最大公约数和最小公倍数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：两个数的最大公约数是两个数的公共因子中最大的那个数；</span></span><br><span class="line"><span class="string">两个数的最小公倍数则是能够同时被两个数整除的最小的那个数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">num1 = int(input(<span class="string">'请输入第一个数字：'</span>))</span><br><span class="line">num2 = int(input(<span class="string">'请输入第二个数字：'</span>))</span><br><span class="line"></span><br><span class="line">num1_h = int(num1 / <span class="number">2</span>)</span><br><span class="line">num2_h = int(num2 / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">count1 = <span class="number">0</span></span><br><span class="line">count2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">factor1 = <span class="number">0</span></span><br><span class="line">factor2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n1 <span class="keyword">in</span> range (<span class="number">1</span>, num1_h):</span><br><span class="line">    <span class="keyword">if</span> num1 % n1 == <span class="number">0</span>:</span><br><span class="line">        count1 += <span class="number">0</span></span><br><span class="line">        factor1(count1) = n1</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n2 <span class="keyword">in</span> range (<span class="number">1</span>, num2_h):</span><br><span class="line">    <span class="keyword">if</span> num2 % n2 == <span class="number">0</span>:</span><br><span class="line">        count2 += <span class="number">0</span></span><br><span class="line">        factor2(count2) = n2</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cf1 <span class="keyword">in</span> range (count1, <span class="number">0</span>):</span><br><span class="line">    <span class="keyword">for</span> cf2 <span class="keyword">in</span> range (count2, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">if</span> factor1(cf1) == factor2(cf2):</span><br><span class="line">            <span class="keyword">print</span> (factor1(cf1), <span class="string">'是最大公约数！'</span>)</span><br></pre></td></tr></table></figure><p>不会呀。。。想了好久毫无头绪~</p><h3 id="参考答案-1"><a href="#参考答案-1" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输入两个正整数计算它们的最大公约数和最小公倍数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">Date: 2018-03-01</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">x = int(input(<span class="string">'x = '</span>))</span><br><span class="line">y = int(input(<span class="string">'y = '</span>))</span><br><span class="line"><span class="comment"># 如果x大于y就交换x和y的值</span></span><br><span class="line"><span class="keyword">if</span> x &gt; y:</span><br><span class="line">    <span class="comment"># 通过下面的操作将y的值赋给x, 将x的值赋给y</span></span><br><span class="line">    x, y = y, x</span><br><span class="line"><span class="comment"># 从两个数中较的数开始做递减的循环</span></span><br><span class="line"><span class="keyword">for</span> factor <span class="keyword">in</span> range(x, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">if</span> x % factor == <span class="number">0</span> <span class="keyword">and</span> y % factor == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'%d和%d的最大公约数是%d'</span> % (x, y, factor))</span><br><span class="line">        print(<span class="string">'%d和%d的最小公倍数是%d'</span> % (x, y, x * y // factor))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="我的不足-1"><a href="#我的不足-1" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>哪里都不足。。好像是我想的根本不对</li></ol><h3 id="改进后的成品-1"><a href="#改进后的成品-1" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第四课-练习2-输入两个正整数，计算它们的最大公约数和最小公倍数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：两个数的最大公约数是两个数的公共因子中最大的那个数；</span></span><br><span class="line"><span class="string">两个数的最小公倍数则是能够同时被两个数整除的最小的那个数。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.2</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">（只好先不要脸的抄作业，慢慢研究）</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">num1 = int(input(<span class="string">'请输入第一个数字：'</span>))</span><br><span class="line">num2 = int(input(<span class="string">'请输入第二个数字：'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num1 &gt; num2:</span><br><span class="line">    num1, num2 = num2, num1</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> factor <span class="keyword">in</span> range(num1, <span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">if</span> num1 % factor == <span class="number">0</span> <span class="keyword">and</span> num2 % factor == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'%d和%d的最大公约数是%d'</span> % (num1, num2, factor))</span><br><span class="line">        print(<span class="string">'%d和%d的最小公倍数是%d'</span> % (num1, num2, num1 * num2 // factor))</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="练习3：打印如下所示的三角形图案。"><a href="#练习3：打印如下所示的三角形图案。" class="headerlink" title="练习3：打印如下所示的三角形图案。"></a>练习3：打印如下所示的三角形图案。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">**</span><br><span class="line">***</span><br><span class="line">****</span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">    *</span><br><span class="line">   **</span><br><span class="line">  ***</span><br><span class="line"> ****</span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">    *</span><br><span class="line">   ***</span><br><span class="line">  *****</span><br><span class="line"> *******</span><br><span class="line">*********</span><br></pre></td></tr></table></figure><h3 id="个人成品-2"><a href="#个人成品-2" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第四课-练习3-打印如上所示的三角形图案。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第一个图形</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range (i + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'*'</span>, end=<span class="string">""</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个图形</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range (<span class="number">4</span> - i):</span><br><span class="line">        print(<span class="string">' '</span>, end=<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range (i + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'*'</span>, end=<span class="string">""</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment">#第三个图形</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range ((<span class="number">9</span> - i) // <span class="number">2</span>):</span><br><span class="line">        print(<span class="string">' '</span>, end=<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range (i):</span><br><span class="line">        print(<span class="string">'*'</span>, end=<span class="string">""</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h3 id="参考答案-2"><a href="#参考答案-2" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">打印三角形图案</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">row = int(input(<span class="string">'请输入行数: '</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(i + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'*'</span>, end=<span class="string">''</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(row):</span><br><span class="line">        <span class="keyword">if</span> j &lt; row - i - <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">' '</span>, end=<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'*'</span>, end=<span class="string">''</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(row - i - <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">' '</span>, end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">2</span> * i + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'*'</span>, end=<span class="string">''</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h3 id="我的不足-2"><a href="#我的不足-2" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>直接设定了行数，没有自定义输入功能</li><li>有一些for直接可以用_代替，不用弄那么多：for x, for y, for n, for m</li><li>有一些地方一个if，else就能搞定，我用了俩for（当初也有这个想法，结果还是用了我这个）</li></ol><h3 id="改进后的成品-2"><a href="#改进后的成品-2" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第四课-练习3-打印如下所示的三角形图案。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.2</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">row = int(input(<span class="string">'请输入行数: '</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一个图形</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (row):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range (i + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'*'</span>, end=<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二个图形</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (row):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range (row):</span><br><span class="line">        <span class="keyword">if</span> n &lt; row - <span class="number">1</span> - i:</span><br><span class="line">            print(<span class="string">' '</span>, end=<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'*'</span>, end=<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment">#第三个图形</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (row):</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这里是第一行 5-0-1=4，开头空四个</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range (row - i - <span class="number">1</span>): </span><br><span class="line">        print(<span class="string">' '</span>, end=<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#这里是第一行 2*0+1，第二行 2*1+1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range (<span class="number">2</span> * i + <span class="number">1</span>): </span><br><span class="line">        print(<span class="string">'*'</span>, end=<span class="string">""</span>)</span><br><span class="line">    </span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>这节课有点难，练习一有点看不懂答案，练习二开始成品思路完全错了，练习三感觉还不错</li><li>了解了for-in和while循环，第一个更倾向于有一个具体的循环次数，第二个更倾向于一直重复，直到啥啥啥的</li><li>知道了while的俩退出方式：break（退出循环）和continue（从头开始循环）</li></ol><h1 id="所有用到的链接"><a href="#所有用到的链接" class="headerlink" title="所有用到的链接"></a>所有用到的链接</h1><ul><li><a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></li><li><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/04.循环结构.md">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/04.%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84.md</a></li><li><a href="https://www.cnblogs.com/nancyzhu/p/8059668.html">https://www.cnblogs.com/nancyzhu/p/8059668.html</a></li><li><a href="https://www.php.cn/python-tutorials-424583.html">https://www.php.cn/python-tutorials-424583.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学python第四课-循环结构&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/python/"/>
    
    
  </entry>
  
  <entry>
    <title>学python第三课-分支结构</title>
    <link href="https://a-little-bear.github.io/p/bc2d/"/>
    <id>https://a-little-bear.github.io/p/bc2d/</id>
    <published>2020-07-27T20:46:53.000Z</published>
    <updated>2020-07-28T21:53:47.539Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学python第三课-分支结构</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>我只是个学python拖了好久的小萌新，一直要学一直要学，刚来注册说到现在，终于开始了。。</p><p>也不是特别萌新，会一个小语言（底子好），会一点bat（批处理），python基础知识也了解的不少了，编程逻辑自认为还可以。</p><p>这几个月一直在找适合自己的教程，看过几百本电子书，看过无数新老视频教程，最后还是决定用 骆昊大大 的：<a href="https://github.com/jackfrued/Python-100-Days">Python - 100天从新手到大师</a>（zzzain46大大友情推荐）</p><p>我会把文章中需要的知识点和内容精简粘贴上来，偶尔给出自己的一些想法<del>（想法用删除线表示）</del></p><p>由于文章是给自己看的，所以肯定会精简掉不需要的东西，想学建议看原教程那里的</p><p>大纲是原文大纲，仅供参考，我的文章肯定删减了许多</p><p>可能太简单了，勿喷！（主要是给自己看的）</p><p>然后软件方面，没有用<code>PyCharm</code>，在用<code>VS Code</code>，还有<code>IDLE</code>。</p><p>python 版本：<code>3.8.1</code>。</p><p>操作系统：<code>Windows 10</code></p><h1 id="要牢记的话"><a href="#要牢记的话" class="headerlink" title="要牢记的话"></a>要牢记的话</h1><hr><p>感谢：<a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></p><ul><li>Make English as your working language. （让英语成为你的工作语言）</li><li>Practice makes perfect. （熟能生巧）</li><li>All experience comes from mistakes. （所有的经验都源于你犯过的错误）</li><li>Don’t be one of the leeches. （不要当伸手党）</li><li>Either outstanding or out. （要么出众，要么出局）</li></ul><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><h2 id="Day03-分支结构"><a href="#Day03-分支结构" class="headerlink" title="Day03 - 分支结构"></a>Day03 - <a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/03.分支结构.md">分支结构</a></h2><ul><li>分支结构的应用场景 - 条件 / 缩进 / 代码块 / 流程图</li><li>if语句 - 简单的if / if-else结构 / if-elif-else结构 / 嵌套的if</li><li>应用案例 - 用户身份验证 / 英制单位与公制单位互换 / 掷骰子决定做什么 / 百分制成绩转等级制 / 分段函数求值 / 输入三条边的长度如果能构成三角形就计算周长和面积</li></ul><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>迄今为止，我们写的Python代码都是一条一条语句顺序执行，这种代码结构通常称之为顺序结构。然而仅有顺序结构并不能解决所有的问题，比如我们设计一个游戏，游戏第一关的通关条件是玩家获得1000分，那么在完成本局游戏后，我们要根据玩家得到分数来决定究竟是进入第二关，还是告诉玩家“Game Over”，这里就会产生两个分支，而且这两个分支只有一个会被执行。类似的场景还有很多，我们将这种结构称之为“分支结构”或“选择结构”。给大家一分钟的时间，你应该可以想到至少5个以上这样的例子，赶紧试一试。</p><h2 id="if语句的使用"><a href="#if语句的使用" class="headerlink" title="if语句的使用"></a>if语句的使用</h2><p>在Python中，要构造分支结构可以使用<code>if</code>、<code>elif</code>和<code>else</code>关键字。所谓<strong>关键字</strong>就是有特殊含义的单词，像<code>if</code>和<code>else</code>就是专门用于构造分支结构的关键字，很显然你不能够使用它作为变量名（事实上，用作其他的标识符也是不可以）。下面的例子中演示了如何构造一个分支结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用户身份验证</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">username = input(<span class="string">'请输入用户名: '</span>)</span><br><span class="line">password = input(<span class="string">'请输入口令: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户名是admin且密码是123456则身份验证成功否则身份验证失败</span></span><br><span class="line"><span class="keyword">if</span> username == <span class="string">'admin'</span> <span class="keyword">and</span> password == <span class="string">'123456'</span>:</span><br><span class="line">    print(<span class="string">'身份验证成功!'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'身份验证失败!'</span>)</span><br></pre></td></tr></table></figure><p>需要说明的是和C/C++、Java等语言不同，Python中没有用花括号来构造代码块而是<strong>使用了缩进的方式来表示代码的层次结构</strong>，如果<code>if</code>条件成立的情况下需要执行多条语句，只要保持多条语句具有相同的缩进就可以了。换句话说<strong>连续的代码如果又保持了相同的缩进那么它们属于同一个代码块</strong>，相当于是一个执行的整体。<strong>缩进</strong>可以使用任意数量的空格，但<strong>通常使用4个空格</strong>，建议大家<strong>不要使用制表键</strong>或者<strong>设置你的代码编辑工具自动将制表键变成4个空格</strong>。</p><p>当然如果要构造出更多的分支，可以使用<code>if...elif...else...</code>结构或者嵌套的<code>if...else...</code>结构，下面的代码演示了如何利用多分支结构实现分段函数求值。</p><p><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/res/formula_1.png"><img src="https://github.com/jackfrued/Python-100-Days/raw/master/Day01-15/res/formula_1.png" alt=""></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">分段函数求值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        3x - 5  (x &gt; 1)</span></span><br><span class="line"><span class="string">f(x) =  x + 2   (-1 &lt;= x &lt;= 1)</span></span><br><span class="line"><span class="string">        5x + 3  (x &lt; -1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">x = float(input(<span class="string">'x = '</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">1</span>:</span><br><span class="line">    y = <span class="number">3</span> * x - <span class="number">5</span></span><br><span class="line"><span class="keyword">elif</span> x &gt;= <span class="number">-1</span>:</span><br><span class="line">    y = x + <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    y = <span class="number">5</span> * x + <span class="number">3</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'f(%.2f) = %.2f'</span> % (x, y))</span><br></pre></td></tr></table></figure><p>当然根据实际开发的需要，分支结构是可以嵌套的，例如判断是否通关以后还要根据你获得的宝物或者道具的数量对你的表现给出等级（比如点亮两颗或三颗星星），那么我们就需要在<code>if</code>的内部构造出一个新的分支结构，同理<code>elif</code>和<code>else</code>中也可以再构造新的分支，我们称之为嵌套的分支结构，也就是说上面的代码也可以写成下面的样子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">分段函数求值</span></span><br><span class="line"><span class="string">3x - 5(x &gt; 1)</span></span><br><span class="line"><span class="string">f(x) =x + 2(-1 &lt;= x &lt;= 1)</span></span><br><span class="line"><span class="string">5x + 3(x &lt; -1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">x = float(input(<span class="string">'x = '</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">1</span>:</span><br><span class="line">    y = <span class="number">3</span> * x - <span class="number">5</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">-1</span>:</span><br><span class="line">        y = x + <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y = <span class="number">5</span> * x + <span class="number">3</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'f(%.2f) = %.2f'</span> % (x, y))</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 大家可以自己感受一下这两种写法到底是哪一种更好。在之前我们提到的Python之禅中有这么一句话“Flat is better than nested.”，之所以提倡代码“扁平化”是因为嵌套结构的嵌套层次多了之后会严重的影响代码的可读性，所以能使用扁平化的结构时就不要使用嵌套。</p></blockquote><h2 id="练习1：英制单位英寸与公制单位厘米互换。"><a href="#练习1：英制单位英寸与公制单位厘米互换。" class="headerlink" title="练习1：英制单位英寸与公制单位厘米互换。"></a>练习1：英制单位英寸与公制单位厘米互换。</h2><h3 id="个人成品"><a href="#个人成品" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第三课-练习1-英制单位英寸与公制单位厘米互换。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：</span></span><br><span class="line"><span class="string">1 厘米 = 0.3937007874 英寸</span></span><br><span class="line"><span class="string">1 英寸 = 2.5400000000102 厘米</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">Value = float(input(<span class="string">'请输入要转换的数值：'</span>))</span><br><span class="line">Unit = str(input(<span class="string">'请输入要转换的单位（厘米、英寸 或者 cm、inch）：'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Unit == <span class="string">'厘米'</span> <span class="keyword">or</span> Unit == <span class="string">'cm'</span>:</span><br><span class="line">    Calc_value = <span class="number">0.3937007874</span> * Value</span><br><span class="line">    print(<span class="string">'%.2f %s 转换后为 %.2f %s'</span> % (Value, <span class="string">'厘米'</span>, Calc_value, <span class="string">'英寸'</span>))</span><br><span class="line"><span class="keyword">elif</span> Unit == <span class="string">'英寸'</span> <span class="keyword">or</span> Unit == <span class="string">'inch'</span>:</span><br><span class="line">    Calc_value = <span class="number">2.5400000000102</span> * Value</span><br><span class="line">    print(<span class="string">'%.2f %s 转换后为 %.2f %s'</span> % (Value, <span class="string">'英寸'</span>, Calc_value, <span class="string">'英寸'</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'错误！'</span>)</span><br></pre></td></tr></table></figure><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">英制单位英寸和公制单位厘米互换</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">value = float(input(<span class="string">'请输入长度: '</span>))</span><br><span class="line">unit = input(<span class="string">'请输入单位: '</span>)</span><br><span class="line"><span class="keyword">if</span> unit == <span class="string">'in'</span> <span class="keyword">or</span> unit == <span class="string">'英寸'</span>:</span><br><span class="line">    print(<span class="string">'%f英寸 = %f厘米'</span> % (value, value * <span class="number">2.54</span>))</span><br><span class="line"><span class="keyword">elif</span> unit == <span class="string">'cm'</span> <span class="keyword">or</span> unit == <span class="string">'厘米'</span>:</span><br><span class="line">    print(<span class="string">'%f厘米 = %f英寸'</span> % (value, value / <span class="number">2.54</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'请输入有效的单位'</span>)</span><br></pre></td></tr></table></figure><h3 id="我的不足"><a href="#我的不足" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>可以直接把算式代入进去</li><li>else的文字描述的不准确</li><li>英寸的英文简写过长，inch改成in就行。。。</li></ol><h3 id="改进后的成品"><a href="#改进后的成品" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第三课-练习1-英制单位英寸与公制单位厘米互换。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：</span></span><br><span class="line"><span class="string">1 厘米 = 0.3937007874 英寸</span></span><br><span class="line"><span class="string">1 英寸 = 2.5400000000102 厘米</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.2</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">Value = float(input(<span class="string">'请输入要转换的数值：'</span>))</span><br><span class="line">Unit = str(input(<span class="string">'请输入要转换的单位（厘米、英寸 或者 cm、in）：'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Unit == <span class="string">'厘米'</span> <span class="keyword">or</span> Unit == <span class="string">'cm'</span>:</span><br><span class="line">    print(<span class="string">'%.2f %s 转换后为 %.2f %s'</span> % (Value, <span class="string">'厘米'</span>, <span class="number">0.3937007874</span> * Value, <span class="string">'英寸'</span>))</span><br><span class="line"><span class="keyword">elif</span> Unit == <span class="string">'英寸'</span> <span class="keyword">or</span> Unit == <span class="string">'in'</span>:</span><br><span class="line">    print(<span class="string">'%.2f %s 转换后为 %.2f %s'</span> % (Value, <span class="string">'英寸'</span>, <span class="number">2.5400000000102</span> * Value, <span class="string">'英寸'</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'输入的单位有误！'</span>)</span><br></pre></td></tr></table></figure><h2 id="练习2：百分制成绩转换为等级制成绩。"><a href="#练习2：百分制成绩转换为等级制成绩。" class="headerlink" title="练习2：百分制成绩转换为等级制成绩。"></a>练习2：百分制成绩转换为等级制成绩。</h2><blockquote><p><strong>要求</strong>：如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。</p></blockquote><h3 id="个人成品-1"><a href="#个人成品-1" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第三课-练习2-百分制成绩转换为等级制成绩。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**要求**：</span></span><br><span class="line"><span class="string">如果输入的成绩在90分以上（含90分）输出A；</span></span><br><span class="line"><span class="string">80分-90分（不含90分）输出B；</span></span><br><span class="line"><span class="string">70分-80分（不含80分）输出C；</span></span><br><span class="line"><span class="string">60分-70分（不含70分）输出D；</span></span><br><span class="line"><span class="string">60分以下输出E。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">score = float(input(<span class="string">'请输入百分制成绩：'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span> <span class="keyword">and</span> score &lt;= <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">'A'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span> <span class="keyword">and</span> score &lt; <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">'B'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span> <span class="keyword">and</span> score &lt; <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">'C'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span> <span class="keyword">and</span> score &lt; <span class="number">70</span>:</span><br><span class="line">    print(<span class="string">'D'</span>)</span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">60</span> <span class="keyword">and</span> score &gt;= <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'E'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'请输入一个正确的成绩！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第二种方法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">score = float(input(<span class="string">'请输入百分制成绩：'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">        <span class="keyword">if</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">            <span class="keyword">if</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">                <span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">                    <span class="keyword">if</span> score &gt; <span class="number">100</span>:</span><br><span class="line">                        print(<span class="string">'请输入一个正确的成绩！'</span>)</span><br><span class="line">                    print(<span class="string">'A'</span>)</span><br><span class="line">                print(<span class="string">'B'</span>)</span><br><span class="line">            print(<span class="string">'C'</span>)</span><br><span class="line">        print(<span class="string">'D'</span>)</span><br><span class="line">    print(<span class="string">'E'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'请输入一个正确的成绩！'</span>)</span><br></pre></td></tr></table></figure><h3 id="参考答案-1"><a href="#参考答案-1" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">百分制成绩转换为等级制成绩</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">score = float(input(<span class="string">'请输入成绩: '</span>))</span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    grade = <span class="string">'A'</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    grade = <span class="string">'B'</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    grade = <span class="string">'C'</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    grade = <span class="string">'D'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    grade = <span class="string">'E'</span></span><br><span class="line">print(<span class="string">'对应的等级是:'</span>, grade)</span><br></pre></td></tr></table></figure><h3 id="我的不足-1"><a href="#我的不足-1" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>不用再if直接print，可以在末尾一个print搞定</li><li>elif不用再考虑小于90，小于80了</li><li>我想太多了哈哈哈管他呢</li></ol><h3 id="改进后的成品-1"><a href="#改进后的成品-1" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第三课-练习2-百分制成绩转换为等级制成绩。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**要求**：</span></span><br><span class="line"><span class="string">如果输入的成绩在90分以上（含90分）输出A；</span></span><br><span class="line"><span class="string">80分-90分（不含90分）输出B；</span></span><br><span class="line"><span class="string">70分-80分（不含80分）输出C；</span></span><br><span class="line"><span class="string">60分-70分（不含70分）输出D；</span></span><br><span class="line"><span class="string">60分以下输出E。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.2</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">score = float(input(<span class="string">'请输入成绩：'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    grade = <span class="string">'A'</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    grade = <span class="string">'B'</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">    grade = <span class="string">'C'</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    grade = <span class="string">'D'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    grade = <span class="string">'E'</span></span><br><span class="line"></span><br><span class="line">print(grade)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第二种方法</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">score = float(input(<span class="string">'请输入成绩：'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    <span class="keyword">if</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">        <span class="keyword">if</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">            <span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">                grade = <span class="string">'A'</span></span><br><span class="line">            grade = <span class="string">'B'</span></span><br><span class="line">        grade = <span class="string">'C'</span></span><br><span class="line">    grade = <span class="string">'D'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    grade = <span class="string">'E'</span></span><br><span class="line"></span><br><span class="line">print(grade)</span><br></pre></td></tr></table></figure><h2 id="练习3：输入三条边长，如果能构成三角形就计算周长和面积。"><a href="#练习3：输入三条边长，如果能构成三角形就计算周长和面积。" class="headerlink" title="练习3：输入三条边长，如果能构成三角形就计算周长和面积。"></a>练习3：输入三条边长，如果能构成三角形就计算周长和面积。</h2><h3 id="个人成品-2"><a href="#个人成品-2" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第三课-练习3-输入三条边长，如果能构成三角形就计算周长和面积。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">帮助：</span></span><br><span class="line"><span class="string">周长：a+b+c</span></span><br><span class="line"><span class="string">面积：</span></span><br><span class="line"><span class="string">P = (a+b+c)/2</span></span><br><span class="line"><span class="string">A = sqrt[p(p-a)(p-b)(p-c)]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">side1 = float(input(<span class="string">'第1条边的长度：'</span>))</span><br><span class="line">side2 = float(input(<span class="string">'第2条边的长度：'</span>))</span><br><span class="line">side3 = float(input(<span class="string">'第3条边的长度：'</span>))</span><br><span class="line"></span><br><span class="line">permiter = side1 + side2 + side3</span><br><span class="line"></span><br><span class="line">P = (side1 + side2 + side3) / <span class="number">2</span></span><br><span class="line">A = (P * (P-side1) * (P-side2) * (P-side3)) ** <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'周长是%.2f；面积是%.2f'</span> % (permiter, A))</span><br></pre></td></tr></table></figure><h3 id="参考答案-2"><a href="#参考答案-2" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">a = float(input(<span class="string">'a = '</span>))</span><br><span class="line">b = float(input(<span class="string">'b = '</span>))</span><br><span class="line">c = float(input(<span class="string">'c = '</span>))</span><br><span class="line"><span class="keyword">if</span> a + b &gt; c <span class="keyword">and</span> a + c &gt; b <span class="keyword">and</span> b + c &gt; a:</span><br><span class="line">    print(<span class="string">'周长: %f'</span> % (a + b + c))</span><br><span class="line">    p = (a + b + c) / <span class="number">2</span></span><br><span class="line">    area = (p * (p - a) * (p - b) * (p - c)) ** <span class="number">0.5</span></span><br><span class="line">    print(<span class="string">'面积: %f'</span> % (area))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'不能构成三角形'</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明：</strong> 上面使用的通过边长计算三角形面积的公式叫做<a href="https://zh.wikipedia.org/zh-hans/海伦公式">海伦公式</a>。</p></blockquote><h3 id="我的不足-2"><a href="#我的不足-2" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>变量名太复杂</li><li>忘记加能不能构成三角形，这个判断了</li></ol><h3 id="改进后的成品-2"><a href="#改进后的成品-2" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第三课-练习3-输入三条边长，如果能构成三角形就计算周长和面积。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">帮助：</span></span><br><span class="line"><span class="string">周长：a+b+c</span></span><br><span class="line"><span class="string">面积：</span></span><br><span class="line"><span class="string">P = (a+b+c)/2</span></span><br><span class="line"><span class="string">A = sqrt[p(p-a)(p-b)(p-c)]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">a = float(input(<span class="string">'a：'</span>))</span><br><span class="line">b = float(input(<span class="string">'b：'</span>))</span><br><span class="line">c = float(input(<span class="string">'c：'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a+b&gt;c <span class="keyword">and</span> a+c&gt;b <span class="keyword">and</span> b+c&gt;a:</span><br><span class="line">    permiter = a + b + c</span><br><span class="line"></span><br><span class="line">    P = (a + b + c) / <span class="number">2</span></span><br><span class="line">    A = (P * (P-a) * (P-b) * (P-c)) ** <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'周长是%.2f；面积是%.2f'</span> % (permiter, A))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'这个不能构成一个三角形！'</span>)</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>了解了如何构造<code>分支结构</code>，也就是<code>if</code></li><li>了解了<code>if</code>，<code>elif</code>，<code>else</code>等的使用</li><li>了解了<code>能使用扁平化的结构时就不要使用嵌套。</code></li><li>巩固了<code>or</code>，<code>and</code> 的使用</li><li>了解了python怎么算平方根</li></ol><h1 id="所有用到的链接"><a href="#所有用到的链接" class="headerlink" title="所有用到的链接"></a>所有用到的链接</h1><ul><li><a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></li><li><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/03.分支结构.md">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/03.%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84.md</a></li><li><a href="http://www.endmemo.com/cnsconvert/cmin.php">http://www.endmemo.com/cnsconvert/cmin.php</a></li><li><a href="https://wenwen.sogou.com/z/q97956928.htm?ch=fromnewwenwen.pc">https://wenwen.sogou.com/z/q97956928.htm?ch=fromnewwenwen.pc</a></li><li><a href="https://www.osgeo.cn/app/sa903">https://www.osgeo.cn/app/sa903</a></li><li><a href="https://realpython.com/python-square-root-function/">https://realpython.com/python-square-root-function/</a></li><li><a href="https://www.runoob.com/python3/python3-square-root.html">https://www.runoob.com/python3/python3-square-root.html</a></li></ul><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>（删除的已解决）</p><ol><li>无</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学python第三课-分支结构&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/python/"/>
    
    
  </entry>
  
  <entry>
    <title>科普一下-木马和病毒有何区别-</title>
    <link href="https://a-little-bear.github.io/p/5802/"/>
    <id>https://a-little-bear.github.io/p/5802/</id>
    <published>2020-07-27T05:59:48.000Z</published>
    <updated>2020-07-27T06:03:13.775Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>科普一下：木马和病毒有何区别？</p></blockquote><a id="more"></a><p>原文：<a href="https://www.zhihu.com/question/23207532">https://www.zhihu.com/question/23207532</a></p><p>感谢 <a href="https://www.zhihu.com/org/huo-rong-an-quan-shi-yan-shi">火绒安全实验室</a> 大大的解答</p><p>“木马病毒”（Trojan）属于计算机病毒的一个子分类，除了木马病毒以外还有“后门病毒”、“蠕虫病毒”等等。安全软件会检测到病毒类后会显示对应的病毒类型（如下图），一般见到病毒名里有“Trojan”的就是“木马病毒”了。</p><p><img src="https://pic2.zhimg.com/80/v2-f667b8d1db5e8863438338bd2c8aadf3_720w.jpg?source=1940ef5c" alt="img"></p><p>“木马”这个名字来源于古希腊传说——特洛伊木马。这个故事大家一定非常熟悉：“希腊联军围困特洛伊久攻不下，于是假装撤退，留下一具巨大的中空木马，特洛伊守军不知是计，把木马运进城中作为战利品。夜深人静之际，木马腹中躲藏的希腊士兵打开城门，特洛伊沦陷。”</p><p><img src="https://pic3.zhimg.com/80/v2-cf40b94cbb84ab2773210c1461b7c36f_720w.jpg?source=1940ef5c" alt="img"></p><p>和故事中的“木马”一样，计算机病毒中的“木马”也是通过伪装自身吸引用户下载，执行，随后进入到电脑中的。</p><p>现在最为流行木马就是“挖矿木马”了，随着加密货币价格的攀升，国内外频频爆出各种“挖矿木马”事件。例如火绒此前报道过的《知名激活工具KMS内含“挖矿病毒” 通过各大搜索引擎传播》就是将“挖矿木马”植入了知名激活工具KMS，当用户下载安装此带毒工具后，挖矿木马也会入侵电脑，利用用户的电脑资源，为黑客“挖矿”赚钱。</p><p>除此之外，常见的木马病毒有以下几种：</p><blockquote><p>盗号木马<br>此类木马会隐匿在系统中，伺机盗取用户各类账号密码。</p><p>下载者木马<br>此类木马通过下载其他病毒来间接对系统产生安全威胁，下载者木马通常体积较小，并辅以诱惑性的名称和图标诱骗用户使用。由于体积较小，下载者木马更易传播，且传播速度很快。</p><p>释放器木马<br>此类木马通过释放其他病毒来间接对系统产生安全威胁。</p><p>点击器木马<br>此类木马会在后台通过访问特定网址来“刷流量”，为病毒作者获利，并会占用被感染主机的网络带宽。</p><p>代理木马<br>此类木马会在被感染主机上设置代理服务器，黑客可将被感染主机作为网络攻击的跳板，以被感染者的身份进行黑客活动，以达到隐藏自己，躲避执法者追踪的目的。</p></blockquote><p><strong>必须强调的是，现在很少有木马单打独斗，大部分都是“多毒种作战”。</strong>下载者木马体积小巧，不易被察觉，再由它下载其他木马到用户计算机。释放器木马负责安装复杂木马，一旦运行了释放器木马就很难手动清除。 还有的木马选择和蠕虫病毒搭伙，前阵子通过 NSA “永恒之蓝” 漏洞传播的“WannaMine”，就是配合蠕虫病毒来进行传播的挖矿木马。</p><p><strong>有的病毒作者还会直接使用“漏洞”或者暴力破解等技术，主动出击，攻破用户电脑“植入”木马，不需要用户自己运行木马。</strong>例如，此前火绒报道过的“隐匿者”。<a href="https://www.huorong.cn/info/150097083373.html">https://www.huorong.cn/info/150097083373.html</a></p><p>虽然木马病毒种类繁多，相关安全事件频频发生，但是普通用户不需要过于担心，在电脑上安装一个靠谱的安全软件，对来路不明的邮件、网址及应用，不要轻信，做到先查杀，在打开。如果在自己的计算机上发现了可疑文件，可以上报安全公司，对可疑文件进行检测。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;科普一下：木马和病毒有何区别？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://a-little-bear.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>学python第二课-语言元素</title>
    <link href="https://a-little-bear.github.io/p/4c9b/"/>
    <id>https://a-little-bear.github.io/p/4c9b/</id>
    <published>2020-07-23T23:46:25.000Z</published>
    <updated>2020-07-26T03:24:38.818Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学python第二课-语言元素</p><a id="more"></a></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>我只是个学python拖了好久的小萌新，一直要学一直要学，刚来注册说到现在，终于开始了。。</p><p>也不是特别萌新，会一个小语言（底子好），会一点bat（批处理），python基础知识也了解的不少了，编程逻辑自认为还可以。</p><p>这几个月一直在找适合自己的教程，看过几百本电子书，看过无数新老视频教程，最后还是决定用 骆昊大大 的：<a href="https://github.com/jackfrued/Python-100-Days">Python - 100天从新手到大师</a>（zzzain46大大友情推荐）</p><p>我会把文章中需要的知识点和内容精简粘贴上来，偶尔给出自己的一些想法<del>（想法用删除线表示）</del></p><p>由于文章是给自己看的，所以肯定会精简掉不需要的东西，想学建议看原教程那里的</p><p>大纲是原文大纲，仅供参考，我的文章肯定删减了许多</p><p>可能太简单了，勿喷！（主要是给自己看的）</p><p>然后软件方面，没有用<code>PyCharm</code>，在用<code>VS Code</code>，还有<code>IDLE</code>。</p><p>python 版本：<code>3.8.1</code>。</p><p>操作系统：<code>Windows 10</code></p><p>ps：注释超详细哈哈，没事闲的，里面可能有错误</p><h1 id="要牢记的话"><a href="#要牢记的话" class="headerlink" title="要牢记的话"></a>要牢记的话</h1><hr><p>感谢：<a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></p><ul><li>Make English as your working language. （让英语成为你的工作语言）</li><li>Practice makes perfect. （熟能生巧）</li><li>All experience comes from mistakes. （所有的经验都源于你犯过的错误）</li><li>Don’t be one of the leeches. （不要当伸手党）</li><li>Either outstanding or out. （要么出众，要么出局）</li></ul><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><h2 id="Day02-语言元素"><a href="#Day02-语言元素" class="headerlink" title="Day02 - 语言元素"></a>Day02 - <a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.语言元素.md">语言元素</a></h2><ul><li>程序和进制 - 指令和程序 / 冯诺依曼机 / 二进制和十进制 / 八进制和十六进制</li><li>变量和类型 - 变量的命名 / 变量的使用 / input函数 / 检查变量类型 / 类型转换</li><li>数字和字符串 - 整数 / 浮点数 / 复数 / 字符串 / 字符串基本操作 / 字符编码</li><li>运算符 - 数学运算符 / 赋值运算符 / 比较运算符 / 逻辑运算符 / 身份运算符 / 运算符的优先级</li><li>应用案例 - 华氏温度转换成摄氏温度 / 输入圆的半径计算周长和面积 / 输入年份判断是否是闰年</li></ul><h1 id="语言元素"><a href="#语言元素" class="headerlink" title="语言元素"></a>语言元素</h1><h2 id="指令和程序"><a href="#指令和程序" class="headerlink" title="指令和程序"></a>指令和程序</h2><p>今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于<a href="https://zh.wikipedia.org/wiki/冯·诺伊曼结构">“冯·诺依曼结构”</a>的计算机。“冯·诺依曼结构”有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了）</p><p>对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示1，低电压表示0），于是在“冯·诺依曼结构”的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。如果你对这一点不熟悉，可以自行使用<a href="https://zh.wikipedia.org/wiki/二进制">维基百科</a>或者<a href="https://baike.baidu.com/">百度百科</a>科普一下。</p><blockquote><p><strong>说明</strong>：近期关于<strong>量子计算机</strong>的研究已经被推倒了风口浪尖，量子计算机基于量子力学进行运算，使用量子瞬移的方式来传递信息。2018年6月，Intel宣布开发出新款量子芯片并通过了在接近绝对零度环境下的测试；2019年，IBM和Google都推出了自己的量子计算机。</p></blockquote><h2 id="变量和类型"><a href="#变量和类型" class="headerlink" title="变量和类型"></a>变量和类型</h2><p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。</p><ul><li>整型<del>（Integer）</del>：Python中可以处理任意大小的整数（Python 2.x中有<code>int</code>和<code>long</code>两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如<code>0b100</code>，换算成十进制是4）、八进制（如<code>0o100</code>，换算成十进制是64）、十进制（<code>100</code>）和十六进制（<code>0x100</code>，换算成十进制是256）的表示法。</li><li>浮点型<del>（Float）</del>：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如<code>123.456</code>）之外还支持科学计数法（如<code>1.23456e2</code>）。</li><li>字符串型<del>（String）</del>：字符串是以单引号或双引号括起来的任意文本，比如<code>&#39;hello&#39;</code>和<code>&quot;hello&quot;</code>,字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</li><li>布尔型<del>（Boolean）</del>：布尔值只有<code>True</code>、<code>False</code>两种值，要么是<code>True</code>，要么是<code>False</code>，在Python中，可以直接用<code>True</code>、<code>False</code>表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如<code>3 &lt; 5</code>会产生布尔值<code>True</code>，而<code>2 == 1</code>会产生布尔值<code>False</code>）。</li><li>复数型<del>（不晓得）</del>：形如<code>3+5j</code>，跟数学上的复数表示一样，唯一不同的是虚部的<code>i</code>换成了<code>j</code>。实际上，这个类型并不常用，大家了解一下就可以了。</li></ul><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p><ul><li>硬性规则：<ul><li>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的<code>a</code>和小写的<code>A</code>是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li>PEP 8要求：<ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头（后面会讲到）。</li><li>私有的实例属性用两个下划线开头（后面会讲到）。</li></ul></li></ul><p>当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。<del>（我个人习惯是：First_name，Get_random_number 这样的）</del></p><h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><p>下面通过几个例子来说明变量的类型和变量使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用变量保存数据并进行加减乘除运算</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本: 0.2</span></span><br><span class="line"><span class="string">原作者: 骆昊</span></span><br><span class="line"><span class="string">修改者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置变量</span></span><br><span class="line">a = <span class="number">321</span></span><br><span class="line">b = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">print(a + b)    <span class="comment"># 输出333（和）</span></span><br><span class="line">print(a - b)    <span class="comment"># 输出309（差）</span></span><br><span class="line"></span><br><span class="line">print(a * b)    <span class="comment"># 输出3852（积）</span></span><br><span class="line">print(a ** b)   <span class="comment"># 输出1196906950228928915420617322241（a的b次方）</span></span><br><span class="line"></span><br><span class="line">print(a / b)    <span class="comment"># 输出26.75（商）</span></span><br><span class="line"></span><br><span class="line">print(a // b)    <span class="comment"># 输出26（商，去掉余数）</span></span><br><span class="line">print(a % b)    <span class="comment"># 输出9（余数）</span></span><br></pre></td></tr></table></figure><p>在Python中可以使用<code>type</code>函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的章节中专门讲解函数的定义和使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用type()检查变量的类型</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">12.345</span></span><br><span class="line">c = <span class="number">1</span> + <span class="number">5j</span></span><br><span class="line">d = <span class="string">'hello, world'</span></span><br><span class="line">e = <span class="literal">True</span></span><br><span class="line">print(type(a))    <span class="comment"># &lt;class 'int'&gt; 整数</span></span><br><span class="line">print(type(b))    <span class="comment"># &lt;class 'float'&gt; 小数，也就是浮点数</span></span><br><span class="line">print(type(c))    <span class="comment"># &lt;class 'complex'&gt; 看不懂</span></span><br><span class="line">print(type(d))    <span class="comment"># &lt;class 'str'&gt; 字符串</span></span><br><span class="line">print(type(e))    <span class="comment"># &lt;class 'bool'&gt; 布尔值</span></span><br></pre></td></tr></table></figure><p>可以使用Python中内置的函数对变量类型进行转换。</p><ul><li><code>int()</code>：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code>：将一个字符串转换成浮点数。</li><li><code>str()</code>：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code>：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code>：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><p>下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用input()函数获取键盘输入(字符串)</span></span><br><span class="line"><span class="string">使用int()函数将输入的字符串转换成整数</span></span><br><span class="line"><span class="string">使用print()函数输出带占位符的字符串</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#输入整数a和b，输入小数或者字母就会报错</span></span><br><span class="line">a = int(input(<span class="string">'a = '</span>))</span><br><span class="line">b = int(input(<span class="string">'b = '</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(a, '+', b, '=', a + b)</span></span><br><span class="line">print(<span class="string">'%d + %d = %d'</span> % (a, b, a + b))</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(a, '-', b, '=', a - b)</span></span><br><span class="line">print(<span class="string">'%d - %d = %d'</span> % (a, b, a - b))</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(a, '*', b, '=', a * b)</span></span><br><span class="line">print(<span class="string">'%d * %d = %d'</span> % (a, b, a * b))</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(a, '/', b, '=', a / b)</span></span><br><span class="line">print(<span class="string">'%d / %d = %f'</span> % (a, b, a / b))</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(a, '//', b, '=', a // b)</span></span><br><span class="line">print(<span class="string">'%d // %d = %d'</span> % (a, b, a // b))</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(a, '%', b, '=', a % b)</span></span><br><span class="line">print(<span class="string">'%d %% %d = %d'</span> % (a, b, a % b))</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(a, '**', b, '=', a ** b)</span></span><br><span class="line">print(<span class="string">'%d ** %d = %d'</span> % (a, b, a ** b))</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的print函数中输出的字符串使用了占位符语法，其中<code>%d</code>是整数的占位符，<code>%f</code>是小数的占位符，<code>%%</code>表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成<code>%%</code>），字符串之后的<code>%</code>后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。</p></blockquote><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>[]</code> <code>[:]</code></td><td align="left">下标，切片</td></tr><tr><td align="left"><code>**</code></td><td align="left">指数</td></tr><tr><td align="left"><code>~</code> <code>+</code> <code>-</code></td><td align="left">按位取反, 正负号</td></tr><tr><td align="left"><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td align="left">乘，除，模，整除</td></tr><tr><td align="left"><code>+</code> <code>-</code></td><td align="left">加，减</td></tr><tr><td align="left"><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td align="left">右移，左移</td></tr><tr><td align="left"><code>&amp;</code></td><td align="left">按位与</td></tr><tr><td align="left"><code>^</code> `</td><td align="left">`</td></tr><tr><td align="left"><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td align="left">小于等于，小于，大于，大于等于</td></tr><tr><td align="left"><code>==</code> <code>!=</code></td><td align="left">等于，不等于</td></tr><tr><td align="left"><code>is</code> <code>is not</code></td><td align="left">身份运算符</td></tr><tr><td align="left"><code>in</code> <code>not in</code></td><td align="left">成员运算符</td></tr><tr><td align="left"><code>not</code> <code>or</code> <code>and</code></td><td align="left">逻辑运算符</td></tr><tr><td align="left"><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code></td><td align="left"><code>=</code> <code>^=</code> <code>&gt;&gt;=</code> <code>&lt;&lt;=</code></td></tr></tbody></table><blockquote><p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p></blockquote><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量<del>（也就是将左边的变成右边的）</del>。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">赋值运算符和复合赋值运算符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#作者把我的备注工作抢走了www</span></span><br><span class="line">a += b        <span class="comment"># 相当于：a = a + b</span></span><br><span class="line">a *= a + <span class="number">2</span>    <span class="comment"># 相当于：a = a * (a + 2)</span></span><br><span class="line">print(a)      <span class="comment"># 算一下这里会输出什么</span></span><br></pre></td></tr></table></figure><h2 id="比较运算符和逻辑运算符"><a href="#比较运算符和逻辑运算符" class="headerlink" title="比较运算符和逻辑运算符"></a>比较运算符和逻辑运算符</h2><p>比较运算符有的地方也称为关系运算符，包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，我相信没有什么好解释的，大家一看就能懂，唯一需要提醒的是比较相等用的是<code>==</code>，请注意这个地方是两个等号，因为<code>=</code>是赋值运算符，我们在上面刚刚讲到过，<code>==</code>才是比较相等的比较运算符。比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p><p>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。<code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；左右两边的布尔值有一个是<code>False</code>，最终的运算结果就是<code>False</code>。相信大家已经想到了，如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在<code>and</code>运算符左边为<code>False</code>的情况下，右边的表达式根本不会执行。<code>or</code>字面意思是“或者”，所以<code>or</code>运算符也会连接两个布尔值，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。<code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是<code>True</code>运算结果就是<code>False</code>，而后面的布尔值如果是<code>False</code>则运算结果就是<code>True</code>。</p><p>~~举个例子：1 and 2 == 2，输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">比较运算符和逻辑运算符的使用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">flag0 = <span class="number">1</span> == <span class="number">1</span> <span class="comment"># 1的确等于1，所以0为True</span></span><br><span class="line">flag1 = <span class="number">3</span> &gt; <span class="number">2</span> <span class="comment"># 3的确大于2，所以1为True</span></span><br><span class="line">flag2 = <span class="number">2</span> &lt; <span class="number">1</span> <span class="comment"># 2不小于1，所以2为False</span></span><br><span class="line">flag3 = flag1 <span class="keyword">and</span> flag2 <span class="comment"># flag1（True）不等于 flag2（False），所以 flag3等于 False（两者不相同-and ×）</span></span><br><span class="line">flag4 = flag1 <span class="keyword">or</span> flag2 <span class="comment"># flag1 (true) 不等于 flag2 （False），所以 flag4等于 True（两者不相同-or √）</span></span><br><span class="line">flag5 = <span class="keyword">not</span> (<span class="number">1</span> != <span class="number">2</span>) <span class="comment"># 1 不等于 2 是正确的（True），flag5 不是 正确的（True），那就是错误（False）</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'flag0 ='</span>, flag0)    <span class="comment"># flag0 = True</span></span><br><span class="line">print(<span class="string">'flag1 ='</span>, flag1)    <span class="comment"># flag1 = True</span></span><br><span class="line">print(<span class="string">'flag2 ='</span>, flag2)    <span class="comment"># flag2 = False</span></span><br><span class="line">print(<span class="string">'flag3 ='</span>, flag3)    <span class="comment"># flag3 = False</span></span><br><span class="line">print(<span class="string">'flag4 ='</span>, flag4)    <span class="comment"># flag4 = True</span></span><br><span class="line">print(<span class="string">'flag5 ='</span>, flag5)    <span class="comment"># flag5 = False</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以<code>flag0 = 1 == 1</code>先做<code>1 == 1</code>产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。<code>print</code>函数可以输出多个值，多个值之间可以用<code>,</code>进行分隔，输出的内容之间默认以空格分开。</p></blockquote><h2 id="练习1：华氏温度转换为摄氏温度。"><a href="#练习1：华氏温度转换为摄氏温度。" class="headerlink" title="练习1：华氏温度转换为摄氏温度。"></a>练习1：华氏温度转换为摄氏温度。</h2><blockquote><p>提示：华氏温度到摄氏温度的转换公式为：$C=(F - 32) \div 1.8$。</p></blockquote><h3 id="个人成品"><a href="#个人成品" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第二课-练习1-华氏温度转换为摄氏温度代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：华氏温度到摄氏温度的转换公式为：$C=(F - 32) \div 1.8$。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">Fahrenheit = int(input(<span class="string">'华氏度 = '</span>))</span><br><span class="line"></span><br><span class="line">Celsius = (Fahrenheit - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'摄氏度 ='</span>, Celsius)</span><br></pre></td></tr></table></figure><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">将华氏温度转换为摄氏温度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">f = float(input(<span class="string">'请输入华氏温度: '</span>))</span><br><span class="line">c = (f - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line">print(<span class="string">'%.1f华氏度 = %.1f摄氏度'</span> % (f, c))</span><br></pre></td></tr></table></figure><h3 id="我的不足"><a href="#我的不足" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>只考虑到了整数（华氏度）</li><li>名字太长（长代码来说可能是好的，但是这么点东西，直接f，c就能表示）</li><li>长print用占位符更方便（我偷懒了嘿嘿）</li></ol><h3 id="改进后的成品"><a href="#改进后的成品" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第二课-练习1-华氏温度转换为摄氏温度代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">提示：华氏温度到摄氏温度的转换公式为：$C=(F - 32) \div 1.8$。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">F = float(input(<span class="string">'请输入华氏度：'</span>)) <span class="comment">#输入一个可以小数可以整数的华氏度</span></span><br><span class="line"></span><br><span class="line">C = (F - <span class="number">32</span>) / <span class="number">1.8</span> <span class="comment">#转化为摄氏度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'%.1f 华氏度 转化后的 摄氏度 为：%.1f'</span> % (F, C)) <span class="comment">#输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里我知道了%f应该是默认6位小数，%.1f是一位，%.2f应该就是两位，以此类推</span></span><br></pre></td></tr></table></figure><h2 id="练习2：输入圆的半径计算计算周长和面积。"><a href="#练习2：输入圆的半径计算计算周长和面积。" class="headerlink" title="练习2：输入圆的半径计算计算周长和面积。"></a>练习2：输入圆的半径计算计算周长和面积。</h2><h3 id="个人成品-1"><a href="#个人成品-1" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第二课-练习2-输入圆的半径计算计算周长和面积代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">基本知识：</span></span><br><span class="line"><span class="string">Π = 3.1415926 （pi）</span></span><br><span class="line"><span class="string">r = 半径（Radius）</span></span><br><span class="line"><span class="string">d = 直径（Diameter）</span></span><br><span class="line"><span class="string">p = 圆的周长（Perimeter） = 2Πr（Πd）</span></span><br><span class="line"><span class="string">a = 圆的面积（Area） = Πr²</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">pi = <span class="number">3.1415926</span></span><br><span class="line"></span><br><span class="line">r = float(input(<span class="string">'请输入圆的半径：'</span>))</span><br><span class="line"></span><br><span class="line">p = <span class="number">2</span> * pi * r</span><br><span class="line"></span><br><span class="line">a = pi * (r ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'圆的周长 = %.1f；圆的面积 = %.1f'</span> %(p, a))</span><br></pre></td></tr></table></figure><h3 id="参考答案-1"><a href="#参考答案-1" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输入半径计算圆的周长和面积</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">radius = float(input(<span class="string">'请输入圆的半径: '</span>))</span><br><span class="line">perimeter = <span class="number">2</span> * <span class="number">3.1416</span> * radius</span><br><span class="line">area = <span class="number">3.1416</span> * radius * radius</span><br><span class="line">print(<span class="string">'周长: %.2f'</span> % perimeter)</span><br><span class="line">print(<span class="string">'面积: %.2f'</span> % area)</span><br></pre></td></tr></table></figure><h3 id="我的不足-1"><a href="#我的不足-1" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>我竟然忘记保留两位小数了。。</li><li>我把变量简写了，不过前面有介绍过，我认为还好。。</li><li>作者直接 <code>r*r</code>，我是 (r ** 2)，太复杂了。。</li></ol><h3 id="改进后的成品-1"><a href="#改进后的成品-1" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第二课-练习2-输入圆的半径计算计算周长和面积代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">基本知识：</span></span><br><span class="line"><span class="string">pi = 3.1415926 （Π）</span></span><br><span class="line"><span class="string">r = 半径（Radius）</span></span><br><span class="line"><span class="string">d = 直径（Diameter）</span></span><br><span class="line"><span class="string">p = 圆的周长（Perimeter） = 2Πr（Πd）</span></span><br><span class="line"><span class="string">a = 圆的面积（Area） = Πr²</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">r = float(input(<span class="string">'请输入圆的半径：'</span>))</span><br><span class="line"></span><br><span class="line">p = <span class="number">2</span> * <span class="number">3.1415926</span> * r</span><br><span class="line"></span><br><span class="line">a = <span class="number">3.1415926</span> * r * r </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'圆的周长 = %.2f；圆的面积 = %.2f'</span> %(p, a))</span><br></pre></td></tr></table></figure><h2 id="练习3：输入年份判断是不是闰年。"><a href="#练习3：输入年份判断是不是闰年。" class="headerlink" title="练习3：输入年份判断是不是闰年。"></a>练习3：输入年份判断是不是闰年。</h2><h3 id="个人成品-2"><a href="#个人成品-2" class="headerlink" title="个人成品"></a>个人成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第二课-练习3-输入年份判断是不是闰年代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">year = int(input(<span class="string">'请输入要判断的年份：'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法1，直接通过取模判断</span></span><br><span class="line">num1 = year % <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num1 == <span class="number">0</span> :</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d 是闰年'</span> % (year))</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d 不是闰年'</span> % (year))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法2，通过取模后与0的布尔值判断</span></span><br><span class="line">num1 = year % <span class="number">4</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num1 == <span class="literal">True</span> :</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d 是闰年'</span> % (year))</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d 不是闰年'</span> % (year))</span><br></pre></td></tr></table></figure><h3 id="参考答案-2"><a href="#参考答案-2" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输入年份 如果是闰年输出True 否则输出False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">year = int(input(<span class="string">'请输入年份: '</span>))</span><br><span class="line"><span class="comment"># 如果代码太长写成一行不便于阅读 可以使用\对代码进行折行</span></span><br><span class="line">is_leap = year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> \</span><br><span class="line">          year % <span class="number">400</span> == <span class="number">0</span></span><br><span class="line">print(is_leap)</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符<code>and</code>和<code>or</code>会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出<code>True</code>，平年输出<code>False</code>。</p></blockquote><h3 id="我的不足-2"><a href="#我的不足-2" class="headerlink" title="我的不足"></a>我的不足</h3><ol><li>我超纲了！！用了 if 和 else 哈哈。。（管他呢）</li><li>忘记四年一闰，百年不润，四百年又闰<del>（噗，只想到了4年）</del></li></ol><h3 id="改进后的成品-2"><a href="#改进后的成品-2" class="headerlink" title="改进后的成品"></a>改进后的成品</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第二课-练习3-输入年份判断是不是闰年代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">版本：0.1</span></span><br><span class="line"><span class="string">作者：alittlebear</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">year = int(input(<span class="string">'请输入要判断的年份：'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过取模后与0的布尔值判断</span></span><br><span class="line">num1 = year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num1 == <span class="literal">True</span> :</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d 是闰年'</span> % (year))</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%d 不是闰年'</span> % (year))</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>了解了电脑的基本是二进制<del>（虽然这些早就知道了）</del></li><li>了解了变量的数据类型（整数，浮点数也就是小数，字符串，布尔，还有一个复数型）</li><li>了解了变量的命名规则</li><li>知道了如何进行简单的变量数学运算</li><li>知道了如何查看（和更改）变量的数据类型</li><li>知道了占位符%d, %f, 还有%%（转义，表示%）</li><li>知道了 =，+=，*=，==，&lt;= 等的区别</li><li>知道了布尔值（Boolean），还有and，or，not 判断</li></ol><p>补充一位大佬指点我的：</p><blockquote><p>补充一个<br>Python允许同时为多个变量赋值。例如：<br>    a = b = c = 1<br>    也可以为多个对象指定多个变量。例如：<br>    a, b, c = 1, 2, “abc”<br>多个对象赋值不同数据类型变量好像是很多语言不支持的，python这个用起来很方便</p></blockquote><h1 id="所有用到的链接"><a href="#所有用到的链接" class="headerlink" title="所有用到的链接"></a>所有用到的链接</h1><ul><li><a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></li><li><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.语言元素.md">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md</a></li></ul><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>（删除的已解决）</p><ol><li>复数型变量目前不知道是干啥用的</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学python第二课-语言元素&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/python/"/>
    
    
  </entry>
  
  <entry>
    <title>学python第一课-初识Python</title>
    <link href="https://a-little-bear.github.io/p/ddf8/"/>
    <id>https://a-little-bear.github.io/p/ddf8/</id>
    <published>2020-07-23T15:17:48.000Z</published>
    <updated>2020-07-25T22:04:21.857Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学python第一课-初识Python</p><a id="more"></a></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>我只是个学python拖了好久的小萌新，一直要学一直要学，刚来注册说到现在，终于开始了。。</p><p>也不是特别萌新，会一个小语言（底子好），会一点bat（批处理），python基础知识也了解的不少了，编程逻辑自认为还可以。</p><p>这几个月一直在找适合自己的教程，看过几百本电子书，看过无数新老视频教程，最后还是决定用 骆昊大大 的：<a href="https://github.com/jackfrued/Python-100-Days">Python - 100天从新手到大师</a>（zzzain46大大友情推荐）</p><p>我会把文章中需要的知识点和内容精简粘贴上来，偶尔给出自己的一些想法<del>（想法用删除线表示）</del></p><p>由于文章是给自己看的，所以肯定会精简掉不需要的东西，想学建议看原教程那里的</p><p>大纲是原文大纲，仅供参考，我的文章肯定删减了许多</p><p>可能太简单了，勿喷！（主要是给自己看的）</p><p>然后软件方面，没有用<code>PyCharm</code>，在用<code>VS Code</code>，还有<code>IDLE</code>。</p><p>python 版本：<code>3.8.1</code>。</p><p>操作系统：<code>Windows 10</code></p><p>ps：注释超详细哈哈，没事闲的，里面可能有错误</p><h1 id="要牢记的话"><a href="#要牢记的话" class="headerlink" title="要牢记的话"></a>要牢记的话</h1><hr><p>感谢：<a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></p><ul><li>Make English as your working language. （让英语成为你的工作语言）</li><li>Practice makes perfect. （熟能生巧）</li><li>All experience comes from mistakes. （所有的经验都源于你犯过的错误）</li><li>Don’t be one of the leeches. （不要当伸手党）</li><li>Either outstanding or out. （要么出众，要么出局）</li></ul><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><h2 id="Day01-初识Python"><a href="#Day01-初识Python" class="headerlink" title="Day01 - 初识Python"></a>Day01 - <a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/01.初识Python.md">初识Python</a></h2><ul><li>Python简介 - Python的历史 / Python的优缺点 / Python的应用领域</li><li>搭建编程环境 - Windows环境 / Linux环境 / MacOS环境</li><li>从终端运行Python程序 - Hello, world / print函数 / 运行程序</li><li>使用IDLE - 交互式环境(REPL) / 编写多行代码 / 运行程序 / 退出IDLE</li><li>注释 - 注释的作用 / 单行注释 / 多行注释</li></ul><h1 id="初识Python"><a href="#初识Python" class="headerlink" title="初识Python"></a>初识Python</h1><h2 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h2><h3 id="Python的历史"><a href="#Python的历史" class="headerlink" title="Python的历史"></a>Python的历史</h3><p>2000年：<code>Python 2.0</code> 发布</p><p>2008年：<code>Python 3.0</code> 发布</p><p>2018年：<code>Python 3.7.x</code> 发布</p><p>2019年10月：<code>Python 3.8.x</code> 发布（<a href="https://www.oschina.net/news/110946/when-to-switch-to-python-3-8">来源</a>）</p><p>Python的版本号分为三段，形如A.B.C。其中A表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。如果对Python的历史感兴趣，可以阅读名为<a href="http://www.cnblogs.com/vamei/archive/2013/02/06/2892628.html">《Python简史》</a>的网络文章。</p><h3 id="Python的应用领域"><a href="#Python的应用领域" class="headerlink" title="Python的应用领域"></a>Python的应用领域</h3><p>目前Python在<code>Web应用后端开发</code>、<code>云基础设施建设</code>、<code>DevOps</code>、<code>网络数据采集（爬虫）</code>、<code>自动化测试</code>、<code>数据分析</code>、<code>机器学习</code>等领域都有着广泛的应用。<del>（目前偏向学爬虫，但还是先把基础学好吧。。）</del></p><h2 id="安装Python解释器"><a href="#安装Python解释器" class="headerlink" title="安装Python解释器"></a>安装Python解释器</h2><p>可以在<a href="https://www.python.org">Python官方网站</a>下载到Python的Windows安装程序（exe文件）</p><p>安装过程建议勾选“Add Python 3.x to PATH”（将Python 3.x添加到PATH环境变量）并选择自定义安装，在设置“Optional Features”界面最好将“pip”、“tcl/tk”、“Python test suite”等项全部勾选上</p><p>强烈建议选择自定义的安装路径并保证路径中没有中文。安装完成会看到“Setup was successful”的提示</p><h2 id="运行Python程序"><a href="#运行Python程序" class="headerlink" title="运行Python程序"></a>运行Python程序</h2><h3 id="确认Python的版本"><a href="#确认Python的版本" class="headerlink" title="确认Python的版本"></a>确认Python的版本</h3><p>可以在cmd窗口输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure><p>输出：Python 3.8.1</p><p>也可以先输入<code>python</code>进入交互式环境，再执行以下的代码检查Python的版本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.version_info)</span><br><span class="line">print(sys.version)</span><br></pre></td></tr></table></figure><p>输出：sys.version_info(major=3, minor=8, micro=1, releaselevel=’final’, serial=0)</p><p>输出：3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 23:11:46) [MSC v.1916 64 bit (AMD64)]</p><h3 id="编写Python源代码"><a href="#编写Python源代码" class="headerlink" title="编写Python源代码"></a>编写Python源代码</h3><p>可以用文本编辑工具（推荐使用<a href="https://www.sublimetext.com/">Sublime</a>、<a href="https://code.visualstudio.com/">Visual Studio Code</a>等高级文本编辑工具，<del>这里我用的是VS Code</del>）编写Python源代码并用py作为后缀名保存该文件（比如说：1.py），代码内容如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'hello, world!'</span>)</span><br></pre></td></tr></table></figure><h4 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h4><p>切换到源代码所在的目录并执行下面的命令，看看屏幕上是否输出了”hello, world!”。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python 1.py</span><br></pre></td></tr></table></figure><h4 id="代码中的注释"><a href="#代码中的注释" class="headerlink" title="代码中的注释"></a>代码中的注释</h4><p>注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性和可维护性，当然也可以将源代码中不需要参与运行的代码段通过注释来去掉，这一点在调试程序的时候经常用到。注释在随源代码进入预处理器或编译时会被移除，不会在目标代码中保留也不会影响程序的执行结果。</p><ol><li>单行注释 - 以#和空格开头的部分</li><li>多行注释 - 三个引号开头，三个引号结尾</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">第一个Python程序 - hello, world!</span></span><br><span class="line"><span class="string">向伟大的Dennis M. Ritchie先生致敬</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Version: 0.1</span></span><br><span class="line"><span class="string">Author: 骆昊</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(<span class="string">'hello, world!'</span>)</span><br><span class="line"><span class="comment"># print("你好, 世界！")</span></span><br></pre></td></tr></table></figure><hr><h2 id="Python开发工具"><a href="#Python开发工具" class="headerlink" title="Python开发工具"></a>Python开发工具</h2><h3 id="IDLE-自带的集成开发工具"><a href="#IDLE-自带的集成开发工具" class="headerlink" title="IDLE - 自带的集成开发工具"></a>IDLE - 自带的集成开发工具</h3><p>IDLE是安装Python环境时自带的集成开发工具，如下图所示。但是由于IDLE的用户体验并不是那么好所以很少在实际开发中被采用。</p><p><img src="https://i.loli.net/2020/07/24/UFphvKPSo47rYxX.png" alt=""></p><h3 id="IPython-更好的交互式编程工具"><a href="#IPython-更好的交互式编程工具" class="headerlink" title="IPython - 更好的交互式编程工具"></a>IPython - 更好的交互式编程工具</h3><p>IPython是一种基于Python的交互式解释器。相较于原生的Python交互式环境，IPython提供了更为强大的编辑和交互功能。可以通过Python的包管理工具pip安装IPython，具体的操作如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython</span><br></pre></td></tr></table></figure><p>安装成功后，可以通过下面的ipython命令启动IPython，如下图所示。</p><p><img src="https://i.loli.net/2020/07/24/68VxPkFZSi5Xcse.png" alt=""></p><p>这里的图是Linux的，Windows 输入：ipython 进入</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="1-在Python交互式环境中输入下面的代码并查看结果，请尝试将看到的内容翻译成中文。"><a href="#1-在Python交互式环境中输入下面的代码并查看结果，请尝试将看到的内容翻译成中文。" class="headerlink" title="1. 在Python交互式环境中输入下面的代码并查看结果，请尝试将看到的内容翻译成中文。"></a>1. 在Python交互式环境中输入下面的代码并查看结果，请尝试将看到的内容翻译成中文。</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> this</span><br></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：输入上面的代码，在Python的交互式环境中可以看到Tim Peter撰写的<a href="https://github.com/jackfrued/Python-100-Days/blob/master/Python%E4%B9%8B%E7%A6%85.md">Python之禅</a>，里面讲述的道理不仅仅适用于Python，也适用于其他编程语言。</p></blockquote><p>输出：</p><blockquote><p>The Zen of Python, by Tim Peters</p><p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one– and preferably only one –obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea – let’s do more of those!</p></blockquote><p><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Python%E4%B9%8B%E7%A6%85.md">翻译</a>：</p><blockquote><p>《Python之禅》 -Tim Peters</p><p>Beautiful is better than ugly. （优美比丑陋好）<br>Explicit is better than implicit.（清晰比晦涩好）<br>Simple is better than complex.（简单比复杂好）<br>Complex is better than complicated.（复杂比错综复杂好）<br>Flat is better than nested.（扁平比嵌套好）<br>Sparse is better than dense.（稀疏比密集好）<br>Readability counts.（可读性很重要）<br>Special cases aren’t special enough to break the rules.（特殊情况也不应该违反这些规则）<br>Although practicality beats purity.（但现实往往并不那么完美）<br>Errors should never pass silently.（异常不应该被静默处理）<br>Unless explicitly silenced.（除非你希望如此）<br>In the face of ambiguity, refuse the temptation to guess.（遇到模棱两可的地方，不要胡乱猜测）<br>There should be one– and preferably only one –obvious way to do it.（肯定有一种通常也是唯一一种最佳的解决方案）<br>Although that way may not be obvious at first unless you’re Dutch.（虽然这种方案并不是显而易见的，因为你不是那个荷兰人^这里指的是Python之父Guido^） Now is better than never.（现在开始做比不做好）<br>Although never is often better than <em>right</em> now.（不做比盲目去做好^极限编程中的YAGNI原则^）<br>If the implementation is hard to explain, it’s a bad idea.（如果一个实现方案难于理解，它就不是一个好的方案）<br>If the implementation is easy to explain, it may be a good idea.（如果一个实现方案易于理解，它很有可能是一个好的方案）<br>Namespaces are one honking great idea – let’s do more of those!（命名空间非常有用，我们应当多加利用）</p></blockquote><h2 id="2-学习使用turtle在屏幕上绘制图形。"><a href="#2-学习使用turtle在屏幕上绘制图形。" class="headerlink" title="2. 学习使用turtle在屏幕上绘制图形。"></a>2. 学习使用turtle在屏幕上绘制图形。</h2><blockquote><p><strong>说明</strong>：turtle是Python内置的一个非常有趣的模块，特别适合对计算机程序设计进行初体验的小伙伴，它最早是Logo语言的一部分，Logo语言是Wally Feurzig和Seymour Papert在1966发明的编程语言。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle <span class="comment">#加载turtle模块</span></span><br><span class="line"></span><br><span class="line">turtle.pensize(<span class="number">4</span>) <span class="comment">#笔🖊的大小</span></span><br><span class="line">turtle.pencolor(<span class="string">'red'</span>) <span class="comment">#笔🖊的颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#起始在 (0,0)，笔🖊的默认方向是右边，也就是朝着x轴正方向</span></span><br><span class="line">turtle.forward(<span class="number">100</span>) <span class="comment">#向前画100个像素，也就是向右边画100个像素 👉</span></span><br><span class="line">turtle.right(<span class="number">90</span>) <span class="comment">#向右转90°</span></span><br><span class="line">turtle.forward(<span class="number">100</span>) <span class="comment">#向前画100个像素，也就是向下边画100个像素 👇</span></span><br><span class="line">turtle.right(<span class="number">90</span>) <span class="comment">#向右转90°</span></span><br><span class="line">turtle.forward(<span class="number">100</span>) <span class="comment">#向前画100个像素，也就是向左边画100个像素 👈</span></span><br><span class="line">turtle.right(<span class="number">90</span>) <span class="comment">#向右转90°</span></span><br><span class="line">turtle.forward(<span class="number">100</span>) <span class="comment">#向前画100个像素，也就是向上边画100个像素 👆</span></span><br><span class="line"></span><br><span class="line">turtle.mainloop() <span class="comment">#开始事件循环，看了半天我也不太懂</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/07/24/RG9NhHDc2XkOZJu.png" alt=""></p><p>这些地方介绍Turtle挺详细的：</p><p><a href="https://docs.python.org/zh-cn/3/library/turtle.html">https://docs.python.org/zh-cn/3/library/turtle.html</a></p><p><a href="https://www.cnblogs.com/chen0307/articles/9645138.html">https://www.cnblogs.com/chen0307/articles/9645138.html</a></p><blockquote><p><strong>提示</strong>：本章提供的代码中还有画国旗和画小猪佩奇的代码，有兴趣的读者请自行研究。<del>（比如说我，就有兴趣）</del></p></blockquote><h3 id="用Python的turtle模块绘制国旗"><a href="#用Python的turtle模块绘制国旗" class="headerlink" title="用Python的turtle模块绘制国旗"></a>用Python的turtle模块绘制国旗</h3><p><del>（好难呀，突然没了兴趣哈哈，不过有编程基础的我还是看得懂的！）</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">用Python的turtle模块绘制国旗</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="comment">#加载turtle模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_rectangle</span><span class="params">(x, y, width, height)</span>:</span> <span class="comment">#这里是函数：画矩形；需要给出变量x点，y点，宽度（像素），还有高度（像素）</span></span><br><span class="line">    turtle.goto(x, y) <span class="comment">#假设给的变量x=0, y=0，那么这条命令就是去到(0,0)</span></span><br><span class="line">    turtle.pencolor(<span class="string">'red'</span>) <span class="comment">#笔的颜色设定为红</span></span><br><span class="line">    turtle.fillcolor(<span class="string">'red'</span>) <span class="comment">#填充颜色（就是画图软件那个桶一样的东西~）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#这里我是通过 turtle.delay(1000) 来观察到的</span></span><br><span class="line">    turtle.begin_fill() <span class="comment">#开始填充，应该是要填充end_fill之前，所有走过的点中间，所以准确的说，是开始设定填充位置</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>): <span class="comment">#执行两次，别问，问就是长方形 = 2个 宽+高</span></span><br><span class="line">        turtle.forward(width) <span class="comment">#向右边画 %宽度% 个像素，别问我为什么用cmd的变量%% 👉（第二遍👈）</span></span><br><span class="line">        turtle.left(<span class="number">90</span>) <span class="comment">#向左转90°</span></span><br><span class="line">        turtle.forward(height) <span class="comment">#向下边画 %高度% 个像素，别问我为什么用cmd的变量%% 👆（第二遍👇）</span></span><br><span class="line">        turtle.left(<span class="number">90</span>) <span class="comment">#向左转90°</span></span><br><span class="line">    turtle.end_fill() <span class="comment">#结束设定填充位置，也就是开始填充（什么鬼），这时候走过的四个点中间就会填充红色了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#看了半天终于看懂了这个函数，具体图片介绍在下面 知识点2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_star</span><span class="params">(x, y, radius)</span>:</span> <span class="comment">#这里是函数：画五角星；需要给出变量x点，y点，还有半径（像素）</span></span><br><span class="line">    turtle.setpos(x, y) <span class="comment">#前往(x,y)，感觉这步没啥用呀。。是我感觉错了吗</span></span><br><span class="line">    pos1 = turtle.pos() <span class="comment">#设定当前位置为第1个外面的点</span></span><br><span class="line">    turtle.circle(-radius, <span class="number">72</span>) <span class="comment">#现在画笔朝下，往左下画一个看不见的弧度</span></span><br><span class="line">    pos2 = turtle.pos() <span class="comment">#设定当前位置为第2个外面的点</span></span><br><span class="line">    turtle.circle(-radius, <span class="number">72</span>) <span class="comment">#以弧度来移动</span></span><br><span class="line">    pos3 = turtle.pos()<span class="comment">#设定当前位置为第3个外面的点</span></span><br><span class="line">    turtle.circle(-radius, <span class="number">72</span>) <span class="comment">#以弧度来移动</span></span><br><span class="line">    pos4 = turtle.pos()<span class="comment">#设定当前位置为第4个外面的点</span></span><br><span class="line">    turtle.circle(-radius, <span class="number">72</span>) <span class="comment">#以弧度来移动</span></span><br><span class="line">    pos5 = turtle.pos()<span class="comment">#设定当前位置为第5个外面的点</span></span><br><span class="line">    turtle.color(<span class="string">'yellow'</span>, <span class="string">'yellow'</span>) <span class="comment">#第一个是画笔颜色，第二个是填充颜色</span></span><br><span class="line"></span><br><span class="line">    turtle.begin_fill() <span class="comment">#开始定位</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#这里就是画五角星了，都知道是咋画的吧</span></span><br><span class="line">    <span class="comment">#右横，左下，右上，右下，左上</span></span><br><span class="line">    turtle.goto(pos3)</span><br><span class="line">    turtle.goto(pos1)</span><br><span class="line">    turtle.goto(pos4)</span><br><span class="line">    turtle.goto(pos2)</span><br><span class="line">    turtle.goto(pos5)</span><br><span class="line"></span><br><span class="line">    turtle.end_fill() <span class="comment">#结束定位，开始填充</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span> <span class="comment">#主函数</span></span><br><span class="line">    turtle.speed(<span class="number">12</span>) <span class="comment">#画笔🖊 “移动速度”</span></span><br><span class="line">    turtle.penup() <span class="comment">#关闭画笔🖊，也就是画笔🖊抬起</span></span><br><span class="line">    x, y = <span class="number">-270</span>, <span class="number">-180</span> <span class="comment">#长方形左下角的 x轴，y轴</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 画国旗主体</span></span><br><span class="line">    width, height = <span class="number">540</span>, <span class="number">360</span> <span class="comment">#矩形的 宽，高</span></span><br><span class="line">    draw_rectangle(x, y, width, height) <span class="comment">#调用画矩形的函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 画大星星</span></span><br><span class="line">    pice = <span class="number">22</span> <span class="comment">#不知道这个变量是干啥的</span></span><br><span class="line">    center_x, center_y = x + <span class="number">5</span> * pice, y + height - pice * <span class="number">5</span> <span class="comment">#不知道怎么算出这个中心点的</span></span><br><span class="line">    turtle.goto(center_x, center_y) <span class="comment">#画笔去到大星星中心点</span></span><br><span class="line">    turtle.left(<span class="number">90</span>) <span class="comment">#画笔转到右边👉</span></span><br><span class="line">    turtle.forward(pice * <span class="number">3</span>) <span class="comment">#往右走👉</span></span><br><span class="line">    turtle.right(<span class="number">90</span>) <span class="comment">#画笔转到下边👇</span></span><br><span class="line">    draw_star(turtle.xcor(), turtle.ycor(), pice * <span class="number">3</span>) <span class="comment">#调用画星星函数，给出当前画笔x轴，y轴，还有半径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    x_poses, y_poses = [<span class="number">10</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">10</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>] <span class="comment">#设定四个小星星的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画小星星</span></span><br><span class="line">    <span class="keyword">for</span> x_pos, y_pos <span class="keyword">in</span> zip(x_poses, y_poses): <span class="comment">#这里举个例子，第一次for，x_pos = 10； y_pos = 2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#这里经过一系列复杂的定位，管他呢</span></span><br><span class="line">        turtle.goto(x + x_pos * pice, y + height - y_pos * pice)</span><br><span class="line">        turtle.left(turtle.towards(center_x, center_y) - turtle.heading())</span><br><span class="line">        turtle.forward(pice)</span><br><span class="line">        turtle.right(<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#开始画星星，先画第一个，然后重复上面for内的内容，再画第二个，最后到第五个结束（只有五个变量）</span></span><br><span class="line">        draw_star(turtle.xcor(), turtle.ycor(), pice)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 隐藏海龟，应该也就是隐藏画笔</span></span><br><span class="line">    turtle.ht()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示绘图窗口，也就是不关闭窗口</span></span><br><span class="line">    turtle.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>: <span class="comment">#这里是程序开始处了，具体的在下面看知识难点1</span></span><br><span class="line">    main() <span class="comment">#调用main主函数</span></span><br></pre></td></tr></table></figure><p>参考资料：</p><p><a href="https://docs.python.org/zh-cn/3/library/turtle.html">https://docs.python.org/zh-cn/3/library/turtle.html</a></p><p><a href="https://blog.csdn.net/Dian1pei2xiao3/article/details/90214627">https://blog.csdn.net/Dian1pei2xiao3/article/details/90214627</a></p><p><a href="https://www.runoob.com/python/python-func-zip.html">https://www.runoob.com/python/python-func-zip.html</a></p><p><a href="https://www.runoob.com/python/att-time-sleep.html">https://www.runoob.com/python/att-time-sleep.html</a></p><hr><h5 id="知识难点1，if-name-‘main‘"><a href="#知识难点1，if-name-‘main‘" class="headerlink" title="知识难点1，if name == ‘main‘:"></a>知识难点1，if <strong>name</strong> == ‘<strong>main</strong>‘:</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br></pre></td></tr></table></figure><p>这就相当于是 Python <strong>模拟的程序入口</strong>。Python 本身并没有规定这么写，这只是一种编码习惯。由于模块之间相互引用，不同模块可能都有这样的定义，而入口程序只能有一个。到底哪个入口程序被选中，这取决于 <code>__name__</code> 的值。</p><p>我们简单的理解就是： <strong>如果模块是被直接运行的，则代码块被运行，如果模块是被导入的，则代码块不被运行</strong>。</p><p>我知道你没有明白哈哈，简单的总结了一下，不知道说的够不够详细，原文（也就是相关资料1）太长，想了解的可以要去看看，说的挺好的</p><p>假如说，我写了2个py程序</p><p>1.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alittlebear = <span class="number">666</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"alittlebear = "</span>, alittlebear)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>start.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> <span class="number">1</span> <span class="keyword">import</span> alittlebear</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"alittlebear = "</span>, alittlebear)</span><br><span class="line">    </span><br><span class="line">    alittlebear2 = alittlebear * <span class="number">2</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"alittlebear * 2 = "</span>, alittlebear2)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>cmd运行：python start.py <del>（当然是跟两个py文件在同一个文件夹内）</del></p><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alittlebear &#x3D; 666</span><br><span class="line">alittlebear &#x3D; 666</span><br><span class="line">alittlebear &#x3D; 1332</span><br></pre></td></tr></table></figure><p><code>alittlebear = 666</code> 出现了两次，原因是第一个文件的print也运行了，所以，修改为下面即可避免发生这样的情况：</p><p>1.py：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alittlebear &#x3D; 666</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print (&quot;alittlebear &#x3D; &quot;, alittlebear)</span><br><span class="line">    </span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>再次运行，输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alittlebear &#x3D; 666</span><br><span class="line">alittlebear &#x3D; 1332</span><br></pre></td></tr></table></figure><p>差不多就是这样</p><p>相关资料：</p><p><a href="https://blog.konghy.cn/2017/04/24/python-entry-program/">https://blog.konghy.cn/2017/04/24/python-entry-program/</a></p><p><a href="https://www.zhihu.com/question/49136398">https://www.zhihu.com/question/49136398</a></p><p><a href="https://www.runoob.com/python/python-operators.html">https://www.runoob.com/python/python-operators.html</a></p><p><a href="https://blog.csdn.net/weixin_34310369/article/details/94608909">https://blog.csdn.net/weixin_34310369/article/details/94608909</a></p><p><a href="https://www.jianshu.com/p/9270aa5468c0">https://www.jianshu.com/p/9270aa5468c0</a></p><hr><h5 id="知识难点2，draw-star函数"><a href="#知识难点2，draw-star函数" class="headerlink" title="知识难点2，draw_star函数"></a>知识难点2，draw_star函数</h5><p>这里是代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_star</span><span class="params">(x, y, radius)</span>:</span> <span class="comment">#这里是函数：画五角星；需要给出变量x点，y点，还有半径（像素）</span></span><br><span class="line">    turtle.setpos(x, y) <span class="comment">#前往(x,y)，感觉这步没啥用呀。。是我感觉错了吗</span></span><br><span class="line">    pos1 = turtle.pos() <span class="comment">#设定当前位置为第1个外面的点</span></span><br><span class="line">    turtle.circle(-radius, <span class="number">72</span>) <span class="comment">#现在画笔朝下，往左下画一个看不见的弧度</span></span><br><span class="line">    pos2 = turtle.pos() <span class="comment">#设定当前位置为第2个外面的点</span></span><br><span class="line">    turtle.circle(-radius, <span class="number">72</span>) <span class="comment">#以弧度来移动</span></span><br><span class="line">    pos3 = turtle.pos()<span class="comment">#设定当前位置为第3个外面的点</span></span><br><span class="line">    turtle.circle(-radius, <span class="number">72</span>) <span class="comment">#以弧度来移动</span></span><br><span class="line">    pos4 = turtle.pos()<span class="comment">#设定当前位置为第4个外面的点</span></span><br><span class="line">    turtle.circle(-radius, <span class="number">72</span>) <span class="comment">#以弧度来移动</span></span><br><span class="line">    pos5 = turtle.pos()<span class="comment">#设定当前位置为第5个外面的点</span></span><br><span class="line">    turtle.color(<span class="string">'yellow'</span>, <span class="string">'yellow'</span>) <span class="comment">#第一个是画笔颜色，第二个是填充颜色</span></span><br></pre></td></tr></table></figure><p>下面是画一个星星的慢动作gif<del>（我不加载time模块能这么容易的录到吗)</del>：</p><p><img src="https://i.loli.net/2020/07/24/vxzwc2QeW9IlbkC.gif" alt="1"></p><p>刚才为了了解的更清楚，我没在开始加上turtle.penup，下面是正常的样子：<del>（颜色没改）</del></p><p><img src="https://i.loli.net/2020/07/24/erITGyAwL9fRYPd.gif" alt="1"></p><p>应该懂了吧！（温馨提示：一圈 = 360°，360° / 5 = 72°）</p><p>附送最后一个gif的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line"></span><br><span class="line">turtle.right(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pos1 = turtle.pos() <span class="comment">#设定当前位置为第1个外面的点</span></span><br><span class="line"></span><br><span class="line">turtle.circle(<span class="number">-100</span>, <span class="number">72</span>) <span class="comment">#现在画笔朝下，往左下画一个看不见的弧度</span></span><br><span class="line">pos2 = turtle.pos() <span class="comment">#设定当前位置为第2个外面的点</span></span><br><span class="line">turtle.circle(<span class="number">-100</span>, <span class="number">72</span>) <span class="comment">#以弧度来移动</span></span><br><span class="line">pos3 = turtle.pos()<span class="comment">#设定当前位置为第3个外面的点</span></span><br><span class="line">turtle.circle(<span class="number">-100</span>, <span class="number">72</span>) <span class="comment">#以弧度来移动</span></span><br><span class="line">pos4 = turtle.pos()<span class="comment">#设定当前位置为第4个外面的点</span></span><br><span class="line">turtle.circle(<span class="number">-100</span>, <span class="number">72</span>) <span class="comment">#以弧度来移动</span></span><br><span class="line">pos5 = turtle.pos()<span class="comment">#设定当前位置为第5个外面的点</span></span><br><span class="line"></span><br><span class="line">turtle.color(<span class="string">'black'</span>, <span class="string">'black'</span>) <span class="comment">#第一个是画笔颜色，第二个是填充颜色</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">turtle.begin_fill()</span><br><span class="line">turtle.goto(pos3)</span><br><span class="line">turtle.goto(pos1)</span><br><span class="line">turtle.goto(pos4)</span><br><span class="line">turtle.goto(pos2)</span><br><span class="line">turtle.goto(pos5)</span><br><span class="line">turtle.end_fill()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">turtle.mainloop()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>了解了python的历史</li><li>安装了python</li><li>阅读了《Python之禅》</li><li>会简单用IDLE，VS Code编写并运行python源代码</li><li>熟悉了turtle模块<del>（学了几个小时，大部分时间都浪费在学画画上哈哈）</del></li><li>简单了解time模块</li></ol><h1 id="所有用到的链接"><a href="#所有用到的链接" class="headerlink" title="所有用到的链接"></a>所有用到的链接</h1><ul><li><a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></li><li><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/01.初识Python.md">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/01.%E5%88%9D%E8%AF%86Python.md</a></li><li><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Python%E4%B9%8B%E7%A6%85.md">https://github.com/jackfrued/Python-100-Days/blob/master/Python%E4%B9%8B%E7%A6%85.md</a></li><li><a href="https://docs.python.org/zh-cn/3/library/turtle.html">https://docs.python.org/zh-cn/3/library/turtle.html</a></li><li><a href="https://blog.csdn.net/Dian1pei2xiao3/article/details/90214627">https://blog.csdn.net/Dian1pei2xiao3/article/details/90214627</a></li><li><a href="https://www.runoob.com/python/python-func-zip.html">https://www.runoob.com/python/python-func-zip.html</a></li><li><a href="https://www.runoob.com/python/att-time-sleep.html">https://www.runoob.com/python/att-time-sleep.html</a></li><li><a href="https://blog.konghy.cn/2017/04/24/python-entry-program/">https://blog.konghy.cn/2017/04/24/python-entry-program/</a></li><li><a href="https://www.zhihu.com/question/49136398">https://www.zhihu.com/question/49136398</a></li><li><a href="https://www.runoob.com/python/python-operators.html">https://www.runoob.com/python/python-operators.html</a></li><li><a href="https://blog.csdn.net/weixin_34310369/article/details/94608909">https://blog.csdn.net/weixin_34310369/article/details/94608909</a></li><li><a href="https://www.jianshu.com/p/9270aa5468c0">https://www.jianshu.com/p/9270aa5468c0</a></li></ul><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>（删除的已解决）</p><ol><li><del><code>turtle.mainloop()</code> 我不太懂，看了好几个文档，似乎是画完了不会关闭窗口？</del>       这个就是结束不会关闭装口</li><li><del><code>alittlebear = alittlebear * 2</code> 这样有办法实现吗，只用一个变量？</del>            alittlebear *= 2 即可</li><li>知识难点1中，<code>main</code>函数出现了两次，我在<code>start.py</code>运行时，电脑怎么判断我要运行哪个？</li><li>画星星函数开头中的 <code>turtle.setpos(x, y)</code> 有啥用？</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学python第一课-初识Python&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/python/"/>
    
    
  </entry>
  
  <entry>
    <title>discuz分页代码</title>
    <link href="https://a-little-bear.github.io/p/708b/"/>
    <id>https://a-little-bear.github.io/p/708b/</id>
    <published>2020-07-23T14:27:35.000Z</published>
    <updated>2020-07-23T14:28:43.514Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>discuz分页代码</p><a id="more"></a><p>[page]</p><p>举例子：</p><p>第一页</p><p>[page]</p><p>第二页</p><p>[page]</p><p>第三页</p><p><img src="https://i.loli.net/2020/07/23/eoWNK63XgEQH1Zx.png" alt=""></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;discuz分页代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://a-little-bear.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>开普勒斯-Keplerth-Alpha-24-Build-5227622</title>
    <link href="https://a-little-bear.github.io/p/4dde/"/>
    <id>https://a-little-bear.github.io/p/4dde/</id>
    <published>2020-07-12T16:01:39.000Z</published>
    <updated>2020-07-12T16:27:38.976Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h3 id="关于这款游戏"><a href="#关于这款游戏" class="headerlink" title="关于这款游戏"></a>关于这款游戏</h3><p>——你从休眠舱中苏醒，没有衣服，没有工具，没有食物，没有伙伴，而面对陌生与危险的环境，你唯一要做的事情就是活下来。想办法利用周围的一切事物帮助你提高生存几率，同时慢慢揭开这个外星殖民地的秘密…</p><a id="more"></a><p>《Keplerth》是一款自由度较高的沙盒游戏，支持多种玩法，地表与地底都有大量内容供玩家探索。</p><h3 id="主要特色"><a href="#主要特色" class="headerlink" title="主要特色"></a>主要特色</h3><p>- 随机生成无尽的世界地图<br>- 随机生成的地下城<br>- 采集<br>- 建造<br>- 探索<br>- 生存<br>- 战斗<br>- 农业<br>- 生物育种<br>- 丰富的动物，怪物与Boss<br>- 丰富的武器，服装与建筑物</p><p><img src="https://i.loli.net/2020/07/13/7UxReK5LbfTJNY9.png" alt=""></p><p><img src="https://i.loli.net/2020/07/13/NQOYjp3AclsHg6L.png" alt=""></p><p><img src="https://steamcdn-a.akamaihd.net/steam/apps/747200/ss_2ee040415c9619cbb8e6e2a2ae85a68206fdc8e9.600x338.jpg?t=1592896844" alt=""></p><p><img src="https://steamcdn-a.akamaihd.net/steam/apps/747200/ss_593192e8a5c860b69a04e205f309554e37fe9fc1.600x338.jpg?t=1592896844" alt=""></p><p><img src="https://steamcdn-a.akamaihd.net/steam/apps/747200/ss_cce4c415adab031bd98e2f8b1a34c7f6ad318220.600x338.jpg?t=1592896844" alt=""></p><h3 id="系统需求"><a href="#系统需求" class="headerlink" title="系统需求"></a>系统需求</h3><h4 id="最低配置"><a href="#最低配置" class="headerlink" title="最低配置"></a>最低配置</h4><p>操作系统: Windows 7<br>内存: 2 GB RAM<br>存储空间: 需要 600 MB 可用空间</p><h4 id="推荐配置"><a href="#推荐配置" class="headerlink" title="推荐配置"></a>推荐配置</h4><p>操作系统: Windows 7/10<br>内存: 4 GB RAM<br>存储空间: 需要 1 GB 可用空间</p><h3 id="用户评价"><a href="#用户评价" class="headerlink" title="用户评价"></a>用户评价</h3><blockquote><p>饥荒+泰拉瑞亚+rimworld，选的游戏都是经典沙盒，而做沙盒对于内容量的要求非常高，但现在的内容量和完成度连他们单独一个的百分之一都没有，不知道那么多好评是不是刷的。还有你们曝光可以，抢先体验也没毛病，但匹配这个内容量标这个价格是不是有点过分了。请开发者们抱着持续制作三年的心态做完这款游戏，急着上线拿钱，玩家不是傻子。 申请退款了，希望一年后能看到你们的相对有料的成果，我到时候再掏钱支持吧。</p></blockquote><blockquote><p>这游戏现在的内容是有点少，比如每种类型地图的boss就那么几个，而装备数量基本和boss挂钩。还想吐槽一下可制作的家具就那么几种，作为建筑党表示太少了，请多来点谢谢。还有就是地图的重复率太高了，村庄和NPC就寥寥几个，看多了就挺单调的。<br>综上所述，这游戏虽然任有不足之处，但是现在的完成度已经足够高了，现在只是缺少一些休闲（肝）的玩法。除此之外还有请多添加boss的种类和装备，多设计一些玩法上的挑战。如果这些都做到了，我觉得这就是一款不亚于泰拉的作品。</p></blockquote><blockquote><p>这游戏太好玩了，游戏画风和环世界和修仙模拟器有点像，但玩法完全不一样，反倒和泰拉瑞亚类似。游戏的玩法是采集家加生存，人物有三种难易模式，分为死亡不掉落，死亡掉落和一条命，人物有血条和饥饿值，游戏世界也分三种难度。把矿物挖回家熔炼，把植物带回家种，打野怪会掉落材料钱币和装备，但是同样的野怪掉落的装备也有不同品质和耐久，看个人运气。游戏里有npc，可以完成任务，买东西，买东西和修理装备。也有敌对村落和友好村落，在这里建家是个不错的选择，资源充沛还可以依靠有利地形，友好npc卫兵巡逻还可以防御敌人。可以驯化宠物当坐骑和打手，地图较远的地方可以通过传送门传送，传送门不满意还可以拆了重新安放，设置分家可以弄个复活的床和回血的床。由于开发者人手较少，游戏更新比较慢，游戏联机正在内部测试，相信很快就会出来，除了能联机，每个人物还有自己专属的一小块地，可以当自己的临时庇护所，觉得太小的可以填海扩建。游戏各方面我都很满意，就是开发者人手少，太穷了，更新不过来，喜欢的可以支持一下，不喜欢的也客观的评价一下，好反馈给开发者们。</p></blockquote><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>正版地址：<a href="https://store.steampowered.com/app/747200/__Keplerth/">https://store.steampowered.com/app/747200/__Keplerth/</a></p><p><a href="https://shabbychic262-my.sharepoint.com/personal/alittlebear_s_outbook_ltd/_layouts/52/download.aspx?share=EY0A9Gjq0S9Dt6wn3gtTsy8BLWe_32SJSQ3ndRJ5elohuQ">https://shabbychic262-my.sharepoint.com/personal/alittlebear_s_outbook_ltd/_layouts/52/download.aspx?share=EY0A9Gjq0S9Dt6wn3gtTsy8BLWe_32SJSQ3ndRJ5elohuQ</a></p><h3 id="游戏常见问题"><a href="#游戏常见问题" class="headerlink" title="游戏常见问题"></a>游戏常见问题</h3><p>1、确保游戏安装路径为全英文<br>2、确保游戏安装完整<br>3、确保你电脑的硬件配置和操作系统达到游戏要求<br>4、安装好所有单机游戏运行必备插件，比如DirectX、VC++2005，VC++2008，.NET Framework等等<br>5、7z格式的压缩包，如果您的解压软件不支持，请务必换一个，推荐Bandizip<br>6、还有啥问题回复我</p><p><strong>本游戏由alittlebear发布，游戏仅供学习交流，严禁用于商业用途，请于24小时内删除，有能力请支持正版！</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;关于这款游戏&quot;&gt;&lt;a href=&quot;#关于这款游戏&quot; class=&quot;headerlink&quot; title=&quot;关于这款游戏&quot;&gt;&lt;/a&gt;关于这款游戏&lt;/h3&gt;&lt;p&gt;——你从休眠舱中苏醒，没有衣服，没有工具，没有食物，没有伙伴，而面对陌生与危险的环境，你唯一要做的事情就是活下来。想办法利用周围的一切事物帮助你提高生存几率，同时慢慢揭开这个外星殖民地的秘密…&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="https://a-little-bear.github.io/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>异星工厂-Factorio-v0-18-35</title>
    <link href="https://a-little-bear.github.io/p/a658/"/>
    <id>https://a-little-bear.github.io/p/a658/</id>
    <published>2020-07-12T14:20:02.000Z</published>
    <updated>2020-07-12T15:34:07.703Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>「异星工厂」Factorio 是一款2D生产建设模拟游戏，在这里你需要设计并建设出不同的自动生产流水线，不断生产出愈加复杂的工业品。尽情开动你的想象力，将传送带、机械臂、组装机等简单的设备精密结合，创造出属于你自己的自动化流水生产建筑群。同时别忘了在异星虫子的威胁下保护好你的工业帝国。</p><a id="more"></a><p><img src="https://i.loli.net/2020/07/12/fWxBLXsQVOUhgtz.png" alt=""></p><p><img src="https://i.loli.net/2020/07/12/mcCOFPnr3okQXqE.png" alt=""></p><p><img src="https://i.loli.net/2020/07/12/TbWe9SdYh1UCRjc.png" alt=""></p><h3 id="关于这款游戏"><a href="#关于这款游戏" class="headerlink" title="关于这款游戏"></a>关于这款游戏</h3><p>「异星工厂」Factorio 是一款建造工业生产流水线并保持其高效运转的游戏。</p><p>在游戏中，你可以抠矿、搞科研、盖工厂、建设自动生产流水线，同时还要与异星虫子们互相伤害。</p><p>你将从一无所有艰辛起步。挥斧砍树，抡镐抠矿，手搓机械臂和传送带，然而像这样一直搞下去并没有什么卵用。因此，你需要高效的大规模发电厂，庞大的石油化工体系，壮观的全自动化产业链，以及替你东奔西走的机器人大队，让你成为物资储备丰盈工业帝国的真正操控者！</p><p>然而，总有一群刁民想害你。这个星球上的土著虫群对你在自家后院里瞎折腾的行为很不爽，总有一天这群刁民会联合起来找你麻烦。因此，你要制造武器、建立防御、准备镇压，让它们知道谁才是真正的主宰者。</p><p>你可以在多人游戏中加入不同的阵营，在大触们的带领下与朋友们分工协作， 一起建设恢弘无比的工业园区。</p><p>Factorio的模组支持吸引了全世界的设计师参与到对游戏的完善和革新中来，从优化调整到游戏辅助，甚至对游戏的彻底翻新，日新月异的模组将为你不断提供新的乐趣。<br>除了游戏核心的自由模式和沙盒模式之外，任务包还提供了更多不同形式的游戏挑战，这已经作为一个免费的DLC提供给玩家了。</p><p>对随机生成的地图不满意？不满足于原生游戏任务？这都不是事儿。通过内置的地图编辑器，你可以任意修改地图，配置地形、建筑、敌人等各种元素。如果你是大触，还可以添加自定义脚本，让你的游戏更具独创性、更加阴吹思婷！</p><p>不打折声明：我们没有任何打折或降价的计划。</p><h3 id="看看高玩们都对Factorio说了些什么"><a href="#看看高玩们都对Factorio说了些什么" class="headerlink" title="看看高玩们都对Factorio说了些什么"></a>看看高玩们都对Factorio说了些什么</h3><ul><li><em>从未有过任何一款游戏在物流管理的模拟方面做得如此出色。</em> - Reddit</li><li><em>当我闭上眼睛满脑子都是传送带，<br>我可能沉浸在Factorio中无法自拔了。</em> - Notch, Mojang</li><li><em>在我使用传送带来欺负虫子的时候我感觉Factorio棒极了！</em> - Zisteau*<em>, *</em>Youtube</li></ul><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>解压后，游戏在 bin/x64/factorio.exe</p><p>正版地址：<a href="https://store.steampowered.com/app/427520/Factorio/">https://store.steampowered.com/app/427520/Factorio/</a></p><p><a href="https://shabbychic262-my.sharepoint.com/personal/alittlebear_s_outbook_ltd/_layouts/52/download.aspx?share=EZkGHljiVtZFmOJl5JYSnSIB47FFE44BzDKY1jXLPRzdEg">https://shabbychic262-my.sharepoint.com/personal/alittlebear_s_outbook_ltd/_layouts/52/download.aspx?share=EZkGHljiVtZFmOJl5JYSnSIB47FFE44BzDKY1jXLPRzdEg</a></p><p><a href="https://wp.alittlebear.tk/a658/Factorio.7z">https://wp.alittlebear.tk/a658/Factorio.7z</a></p><h3 id="最低配置"><a href="#最低配置" class="headerlink" title="最低配置"></a>最低配置</h3><p>操作系统: Windows 10, 8, 7, Vista (64 Bit)<br>处理器: Dual core 3Ghz+<br>内存: 4 GB RAM<br>显卡: DirectX 10.1 capable GPU with 512 MB VRAM - GeForce GTX 260, Radeon HD 4850 or Intel HD Graphics 5500<br>DirectX 版本: 11<br>存储空间: 需要 3 GB 可用空间</p><h3 id="游戏常见问题"><a href="#游戏常见问题" class="headerlink" title="游戏常见问题"></a>游戏常见问题</h3><p>1、确保游戏安装路径为全英文<br>2、确保游戏安装完整<br>3、确保你电脑的硬件配置和操作系统达到游戏要求<br>4、安装好所有单机游戏运行必备插件，比如DirectX、VC++2005，VC++2008，.NET Framework等等<br>5、7z格式的压缩包，如果您的解压软件不支持，请务必换一个，推荐Bandizip<br>6、还有啥问题回复我</p><p><strong>本游戏由alittlebear发布，游戏仅供学习交流，严禁用于商业用途，请于24小时内删除，有能力请支持正版！</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;「异星工厂」Factorio 是一款2D生产建设模拟游戏，在这里你需要设计并建设出不同的自动生产流水线，不断生产出愈加复杂的工业品。尽情开动你的想象力，将传送带、机械臂、组装机等简单的设备精密结合，创造出属于你自己的自动化流水生产建筑群。同时别忘了在异星虫子的威胁下保护好你的工业帝国。&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏" scheme="https://a-little-bear.github.io/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Ghoster-(屏幕遮罩工具)</title>
    <link href="https://a-little-bear.github.io/p/ceb9/"/>
    <id>https://a-little-bear.github.io/p/ceb9/</id>
    <published>2020-07-10T13:33:19.000Z</published>
    <updated>2020-07-10T13:36:57.145Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>​        MAC上有一款非常好玩的屏幕遮罩工具但需要25元人民币，alittlebear现在给大家推荐一款windows下载屏幕遮罩工具Ghoster，该软件支持WIN10，而且完全免费。</p><a id="more"></a>    <p>　　ghoster(不知道咋翻译合适)是一款绿色、免费软件。它功能非常简单，只是将你当前焦点窗口高亮，背景变暗。却有很高的应用价值。让你将注意力集中在当前的工作上，可以提高工作效率，或者播放本地视频时，可以实现类似在线视频网站上的“关灯”功能，观看体验更好。</p><p>​    官网：<a href="https://www.dcmembers.com/skrommel/download/ghoster/">https://www.dcmembers.com/skrommel/download/ghoster/</a></p><p>​    OneDrive直链：<a href="https://shabbychic262-my.sharepoint.com/personal/alittlebear_s_outbook_ltd/_layouts/52/download.aspx?share=Eb-46afMuExBhgj3LsngSqUBPdeO-i3s6ZgBWO-FTTguSg">点我~</a></p><p>​    蓝奏：<a href="https://alittlebear.lanzous.com/iWvOTehtive">https://alittlebear.lanzous.com/iWvOTehtive</a></p><p>​    之前我也发过一个 <a href="https://www.52pojie.cn/thread-1107832-1-1.html">屏幕遮挡工具 ifocuzon</a> 类似，这个是针对窗口的，上对比图：</p><p>原来：</p><p><img src="https://i.loli.net/2020/07/10/AWpb9ZOmnTCs1Bx.png" alt="img"></p><p>用了软件后：</p><p><img src="https://i.loli.net/2020/07/10/RciCSBe3G4FJqMu.png" alt="img"></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;​        MAC上有一款非常好玩的屏幕遮罩工具但需要25元人民币，alittlebear现在给大家推荐一款windows下载屏幕遮罩工具Ghoster，该软件支持WIN10，而且完全免费。&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://a-little-bear.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="工具" scheme="https://a-little-bear.github.io/categories/%E8%BD%AF%E4%BB%B6/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>屏幕遮挡工具-ifocuzon-1-0</title>
    <link href="https://a-little-bear.github.io/p/c93/"/>
    <id>https://a-little-bear.github.io/p/c93/</id>
    <published>2020-07-10T13:32:14.000Z</published>
    <updated>2020-07-10T13:33:04.645Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>浏览网页的时候经常被铺天盖地的广告干扰，那些带有动画的广告更是分散人的注意力，不胜其扰。大部分网站的广告基本上都是在固定的屏幕区域，文章的正文则在屏幕中间的区域，所以想到 — 如果能把烦人的广告遮住，只看核心的正文部分，岂不清静？ifocuzon就可以帮助到你。</p><a id="more"></a><p>教程：ifocuzon在打开程序后通过鼠标选取你要显示的矩形区域，其它区域将会被遮盖住，在遮罩取余右击菜单中可重新选择显示区域、更改遮罩背景色，最小化窗体以及退出软件。</p><p>下载：<br><a href="https://www.lanzous.com/i9f5k8h">https://www.lanzous.com/i9f5k8h</a></p><p>链接：<a href="https://pan.baidu.com/s/1GIGlX1TC7GIzIm8jAwsbtQ">https://pan.baidu.com/s/1GIGlX1TC7GIzIm8jAwsbtQ</a> 提取码：icno</p><p><img src="https://attach.52pojie.cn/forum/202002/17/064142lrrjxbnr5lkx4b55.jpg" alt=""></p><p>ps：刚才想看电影，但是上边有内啥广告（内嵌的），就找了这个软件。。。物理遮住（滑稽）</p><p>感觉有一点类似于关灯。。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;浏览网页的时候经常被铺天盖地的广告干扰，那些带有动画的广告更是分散人的注意力，不胜其扰。大部分网站的广告基本上都是在固定的屏幕区域，文章的正文则在屏幕中间的区域，所以想到 — 如果能把烦人的广告遮住，只看核心的正文部分，岂不清静？ifocuzon就可以帮助到你。&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://a-little-bear.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="工具" scheme="https://a-little-bear.github.io/categories/%E8%BD%AF%E4%BB%B6/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>微软买下魔鬼域名-自己挖的坑，跪着也要填完</title>
    <link href="https://a-little-bear.github.io/p/4674/"/>
    <id>https://a-little-bear.github.io/p/4674/</id>
    <published>2020-07-09T14:34:32.000Z</published>
    <updated>2020-07-09T14:36:50.551Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前段时间，巨硬的微软豪掷 160 万美金，从一位 70 岁的域名投资者迈克·奥康纳 (Mike O’connor) 手里，买下了一个魔鬼域名，并且发布了一则声明，将此事昭告天下。</p><blockquote><p>为了保护系统，我们鼓励客户在规划内部域名和网络名称时养成安全的安全习惯。我们在 2009年 6 月发布了一份安全建议，并发布了一项有助于保护客户安全的安全更新。在我们对客户安全的持续承诺中，我们还获得了<a href="https://link.zhihu.com/?target=http%3A//corp.com">http://corp.com</a> 域名。</p></blockquote><a id="more"></a><p><img src="https://pic1.zhimg.com/80/v2-cc8ff70424bd0348436f52aa8c6688f4_720w.jpg" alt="图片来源于网络"></p><p>一个貌不惊人的域名，到底有什么魔力，能吸引互联网巨头和知名域名投资者围着它转圈圈？而且一转就是 26 年，其中必有蹊跷。</p><p>迈克·奥康纳是最早期的一批域名投资者之一，1994 年，他注册了<a href="http://Corp.com">http://Corp.com</a> 这个域名，当年，域名还没什么热度，奥康纳趁着市场低迷，用很低的价格，买到了几个堪称大熊猫级别的域名，比如 <a href="https://link.zhihu.com/?target=http%3A//pub.com">http://pub.com</a>、<a href="https://link.zhihu.com/?target=http%3A//television.com">http://television.com</a>、<a href="https://link.zhihu.com/?target=http%3A//cafes.com">http://cafes.com</a> 等。</p><p>后来，互联网深入了世界的每一个角落，越来越多的公司发现了域名的价值，争相开始注册和抢购，此时，域名已经成为互联网领域的虚拟房地产，一个好的域名，不仅升值快，还足够保值，一些小企业家，甚至愿意用美国旧金山一居室的价格，购买一个域名。</p><p>对企业来说，一个简单而且容易拼写的域名，是吸引流量的关键。</p><p>比如，1996 年，网站 CNET 找到奥康纳，提出想要以 5 万美元的价格，购买一个叫做“ television.com”的域名，但奥康纳拒绝了，在他看来，这个域名的价值远不止这个数。</p><p>正是在市场的热捧之下，奥康纳靠买卖域名，挣了不少钱，称得上是互联网领域的包租公，躺着就能赚钱。</p><p>但是，在躺赚的几十年里，奥康纳从来没想过要卖掉<a href="http://Corp.com">http://Corp.com</a> 这个域名，因为它实在是太特殊了。</p><p>不管是谁，只要拥有<a href="http://Corp.com，就能访问到全球各大公司数以万计">http://Corp.com，就能访问到全球各大公司数以万计</a> Windows PC 中的敏感数据，包括密码、电子邮件等，换句话说，<a href="https://link.zhihu.com/?target=http%3A//corp.com">http://corp.com</a> 的拥有者，就算躺在家里，也会有无数企业拼命想要藏起来的秘密送上门来，等着你批阅。</p><p>为什么会出现这种情况呢？这就需要先搞明白域名和 IP 之间的关系，在这儿，我拿百度来举例。</p><p>如果想上百度搜索一个问题，一共需要几步？三步。</p><p>第一，打开百度的网站；</p><p>第二，输入想要搜索的问题；</p><p>第三，回车。</p><p>有意思的是，要想打开百度的网页，有两种办法。第一种，输入百度域名：<a href="https://link.zhihu.com/?target=http%3A//baidu.com">http://baidu.com</a>；第二种，输入百度 IP：14.215.177.39。两种方法实现的效果是一样的。</p><p>很显然，域名比 IP 好记的多，但是，IP 才是你所要访问网站的唯一地址，所以，当你输入域名时，电脑其实会自动把域名转化为 IP 地址，这就出现了一个问题，你的电脑怎么知道 <a href="https://link.zhihu.com/?target=http%3A//baidu.com">http://baidu.com</a> 就是 14.215.177.39 呢？很简单，在你的电脑系统里，存有一份文件，这份文件非常像一个通讯录，里面存储着姓名（域名）及相对应的电话号码（IP 地址），如果你输入 IP，电脑最省事儿，如果你输入的是域名，电脑就会帮你做转换，相当于你给家人打电话，可以手动输入电话号码，也可以输入姓名，让手机帮你找号码。</p><p>就算如此，其实还有一个问题，你手机里只会有你认识人的电话，不会有全世界人的电话，同理，你电脑里存储的域名及其对应 IP 的数量也是有限的，如果你要访问的网站，电脑里没有相关信息，怎么办？这就需要一个中间人，让他去搜集全世界网站的域名及对应 IP，这样一来，有问题找中间人就好了，而这个中间人的名字，叫做 DNS 服务器。</p><p>在企业内网上，所有的 Windows 计算机都需要用到微软的一种服务，叫做活动目录（Active Directory）。在 Windows 环境下，内网上的计算机想要轻松找到其他计算机，就需要 DNS 的存在，而<a href="http://Corp.com">http://Corp.com</a> 的特殊性就在于，支持活动目录的 Windows 早期版本（如 Windows 2000 Server）中，微软设置的默认路径刚好就叫做“ corp ”，许多公司在使用时，也会默认使用这个设置，就像去买猫咪，如果老板说它已经有名字了，叫豆包儿，绝大多数人都会默认这个名字。</p><p>这个问题就叫做“名称空间冲突” (namespace collision) ，意思是，本来只是在公司内网上使用的域名，却和开放互联网上的域名重合了，所以，内网上的敏感数据，就能够在公开网络上的重合域名下被看到。</p><p>曾有安全专家做过一个实验，他们模拟了本地 Windows 的网络登录和文件共享环境，接管了对<a href="http://Corp.com">http://Corp.com</a> 的连接请求，仅一个小时，他们就收到了超过 1200 万封电子邮件，其中不乏敏感信息，为避免意外发生，他们立刻停止了实验，并销毁了数据库。</p><p>所以说，如果域名<a href="http://Corp.com">http://Corp.com</a> 真的到了坏人手里，不知有多少企业会丢掉底裤。</p><p>面对这个问题，微软一直在想办法解决，比如通过软件更新，但收效甚微。</p><p>早些年，考虑到用户安全问题，微软也想过要把<a href="http://Corp.com">http://Corp.com</a> 这个域名买下来，但是，微软的出价仅仅是 2 万美金，被奥康纳果断拒绝了。</p><p>今时不同往日，已经 70 岁高龄的奥康纳，不想把如此高风险的东西留给自己的亲人，这才决定卖掉这个域名，但卖给其他人又不放心，最好的接盘侠就是微软，因为所有的难题，都与微软脱不了干系。</p><p>这就有了微软豪掷 160 万美金，买下魔鬼域名的新闻。</p><p>很难说由微软掌握这个域名，就是绝对安全，但就目前看来，这已经是最好的选择了。</p><p><img src="https://pic3.zhimg.com/80/v2-5a853a084546dfe848c3e7a37a644856_720w.jpg" alt="图片来源于：StockStudio / Shutterstock"></p><p>转载：<a href="https://zhuanlan.zhihu.com/p/143627625">https://zhuanlan.zhihu.com/p/143627625</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前段时间，巨硬的微软豪掷 160 万美金，从一位 70 岁的域名投资者迈克·奥康纳 (Mike O’connor) 手里，买下了一个魔鬼域名，并且发布了一则声明，将此事昭告天下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了保护系统，我们鼓励客户在规划内部域名和网络名称时养成安全的安全习惯。我们在 2009年 6 月发布了一份安全建议，并发布了一项有助于保护客户安全的安全更新。在我们对客户安全的持续承诺中，我们还获得了&lt;a href=&quot;https://link.zhihu.com/?target=http%3A//corp.com&quot;&gt;http://corp.com&lt;/a&gt; 域名。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://a-little-bear.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>awesome-python-cn-Python-资源大全中文版</title>
    <link href="https://a-little-bear.github.io/p/1140/"/>
    <id>https://a-little-bear.github.io/p/1140/</id>
    <published>2020-07-09T12:05:54.000Z</published>
    <updated>2020-07-09T12:07:28.909Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/jobbole/awesome-python-cn">https://github.com/jobbole/awesome-python-cn</a></p><a id="more"></a><p>Python 资源大全中文版</p><p>我想很多程序员应该记得 GitHub 上有一个 Awesome - XXX 系列的资源整理。<a href="https://github.com/vinta/awesome-python">awesome-python</a> 是 vinta 发起维护的 Python 资源列表，内容包括：Web 框架、网络爬虫、网络内容提取、模板引擎、数据库、数据可视化、图片处理、文本处理、自然语言处理、机器学习、日志、代码分析等。由伯乐在线持续更新。</p><p>Awesome 系列虽然挺全，但基本只对收录的资源做了极为简要的介绍，如果有更详细的中文介绍，对相应开发者的帮助会更大。这也是我们发起这个开源项目的初衷。</p><h2 id="关于项目"><a href="#关于项目" class="headerlink" title="关于项目"></a>关于项目</h2><h3 id="我们要做什么？"><a href="#我们要做什么？" class="headerlink" title="我们要做什么？"></a>我们要做什么？</h3><ul><li><p>基于 awesome-python 列表，我们将对其中的各个资源项进行编译整理。此外还将从其他来源补充好资源。</p></li><li><p>整理后的内容，将收录在</p><p>伯乐在线资源频道</p><p>。可参考已整理的内容：</p><ul><li>《<a href="http://hao.importnew.com/python-scrapy/">Scrapy：Python 的爬虫框架</a>》</li><li>《<a href="http://hao.importnew.com/flask/">Flask：一个使用 Python 编写的轻量级 Web 应用框架</a>》</li></ul></li></ul><h3 id="如何为列表贡献新资源？"><a href="#如何为列表贡献新资源？" class="headerlink" title="如何为列表贡献新资源？"></a>如何为列表贡献新资源？</h3><p>欢迎大家为列表贡献高质量的新资源，提交 PR 时请参照以下要求：</p><ul><li>请确保推荐的资源自己使用过</li><li>提交 PR 时请注明推荐理由</li></ul><p>资源列表管理收到 PR 请求后，会定期（每周）在微博转发本周提交的 PR 列表，并在微博上面听取使用过这些资源的意见。确认通过后，会加入资源大全。</p><p>感谢您的贡献！</p><h3 id="本项目的参与者"><a href="#本项目的参与者" class="headerlink" title="本项目的参与者"></a>本项目的参与者</h3><ul><li>维护者：</li><li>贡献者：<a href="https://github.com/hanxiaomax">艾凌风</a>、Namco、<a href="https://github.com/Daetalus">Daetalus</a>、<a href="http://www.importnew.com/members/huanglimin/">黄利民</a>、<a href="http://www.importnew.com/members/atupal/">atupal</a>、<a href="http://www.importnew.com/members/rainbow/">rainbow</a>、<a href="https://github.com/mutoulbj">木头lbj</a>、<a href="http://www.importnew.com/members/beyondwu/">beyondwu</a>、<a href="https://github.com/cissoid">cissoid</a>、<a href="https://github.com/liguangsheng">李广胜</a>、<a href="https://github.com/polyval">polyval</a>、<a href="http://www.importnew.com/members/libing1209/">冰斌</a>、<a href="http://www.importnew.com/members/nelsonzhao/">赵叶宇</a>、<a href="http://www.importnew.com/members/fengfeng19910805/">л stalgic</a>、<a href="http://www.importnew.com/members/shawnw/">硕恩</a>、<a href="https://github.com/strongit">strongit</a>、<a href="http://www.importnew.com/members/yuukilp/">yuukilp</a>、<a href="https://github.com/chenjiandongx">chenjiandongx</a>、<a href="https://github.com/autopenguin">autopenguin</a>、<a href="https://github.com/visonforcoding">visonforcoding</a>、<a href="https://github.com/No-96">Super赛亚人</a>、<a href="https://github.com/Since-future">Since-future</a>、<a href="https://github.com/knktc">knktc</a>、<a href="https://github.com/zhucebuliaopx">zhucebuliaopx</a>、<a href="https://github.com/wardseptember">wardseptember</a></li></ul><p>注：名单不分排名，不定期补充更新</p><h2 id="资源列表"><a href="#资源列表" class="headerlink" title="资源列表"></a>资源列表</h2><h3 id="环境管理"><a href="#环境管理" class="headerlink" title="环境管理"></a>环境管理</h3><p>管理 Python 版本和环境的工具</p><ul><li>p：非常简单的交互式 python 版本管理工具。<a href="https://github.com/qw3rtman/p">官网</a></li><li>pyenv：简单的 Python 版本管理工具。<a href="https://github.com/yyuu/pyenv">官网</a></li><li>Vex：可以在虚拟环境中执行命令。<a href="https://github.com/sashahart/vex">官网</a></li><li>virtualenv：创建独立 Python 环境的工具。<a href="https://pypi.python.org/pypi/virtualenv">官网</a></li><li>virtualenvwrapper：virtualenv 的一组扩展。<a href="https://pypi.python.org/pypi/virtualenvwrapper">官网</a></li><li>buildout：在隔离环境初始化后使用声明性配置管理。<a href="http://www.buildout.org/en/latest">官网</a></li></ul><h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><p>管理包和依赖的工具。</p><ul><li>pip：Python 包和依赖关系管理工具。<a href="https://pip.pypa.io/">官网</a></li><li>pip-tools：保证 Python 包依赖关系更新的一组工具。<a href="https://github.com/nvie/pip-tools">官网</a></li><li>pipenv：Python 官方推荐的新一代包管理工具。<a href="https://github.com/pypa/pipenv">官网</a></li><li>poetry: 可完全取代 setup.py 的包管理工具。<a href="https://poetry.eustace.io/">官网</a></li><li>conda：跨平台，Python 二进制包管理工具。<a href="https://github.com/conda/conda/">官网</a></li><li>Curdling：管理 Python 包的命令行工具。<a href="http://clarete.li/curdling/">官网</a></li><li>wheel：Python 分发的新标准，意在取代 eggs。<a href="http://pythonwheels.com/">官网</a></li></ul><h3 id="包仓库"><a href="#包仓库" class="headerlink" title="包仓库"></a>包仓库</h3><p>本地 PyPI 仓库服务和代理。</p><ul><li><a href="https://pypi.org/">warehouse</a>：下一代 PyPI。<a href="https://github.com/pypa/warehouse">官网</a></li><li>bandersnatch：PyPA 提供的 PyPI 镜像工具。<a href="https://bitbucket.org/pypa/bandersnatch">官网</a></li><li>devpi：PyPI 服务和打包/测试/分发工具。<a href="http://doc.devpi.net/">官网</a></li><li>localshop：本地 PyPI 服务（自定义包并且自动对 PyPI 镜像）。<a href="https://github.com/mvantellingen/localshop">官网</a></li></ul><h3 id="分发"><a href="#分发" class="headerlink" title="分发"></a>分发</h3><p>打包为可执行文件以便分发。</p><ul><li>PyInstaller：将 Python 程序转换成独立的执行文件（跨平台）。<a href="https://github.com/pyinstaller/pyinstaller">官网</a></li><li>cx_Freeze：将python程序转换为带有一个动态链接库的可执行文件。<a href="https://cx-freeze.readthedocs.io/en/latest/index.html">官网</a></li><li>dh-virtualenv：构建并将 virtualenv 虚拟环境作为一个 Debian 包来发布。<a href="http://dh-virtualenv.readthedocs.org/">官网</a></li><li>Nuitka：将脚本、模块、包编译成可执行文件或扩展模块。<a href="http://nuitka.net/">官网</a></li><li>py2app：将 Python 脚本变为独立软件包（Mac OS X）。<a href="http://pythonhosted.org/py2app/">官网</a></li><li>py2exe：将 Python 脚本变为独立软件包（Windows）。<a href="http://www.py2exe.org/">官网</a></li><li>pynsist：一个用来创建 Windows 安装程序的工具，可以在安装程序中打包 Python 本身。<a href="http://pynsist.readthedocs.org/">官网</a></li></ul><h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><p>将源码编译成软件。</p><ul><li>buildout：一个构建系统，从多个组件来创建，组装和部署应用。<a href="http://www.buildout.org/">官网</a></li><li>BitBake：针对嵌入式 Linux 的类似 make 的构建工具。<a href="http://www.yoctoproject.org/docs/1.6/bitbake-user-manual/bitbake-user-manual.html">官网</a></li><li>fabricate：对任何语言自动找到依赖关系的构建工具。<a href="https://code.google.com/archive/p/fabricate">官网</a></li><li>PlatformIO：多平台命令行构建工具。<a href="https://github.com/platformio/platformio">官网</a></li><li>PyBuilder：纯 Python 实现的持续化构建工具。<a href="https://github.com/pybuilder/pybuilder">官网</a></li><li>SCons：软件构建工具。<a href="http://www.scons.org/">官网</a></li></ul><h3 id="交互式解析器"><a href="#交互式解析器" class="headerlink" title="交互式解析器"></a>交互式解析器</h3><p>交互式 Python 解析器。</p><ul><li>IPython：功能丰富的工具，非常有效的使用交互式 Python。<a href="https://github.com/ipython/ipython">官网</a></li><li><a href="http://hao.importnew.com/bpython/">bpython</a>：界面丰富的 Python 解析器。<a href="http://bpython-interpreter.org/">官网</a></li><li>ptpython：高级交互式 Python 解析器， 构建于 <a href="https://github.com/jonathanslenders/python-prompt-toolkit">python-prompt-toolkit</a> 之上。<a href="https://github.com/jonathanslenders/ptpython">官网</a></li></ul><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>文件管理和 MIME（多用途的网际邮件扩充协议）类型检测。</p><ul><li>aiofiles：基于 asyncio，提供文件异步操作。<a href="https://github.com/Tinche/aiofiles">官网</a></li><li>imghdr：（Python 标准库）检测图片类型。<a href="https://docs.python.org/2/library/imghdr.html">官网</a></li><li>mimetypes：（Python 标准库）将文件名映射为 MIME 类型。<a href="https://docs.python.org/2/library/mimetypes.html">官网</a></li><li>path.py：对 os.path 进行封装的模块。<a href="https://github.com/jaraco/path.py">官网</a></li><li>pathlib：（Python3.4+ 标准库）跨平台的、面向对象的路径操作库。<a href="https://pathlib.readthedocs.org/en/pep428/">官网</a></li><li>python-magic：文件类型检测的第三方库 libmagic 的 Python 接口。<a href="https://github.com/ahupp/python-magic">官网</a></li><li>Unipath：用面向对象的方式操作文件和目录。<a href="https://github.com/mikeorr/Unipath">官网</a></li><li>watchdog：管理文件系统事件的 API 和 shell 工具。<a href="https://github.com/gorakhargosh/watchdog">官网</a></li></ul><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p>操作日期和时间的类库。</p><ul><li>arrow：更好的 Python 日期时间操作类库。<a href="https://github.com/crsmithdev/arrow">官网</a></li><li>Chronyk：Python 3 的类库，用于解析手写格式的时间和日期。<a href="https://github.com/KoffeinFlummi/Chronyk">官网</a></li><li>dateutil：Python datetime 模块的扩展。<a href="https://pypi.python.org/pypi/python-dateutil">官网</a></li><li>delorean：解决 Python 中有关日期处理的棘手问题的库。<a href="https://github.com/myusuf3/delorean/">官网</a></li><li>maya：人性化的时间处理库。<a href="https://github.com/kennethreitz/maya">官网</a></li><li>moment：一个用来处理时间和日期的 Python 库。灵感来自于 Moment.js。<a href="https://github.com/zachwill/moment">官网</a></li><li>pendulum：一个比 arrow 更具有明确的，可预测的行为的时间操作库。<a href="https://github.com/sdispater/pendulum">官网</a></li><li>PyTime：一个简单易用的 Python 模块，用于通过字符串来操作日期/时间。<a href="https://github.com/shinux/PyTime">官网</a></li><li>pytz：现代以及历史版本的世界时区定义。将时区数据库引入 Python。<a href="https://launchpad.net/pytz">官网</a></li><li>when.py：提供用户友好的函数来帮助用户进行常用的日期和时间操作。<a href="https://github.com/dirn/When.py">官网</a></li></ul><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><p>用于解析和操作文本的库。</p><ul><li>通用<ul><li><a href="http://hao.importnew.com/chardet/">chardet</a>：字符编码检测器，兼容 Python2 和 Python3。<a href="https://github.com/chardet/chardet">官网</a></li><li>difflib：(Python 标准库)帮助我们进行差异化比较。<a href="https://docs.python.org/2/library/difflib.html">官网</a></li><li>ftfy：让 Unicode 文本更完整更连贯。<a href="https://github.com/LuminosoInsight/python-ftfy">官网</a></li><li>fuzzywuzzy：模糊字符串匹配。<a href="https://github.com/seatgeek/fuzzywuzzy">官网</a></li><li>Levenshtein：快速计算编辑距离以及字符串的相似度。<a href="https://github.com/ztane/python-Levenshtein/">官网</a></li><li>pangu.py：在中日韩语字符和数字字母之间添加空格。<a href="https://github.com/vinta/pangu.py">官网</a></li><li>pypinyin：汉字拼音转换工具 Python 版。<a href="https://github.com/mozillazg/python-pinyin">官网</a></li><li>shortuuid：一个生成器库，用以生成简洁的，明白的，URL 安全的 UUID。<a href="https://github.com/stochastic-technologies/shortuuid">官网</a></li><li><a href="https://github.com/simplejson/simplejson">simplejson</a>：Python 的 JSON 编码、解码器。<a href="https://simplejson.readthedocs.io/en/latest/">官网</a></li><li>unidecode：Unicode 文本的 ASCII 转换形式 。<a href="https://pypi.python.org/pypi/Unidecode">官网</a></li><li>uniout：打印可读的字符，而不是转义的字符串。<a href="https://github.com/moskytw/uniout">官网</a></li><li>xpinyin：一个用于把汉字转换为拼音的库。<a href="https://github.com/lxneng/xpinyin">官网</a></li><li>yfiglet-figlet：<a href="https://github.com/pwaller/pyfiglet">pyfiglet -figlet</a> 的 Python 实现。</li><li>flashtext: 一个高效的文本查找替换库。<a href="https://github.com/vi3k6i5/flashtext">官网</a></li></ul></li><li>Slug 化<ul><li>awesome-slugify：一个 Python slug 化库，可以保持 Unicode。<a href="https://github.com/dimka665/awesome-slugify">官网</a></li><li>python-slugify：Python slug 化库，可以把 unicode 转化为 ASCII。<a href="https://github.com/un33k/python-slugify">官网</a></li><li>unicode-slugify：一个 slug 工具，可以生成 unicode slugs ,需要依赖 Django 。<a href="https://github.com/mozilla/unicode-slugify">官网</a></li></ul></li><li>解析器<ul><li>phonenumbers：解析，格式化，储存，验证电话号码。<a href="https://github.com/daviddrysdale/python-phonenumbers">官网</a></li><li>PLY：lex 和 yacc 解析工具的 Python 实现。<a href="http://www.dabeaz.com/ply/">官网</a></li><li>Pygments：通用语法高亮工具。<a href="http://pygments.org/">官网</a></li><li>pyparsing：生成通用解析器的框架。<a href="http://pyparsing.wikispaces.com/">官网</a></li><li>python-nameparser：把一个人名分解为几个独立的部分。<a href="https://github.com/derek73/python-nameparser">官网</a></li><li>python-user-agents：浏览器 user agent 解析器。<a href="https://github.com/selwin/python-user-agents">官网</a></li><li>sqlparse：一个无验证的 SQL 解析器。<a href="https://sqlparse.readthedocs.org/en/latest/">官网</a></li></ul></li></ul><h3 id="特殊文本格式处理"><a href="#特殊文本格式处理" class="headerlink" title="特殊文本格式处理"></a>特殊文本格式处理</h3><p>一些用来解析和操作特殊文本格式的库。</p><ul><li>通用<ul><li>tablib：一个用来处理中表格数据的模块。<a href="https://github.com/kennethreitz/tablib">官网</a></li></ul></li><li>Office<ul><li>Marmir：把输入的 Python 数据结构转换为电子表单。<a href="https://github.com/brianray/mm">官网</a></li><li>openpyxl：一个用来读写 Excel 2010 xlsx/xlsm/xltx/xltm 文件的库。<a href="https://openpyxl.readthedocs.org/en/latest/">官网</a></li><li>pyexcel：一个提供统一 API，用来读写，操作 Excel 文件的库。<a href="https://github.com/pyexcel/pyexcel">官网</a></li><li>python-docx：读取，查询以及修改 Microsoft Word 2007/2008 docx 文件。<a href="https://github.com/python-openxml/python-docx">官网</a></li><li>relatorio：模板化 OpenDocument 文件。<a href="http://relatorio.tryton.org/">官网</a></li><li>unoconv：在 LibreOffice/OpenOffice 支持的任意文件格式之间进行转换。<a href="https://github.com/dagwieers/unoconv">官网</a></li><li>XlsxWriter：一个用于创建 Excel .xlsx 文件的 Python 模块。<a href="https://xlsxwriter.readthedocs.org/en/latest/">官网</a></li><li>xlwings：一个使得在 Excel 中方便调用 Python 的库（反之亦然），基于 BSD 协议。<a href="http://xlwings.org/">官网</a></li><li><a href="http://hao.importnew.com/xlwt/">xlwt</a>：读写 Excel 文件的数据和格式信息。<a href="https://github.com/python-excel/xlwt">官网</a> / <a href="https://github.com/python-excel/xlrd">xlrd</a></li></ul></li><li>PDF<ul><li>PDFMiner：一个用于从 PDF 文档中抽取信息的工具。<a href="https://github.com/euske/pdfminer">官网</a></li><li>PyPDF2：一个可以分割，合并和转换 PDF 页面的库。<a href="https://github.com/mstamy2/PyPDF2">官网</a></li><li>ReportLab：快速创建富文本 PDF 文档。<a href="http://www.reportlab.com/opensource/">官网</a></li></ul></li><li>Markdown<ul><li>Mistune：快速并且功能齐全的纯 Python 实现的 Markdown 解析器。<a href="https://github.com/lepture/mistune">官网</a></li><li>Python-Markdown：John Gruber’s Markdown 的 Python 版实现。<a href="https://github.com/waylan/Python-Markdown">官网</a></li><li>Python-Markdown2：纯 Python 实现的 Markdown 解析器，比 Python-Markdown 更快，更准确，可扩展。<a href="https://github.com/trentm/python-markdown2">官网</a></li></ul></li><li>YAML<ul><li>PyYAML：Python 版本的 YAML 解析器。<a href="http://pyyaml.org/">官网</a></li></ul></li><li>CSV<ul><li>csvkit：用于转换和操作 CSV 的工具。<a href="https://github.com/wireservice/csvkit">官网</a></li></ul></li><li>Archive<ul><li>unp：一个用来方便解包归档文件的命令行工具。<a href="https://github.com/mitsuhiko/unp">官网</a></li></ul></li></ul><h3 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h3><p>用来处理人类语言的库。</p><ul><li><a href="http://hao.importnew.com/nltk/">NLTK</a>：一个先进的平台，用以构建处理人类语言数据的 Python 程序。<a href="http://www.nltk.org/">官网</a></li><li>jieba：中文分词工具。<a href="https://github.com/fxsjy/jieba">官网</a></li><li>langid.py：独立的语言识别系统。<a href="https://github.com/saffsd/langid.py">官网</a></li><li>Pattern：Python 网络信息挖掘模块。<a href="http://www.clips.ua.ac.be/pattern">官网</a></li><li>SnowNLP：一个用来处理中文文本的库。<a href="https://github.com/isnowfy/snownlp">官网</a></li><li>TextBlob：为进行普通自然语言处理任务提供一致的 API。<a href="http://textblob.readthedocs.org/en/latest/">官网</a></li><li>TextGrocery：一简单高效的短文本分类工具，基于 LibLinear 和 Jieba。<a href="https://github.com/2shou/TextGrocery">官网</a></li><li>thulac:清华大学自然语言处理与社会人文计算实验室研制推出的一套中文词法分析工具包<a href="https://github.com/thunlp/THULAC-Python">官网</a></li></ul><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>用以生成项目文档的库。</p><ul><li><a href="http://hao.importnew.com/sphinx/">Sphinx</a>：Python 文档生成器。<a href="http://www.sphinx-doc.org/en/latest/">官网</a></li><li>awesome-sphinxdoc：<a href="https://github.com/yoloseem/awesome-sphinxdoc">官网</a></li><li>MkDocs：对 Markdown 友好的文档生成器。<a href="http://www.mkdocs.org/">官网</a></li><li>pdoc：一个可以替换 Epydoc 的库，可以自动生成 Python 库的 API 文档。<a href="https://github.com/BurntSushi/pdoc">官网</a></li><li>Pycco：文学编程（literate-programming）风格的文档生成器。<a href="https://github.com/pycco-docs/pycco">官网</a></li><li>readthedocs：一个基于 Sphinx/MkDocs 的在线文档托管系统，对开源项目免费开放使用。<a href="https://github.com/rtfd/readthedocs.org/">官网</a></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>用来保存和解析配置的库。</p><ul><li>config：<a href="https://docs.python.org/2/library/logging.html">logging</a> 模块作者写的分级配置模块。<a href="https://www.red-dove.com/config-doc/">官网</a></li><li>ConfigObj：INI 文件解析器，带验证功能。<a href="http://www.voidspace.org.uk/python/configobj.html">官网</a></li><li>ConfigParser：(Python 标准库) INI 文件解析器。<a href="https://docs.python.org/2/library/configparser.html">官网</a></li><li>profig：通过多种格式进行配置，具有数值转换功能。<a href="http://profig.readthedocs.org/en/default/">官网</a></li><li>python-decouple：将设置和代码完全隔离。<a href="https://github.com/henriquebastos/python-decouple">官网</a></li></ul><h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><p>用于创建命令行程序的库。</p><ul><li>命令行程序开发<ul><li>asciimatics：跨平台，全屏终端包（即鼠标/键盘输入和彩色，定位文本输出），完整的复杂动画和特殊效果的高级 API。<a href="https://github.com/peterbrittain/asciimatics">官网</a></li><li>cement：Python 的命令行程序框架。<a href="http://builtoncement.com/">官网</a></li><li>click：一个通过组合的方式来创建精美命令行界面的包。<a href="http://click.pocoo.org/dev/">官网</a></li><li>cliff：一个用于创建命令行程序的框架，可以创建具有多层命令的命令行程序。<a href="http://docs.openstack.org/developer/cliff/">官网</a></li><li>clint：Python 命令行程序工具。<a href="https://github.com/kennethreitz/clint">官网</a></li><li>colorama：跨平台彩色终端文本。<a href="https://pypi.python.org/pypi/colorama">官网</a></li><li>docopt：Python 风格的命令行参数解析器。<a href="http://docopt.org/">官网</a></li><li>Gooey：一条命令，将命令行程序变成一个 GUI 程序。<a href="https://github.com/chriskiehl/Gooey">官网</a></li><li>python-prompt-toolkit：一个用于构建强大的交互式命令行程序的库。<a href="https://github.com/jonathanslenders/python-prompt-toolkit">官网</a></li><li>python-fire：Google 出品的一个基于 Python 类的构建命令行界面的库。<a href="https://github.com/google/python-fire">官网</a></li><li><a href="http://hao.importnew.com/pythonpy/">Pythonpy</a>：在命令行中直接执行任何 Python 指令。<a href="https://github.com/Russell91/pythonpy/wiki">官网</a></li></ul></li><li>生产力工具<ul><li>aws-cli：Amazon Web Services 的通用命令行界面。<a href="https://github.com/aws/aws-cli">官网</a></li><li>bashplotlib：在终端中进行基本绘图。<a href="https://github.com/glamp/bashplotlib">官网</a></li><li>caniusepython3：判断是哪个项目妨碍你你移植到 Python3。<a href="https://github.com/brettcannon/caniusepython3">官网</a></li><li>cookiecutter：从 cookiecutters（项目模板）创建项目的一个命令行工具。<a href="https://github.com/audreyr/cookiecutter">官网</a></li><li>doitlive：一个用来在终端中进行现场演示的工具。<a href="https://github.com/sloria/doitlive">官网</a></li><li>pyftpdlib：一个速度极快和可扩展的 Python FTP 服务库。<a href="https://github.com/giampaolo/pyftpdlib">官网</a></li><li>howdoi：通过命令行获取即时的编程问题解答。<a href="https://github.com/gleitz/howdoi">官网</a></li><li>httpie：一个命令行 HTTP 客户端，cURL 的替代品，易用性更好。<a href="https://github.com/jkbrzt/httpie">官网</a></li><li>PathPicker：从 bash 输出中选出文件。<a href="https://github.com/facebook/PathPicker">官网</a></li><li>percol：向 UNIX shell 传统管道概念中加入交互式选择功能。<a href="https://github.com/mooz/percol">官网</a></li><li>SAWS：一个加强版的 AWS 命令行。<a href="https://github.com/donnemartin/saws">官网</a></li><li>thefuck：修正你之前的命令行指令。<a href="https://github.com/nvbn/thefuck">官网</a></li><li>mycli：一个 MySQL 命令行客户端，具有自动补全和语法高亮功能。<a href="https://github.com/dbcli/mycli">官网</a></li><li>pgcli：Postgres 命令行工具，具有自动补全和语法高亮功能。<a href="https://github.com/dbcli/pgcli">官网</a></li><li>try：一个从来没有更简单的命令行工具，用来试用 python 库。<a href="https://github.com/timofurrer/try">官网</a></li></ul></li></ul><h3 id="下载器"><a href="#下载器" class="headerlink" title="下载器"></a>下载器</h3><p>用来进行下载的库.</p><ul><li>s3cmd：一个用来管理 Amazon S3 和 CloudFront 的命令行工具。<a href="https://github.com/s3tools/s3cmd">官网</a></li><li>s4cmd：超级 S3 命令行工具，性能更加强劲。<a href="https://github.com/bloomreach/s4cmd">官网</a></li><li>you-get：一个 YouTube/Youku/Niconico 视频下载器，使用 Python3 编写。<a href="https://www.soimort.org/you-get/">官网</a></li><li>youtube-dl：一个小巧的命令行程序，用来下载 YouTube 视频。<a href="http://rg3.github.io/youtube-dl/">官网</a></li></ul><h3 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h3><p>用来操作图像的库.</p><ul><li><a href="http://hao.importnew.com/pillow/">pillow</a>：Pillow 是一个更加易用版的 <a href="http://www.pythonware.com/products/pil/">PIL</a>。<a href="http://pillow.readthedocs.org/en/latest/">官网</a></li><li>hmap：图像直方图映射。<a href="https://github.com/rossgoodwin/hmap">官网</a></li><li>imgSeek：一个使用视觉相似性搜索一组图片集合的项目。<a href="https://sourceforge.net/projects/imgseek/">官网</a></li><li>nude.py：裸体检测。<a href="https://github.com/hhatto/nude.py">官网</a></li><li>pyBarcode：不借助 PIL 库在 Python 程序中生成条形码。<a href="https://pythonhosted.org/pyBarcode/">官网</a></li><li>pygram：类似 Instagram 的图像滤镜。<a href="https://github.com/ajkumar25/pygram">官网</a></li><li>python-qrcode：一个纯 Python 实现的二维码生成器。<a href="https://github.com/lincolnloop/python-qrcode">官网</a></li><li>Quads：基于四叉树的计算机艺术。<a href="https://github.com/fogleman/Quads">官网</a></li><li>scikit-image：一个用于（科学）图像处理的 Python 库。<a href="http://scikit-image.org/">官网</a></li><li>thumbor：一个小型图像服务，具有剪裁，尺寸重设和翻转功能。<a href="https://github.com/thumbor/thumbor">官网</a></li><li>wand：<a href="http://www.imagemagick.org/script/magick-wand.php">MagickWand</a>的 Python 绑定。MagickWand 是 ImageMagick 的 C API 。<a href="https://github.com/dahlia/wand">官网</a></li><li>face_recognition：简单易用的 python 人脸识别库。<a href="https://github.com/ageitgey/face_recognition">官网</a></li></ul><h3 id="OCR"><a href="#OCR" class="headerlink" title="OCR"></a>OCR</h3><p>光学字符识别库。</p><ul><li>pyocr：Tesseract 和 Cuneiform 的一个封装(wrapper)。<a href="https://github.com/jflesch/pyocr">官网</a></li><li><a href="http://hao.importnew.com/pytesseract/">pytesseract</a>：<a href="https://github.com/tesseract-ocr">Google Tesseract OCR</a> 的另一个封装(wrapper)。<a href="https://github.com/madmaze/pytesseract">官网</a></li><li>python-tesseract：<a href="https://github.com/tesseract-ocr">Google Tesseract OCR</a> 的一个包装类。</li></ul><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3><p>用来操作音频的库</p><ul><li>audiolazy：Python 的数字信号处理包。<a href="https://github.com/danilobellini/audiolazy">官网</a></li><li>audioread：交叉库 (GStreamer + Core Audio + MAD + FFmpeg) 音频解码。<a href="https://github.com/beetbox/audioread">官网</a></li><li>beets：一个音乐库管理工具及 <a href="https://musicbrainz.org/">MusicBrainz</a> 标签添加工具。<a href="http://beets.io/">官网</a></li><li>dejavu：音频指纹提取和识别。<a href="https://github.com/worldveil/dejavu">官网</a></li><li><a href="http://hao.importnew.com/django-elastic-transcoder/">django-elastic-transcoder</a>：Django + <a href="http://aws.amazon.com/elastictranscoder/">Amazon Elastic Transcoder</a>。<a href="https://github.com/StreetVoice/django-elastic-transcoder">官网</a></li><li>eyeD3：一个用来操作音频文件的工具，具体来讲就是包含 ID3 元信息的 MP3 文件。<a href="http://eyed3.nicfit.net/">官网</a></li><li>id3reader：一个用来读取 MP3 元数据的 Python 模块。<a href="http://nedbatchelder.com/code/modules/id3reader.py">官网</a></li><li>m3u8：一个用来解析 m3u8 文件的模块。<a href="https://github.com/globocom/m3u8">官网</a></li><li>mutagen：一个用来处理音频元数据的 Python 模块。<a href="https://bitbucket.org/lazka/mutagen">官网</a></li><li>pydub：通过简单、简洁的高层接口来操作音频文件。<a href="https://github.com/jiaaro/pydub">官网</a></li><li>pyechonest：<a href="http://developer.echonest.com/">Echo Nest</a> API 的 Python 客户端。<a href="https://github.com/echonest/pyechonest">官网</a></li><li>talkbox：一个用来处理演讲/信号的 Python 库。<a href="http://scikits.appspot.com/talkbox">官网</a></li><li>TimeSide：开源 web 音频处理框架。<a href="https://github.com/Parisson/TimeSide">官网</a></li><li>tinytag：一个用来读取 MP3, OGG, FLAC 以及 Wave 文件音乐元数据的库。<a href="https://github.com/devsnd/tinytag">官网</a></li><li>mingus：一个高级音乐理论和曲谱包，支持 MIDI 文件和回放功能。<a href="http://bspaans.github.io/python-mingus/">官网</a></li></ul><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>用来操作视频和 GIF 的库。</p><ul><li>moviepy：一个用来进行基于脚本的视频编辑模块，适用于多种格式，包括动图 GIFs。<a href="http://zulko.github.io/moviepy/">官网</a></li><li>scikit-video：SciPy 视频处理常用程序。<a href="https://github.com/aizvorski/scikit-video">官网</a></li></ul><h3 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h3><p>地理编码地址以及用来处理经纬度的库。</p><ul><li>GeoDjango：世界级地理图形 web 框架。<a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/">官网</a></li><li>GeoIP：MaxMind GeoIP Legacy 数据库的 Python API。<a href="https://github.com/maxmind/geoip-api-python">官网</a></li><li>geojson：GeoJSON 的 Python 绑定及工具。<a href="https://github.com/frewsxcv/python-geojson">官网</a></li><li>geopy：Python 地址编码工具箱。<a href="https://github.com/geopy/geopy">官网</a></li><li>GeoIP2：GeoIP2 Webservice 客户端与数据库 Python API。<a href="https://github.com/maxmind/GeoIP2-python">官网</a></li><li>django-countries：一个 Django 应用程序，提供用于表格的国家选择功能，国旗图标静态文件以及模型中的国家字段。<a href="https://github.com/SmileyChris/django-countries">官网</a></li></ul><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>使用 HTTP 的库。</p><ul><li>aiohttp：基于 asyncio 的异步 HTTP 网络库。<a href="https://github.com/aio-libs/aiohttp">官网</a></li><li>requests：人性化的 HTTP 请求库。<a href="http://docs.python-requests.org/en/latest/">官网</a></li><li>grequests：requests 库 + gevent ，用于异步 HTTP 请求.<a href="https://github.com/kennethreitz/grequests">官网</a></li><li>httplib2：全面的 HTTP 客户端库。<a href="https://github.com/jcgregorio/httplib2">官网</a></li><li>treq：类似 requests 的 Python API 构建于 Twisted HTTP 客户端之上。<a href="https://github.com/twisted/treq">官网</a></li><li>urllib3：一个具有线程安全连接池，支持文件 post，清晰友好的 HTTP 库。<a href="https://github.com/shazow/urllib3">官网</a></li></ul><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>Python 实现的数据库。</p><ul><li>pickleDB：一个简单，轻量级键值储存数据库。<a href="https://pythonhosted.org/pickleDB/">官网</a></li><li>PipelineDB：流式 SQL 数据库。<a href="https://www.pipelinedb.com/">官网</a></li><li>TinyDB：一个微型的，面向文档型数据库。<a href="https://github.com/msiemens/tinydb">官网</a></li><li>ZODB：一个 Python 原生对象数据库。一个键值和对象图数据库。<a href="http://www.zodb.org/en/latest/">官网</a></li></ul><h3 id="数据库驱动"><a href="#数据库驱动" class="headerlink" title="数据库驱动"></a>数据库驱动</h3><p>用来连接和操作数据库的库。</p><ul><li><p>MySQL：</p><p>awesome-mysql</p></li></ul><p>  系列</p><ul><li>aiomysql：基于 asyncio 的异步 MySQL 数据库操作库。<a href="https://github.com/aio-libs/aiomysql">官网</a></li><li>mysql-python：Python 的 MySQL 数据库连接器。<a href="https://sourceforge.net/projects/mysql-python/">官网</a></li><li>ysqlclient：<a href="https://github.com/PyMySQL/mysqlclient-python">mysql-python</a> 分支，支持 Python 3。</li><li>oursql：一个更好的 MySQL 连接器，支持原生预编译指令和 BLOBs。<a href="https://pythonhosted.org/oursql/">官网</a></li><li>PyMySQL：纯 Python MySQL 驱动，兼容 mysql-python。<a href="https://github.com/PyMySQL/PyMySQL">官网</a></li></ul><ul><li><p>PostgreSQL</p><ul><li>psycopg2：Python 中最流行的 PostgreSQL 适配器。<a href="http://initd.org/psycopg/">官网</a></li><li>queries：psycopg2 库的封装，用来和 PostgreSQL 进行交互。<a href="https://github.com/gmr/queries">官网</a></li><li>txpostgres：基于 Twisted 的异步 PostgreSQL 驱动。<a href="http://txpostgres.readthedocs.org/en/latest/">官网</a></li></ul></li><li><p>其他关系型数据库</p><ul><li>apsw：另一个 Python SQLite 封装。<a href="http://rogerbinns.github.io/apsw/">官网</a></li><li>dataset：在数据库中存储 Python 字典</li><li>pymssql：一个简单的 Microsoft SQL Server 数据库接口。<a href="http://www.pymssql.org/en/latest/">官网</a></li></ul></li><li><p>NoSQL 数据库</p><ul><li>asyncio-redis：基于 asyncio 的 redis 客户端 (PEP 3156)。<a href="https://github.com/jonathanslenders/asyncio-redis">官网</a></li><li>cassandra-python-driver：Cassandra 的 Python 驱动。<a href="https://github.com/datastax/python-driver">官网</a></li><li>HappyBase：一个为 Apache HBase 设计的，对开发者友好的库。<a href="http://happybase.readthedocs.org/en/latest/">官网</a></li><li>Plyvel：一个快速且功能丰富的 LevelDB 的 Python 接口。<a href="https://plyvel.readthedocs.org/en/latest/">官网</a></li><li>py2neo：Neo4j restful 接口的 Python 封装客户端。<a href="http://py2neo.org/2.0/">官网</a></li><li>pycassa：Cassandra 的 Python Thrift 驱动。<a href="https://github.com/pycassa/pycassa">官网</a></li><li>PyMongo：MongoDB 的官方 Python 客户端。<a href="https://docs.mongodb.org/ecosystem/drivers/python/">官网</a></li><li>redis-py：Redis 的 Python 客户端。<a href="https://github.com/andymccurdy/redis-py">官网</a></li><li>telephus：基于 Twisted 的 Cassandra 客户端。<a href="https://github.com/driftx/Telephus">官网</a></li><li>txRedis：基于 Twisted 的 Redis 客户端。<a href="https://github.com/deldotdr/txRedis">官网</a></li></ul></li></ul><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>实现对象关系映射或数据映射技术的库。</p><ul><li><p>关系型数据库</p><ul><li><p>Django Models：Django 的一部分。<a href="https://docs.djangoproject.com/en/dev/topics/db/models/">官网</a></p></li><li><p>SQLAlchemy：Python SQL 工具以及对象关系映射工具。</p><p>官网</p><ul><li><a href="https://github.com/dahlia/awesome-sqlalchemy">awesome-sqlalchemy</a> 系列</li></ul></li><li><p><a href="http://hao.importnew.com/peewee/">Peewee</a>：一个小巧，富有表达力的 ORM。<a href="https://github.com/coleifer/peewee">官网</a></p></li><li><p>PonyORM：提供面向生成器的 SQL 接口的 ORM。<a href="https://ponyorm.com/">官网</a></p></li><li><p>python-sql：编写 Python 风格的 SQL 查询。<a href="https://pypi.python.org/pypi/python-sql">官网</a></p></li></ul></li><li><p>NoSQL 数据库</p><ul><li>django-mongodb-engine：Django MongoDB 后端。<a href="https://github.com/django-nonrel/mongodb-engine">官网</a></li><li>PynamoDB：<a href="https://aws.amazon.com/dynamodb/">Amazon DynamoDB</a> 的一个 Python 风格接口。<a href="https://github.com/jlafon/PynamoDB">官网</a></li><li>flywheel：Amazon DynamoDB 的对象映射工具。<a href="https://github.com/mathcamp/flywheel">官网</a></li><li>MongoEngine：一个 Python 对象文档映射工具，用于 MongoDB。<a href="http://mongoengine.org/">官网</a></li><li>hot-redis：为 Redis 提供 Python 丰富的数据类型。<a href="https://github.com/stephenmcd/hot-redis">官网</a></li><li>redisco：一个 Python 库，提供可以持续存在在 Redis 中的简单模型和容器。<a href="https://github.com/kiddouk/redisco">官网</a></li></ul></li><li><p>其他</p><ul><li>butterdb：Google Drive 电子表格的 Python ORM。<a href="https://github.com/Widdershin/butterdb">官网</a></li></ul></li></ul><h3 id="Web-框架"><a href="#Web-框架" class="headerlink" title="Web 框架"></a>Web 框架</h3><p>全栈 Web 框架。</p><ul><li><p>Django</p><p>：Python 界最流行的 web 框架。</p><p>官网</p><ul><li><a href="https://gitlab.com/rosarior/awesome-django">awesome-django</a> 系列</li></ul></li><li><p>Flask</p><p>：一个 Python 微型框架。</p><p>官网</p><ul><li><a href="https://github.com/humiaozuzu/awesome-flask">awesome-flask</a> 系列</li></ul></li><li><p>pyramid：一个小巧，快速，接地气的开源 Python web 框架。</p><ul><li><a href="https://github.com/uralbash/awesome-pyramid">awesome-pyramid</a> 系列</li></ul></li><li><p><a href="http://hao.importnew.com/bottle/">Bottle</a>：一个快速小巧，轻量级的 WSGI 微型 web 框架。<a href="http://bottlepy.org/docs/dev/index.html">官网</a></p></li><li><p>CherryPy：一个极简的 Python web 框架，服从 HTTP/1.1 协议且具有 WSGI 线程池。<a href="http://www.cherrypy.org/">官网</a></p></li><li><p>TurboGears：一个可以扩展为全栈解决方案的微型框架。<a href="http://www.turbogears.org/">官网</a></p></li><li><p><a href="http://hao.importnew.com/python-webpy/">web.py</a>：一个 Python 的 web 框架，既简单，又强大。<a href="http://webpy.org/">官网</a></p></li><li><p>web2py：一个全栈 web 框架和平台，专注于简单易用。<a href="http://www.web2py.com/">官网</a></p></li><li><p><a href="http://hao.importnew.com/tornado/">Tornado</a>：一个 web 框架和异步网络库。<a href="http://www.tornadoweb.org/en/latest/">官网</a></p></li><li><p>sanic：基于 Python3.5+ 的异步网络框架。<a href="https://github.com/channelcat/sanic/">官网</a></p></li><li><p>starlette: 一款轻量级，高性能的 ASGI 框架 🌟。 <a href="https://www.starlette.io/">官网</a></p></li></ul><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>允许或拒绝用户访问数据或功能的库。</p><ul><li>Carteblanche：站在用户和设计者角度开发的一个代码对齐模块，很好地处理了代码导航及权限。<a href="https://github.com/neuman/python-carteblanche/">官网</a></li><li>django-guardian：Django 1.2+ 实现了单个对象权限。<a href="https://github.com/django-guardian/django-guardian">官网</a></li><li>django-rules：一个小巧但是强大的应用，提供对象级别的权限管理，且不需要使用数据库。<a href="https://github.com/dfunckt/django-rules">官网</a></li></ul><h3 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h3><p>内容管理系统</p><ul><li>odoo-cms: 一个开源的，企业级 CMS，基于 odoo。<a href="http://www.odoo.com/">官网</a></li><li>django-cms：一个开源的，企业级 CMS，基于 Django。<a href="http://www.django-cms.org/en/">官网</a></li><li>djedi-cms：一个轻量级但却非常强大的 Django CMS ，考虑到了插件，内联编辑以及性能。<a href="http://djedi-cms.org/">官网</a></li><li>FeinCMS：基于 Django 构建的最先进的内容管理系统之一。<a href="http://www.feincms.org/">官网</a></li><li>Kotti：一个高级的，Python 范的 web 应用框架，基于 Pyramid 构建。<a href="http://kotti.pylonsproject.org/">官网</a></li><li>Mezzanine：一个强大的，持续的，灵活的内容管理平台。<a href="http://mezzanine.jupo.org/">官网</a></li><li>Opps：一个为杂志，报纸网站以及大流量门户网站设计的 CMS 平台，基于 Django。<a href="http://opps.github.io/opps/">官网</a></li><li>Plone：一个构建于开源应用服务器 Zope 之上的 CMS。<a href="https://plone.org/">官网</a></li><li>Quokka：灵活，可扩展的小型 CMS，基于 Flask 和 MongoDB。<a href="http://quokkaproject.org/">官网</a></li><li><a href="http://hao.importnew.com/wagtail/">Wagtail</a>：一个 Django 内容管理系统。<a href="https://wagtail.io/">官网</a></li><li>Widgy：最新的 CMS 框架，基于 Django。<a href="https://wid.gy/">官网</a></li></ul><h3 id="电子商务"><a href="#电子商务" class="headerlink" title="电子商务"></a>电子商务</h3><p>用于电子商务以及支付的框架和库。</p><ul><li>django-oscar：一个用于 Django 的开源的电子商务框架。<a href="http://oscarcommerce.com/">官网</a></li><li>django-shop：一个基于 Django 的店铺系统。<a href="https://github.com/awesto/django-shop">官网</a></li><li>Cartridge：一个基于 Mezzanine 构建的购物车应用。<a href="https://github.com/stephenmcd/cartridge">官网</a></li><li>shoop：一个基于 Django 的开源电子商务平台。<a href="https://www.shoop.io/en/">官网</a></li><li>alipay：非官方的 Python 支付宝 API。<a href="https://github.com/lxneng/alipay">官网</a></li><li>merchant：一个可以接收来自多种支付平台支付的 Django 应用。<a href="https://github.com/agiliq/merchant">官网</a></li><li>money：一个货币类库。带有可选的 CLDR 后端本地化格式，提供可扩展的货币兑换解决方案。<a href="https://github.com/carlospalol/money">官网</a></li><li>python-currencies：显示货币格式以及它的数值。<a href="https://github.com/Alir3z4/python-currencies">官网</a></li></ul><h3 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h3><p>用来开发 RESTful APIs 的库</p><ul><li>Django<ul><li><a href="http://hao.importnew.com/django-rest-framework/">django-rest-framework</a>：一个强大灵活的工具，用来构建 web API。<a href="http://www.django-rest-framework.org/">官网</a></li><li>django-tastypie：为 Django 应用开发 API。<a href="http://tastypieapi.org/">官网</a></li><li>django-formapi：为 Django 的表单验证，创建 JSON APIs 。<a href="https://github.com/5monkeys/django-formapi">官网</a></li></ul></li><li>Flask<ul><li>flask-api：为 flask 开发的，可浏览 Web APIs 。<a href="http://www.flaskapi.org/">官网</a></li><li>flask-restful：为 flask 快速创建 REST APIs 。<a href="http://flask-restful.readthedocs.org/en/latest/">官网</a></li><li>flask-restless：为 SQLAlchemy 定义的数据库模型创建 RESTful APIs 。<a href="https://flask-restless.readthedocs.org/en/latest/">官网</a></li><li>flask-api-utils：为 Flask 处理 API 表示和验证。<a href="https://github.com/marselester/flask-api-utils">官网</a></li><li>eve：REST API 框架，由 Flask, MongoDB 等驱动。<a href="https://github.com/nicolaiarocci/eve">官网</a></li></ul></li><li>Pyramid<ul><li>cornice：一个 Pyramid 的 REST 框架 。<a href="https://cornice.readthedocs.org/en/latest/">官网</a></li></ul></li><li>与框架无关的<ul><li>falcon：一个用来建立云 API 和 web app 后端的高性能框架。<a href="http://falconframework.org/">官网</a></li><li>sandman：为现存的数据库驱动系统自动创建 REST APIs 。<a href="https://github.com/jeffknupp/sandman">官网</a></li><li>restless：框架无关的 REST 框架 ，基于从 Tastypie 学到的知识。<a href="http://restless.readthedocs.org/en/latest/">官网</a></li><li>ripozo：快速创建 REST/HATEOAS/Hypermedia APIs。<a href="https://github.com/vertical-knowledge/ripozo">官网</a></li></ul></li></ul><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>实现验证方案的库。</p><ul><li>OAuth<ul><li>Authomatic：简单但是强大的框架，身份验证/授权客户端。<a href="http://peterhudec.github.io/authomatic/">官网</a></li><li>django-allauth：Django 的验证应用。<a href="https://github.com/pennersr/django-allauth">官网</a></li><li>django-oauth-toolkit：为 Django 用户准备的 OAuth2。<a href="https://github.com/evonove/django-oauth-toolkit">官网</a></li><li>django-oauth2-provider：为 Django 应用提供 OAuth2 接入。<a href="https://github.com/caffeinehit/django-oauth2-provider">官网</a></li><li>Flask-OAuthlib：OAuth 1.0/a, 2.0 客户端实现，供 Flask 使用。<a href="https://github.com/lepture/flask-oauthlib">官网</a></li><li>OAuthLib：一个 OAuth 请求-签名逻辑通用、 完整的实现。<a href="https://github.com/idan/oauthlib">官网</a></li><li>python-oauth2：一个完全测试的抽象接口。用来创建 OAuth 客户端和服务端。<a href="https://github.com/joestump/python-oauth2">官网</a></li><li>python-social-auth：一个设置简单的社会化验证方式。<a href="https://github.com/omab/python-social-auth">官网</a></li><li>rauth：OAuth 1.0/a, 2.0, 和 Ofly 的 Python 库。<a href="https://github.com/litl/rauth">官网</a></li><li>sanction：一个超级简单的 OAuth2 客户端实现。<a href="https://github.com/demianbrecht/sanction">官网</a></li></ul></li><li>其他<ul><li>jose：JavaScript 对象签名和加密草案的实现。<a href="https://github.com/demonware/jose">官网</a></li><li>PyJWT：JSON Web 令牌草案 01。<a href="https://github.com/jpadilla/pyjwt">官网</a></li><li>python-jws：JSON Web 签名草案 02 的实现。<a href="https://github.com/brianloveswords/python-jws">官网</a></li><li>python-jwt：一个用来生成和验证 JSON Web 令牌的模块。<a href="https://github.com/davedoesdev/python-jwt">官网</a></li></ul></li></ul><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h3><p>模板生成和词法解析的库和工具。</p><ul><li><a href="http://hao.importnew.com/jinja2/">Jinja2</a>：一个现代的，对设计师友好的模板引擎。<a href="https://github.com/pallets/jinja">官网</a></li><li>Chameleon：一个 HTML/XML 模板引擎。 模仿了 ZPT（Zope Page Templates）, 进行了速度上的优化。<a href="https://chameleon.readthedocs.org/en/latest/">官网</a></li><li>Genshi：Python 模板工具，用以生成 web 感知的结果。<a href="https://genshi.edgewall.org/">官网</a></li><li>Mako：Python 平台的超高速轻量级模板。<a href="http://www.makotemplates.org/">官网</a></li></ul><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>处理事件以及任务队列的库。</p><ul><li>celery：一个异步任务队列/作业队列，基于分布式消息传递。<a href="http://www.celeryproject.org/">官网</a></li><li>huey：小型多线程任务队列。<a href="https://github.com/coleifer/huey">官网</a></li><li><a href="http://hao.importnew.com/mrq/">mrq</a>：Mr. Queue -一个 Python 的分布式 worker 任务队列， 使用 Redis 和 gevent。<a href="https://github.com/pricingassistant/mrq">官网</a></li><li>rq：简单的 Python 作业队列。<a href="http://python-rq.org/">官网</a></li><li>simpleq：一个简单的，可无限扩张的，基于亚马逊 SQS 的队列。<a href="https://github.com/rdegges/simpleq">官网</a></li></ul><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>对数据进行索引和执行搜索查询的库和软件。</p><ul><li>django-haystack：Django 模块化搜索。<a href="https://github.com/django-haystack/django-haystack">官网</a></li><li>elasticsearch-py：Elasticsearch 的官方底层 Python 客户端。<a href="https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html">官网</a></li><li>elasticsearch-dsl-py：Elasticsearch 的官方高级 Python 客户端。<a href="https://github.com/elastic/elasticsearch-dsl-py">官网</a></li><li>solrpy：<a href="http://lucene.apache.org/solr/">solr</a> 的 Python 客户端。<a href="https://github.com/edsu/solrpy">官网</a></li><li>Whoosh：一个快速的纯 Python 搜索引擎库。<a href="http://whoosh.readthedocs.org/en/latest/">官网</a></li></ul><h3 id="动态消息"><a href="#动态消息" class="headerlink" title="动态消息"></a>动态消息</h3><p>用来创建用户活动的库。</p><ul><li>django-activity-stream：从你的站点行为中生成通用活动信息流。<a href="https://github.com/justquick/django-activity-stream">官网</a></li><li>Stream-Framework：使用 Cassandra 和 Redis 创建动态消息和通知系统。<a href="https://github.com/tschellenbach/Stream-Framework">官网</a></li></ul><h3 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h3><p>管理、压缩、缩小网站资源的工具。</p><ul><li>django-compressor：将链接和内联的 JavaScript 或 CSS 压缩到一个单独的缓存文件中。<a href="https://github.com/django-compressor/django-compressor">官网</a></li><li>django-storages：一个针对 Django 的自定义存储后端的工具集合。<a href="http://django-storages.readthedocs.org/en/latest/">官网</a></li><li>fanstatic：打包、优化，并且把静态文件依赖作为 Python 的包来提供。<a href="http://www.fanstatic.org/en/latest/">官网</a></li><li>File Conveyor：一个后台驻留的程序，用来发现和同步文件到 CDNs, S3 和 FTP。<a href="https://wimleers.com/fileconveyor/">官网</a></li><li>Flask-Assets：帮你将 web 资源整合到你的 Flask app 中。<a href="http://flask-assets.readthedocs.org/en/latest/">官网</a></li><li>jinja-assets-compressor：一个 Jinja 扩展，用来编译和压缩你的资源。<a href="https://github.com/jaysonsantos/jinja-assets-compressor">官网</a></li><li>webassets：为你的静态资源打包、优化和管理生成独一无二的缓存 URL。<a href="http://webassets.readthedocs.org/en/latest/">官网</a></li></ul><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>缓存数据的库。</p><ul><li>Beaker：一个缓存和会话库，可以用在 web 应用和独立 Python 脚本和应用上。<a href="http://beaker.readthedocs.org/en/latest/">官网</a></li><li>django-cache-machine：Django 模型的自动缓存和失效。<a href="https://github.com/django-cache-machine/django-cache-machine">官网</a></li><li>django-cacheops：具有自动颗粒化事件驱动失效功能的 ORM。<a href="https://github.com/Suor/django-cacheops">官网</a></li><li>django-viewlet：渲染模板，同时具有额外的缓存控制功能。<a href="https://github.com/5monkeys/django-viewlet">官网</a></li><li>dogpile.cache：dogpile.cache 是 Beaker 的下一代替代品，由同一作者开发。<a href="http://dogpilecache.readthedocs.org/en/latest/">官网</a></li><li>HermesCache：Python 缓存库，具有基于标签的失效和 dogpile effect 保护功能。<a href="https://pypi.python.org/pypi/HermesCache">官网</a></li><li>johnny-cache：django 应用缓存框架。<a href="https://github.com/jmoiron/johnny-cache">官网</a></li><li>pylibmc：<a href="http://libmemcached.org/libMemcached.html">libmemcached</a> 接口的 Python 封装。<a href="https://github.com/lericson/pylibmc">官网</a></li></ul><h3 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h3><p>用来发送和解析电子邮件的库。</p><ul><li>django-celery-ses：带有 AWS SES 和 Celery 的 Django email 后端。<a href="https://github.com/StreetVoice/django-celery-ses">官网</a></li><li>envelopes：供人类使用的电子邮件库。<a href="http://tomekwojcik.github.io/envelopes/">官网</a></li><li>flanker：一个 email 地址和 Mime 解析库。<a href="https://github.com/mailgun/flanker">官网</a></li><li>imbox：Python IMAP 库。<a href="https://github.com/martinrusev/imbox">官网</a></li><li>inbox.py：Python SMTP 服务器。<a href="https://github.com/kennethreitz/inbox.py">官网</a></li><li>inbox：一个开源电子邮件工具箱。<a href="https://github.com/nylas/sync-engine">官网</a></li><li>lamson：Python 风格的 SMTP 应用服务器。<a href="https://github.com/zedshaw/lamson">官网</a></li><li>mailjet：Mailjet API 实现，用来提供批量发送邮件，统计等功能。<a href="https://github.com/WoLpH/mailjet">官网</a></li><li>marrow.mailer：高性能可扩展邮件分发框架。<a href="https://github.com/marrow/mailer">官网</a></li><li>modoboa：一个邮件托管和管理平台，具有现代的、简约的 Web UI。<a href="https://github.com/tonioo/modoboa">官网</a></li><li>pyzmail：创建，发送和解析电子邮件。<a href="http://www.magiksys.net/pyzmail/">官网</a></li><li>Talon：Mailgun 库，用来抽取信息和签名。<a href="https://github.com/mailgun/talon">官网</a></li><li>yagmail：yagmail是一个GMAIL / SMTP客户端，旨在使其尽可能简单地发送电子邮件。<a href="https://pypi.org/project/yagmail/">官网</a></li></ul><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>用来进行国际化的库。</p><ul><li>Babel：一个 Python 的国际化库。<a href="http://babel.pocoo.org/en/latest/">官网</a></li><li>Korean：一个韩语词态库。<a href="https://korean.readthedocs.org/en/latest/">官网</a></li></ul><h3 id="URL-处理"><a href="#URL-处理" class="headerlink" title="URL 处理"></a>URL 处理</h3><p>解析 URLs 的库</p><ul><li>furl：一个让处理 URL 更简单小型 Python 库。<a href="https://github.com/gruns/furl">官网</a></li><li>purl：一个简单的，不可变的 URL 类，具有简洁的 API 来进行询问和处理。<a href="https://github.com/codeinthehole/purl">官网</a></li><li>pyshorteners：一个纯 Python URL 缩短库。<a href="https://github.com/ellisonleao/pyshorteners">官网</a></li><li>shorturl：生成短小 URL 和类似 bit.ly 短链的 Python 实现。<a href="https://github.com/Alir3z4/python-shorturl">官网</a></li><li>webargs：一个解析 HTTP 请求参数的库，内置对流行 web 框架的支持，包括 Flask, Django, Bottle, Tornado 和 Pyramid。<a href="https://github.com/sloria/webargs">官网</a></li></ul><h3 id="HTML-处理"><a href="#HTML-处理" class="headerlink" title="HTML 处理"></a>HTML 处理</h3><p>处理 HTML 和 XML 的库。</p><ul><li>BeautifulSoup：以 Python 风格的方式来对 HTML 或 XML 进行迭代，搜索和修改。<a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/">官网</a></li><li>bleach：一个基于白名单的 HTML 清理和文本链接库。<a href="http://bleach.readthedocs.org/en/latest/">官网</a></li><li>cssutils：一个 Python 的 CSS 库。<a href="https://pypi.python.org/pypi/cssutils/">官网</a></li><li>html5lib：一个兼容标准的 HTML 文档和片段解析及序列化库。<a href="https://github.com/html5lib/html5lib-python">官网</a></li><li>lxml：一个非常快速，简单易用，功能齐全的库，用来处理 HTML 和 XML。<a href="http://lxml.de/">官网</a></li><li>MarkupSafe：为 Python 实现 XML/HTML/XHTML 标记安全字符串。<a href="https://github.com/pallets/markupsafe">官网</a></li><li>pyquery：一个解析 HTML 的库，类似 jQuery。<a href="https://github.com/gawel/pyquery">官网</a></li><li>requests-html：人性化的，Pythonic 的 HTML 解析库。<a href="https://github.com/kennethreitz/requests-html">官网</a></li><li>untangle：将 XML 文档转换为 Python 对象，使其可以方便的访问。<a href="https://github.com/stchris/untangle">官网</a></li><li>xhtml2pdf：HTML/CSS 转 PDF 工具。<a href="https://github.com/xhtml2pdf/xhtml2pdf">官网</a></li><li>xmltodict：像处理 JSON 一样处理 XML。<a href="https://github.com/martinblech/xmltodict">官网</a></li></ul><p>爬取网络站点的库</p><ul><li>Scrapy：一个快速高级的屏幕爬取及网页采集框架。<a href="http://scrapy.org/">官网</a></li><li>ScrapydWeb：一个用于 Scrapyd 集群管理的全功能 web UI，支持 Scrapy 日志分析和可视化，自动打包，定时器任务和邮件通知等特色功能。<a href="https://github.com/my8100/scrapydweb">官网</a></li><li>cola：一个分布式爬虫框架。<a href="https://github.com/chineking/cola">官网</a></li><li>Demiurge：基于 PyQuery 的爬虫微型框架。<a href="https://github.com/matiasb/demiurge">官网</a></li><li>feedparser：通用 feed 解析器。<a href="http://pythonhosted.org/feedparser/">官网</a></li><li>Grab：站点爬取框架。<a href="http://grablib.org/">官网</a></li><li>MechanicalSoup：用于自动和网络站点交互的 Python 库。<a href="https://github.com/hickford/MechanicalSoup">官网</a></li><li>portia：Scrapy 可视化爬取。<a href="https://github.com/scrapinghub/portia">官网</a></li><li>pyspider：一个强大的爬虫系统。<a href="https://github.com/binux/pyspider">官网</a></li><li>RoboBrowser：一个简单的，Python 风格的库，用来浏览网站，而不需要一个独立安装的浏览器。<a href="https://github.com/jmcarp/robobrowser">官网</a></li></ul><h3 id="网页内容提取"><a href="#网页内容提取" class="headerlink" title="网页内容提取"></a>网页内容提取</h3><p>用于进行网页内容提取的库。</p><ul><li>Haul：一个可以扩展的图像爬取工具。<a href="https://github.com/vinta/Haul">官网</a></li><li>html2text：将 HTML 转换为 Markdown 格式文本。<a href="https://github.com/Alir3z4/html2text">官网</a></li><li>lassie：人性化的网页内容检索库。<a href="https://github.com/michaelhelmick/lassie">官网</a></li><li>micawber：一个小型网页内容提取库，用来从 URLs 提取富内容。<a href="https://github.com/coleifer/micawber">官网</a></li><li><a href="http://hao.importnew.com/python-newspaper/">newspaper</a>：使用 Python 进行新闻提取，文章提取以及内容策展。<a href="https://github.com/codelucas/newspaper">官网</a></li><li>opengraph：一个用来解析开放内容协议(Open Graph Protocol)的 Python 模块。<a href="https://github.com/erikriver/opengraph">官网</a></li><li><a href="http://hao.importnew.com/python-goose/">python-goose</a>：HTML 内容/文章提取器(python2)。<a href="https://github.com/grangier/python-goose">官网</a></li><li><a href="http://goose3.readthedocs.io/en/latest/index.html">goose3</a>: HTML 内容/文章提取器(python3)。<a href="https://github.com/goose3/goose3">官网</a></li><li>python-readability：arc90 公司 readability 工具的 Python 高速端口。<a href="https://github.com/buriy/python-readability">官网</a></li><li>sanitize：为杂乱的数据世界带来调理性。<a href="https://github.com/Alir3z4/python-sanitize">官网</a></li><li>sumy：一个为文本文件和 HTML 页面进行自动摘要的模块。<a href="https://github.com/miso-belica/sumy">官网</a></li><li>textract：从任何格式的文档中提取文本，Word，PowerPoint，PDFs 等等。<a href="https://github.com/deanmalmgren/textract">官网</a></li></ul><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>进行表单操作的库。</p><ul><li>Deform：Python HTML 表单生成库，受到了 formish 表单生成库的启发。<a href="http://deform.readthedocs.org/en/latest/">官网</a></li><li>django-bootstrap3：集成了 Bootstrap 3 的 Django。<a href="https://github.com/dyve/django-bootstrap3">官网</a></li><li>django-crispy-forms：一个 Django 应用，他可以让你以一种非常优雅且 DRY（Don’t repeat yourself） 的方式来创建美观的表单。<a href="http://django-crispy-forms.readthedocs.org/en/latest/">官网</a></li><li>django-remote-forms：一个平台独立的 Django 表单序列化工具。<a href="https://github.com/WiserTogether/django-remote-forms">官网</a></li><li>WTForms：一个灵活的表单验证和呈现库。<a href="http://wtforms.readthedocs.org/en/latest/">官网</a></li><li>WTForms-JSON：一个 WTForms 扩展，用来处理 JSON 数据。<a href="http://wtforms-json.readthedocs.org/en/latest/">官网</a></li></ul><h3 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h3><p>数据验证库。多用于表单验证。</p><ul><li>Cerberus：一个映射验证器（mappings-validator）。支持多种规则，提供归一化功能，可以方便地定制为 Python 风格的 schema 定义。<a href="http://docs.python-cerberus.org/en/stable/">官网</a></li><li>colander：一个用于对从 XML, JSON，HTML 表单获取的数据或其他同样简单的序列化数据进行验证和反序列化的系统。<a href="http://docs.pylonsproject.org/projects/colander/en/latest/">官网</a></li><li>kmatch：一种用于匹配/验证/筛选 Python 字典的语言。<a href="https://github.com/ambitioninc/kmatch">官网</a></li><li>schema：一个用于对 Python 数据结构进行验证的库。<a href="https://github.com/keleshev/schema">官网</a></li><li>Schematics：数据结构验证。<a href="https://github.com/schematics/schematics">官网</a></li><li>valideer：轻量级可扩展的数据验证和适配库。<a href="https://github.com/podio/valideer">官网</a></li><li>voluptuous：一个 Python 数据验证库。主要是为了验证传入 Python 的 JSON，YAML 等数据。<a href="https://github.com/alecthomas/voluptuous">官网</a></li><li>jsonschema：<a href="http://json-schema.org/">JSON Schema</a>的 python 实现，用于 JSON 数据的验证。<a href="https://github.com/Julian/jsonschema">官网</a></li></ul><h3 id="反垃圾技术"><a href="#反垃圾技术" class="headerlink" title="反垃圾技术"></a>反垃圾技术</h3><p>帮助你和电子垃圾进行战斗的库。</p><ul><li>django-simple-captcha：一个简单、高度可定制的 Django 应用，可以为任何 Django 表单添加验证码。<a href="https://github.com/mbi/django-simple-captcha">官网</a></li><li>django-simple-spam-blocker：一个用于 Django 的简单的电子垃圾屏蔽工具。<a href="https://github.com/moqada/django-simple-spam-blocker">官网</a></li></ul><h3 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h3><p>用来进行标记的库。</p><ul><li>django-taggit：简单的 Django 标记工具。<a href="https://github.com/alex/django-taggit">官网</a></li></ul><h3 id="管理面板"><a href="#管理面板" class="headerlink" title="管理面板"></a>管理面板</h3><p>管理界面库。</p><ul><li>Ajenti：一个你的服务器值得拥有的管理面板。<a href="https://github.com/ajenti/ajenti">官网</a></li><li>django-suit：Django 管理界面的一个替代品 (仅对于非商业用途是免费的)。<a href="http://djangosuit.com/">官网</a></li><li>django-xadmin：Django admin 的一个替代品，具有很多不错的功能。<a href="https://github.com/sshwsfc/django-xadmin">官网</a></li><li>flask-admin：一个用于 Flask 的简单可扩展的管理界面框架。<a href="https://github.com/flask-admin/flask-admin">官网</a></li><li>flower：一个对 Celery 集群进行实时监控和提供 web 管理界面的工具。<a href="https://github.com/mher/flower">官网</a></li><li>Grappelli：Django 管理界面的一个漂亮的皮肤。<a href="http://grappelliproject.com/">官网</a></li><li>Wooey：一个 Django 应用，可以为 Python 脚本创建 web 用户界面。<a href="https://github.com/wooey/wooey">官网</a></li></ul><h3 id="静态站点生成器"><a href="#静态站点生成器" class="headerlink" title="静态站点生成器"></a>静态站点生成器</h3><p>静态站点生成器是一个软件，它把文本和模板作为输入，然后输出 HTML 文件。</p><ul><li>Pelican：使用 Markdown 或 ReST 来处理内容， Jinja 2 来制作主题。支持 DVCS, Disqus.。AGPL 许可。<a href="http://blog.getpelican.com/">官网</a></li><li>Cactus：为设计师设计的静态站点生成器。<a href="https://github.com/koenbok/Cactus/">官网</a></li><li>Hyde：基于 Jinja2 的静态站点生成器。<a href="http://hyde.github.io/">官网</a></li><li>Nikola：一个静态网站和博客生成器。<a href="https://www.getnikola.com/">官网</a></li><li>Tinkerer：Tinkerer 是一个博客引擎/静态站点生成器，由 Sphinx 驱动。<a href="http://tinkerer.me/">官网</a></li><li>Lektor：一个简单易用的静态 CMS 和博客引擎。<a href="https://www.getlektor.com/">官网</a></li></ul><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>操作系统进程启动及通信库。</p><ul><li>envoy：比 Python <a href="https://docs.python.org/2/library/subprocess.html">subprocess</a> 模块更人性化。<a href="https://github.com/kennethreitz/envoy">官网</a></li><li>sarge：另一 种 subprocess 模块的封装。<a href="http://sarge.readthedocs.org/en/latest/">官网</a></li><li>sh：一个完备的 subprocess 替代库。<a href="https://github.com/amoffat/sh">官网</a></li></ul><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p>用以进行并发和并行操作的库。</p><ul><li>multiprocessing：(Python 标准库) 基于进程的“线程”接口。<a href="https://docs.python.org/2/library/multiprocessing.html">官网</a></li><li>threading：(Python 标准库)更高层的线程接口。<a href="https://docs.python.org/2/library/threading.html">官网</a></li><li>eventlet：支持 WSGI 的异步框架。<a href="http://eventlet.net/">官网</a></li><li>gevent：一个基于协程的 Python 网络库，使用 <a href="https://github.com/python-greenlet/greenlet">greenlet</a>。<a href="http://www.gevent.org/">官网</a></li><li>Tomorrow：用于产生异步代码的神奇的装饰器语法实现。<a href="https://github.com/madisonmay/Tomorrow">官网</a></li><li>uvloop：在 libuv 之上超快速实现 asyncio 事件循环。<a href="https://github.com/MagicStack/uvloop">官网</a></li></ul><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>用于网络编程的库。</p><ul><li>asyncio：(Python 标准库) 异步 I/O, 事件循环, 协程以及任务。<a href="https://docs.python.org/3/library/asyncio.html">官网</a></li><li><a href="http://hao.importnew.com/twisted/">Twisted</a>：一个事件驱动的网络引擎。<a href="https://twistedmatrix.com/trac/">官网</a></li><li>pulsar：事件驱动的并发框架。<a href="https://github.com/quantmind/pulsar">官网</a></li><li>diesel：基于 Greenlet 的事件 I/O 框架。<a href="https://github.com/dieseldev/diesel">官网</a></li><li>pyzmq：一个 ZeroMQ 消息库的 Python 封装。<a href="http://zeromq.github.io/pyzmq/">官网</a></li><li>Toapi：一个轻巧，简单，快速的 Flask 库，致力于为所有网站提供 API 服务。<a href="https://github.com/gaojiuli/toapi">官网</a></li><li>txZMQ：基于 Twisted 的 ZeroMQ 消息库的 Python 封装。<a href="https://github.com/smira/txZMQ">官网</a></li></ul><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>帮助使用 WebSocket 的库。</p><ul><li>AutobahnPython：给 Python 、使用的 WebSocket &amp; WAMP 基于 Twisted 和 <a href="https://docs.python.org/3/library/asyncio.html">asyncio</a>。<a href="https://github.com/crossbario/autobahn-python">官网</a></li><li>Crossbar：开源统一应用路由(Websocket &amp; WAMP for Python on Autobahn)。<a href="https://github.com/crossbario/crossbar/">官网</a></li><li>django-socketio：给 Django 用的 WebSockets。<a href="https://github.com/stephenmcd/django-socketio">官网</a></li><li>WebSocket-for-Python：为 Python2/3 以及 PyPy 编写的 WebSocket 客户端和服务器库。<a href="https://github.com/Lawouach/WebSocket-for-Python">官网</a></li></ul><h3 id="WSGI-服务器"><a href="#WSGI-服务器" class="headerlink" title="WSGI 服务器"></a>WSGI 服务器</h3><p>兼容 WSGI 的 web 服务器</p><ul><li>gunicorn：Pre-forked, 部分是由 C 语言编写的。<a href="https://pypi.python.org/pypi/gunicorn">官网</a></li><li>uwsgi：uwsgi 项目的目的是开发一组全栈工具，用来建立托管服务， 由 C 语言编写。<a href="https://uwsgi-docs.readthedocs.org/en/latest/">官网</a></li><li><a href="http://hao.importnew.com/bjoern/">bjoern</a>：异步，非常快速，由 C 语言编写。<a href="https://pypi.python.org/pypi/bjoern">官网</a></li><li>fapws3：异步 (仅对于网络端)，由 C 语言编写。<a href="http://www.fapws.org/">官网</a></li><li>meinheld：异步，部分是由 C 语言编写的。<a href="https://pypi.python.org/pypi/meinheld">官网</a></li><li>netius：异步，非常快速。<a href="https://github.com/hivesolutions/netius">官网</a></li><li>paste：多线程，稳定，久经考验。<a href="http://pythonpaste.org/">官网</a></li><li>rocket：多线程。<a href="https://pypi.python.org/pypi/rocket">官网</a></li><li>waitress：多线程, 是它驱动着 Pyramid 框架。<a href="https://waitress.readthedocs.org/en/latest/">官网</a></li><li>Werkzeug：一个 WSGI 工具库，驱动着 Flask ，而且可以很方便大嵌入到你的项目中去。<a href="http://werkzeug.pocoo.org/">官网</a></li></ul><h3 id="RPC-服务器"><a href="#RPC-服务器" class="headerlink" title="RPC 服务器"></a>RPC 服务器</h3><p>兼容 RPC 的服务器。</p><ul><li>SimpleJSONRPCServer：这个库是 JSON-RPC 规范的一个实现。<a href="https://github.com/joshmarshall/jsonrpclib/">官网</a></li><li>SimpleXMLRPCServer：(Python 标准库) 简单的 XML-RPC 服务器实现，单线程。<a href="https://docs.python.org/2/library/simplexmlrpcserver.html">官网</a></li><li>zeroRPC：zerorpc 是一个灵活的 RPC 实现，基于 ZeroMQ 和 MessagePack。<a href="https://github.com/0rpc/zerorpc-python">官网</a></li></ul><h3 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h3><ul><li>cryptography：这个软件包意在提供密码学基本内容和方法提供给 Python 开发者。<a href="https://cryptography.io/en/latest/">官网</a></li><li>hashids：在 Python 中实现 <a href="http://hashids.org/">hashids</a> 。<a href="https://github.com/davidaurelio/hashids-python">官网</a></li><li>Paramiko：SSHv2 协议的 Python (2.6+, 3.3+) ，提供客户端和服务端的功能。<a href="http://www.paramiko.org/">官网</a></li><li>Passlib：安全密码存储／哈希库，<a href="https://pythonhosted.org/passlib/">官网</a></li><li>PyCrypto：Python 密码学工具箱。<a href="https://www.dlitz.net/software/pycrypto/">官网</a></li><li>PyNacl：网络和密码学(NaCl) 库的 Python 绑定。<a href="https://github.com/pyca/pynacl">官网</a></li></ul><h3 id="图形用户界面"><a href="#图形用户界面" class="headerlink" title="图形用户界面"></a>图形用户界面</h3><p>用来创建图形用户界面程序的库。</p><ul><li>curses：内建的 <a href="http://www.gnu.org/software/ncurses/">ncurses</a> 封装，用来创建终端图形用户界面。<a href="https://docs.python.org/2/library/curses.html#module-curses">官网</a></li><li>enaml：使用类似 QML 的 Declaratic 语法来创建美观的用户界面。<a href="https://github.com/nucleic/enaml">官网</a></li><li><a href="http://hao.importnew.com/kivy/">kivy</a>：一个用来创建自然用户交互（NUI）应用程序的库，可以运行在 Windows, Linux, Mac OS X, Android 以及 iOS 平台上。<a href="https://kivy.org/">官网</a></li><li>pyglet：一个 Python 的跨平台窗口及多媒体库。<a href="https://bitbucket.org/pyglet/pyglet/wiki/Home">官网</a></li><li>PyQt：跨平台用户界面框架 <a href="http://www.qt.io/">Qt</a> 的 Python 绑定 ，支持 Qt v4 和 Qt v5。<a href="https://riverbankcomputing.com/software/pyqt/intro">官网</a></li><li>PySide：跨平台用户界面框架 <a href="http://www.qt.io/">Qt</a> 的 Python 绑定 ，支持 Qt v4。<a href="https://wiki.qt.io/PySide">官网</a></li><li>Tkinter：Tkinter 是 Python GUI 的一个事实标准库。<a href="https://wiki.python.org/moin/TkInter">官网</a></li><li>Toga：一个 Python 原生的, 操作系统原生的 GUI 工具包。<a href="https://github.com/pybee/toga">官网</a></li><li>urwid：一个用来创建终端 GUI 应用的库，支持组件，事件和丰富的色彩等。<a href="http://urwid.org/">官网</a></li><li>wxPython：wxPython 是 wxWidgets C++ 类库和 Python 语言混合的产物。<a href="http://wxpython.org/">官网</a></li><li>PyGObject：GLib/GObject/GIO/GTK+ (GTK+3) 的 Python 绑定。<a href="https://wiki.gnome.org/Projects/PyGObject">官网</a></li><li>Flexx：Flexx 是一个纯 Python 语言编写的用来创建 GUI 程序的工具集，它使用 web 技术进行界面的展示。<a href="https://github.com/zoofIO/flexx">官网</a></li></ul><h3 id="游戏开发"><a href="#游戏开发" class="headerlink" title="游戏开发"></a>游戏开发</h3><p>超赞的游戏开发库。</p><ul><li>Cocos2d：cocos2d 是一个用来开发 2D 游戏， 示例和其他图形/交互应用的框架。基于 pyglet。<a href="http://cocos2d.org/">官网</a></li><li>Panda3D：由迪士尼开发的 3D 游戏引擎，并由卡内基梅陇娱乐技术中心负责维护。使用 C++ 编写, 针对 Python 进行了完全的封装。<a href="https://www.panda3d.org/">官网</a></li><li>Pygame：Pygame 是一组 Python 模块，用来编写游戏。<a href="http://www.pygame.org/news.html">官网</a></li><li>PyOgre：Ogre 3D 渲染引擎的 Python 绑定，可以用来开发游戏和仿真程序等任何 3D 应用。<a href="http://www.ogre3d.org/tikiwiki/PyOgre">官网</a></li><li>PyOpenGL：OpenGL 的 Python 绑定及其相关 APIs。<a href="http://pyopengl.sourceforge.net/">官网</a></li><li>PySDL2：SDL2 库的封装，基于 ctypes。<a href="http://pysdl2.readthedocs.org/en/latest/">官网</a></li><li>RenPy：一个视觉小说（visual novel）引擎。<a href="https://www.renpy.org/">官网</a></li></ul><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>用来生成和操作日志的库。</p><ul><li>logging：(Python 标准库) 为 Python 提供日志功能。<a href="https://docs.python.org/2/library/logging.html">官网</a></li><li>logbook：Logging 库的替代品。<a href="http://pythonhosted.org/Logbook/">官网</a></li><li>Eliot：为复杂的和分布式系统创建日志。<a href="https://eliot.readthedocs.org/en/latest/">官网</a></li><li>Raven：Sentry 的 Python 客户端。<a href="http://raven.readthedocs.org/en/latest/">官网</a></li><li>Sentry：实时记录和收集日志的服务器。<a href="https://pypi.python.org/pypi/sentry">官网</a></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>进行代码库测试和生成测试数据的库。</p><ul><li>测试框架<ul><li>unittest：(Python 标准库) 单元测试框架。<a href="https://docs.python.org/2/library/unittest.html">官网</a></li><li>nose：nose 扩展了 unittest 的功能。<a href="https://nose.readthedocs.org/en/latest/">官网</a></li><li>contexts：一个 Python 3.3+ 的 BDD 框架。受到 C# – Machine.Specifications 的启发。<a href="https://github.com/benjamin-hodgson/Contexts">官网</a></li><li>hypothesis：Hypothesis 是一个基于先进的 Quickcheck 风格特性的测试库。<a href="https://github.com/DRMacIver/hypothesis">官网</a></li><li>mamba：Python 的终极测试工具， 拥护 BDD。<a href="http://nestorsalceda.github.io/mamba/">官网</a></li><li>PyAutoGUI：PyAutoGUI 是一个人性化的跨平台 GUI 自动测试模块。<a href="https://github.com/asweigart/pyautogui">官网</a></li><li>pyshould：Should 风格的断言，基于 <a href="https://github.com/hamcrest/PyHamcrest">PyHamcrest</a>。<a href="https://github.com/drslump/pyshould">官网</a></li><li>pytest：一个成熟的全功能 Python 测试工具。<a href="http://pytest.org/latest/">官网</a></li><li>green：干净，多彩的测试工具。<a href="https://github.com/CleanCut/green">官网</a></li><li>pyvows：BDD 风格的测试工具，受 Vows.js 的启发。<a href="http://heynemann.github.io/pyvows/">官网</a></li><li>Robot Framework：一个通用的自动化测试框架。<a href="https://github.com/robotframework/robotframework">官网</a></li></ul></li><li>Web 测试<ul><li>Selenium：<a href="http://www.seleniumhq.org/">Selenium</a> WebDriver 的 Python 绑定。<a href="https://pypi.python.org/pypi/selenium">官网</a></li><li>locust：使用 Python 编写的，可扩展的用户加载测试工具。<a href="https://github.com/locustio/locust">官网</a></li><li>sixpack：一个和语言无关的 A/B 测试框架。<a href="https://github.com/seatgeek/sixpack">官网</a></li><li>splinter：开源的 web 应用测试工具。<a href="https://splinter.readthedocs.org/en/latest/">官网</a></li></ul></li><li>Mock 测试<ul><li>mock：(Python 标准库) 一个用于伪造测试的库。<a href="https://docs.python.org/3/library/unittest.mock.html">官网</a></li><li>doublex：Python 的一个功能强大的 doubles  测试框架。<a href="https://pypi.python.org/pypi/doublex">官网</a></li><li>freezegun：通过伪造日期模块来生成不同的时间。<a href="https://github.com/spulec/freezegun">官网</a></li><li>httmock：针对 Python 2.6+ 和 3.2+ 生成 伪造请求的库。<a href="https://github.com/patrys/httmock">官网</a></li><li>httpretty：Python 的 HTTP 请求 mock 工具。<a href="http://falcao.it/HTTPretty/">官网</a></li><li>responses：伪造 Python 中的 requests 库的一个通用库。<a href="https://github.com/getsentry/responses">官网</a></li><li>VCR.py：在你的测试中记录和重放 HTTP 交互。<a href="https://github.com/kevin1024/vcrpy">官网</a></li></ul></li><li>对象工厂<ul><li>factoryboy：一个 Python 用的测试固件 (test fixtures) 替代库。<a href="https://github.com/rbarrois/factoryboy">官网</a></li><li>mixer：另外一个测试固件 (test fixtures) 替代库，支持 Django, Flask, SQLAlchemy, Peewee 等。<a href="https://github.com/klen/mixer">官网</a></li><li>modelmommy：为 Django 测试创建随机固件。<a href="https://github.com/vandersonmota/modelmommy">官网</a></li></ul></li><li>代码覆盖率<ul><li>coverage：代码覆盖率测量。<a href="https://pypi.python.org/pypi/coverage">官网</a></li><li>Codecov：一个代码覆盖率测试工具，为开源项目提供免费代码覆盖率测试服务。<a href="https://codecov.io/">官网</a></li></ul></li><li>伪数据<ul><li>faker：一个 Python 库，用来生成伪数据。<a href="http://www.joke2k.net/faker/">官网</a></li><li>fake2db：伪数据库生成器。<a href="https://github.com/emirozer/fake2db">官网</a></li><li>radar：生成随机的日期/时间。<a href="https://pypi.python.org/pypi/radar">官网</a></li></ul></li><li>错误处理<ul><li>FuckIt.py：FuckIt.py 使用最先进的技术来保证你的 Python 代码无论对错都能继续运行。<a href="https://github.com/ajalt/fuckitpy">官网</a></li></ul></li></ul><h3 id="代码分析和-Lint-工具"><a href="#代码分析和-Lint-工具" class="headerlink" title="代码分析和 Lint 工具"></a>代码分析和 Lint 工具</h3><p>进行代码分析，解析和操作代码库的库和工具。</p><ul><li>代码分析<ul><li>coala：语言独立和易于扩展的代码分析应用程序。<a href="http://coala-analyzer.org/">官网</a></li><li>code2flow：把你的 Python 和 JavaScript 代码转换为流程图。<a href="https://github.com/scottrogowski/code2flow">官网</a></li><li>pycallgraph：这个库可以把你的 Python 应用的流程(调用图)进行可视化。<a href="https://github.com/gak/pycallgraph">官网</a></li><li>pysonar2：Python 类型推断和检索工具。<a href="https://github.com/yinwang0/pysonar2">官网</a></li></ul></li><li>Lint 工具<ul><li>Flake8：模块化源码检查工具: pep8, pyflakes 以及 co。<a href="https://pypi.python.org/pypi/flake8">官网</a></li><li>Pylint：一个完全可定制的源码分析器。<a href="https://www.pylint.org/">官网</a></li><li>YAPF: Google 的 Python 代码格式化工具。<a href="https://github.com/google/yapf">官网</a></li><li>pylama：Python 和 JavaScript 的代码审查工具。<a href="https://pylama.readthedocs.org/en/latest/">官网</a></li></ul></li><li>代码格式化<ul><li>autopep8：自动格式化 Python 代码，以使其符合 PEP8 规范。<a href="https://github.com/hhatto/autopep8">官网</a></li><li>black：一个坚定的 Python 代码格式化工具。<a href="https://github.com/ambv/black">官网</a></li></ul></li></ul><h3 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><p>用来进行代码调试的库。</p><ul><li>调试器<ul><li>ipdb：IPython 启用的 <a href="https://docs.python.org/2/library/pdb.html">pdb</a>。<a href="https://pypi.python.org/pypi/ipdb">官网</a></li><li>pudb：全屏，基于控制台的 Python 调试器。<a href="https://pypi.python.org/pypi/pudb">官网</a></li><li>pyringe：可以在 Python 进程中附加和注入代码的调试器。<a href="https://github.com/google/pyringe">官网</a></li><li>wdb：一个奇异的 web 调试器，通过 WebSockets 工作。<a href="https://github.com/Kozea/wdb">官网</a></li><li>winpdb：一个具有图形用户界面的 Python 调试器，可以进行远程调试，基于 rpdb2。<a href="http://winpdb.org/">官网</a></li><li>django-debug-toolbar：为 Django 显示各种调试信息。<a href="https://github.com/django-debug-toolbar/django-debug-toolbar">官网</a></li><li>django-devserver：一个 Django 运行服务器的替代品。<a href="https://github.com/dcramer/django-devserver">官网</a></li><li>flask-debugtoolbar：django-debug-toolbar 的 flask 版。<a href="https://github.com/mgood/flask-debugtoolbar">官网</a></li></ul></li><li>性能分析器<ul><li>lineprofiler：逐行性能分析。<a href="https://github.com/rkern/lineprofiler">官网</a></li><li><a href="http://hao.importnew.com/memory_profiler/">Memory Profiler</a>：监控 Python 代码的内存使用。<a href="http://pypi.python.org/pypi/memory_profiler">官网</a>、<a href="https://github.com/fabianp/memoryprofiler">内存</a></li><li>profiling：一个交互式 Python 性能分析工具。<a href="https://github.com/what-studio/profiling">官网</a></li></ul></li><li>其他<ul><li>pyelftools：解析和分析 ELF 文件以及 DWARF 调试信息。<a href="https://github.com/eliben/pyelftools">官网</a></li><li>python-statsd：<a href="https://github.com/etsy/statsd/">statsd</a> 服务器的 Python 客户端。<a href="https://github.com/WoLpH/python-statsd">官网</a></li></ul></li></ul><h3 id="科学计算和数据分析"><a href="#科学计算和数据分析" class="headerlink" title="科学计算和数据分析"></a>科学计算和数据分析</h3><p>用来进行科学计算和数据分析的库。</p><ul><li>astropy：一个天文学 Python 库。<a href="http://www.astropy.org/">官网</a></li><li><a href="http://hao.importnew.com/bcbio-nextgen/">bcbio-nextgen</a>：这个工具箱为全自动高通量测序分析提供符合最佳实践的处理流程。<a href="https://github.com/chapmanb/bcbio-nextgen">官网</a></li><li>bccb：生物分析相关代码集合。<a href="https://github.com/chapmanb/bcbb">官网</a></li><li>Biopython：Biopython 是一组可以免费使用的用来进行生物计算的工具。<a href="http://biopython.org/wiki/MainPage">官网</a></li><li><a href="http://hao.importnew.com/blaze/">blaze</a>：NumPy 和 Pandas 的大数据接口。<a href="http://blaze.readthedocs.org/en/latest/index.html">官网</a></li><li><a href="http://hao.importnew.com/cclib/">cclib</a>：一个用来解析和解释计算化学软件包输出结果的库。<a href="http://cclib.github.io/">官网</a></li><li>NetworkX：一个为复杂网络设计的高性能软件。<a href="https://networkx.github.io/">官网</a></li><li>Neupy：执行和测试各种不同的人工神经网络算法。<a href="http://neupy.com/pages/home.html">官网</a></li><li>Numba：Python JIT (just in time) 编译器，针对科学用的 Python ，由 Cython 和 NumPy 的开发者开发。<a href="http://numba.pydata.org/">官网</a></li><li><a href="http://hao.importnew.com/numpy/">NumPy</a>：使用 Python 进行科学计算的基础包。<a href="http://www.numpy.org/">官网</a></li><li>Open Babel：一个化学工具箱，用来描述多种化学数据。<a href="http://openbabel.org/wiki/MainPage">官网</a></li><li><a href="http://hao.importnew.com/open-mining/">Open Mining</a>：使用 Python 挖掘商业情报 (BI) (Pandas web 接口)。<a href="https://github.com/mining/mining">官网</a></li><li><a href="http://hao.importnew.com/orange/">orange</a>：通过可视化编程或 Python 脚本进行数据挖掘，数据可视化，分析和机器学习。<a href="http://orange.biolab.si/">官网</a></li><li>Pandas：提供高性能，易用的数据结构和数据分析工具。<a href="http://pandas.pydata.org/">官网</a></li><li>PyDy：PyDy 是 Python Dynamics 的缩写，用来为动力学运动建模工作流程提供帮助， 基于 NumPy, SciPy, IPython 和 matplotlib。<a href="http://www.pydy.org/">官网</a></li><li><a href="http://hao.importnew.com/pymc/">PyMC</a>：马尔科夫链蒙特卡洛采样工具。<a href="https://github.com/pymc-devs/pymc3">官网</a></li><li>RDKit：化学信息学和机器学习软件。<a href="http://www.rdkit.org/">官网</a></li><li><a href="http://hao.importnew.com/scipy/">SciPy</a>：由一些基于 Python ，用于数学，科学和工程的开源软件构成的生态系统。<a href="http://www.scipy.org/">官网</a></li><li><a href="http://hao.importnew.com/statsmodels/">statsmodels</a>：统计建模和计量经济学。<a href="https://github.com/statsmodels/statsmodels">官网</a></li><li>SymPy：一个用于符号数学的 Python 库。<a href="https://github.com/sympy/sympy">官网</a></li><li>zipline：一个 Python 算法交易库。<a href="https://github.com/quantopian/zipline">官网</a></li><li><a href="http://hao.importnew.com/bayesian-belief-networks/">Bayesian-belief-networks</a>：优雅的贝叶斯信念网络框架。<a href="https://github.com/eBay/bayesian-belief-networks">官网</a></li></ul><h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><p>进行数据可视化的库。 参见: <a href="https://github.com/sorrycc/awesome-javascript#data-visualization">awesome-javascript</a>。</p><ul><li>matplotlib：一个 Python 2D 绘图库。<a href="http://matplotlib.org/">官网</a></li><li>bokeh：用 Python 进行交互式 web 绘图。<a href="https://github.com/bokeh/bokeh">官网</a></li><li>ggplot：ggplot2 给 R 提供的 API 的 Python 版本。<a href="https://github.com/yhat/ggplot">官网</a></li><li>plotly：协同 Python 和 matplotlib 工作的 web 绘图库。<a href="https://plot.ly/python/">官网</a></li><li>pyecharts：基于百度 Echarts 的数据可视化库。<a href="https://github.com/chenjiandongx/pyecharts">官网</a></li><li>pygal：一个 Python SVG 图表创建工具。<a href="http://www.pygal.org/en/latest/">官网</a></li><li>pygraphviz：Graphviz 的 Python 接口。<a href="https://pypi.python.org/pypi/pygraphviz">官网</a></li><li>PyQtGraph：交互式实时 2D/3D/ 图像绘制及科学/工程学组件。<a href="http://www.pyqtgraph.org/">官网</a></li><li>SnakeViz：一个基于浏览器的 Python’s cProfile 模块输出结果查看工具。<a href="http://jiffyclub.github.io/snakeviz/">官网</a></li><li>vincent：把 Python 转换为 Vega 语法的转换工具。<a href="https://github.com/wrobstory/vincent">官网</a></li><li>VisPy：基于 OpenGL 的高性能科学可视化工具。<a href="http://vispy.org/">官网</a></li></ul><h3 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h3><p>计算机视觉库。</p><ul><li>OpenCV：开源计算机视觉库。<a href="http://opencv.org/">官网</a></li><li>pyocr：Tesseract 和 Cuneiform 的包装库。<a href="https://github.com/jflesch/pyocr">官网</a></li><li>pytesseract：<a href="https://github.com/tesseract-ocr">Google Tesseract OCR</a> 的另一包装库。<a href="https://github.com/madmaze/pytesseract">官网</a></li><li><a href="http://hao.importnew.com/simplecv/">SimpleCV</a>：一个用来创建计算机视觉应用的开源框架。<a href="http://simplecv.org/">官网</a></li></ul><h3 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h3><p>机器学习库。 参见: <a href="https://github.com/josephmisiti/awesome-machine-learning#python">awesome-machine-learning</a>.</p><ul><li>Caffe: 一个 <a href="https://github.com/BVLC/caffe">Caffe</a> 的 python 接口。<a href="http://caffe.berkeleyvision.org/">官网</a></li><li><a href="https://github.com/caffe2/caffe2/">Caffe2</a>：一个轻量级的，模块化的，可扩展的深度学习框架。<a href="https://caffe2.ai/">官网</a></li><li>Crab：灵活、快速的推荐引擎。<a href="https://github.com/muricoca/crab">官网</a></li><li>gensim：人性化的话题建模库。<a href="https://github.com/piskvorky/gensim">官网</a></li><li>hebel：GPU 加速的深度学习库。<a href="https://github.com/hannes-brt/hebel">官网</a></li><li><a href="https://github.com/keras-team/keras">keras</a>: 以 tensorflow/theano/CNTK 为后端的深度学习封装库，快速上手神经网络。<a href="https://keras.io/">官网</a></li><li><a href="https://github.com/apache/incubator-mxnet">MXNet</a>：一个高效和灵活的深度学习框架。<a href="http://mxnet.incubator.apache.org/">官网</a></li><li>NuPIC：智能计算 Numenta 平台。<a href="https://github.com/numenta/nupic">官网</a></li><li>pattern：Python 网络挖掘模块。<a href="https://github.com/clips/pattern">官网</a></li><li><a href="http://hao.importnew.com/pybrain/">PyBrain</a>：另一个 Python 机器学习库。<a href="https://github.com/pybrain/pybrain">官网</a></li><li>pydeep：Python 深度学习库。<a href="https://github.com/andersbll/deeppy">官网</a></li><li><a href="http://hao.importnew.com/pylearn2/">Pylearn2</a>：一个基于 <a href="https://github.com/Theano/Theano">Theano</a> 的机器学习库。<a href="https://github.com/lisa-lab/pylearn2">官网</a></li><li><a href="http://hao.importnew.com/python-recsys/">python-recsys</a>：一个用来实现推荐系统的 Python 库。<a href="https://github.com/ocelma/python-recsys">官网</a></li><li><a href="https://github.com/pytorch/pytorch">Pytorch</a>：一个具有张量和动态神经网络，并有强大 GPU 加速能力的深度学习框架。<a href="http://pytorch.org/">官网</a></li><li>scikit-learn：基于 SciPy 构建的机器学习 Python 模块。<a href="http://scikit-learn.org/">官网</a></li><li>skflow：一个 <a href="https://github.com/tensorflow/tensorflow">TensorFlow</a> 的简化接口(模仿 scikit-learn)。<a href="https://github.com/tensorflow/skflow">官网</a></li><li><a href="https://github.com/tensorflow/tensorflow">TensorFlow</a>：谷歌开源的最受欢迎的深度学习框架。<a href="http://tensorflow.org/">官网</a></li><li>Theano：一个快速数值计算库。<a href="https://github.com/Theano/Theano">官网</a></li><li>vowpalporpoise：轻量级 <a href="https://github.com/JohnLangford/vowpalwabbit/">Vowpal Wabbit</a> 的 Python 封装。<a href="https://github.com/josephreisinger/vowpalporpoise">官网</a></li></ul><h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><p>MapReduce 框架和库。</p><ul><li><a href="http://hao.importnew.com/dpark/">dpark</a>：Spark 的 Python 克隆版，一个类似 MapReduce 的框架。<a href="https://github.com/douban/dpark">官网</a></li><li>dumbo：这个 Python 模块可以让人轻松的编写和运行 Hadoop 程序。<a href="https://github.com/klbostee/dumbo">官网</a></li><li>luigi：这个模块帮你构建批处理作业的复杂流水线。<a href="https://github.com/spotify/luigi">官网</a></li><li>mrjob：在 Hadoop 或 Amazon Web Services 上运行 MapReduce 任务。<a href="https://github.com/Yelp/mrjob">官网</a></li><li>PySpark：Spark 的 Python API 。<a href="http://spark.apache.org/docs/latest/programming-guide.html">官网</a></li><li>streamparse：运行针对事实数据流的 Python 代码。集成了 <a href="http://storm.apache.org/">Apache Storm</a>。<a href="https://github.com/Parsely/streamparse">官网</a></li></ul><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>使用 Python 进行函数式编程。</p><ul><li>CyToolz：Toolz 的 Cython 实现 : 高性能函数式工具。<a href="https://github.com/pytoolz/cytoolz/">官网</a></li><li>fn.py：在 Python 中进行函数式编程 : 实现了一些享受函数式编程缺失的功能。<a href="https://github.com/kachayev/fn.py">官网</a></li><li>funcy：炫酷又实用的函数式工具。<a href="https://github.com/Suor/funcy">官网</a></li><li>Toolz：一组用于迭代器，函数和字典的函数式编程工具。<a href="https://github.com/pytoolz/toolz">官网</a></li></ul><h3 id="第三方-API"><a href="#第三方-API" class="headerlink" title="第三方 API"></a>第三方 API</h3><p>用来访问第三方 API 的库。 参见： <a href="https://github.com/realpython/list-of-python-api-wrappers">List of Python API Wrappers and Libraries</a>。</p><ul><li>apache-libcloud：一个为各种云设计的 Python 库。<a href="https://libcloud.apache.org/">官网</a></li><li>boto：Amazon Web Services 的 Python 接口。<a href="https://github.com/boto/boto">官网</a></li><li>django-wordpress：WordPress models and views for Django.<a href="https://github.com/sunlightlabs/django-wordpress/">官网</a></li><li>facebook-sdk：Facebook 平台的 Python SDK.<a href="https://github.com/mobolic/facebook-sdk">官网</a></li><li>facepy：Facepy 让和 Facebook’s Graph API 的交互变得更容易。<a href="https://github.com/jgorset/facepy">官网</a></li><li>gmail：Gmail 的 Python 接口。<a href="https://github.com/charlierguo/gmail">官网</a></li><li>google-api-python-client：Python 用的 Google APIs 客户端库。<a href="https://github.com/google/google-api-python-client">官网</a></li><li>gspread：Google 电子表格的 Python API.<a href="https://github.com/burnash/gspread">官网</a></li><li>twython：Twitter API 的封装。<a href="https://github.com/ryanmcgrath/twython">官网</a></li></ul><h3 id="DevOps-工具"><a href="#DevOps-工具" class="headerlink" title="DevOps 工具"></a>DevOps 工具</h3><p>用于 DevOps 的软件和库。</p><ul><li>Ansible：一个非常简单的 IT 自动化平台。<a href="https://github.com/ansible/ansible">官网</a></li><li>SaltStack：基础设施自动化和管理系统。<a href="https://github.com/saltstack/salt">官网</a></li><li>OpenStack：用于构建私有和公有云的开源软件。<a href="http://www.openstack.org/">官网</a></li><li>Docker Compose：快速，分离的开发环境，使用 Docker。<a href="https://docs.docker.com/compose/">官网</a></li><li>Fabric：一个简单的，Python 风格的工具，用来进行远程执行和部署。<a href="http://www.fabfile.org/">官网</a></li><li>cuisine：为 Fabric 提供一系列高级函数。<a href="https://github.com/sebastien/cuisine">官网</a></li><li>Fabtools：一个用来编写超赞的 Fabric 文件的工具。<a href="https://github.com/ronnix/fabtools">官网</a></li><li>gitapi：Git 的纯 Python API。<a href="https://bitbucket.org/haard/gitapi">官网</a></li><li>hgapi：Mercurial 的纯 Python API。<a href="https://bitbucket.org/haard/hgapi">官网</a></li><li>honcho：<a href="https://github.com/ddollar/foreman">Foreman</a> 的 Python 克隆版，用来管理基于 <a href="https://devcenter.heroku.com/articles/procfile">Procfile</a> 的应用。<a href="https://github.com/nickstenning/honcho">官网</a></li><li>pexpect：Controlling interactive programs in a pseudo-terminal like 在一个伪终端中控制交互程序，就像 GNU expect 一样。<a href="https://github.com/pexpect/pexpect">官网</a></li><li>psutil：一个跨平台进程和系统工具模块。<a href="https://github.com/giampaolo/psutil">官网</a></li><li>supervisor：UNIX 的进程控制系统。<a href="https://github.com/Supervisor/supervisor">官网</a></li></ul><h3 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h3><p>任务调度库。</p><ul><li>APScheduler：轻巧但强大的进程内任务调度，使你可以调度函数。<a href="http://apscheduler.readthedocs.org/en/latest/">官网</a></li><li>django-schedule：一个 Django 排程应用。<a href="https://github.com/thauber/django-schedule">官网</a></li><li>doit：一个任务执行和构建工具。<a href="http://pydoit.org/">官网</a></li><li>gunnery：分布式系统使用的多用途任务执行工具 ，具有 web 交互界面。<a href="https://github.com/gunnery/gunnery">官网</a></li><li>Joblib：一组为 Python 提供轻量级作业流水线的工具。<a href="http://pythonhosted.org/joblib/index.html">官网</a></li><li>Plan：如有神助地编写 crontab 文件。<a href="https://github.com/fengsp/plan">官网</a></li><li>schedule：人性化的 Python 任务调度库。<a href="https://github.com/dbader/schedule">官网</a></li><li>Spiff：使用纯 Python 实现的强大的工作流引擎。<a href="https://github.com/knipknap/SpiffWorkflow">官网</a></li><li>TaskFlow：一个可以让你方便执行任务的 Python 库，一致并且可靠。<a href="http://docs.openstack.org/developer/taskflow/">官网</a> * AirFlow：Airflow 是Airbnb公司开源的，是一个工作流分配管理系统，通过有向非循环图的方式管理任务流程，设置任务依赖关系和时间调度。<a href="https://airflow.incubator.apache.org/">官方</a> </li></ul><h3 id="外来函数接口"><a href="#外来函数接口" class="headerlink" title="外来函数接口"></a>外来函数接口</h3><p>使用外来函数接口的库。</p><ul><li>cffi：用来调用 C 代码的外来函数接口。<a href="https://pypi.python.org/pypi/cffi">官网</a></li><li><a href="http://hao.importnew.com/ctypes/">ctypes</a>：(Python 标准库) 用来调用 C 代码的外来函数接口。<a href="https://docs.python.org/2/library/ctypes.html">官网</a></li><li>PyCUDA：Nvidia CUDA API 的封装。<a href="https://mathema.tician.de/software/pycuda/">官网</a></li><li>SWIG：简化的封装和接口生成器。<a href="http://www.swig.org/Doc1.3/Python.html">官网</a></li></ul><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><p>让 Python 更快的库。</p><ul><li>Cython：优化的 Python 静态编译器。使用类型混合使 Python 编译成 C 或 C++ 模块来获得性能的极大提升。<a href="http://cython.org/">官网</a></li><li>PeachPy：嵌入 Python 的 x86-64 汇编器。可以被用作 Python 内联的汇编器或者是独立的汇编器，用于 Windows, Linux, OS X, Native Client 或者 Go 。<a href="https://github.com/Maratyszcza/PeachPy">官网</a></li><li>PyPy：使用 Python 实现的 Python。解释器使用黑魔法加快 Python 运行速度且不需要加入额外的类型信息。<a href="http://pypy.org/">官网</a></li><li><a href="http://hao.importnew.com/pyston-llvm-jit/">Pyston</a>：使用 LLVM 和现代 JIT 技术构建的 Python 实现，目标是为了获得很好的性能。<a href="https://github.com/dropbox/pyston">官网</a></li><li>Stackless Python：一个强化版的 Python。<a href="https://bitbucket.org/stackless-dev/stackless/overview">官网</a></li></ul><h3 id="微软的-Windows-平台"><a href="#微软的-Windows-平台" class="headerlink" title="微软的 Windows 平台"></a>微软的 Windows 平台</h3><p>在 Windows 平台上进行 Python 编程。</p><ul><li>Python(x,y)：面向科学应用的 Python 发行版，基于 Qt 和 Spyder。<a href="http://python-xy.github.io/">官网</a></li><li>pythonlibs：非官方的 Windows 平台 Python 扩展二进制包。<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/">官网</a></li><li>PythonNet：Python 与 .NET 公共语言运行库 (CLR)的集成。<a href="https://github.com/pythonnet/pythonnet">官网</a></li><li>PyWin32：针对 Windows 的 Python 扩展。<a href="https://sourceforge.net/projects/pywin32/">官网</a></li><li>WinPython：Windows 7/8 系统下便携式开发环境。<a href="https://winpython.github.io/">官网</a></li></ul><h3 id="网络可视化和-SDN"><a href="#网络可视化和-SDN" class="headerlink" title="网络可视化和 SDN"></a>网络可视化和 SDN</h3><p>用来进行网络可视化和 SDN(软件定义网络)的工具和库。</p><ul><li>Mininet：一款流行的网络模拟器以及用 Python 编写的 API。<a href="http://mininet.org/">官网</a></li><li>POX：一个针对基于 Python 的软件定义网络应用（例如 OpenFlow SDN 控制器）的开源开发平台。<a href="https://github.com/noxrepo/pox">官网</a></li><li>Pyretic：火热的 SDN 编程语言中的一员，为网络交换机和模拟器提供强大的抽象能力。<a href="http://frenetic-lang.org/pyretic/">官网</a></li><li>SDX Platform：基于 SDN 的 IXP 实现，影响了 Mininet, POX 和 Pyretic。<a href="https://github.com/sdn-ixp/internet2award">官网</a></li><li>NRU：一个基于组件的软件定义网络框架。<a href="http://ryu.readthedocs.io/en/latest/">官网</a></li></ul><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><p>用来对硬件进行编程的库。</p><ul><li>ino：操作 <a href="https://www.arduino.cc/">Arduino</a> 的命令行工具。<a href="http://inotool.org/">官网</a></li><li>Pyro：Python 机器人编程库。<a href="http://pyrorobotics.com/">官网</a></li><li>PyUserInput：跨平台的，控制鼠标和键盘的模块。<a href="https://github.com/SavinaRoja/PyUserInput">官网</a></li><li>scapy：一个非常棒的操作数据包的库。<a href="https://github.com/secdev/scapy">官网</a></li><li>wifi：一个 Python 库和命令行工具用来在 Linux 平台上操作 WiFi。<a href="https://wifi.readthedocs.org/en/latest/">官网</a></li><li>Pingo：Pingo 为类似 Raspberry Pi，pcDuino， Intel Galileo 等设备提供统一的 API 用以编程。<a href="http://www.pingo.io/">官网</a></li></ul><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>帮助从 Python 2 向 Python 3 迁移的库。</p><ul><li>Python-Future：这就是 Python 2 和 Python 3 之间丢失的那个兼容性层。<a href="http://python-future.org/index.html">官网</a></li><li>Python-Modernize：使 Python 代码更加现代化以便最终迁移到 Python 3。<a href="https://github.com/mitsuhiko/python-modernize">官网</a></li><li>Six：Python 2 和 3 的兼容性工具。<a href="https://pypi.python.org/pypi/six">官网</a></li></ul><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>不属于上面任何一个类别，但是非常有用的库。</p><ul><li>blinker</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jobbole/awesome-python-cn&quot;&gt;https://github.com/jobbole/awesome-python-cn&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>实时-Web-日志分析工具-goaccess</title>
    <link href="https://a-little-bear.github.io/p/bf7c/"/>
    <id>https://a-little-bear.github.io/p/bf7c/</id>
    <published>2020-07-09T11:58:43.000Z</published>
    <updated>2020-07-09T12:02:04.736Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/allinurl/goaccess">https://github.com/allinurl/goaccess</a></p><p><a href="https://goaccess.io/download">https://goaccess.io/download</a></p><a id="more"></a><p>GoAccess <a href="https://travis-ci.org/allinurl/goaccess"><img src="https://camo.githubusercontent.com/004beafb285ceb7b9c6cef354d6d94c066be4166/68747470733a2f2f7472617669732d63692e6f72672f616c6c696e75726c2f676f6163636573732e7376673f6272616e63683d6d6173746572" alt="建立状态"></a> <a href="https://goaccess.io/"><img src="https://camo.githubusercontent.com/9d3d102d9e201b430afc00a1be39c79bcb5e7e56/68747470733a2f2f676f6163636573732e696f2f6261646765" alt="GoAccess"></a></p><h2 id="它是什么？"><a href="#它是什么？" class="headerlink" title="它是什么？"></a>它是什么？</h2><p>GoAccess是一个开源的<strong>实时Web日志分析器</strong>和交互式查看器，可在* nix系统上的<strong>终端</strong>中或通过 <strong>浏览器运行</strong>。它为需要动态服务器视觉报告的系统管理员提供了<strong>快速</strong>而有价值的HTTP统计信息。有关更多信息，<a href="https://goaccess.io/?src=gh">请</a>访问：<a href="https://goaccess.io/?src=gh">https</a> : <a href="https://goaccess.io/?src=gh">//goaccess.io</a>。</p><p><a href="https://goaccess.io/"><img src="https://camo.githubusercontent.com/e7b2b75b28987d1daf0e4cd812ef8ce8877592cf/68747470733a2f2f676f6163636573732e696f2f696d616765732f676f6163636573732d7265616c2d74696d652d7465726d2d67682e706e673f32303230303531373031" alt="GoAccess终端仪表板"></a> <a href="https://rt.goaccess.io/?src=gh"><img src="https://camo.githubusercontent.com/d8bb8f24fd472b605c37509b4520b0eacb96efb5/68747470733a2f2f676f6163636573732e696f2f696d616765732f676f6163636573732d7265616c2d74696d652d68746d6c2d67682e706e673f32303230303531373031" alt="GoAccess HTML仪表板"></a></p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><p>GoAccess解析指定的Web日志文件，并将数据输出到X终端。功能包括：</p><ul><li><strong>完全实时</strong><br>所有终端和指标的定时输出在终端输出上每200毫秒更新一次，在HTML输出上每秒钟更新一次。</li><li><strong>所需的最低配置</strong><br>您可以仅对访问日志文件运行它，选择日志格式，然后让GoAccess解析访问日志并向您显示统计信息。</li><li><strong>跟踪应用程序响应时间</strong><br>跟踪服务请求所花费的时间。如果您要跟踪使网站运行缓慢的页面，则非常有用。</li><li><strong>几乎所有Web日志格式</strong><br>GoAccess允许使用任何自定义日志格式字符串。预定义的选项包括Apache，Nginx，Amazon S3，Elastic Load Balancing，CloudFront等。</li><li><strong>增量日志处理</strong><br>需要数据持久性吗？GoAccess可以通过磁盘持久性选项逐步处理日志。</li><li><strong>仅用</strong><br>C编写了<strong>一个依赖关系</strong> GoAccess。要运行它，您仅需要ncurses作为依赖关系。而已。它甚至具有自己的Web套接字服务器<a href="http://gwsocket.io/">-http://gwsocket.io/</a>。</li><li><strong>访问者</strong><br>按小时或日期确定运行最慢的请求的点击数，访问者，带宽和指标。</li><li><strong>每个虚拟主机的指标</strong><br>有多个虚拟主机（服务器块）？它具有一个面板，该面板显示哪个虚拟主机正在消耗大多数Web服务器资源。</li><li><strong>颜色方案可定制的</strong><br>Tailor GoAccess可以适合您自己的颜色口味/方案。通过终端，或通过简单地在HTML输出上应用样式表。</li><li><strong>对大型数据集的支持</strong><br>GoAccess具有优化的内存哈希表，可解析大型日志。它具有很好的内存使用率和相当不错的性能。该存储也支持磁盘上的持久性。</li><li><strong>Docker支持</strong><br>能够从上游构建GoAccess的Docker映像。您仍可以使用卷映射和编辑对其进行完全配置<code>goaccess.conf</code>。请参阅 下面的<a href="https://github.com/allinurl/goaccess#docker">Docker</a>部分。</li></ul><h3 id="几乎所有的网络日志格式…"><a href="#几乎所有的网络日志格式…" class="headerlink" title="几乎所有的网络日志格式…"></a>几乎所有的网络日志格式…</h3><p>GoAccess允许任何自定义日志格式字符串。预定义的选项包括但不限于：</p><ul><li>Amazon CloudFront（下载发行版）。</li><li>亚马逊简单存储服务（S3）</li><li>AWS弹性负载平衡</li><li>组合日志格式（XLF / ELF）Apache Nginx的</li><li>通用日志格式（CLF）Apache</li><li>Google云端存储。</li><li>Apache虚拟主机</li><li>Squid本机格式。</li><li>W3C格式（IIS）。</li></ul><h2 id="为什么选择GoAccess？"><a href="#为什么选择GoAccess？" class="headerlink" title="为什么选择GoAccess？"></a>为什么选择GoAccess？</h2><p>GoAccess被设计为基于终端的快速日志分析器。它的核心思想是无需使用浏览器就可以快速实时地实时分析和查看Web服务器统计信息（<em>如果您想通过SSH快速分析访问日志，或者只是喜欢在终端中工作，那将是一个很好的选择</em>）。</p><p>终端输出是默认输出，但它具有生成完整的，独立的实时<a href="https://rt.goaccess.io/?src=gh"><strong><code>HTML</code></strong></a> 报告以及<a href="https://goaccess.io/json?src=gh"><strong><code>JSON</code></strong></a>和 <a href="https://goaccess.io/goaccess_csv_report.csv?src=gh"><strong><code>CSV</code></strong></a>报告的功能。</p><p>您可以从更多的监视器命令工具中看到它。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="从发行版本构建"><a href="#从发行版本构建" class="headerlink" title="从发行版本构建"></a>从发行版本构建</h3><p>GoAccess可以在* nix系统上编译和使用。</p><p>使用以下方法下载，提取和编译GoAccess：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget https:&#x2F;&#x2F;tar.goaccess.io&#x2F;goaccess-1.4.tar.gz</span><br><span class="line">$ tar -xzvf goaccess-1.4.tar.gz</span><br><span class="line">$ cd goaccess-1.4&#x2F;</span><br><span class="line">$ .&#x2F;configure --enable-utf8 --enable-geoip&#x3D;legacy</span><br><span class="line">$ make</span><br><span class="line"># make install</span><br></pre></td></tr></table></figure><h3 id="从GitHub构建（开发）"><a href="#从GitHub构建（开发）" class="headerlink" title="从GitHub构建（开发）"></a>从GitHub构建（开发）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;allinurl&#x2F;goaccess.git</span><br><span class="line">$ cd goaccess</span><br><span class="line">$ autoreconf -fiv</span><br><span class="line">$ .&#x2F;configure --enable-utf8 --enable-geoip&#x3D;legacy</span><br><span class="line">$ make</span><br><span class="line"># make install</span><br></pre></td></tr></table></figure><h3 id="发行版"><a href="#发行版" class="headerlink" title="发行版"></a>发行版</h3><p>使用Linux发行版的首选软件包管理器在Linux上安装GoAccess最简单。请注意，并非所有发行版都具有最新版本的GoAccess。</p><h4 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian / Ubuntu"></a>Debian / Ubuntu</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># apt-get install goaccess</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>这可能会安装GoAccess的过时版本。为确保您正在运行最新的稳定版GoAccess，请参见下面的替代选项。</p><h4 id="官方GoAccess-Debian和Ubuntu存储库"><a href="#官方GoAccess-Debian和Ubuntu存储库" class="headerlink" title="官方GoAccess Debian和Ubuntu存储库"></a>官方GoAccess Debian和Ubuntu存储库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;deb https:&#x2F;&#x2F;deb.goaccess.io&#x2F; $(lsb_release -cs) main&quot; | sudo tee -a &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;goaccess.list</span><br><span class="line">$ wget -O - https:&#x2F;&#x2F;deb.goaccess.io&#x2F;gnugpg.key | sudo apt-key --keyring &#x2F;etc&#x2F;apt&#x2F;trusted.gpg.d&#x2F;goaccess.gpg add -</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install goaccess</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ul><li><code>.deb</code>官方仓库中的软件包也可以通过HTTPS获得。您可能需要安装<code>apt-transport-https</code>。</li></ul><h4 id="软呢帽"><a href="#软呢帽" class="headerlink" title="软呢帽"></a>软呢帽</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install goaccess</span><br></pre></td></tr></table></figure><h4 id="Arch-Linux"><a href="#Arch-Linux" class="headerlink" title="Arch Linux"></a>Arch Linux</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pacman -S goaccess</span><br></pre></td></tr></table></figure><h4 id="Gentoo"><a href="#Gentoo" class="headerlink" title="Gentoo"></a>Gentoo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># emerge net-analyzer&#x2F;goaccess</span><br></pre></td></tr></table></figure><h4 id="OS-X-自制软件"><a href="#OS-X-自制软件" class="headerlink" title="OS X /自制软件"></a>OS X /自制软件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># brew install goaccess</span><br></pre></td></tr></table></figure><h4 id="FreeBSD"><a href="#FreeBSD" class="headerlink" title="FreeBSD"></a>FreeBSD</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;ports&#x2F;sysutils&#x2F;goaccess&#x2F; &amp;&amp; make install clean</span><br><span class="line"># pkg install sysutils&#x2F;goaccess</span><br></pre></td></tr></table></figure><h4 id="OpenBSD的"><a href="#OpenBSD的" class="headerlink" title="OpenBSD的"></a>OpenBSD的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd &#x2F;usr&#x2F;ports&#x2F;www&#x2F;goaccess &amp;&amp; make install clean</span><br><span class="line"># pkg_add goaccess</span><br></pre></td></tr></table></figure><h4 id="openSUSE"><a href="#openSUSE" class="headerlink" title="openSUSE"></a>openSUSE</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># zypper ar -f obs:&#x2F;&#x2F;server:http http</span><br><span class="line"># zypper in goaccess</span><br></pre></td></tr></table></figure><h4 id="印第安纳州"><a href="#印第安纳州" class="headerlink" title="印第安纳州"></a>印第安纳州</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pkg install goaccess</span><br></pre></td></tr></table></figure><h4 id="pkgsrc（NetBSD，Solaris，SmartOS等）"><a href="#pkgsrc（NetBSD，Solaris，SmartOS等）" class="headerlink" title="pkgsrc（NetBSD，Solaris，SmartOS等）"></a>pkgsrc（NetBSD，Solaris，SmartOS等）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># pkgin install goaccess</span><br></pre></td></tr></table></figure><h4 id="视窗"><a href="#视窗" class="headerlink" title="视窗"></a>视窗</h4><p>GoAccess可以通过Cygwin在Windows中使用。请参见Cygwin的<a href="https://goaccess.io/faq#installation">软件包</a>。或通过Windows 10上的Linux子系统。</p><h4 id="发行包"><a href="#发行包" class="headerlink" title="发行包"></a>发行包</h4><p>GoAccess具有最低要求，它是用C语言编写的，只需要ncurses。但是，下面是一些从源代码构建GoAccess的发行版中一些可选依赖项的表。</p><table><thead><tr><th>发行版</th><th>护士</th><th>GeoIP（优化）</th><th>OpenSSL（可选）</th></tr></thead><tbody><tr><td><strong>Ubuntu / Debian的</strong></td><td>libncursesw5-dev</td><td>libgeoip-dev</td><td>libssl开发</td></tr><tr><td><strong>RHEL / CentOS</strong></td><td>ncurses-devel</td><td>Geoip-devel</td><td>openssl-开发</td></tr><tr><td><strong>Arch Linux</strong></td><td>诅咒</td><td>Geoip</td><td>的openssl</td></tr><tr><td><strong>Gentoo</strong></td><td>sys-libs / ncurses</td><td>开发库/ geoip</td><td>dev-libs / openssl</td></tr><tr><td><strong>松弛软件</strong></td><td>诅咒</td><td>GeoIP</td><td>的openssl</td></tr></tbody></table><p><strong>注意</strong>：您可能需要安装这样的构建工具<code>gcc</code>，<code>autoconf</code>， <code>gettext</code>，<code>autopoint</code>等编译/从源代码构建软件。例如 <code>base-devel</code>，<code>build-essential</code>，<code>&quot;Development Tools&quot;</code>。</p><h4 id="码头工人"><a href="#码头工人" class="headerlink" title="码头工人"></a>码头工人</h4><p>Docker映像已更新，能够引导访问日志中的输出。如果只想输出报告，则可以将日志从外部环境传递到基于Docker的进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | docker run --rm -i -e LANG&#x3D;$LANG allinurl&#x2F;goaccess -a -o html --log-format COMBINED - &gt; report.html</span><br></pre></td></tr></table></figure><p>或实时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat access.log | docker run -p 7890:7890 --rm -i -e LANG&#x3D;$LANG allinurl&#x2F;goaccess -a -o html --log-format COMBINED --real-time-html - &gt; report.html</span><br></pre></td></tr></table></figure><p>您可以在<a href="https://github.com/allinurl/goaccess/blob/master/DOCKER.md">DOCKER.md中</a>阅读有关使用<a href="https://github.com/allinurl/goaccess/blob/master/DOCKER.md">docker</a>映像的<a href="https://github.com/allinurl/goaccess/blob/master/DOCKER.md">更多信息</a>。</p><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><h4 id="默认哈希表"><a href="#默认哈希表" class="headerlink" title="默认哈希表"></a>默认哈希表</h4><p>内存中存储以将数据集大小限制为可用物理内存量为代价提供了更好的性能。GoAccess使用内存中的哈希表。它具有很好的内存使用率和相当不错的性能。该存储也支持磁盘上的持久性。</p><h2 id="命令行-配置选项"><a href="#命令行-配置选项" class="headerlink" title="命令行/配置选项"></a>命令行/配置选项</h2><p>看到<a href="https://goaccess.io/man#options"><strong>的选项</strong></a>可以被提供给命令或指定的配置文件中 如果在配置文件中指定，则需要使用长选项，而无需添加<code>--</code>。</p><h2 id="用法-示例"><a href="#用法-示例" class="headerlink" title="用法/示例"></a>用法/示例</h2><p><strong>注意</strong>：将数据插入GoAccess不会提示日志/日期/时间配置对话框，您需要事先在配置文件或命令行中定义它。</p><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>要输出到终端并生成交互式报告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># goaccess access.log</span><br></pre></td></tr></table></figure><p>生成HTML报告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># goaccess access.log -a &gt; report.html</span><br></pre></td></tr></table></figure><p>生成JSON报告：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># goaccess access.log -a -d -o json &gt; report.json</span><br></pre></td></tr></table></figure><p>生成CSV文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># goaccess access.log --no-csv-summary -o csv &gt; report.csv</span><br></pre></td></tr></table></figure><p>GoAccess还为实时过滤和解析提供了极大的灵活性。例如，从goaccess启动以来，要通过监视日志来快速诊断问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tail -f access.log | goaccess -</span><br></pre></td></tr></table></figure><p>更妙的是，进行筛选，同时保持打开的管道保持实时分析，我们可以利用的<code>tail -f</code>和匹配模式的工具，如<code>grep</code>，<code>awk</code>，<code>sed</code>，等：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tail -f access.log | grep -i --line-buffered &#39;firefox&#39; | goaccess --log-format&#x3D;COMBINED -</span><br></pre></td></tr></table></figure><p>或从文件的开头进行解析，同时保持管道处于打开状态并应用过滤器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tail -f -n +0 access.log | grep -i --line-buffered &#39;firefox&#39; | goaccess -o report.html --real-time-html -</span><br></pre></td></tr></table></figure><h3 id="多个日志文件"><a href="#多个日志文件" class="headerlink" title="多个日志文件"></a>多个日志文件</h3><p>有几种使用GoAccess解析多个日志的方法。最简单的方法是将多个日志文件传递到命令行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># goaccess access.log access.log.1</span><br></pre></td></tr></table></figure><p>甚至可以在读取常规文件时从管道中解析文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cat access.log.2 | goaccess access.log access.log.1 -</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：单破折号附加到命令行，以使GoAccess知道应从管道读取。</p><p>现在，如果我们想为GoAccess增加更多的灵活性，我们可以做一系列的管道。例如，如果我们要处理除当前日志文件之外的所有压缩日志文件access.log。*。gz，我们可以执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># zcat access.log.*.gz | goaccess access.log -</span><br></pre></td></tr></table></figure><p><em>注意</em>：在Mac OS X上，请使用<code>gunzip -c</code>代替<code>zcat</code>。</p><h3 id="实时HTML输出"><a href="#实时HTML输出" class="headerlink" title="实时HTML输出"></a>实时HTML输出</h3><p>GoAccess可以在HTML报表中输出实时数据。您甚至可以通过电子邮件发送HTML文件，因为它是由一个没有外部文件依赖性的单个文件组成的，这太好了！</p><p>生成实时HTML报告的过程与创建静态报告的过程非常相似。只<code>--real-time-html</code>需要使其实时即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># goaccess access.log -o &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;your_site&#x2F;report.html --real-time-html</span><br></pre></td></tr></table></figure><p>要查看报告，您可以导航到<code>http://your_site/report.html</code>。</p><p>默认情况下，GoAccess将使用生成的报告的主机名。（可选）您可以指定客户端浏览器将连接到的URL。有关更多详细示例，请参见<a href="https://goaccess.io/faq">FAQ</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># goaccess access.log -o report.html --real-time-html --ws-url&#x3D;goaccess.io</span><br></pre></td></tr></table></figure><p>默认情况下，GoAccess侦听端口7890，以使用7890以外的其他端口，您可以将其指定为（确保该端口已打开）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># goaccess access.log -o report.html --real-time-html --port&#x3D;9870</span><br></pre></td></tr></table></figure><p>要将WebSocket服务器绑定到除0.0.0.0之外的其他地址，可以将其指定为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># goaccess access.log -o report.html --real-time-html --addr&#x3D;127.0.0.1</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：要通过TLS / SSL连接输出实时数据，您需要使用 <code>--ssl-cert=&lt;cert.crt&gt;</code>和<code>--ssl-key=&lt;priv.key&gt;</code>。</p><h3 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h3><h4 id="处理日期"><a href="#处理日期" class="headerlink" title="处理日期"></a>处理日期</h4><p>另一个有用的管道是从网络日志中过滤日期</p><p>下面将使所有HTTP请求从头开始<code>05/Dec/2010</code>直到文件结束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sed -n &#39;&#x2F;05\&#x2F;Dec\&#x2F;2010&#x2F;,$ p&#39; access.log | goaccess -a -</span><br></pre></td></tr></table></figure><p>或使用相对日期，例如昨天或明天：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sed -n &#39;&#x2F;&#39;$(date &#39;+%d\&#x2F;%b\&#x2F;%Y&#39; -d &#39;1 week ago&#39;)&#39;&#x2F;,$ p&#39; access.log | goaccess -a -</span><br></pre></td></tr></table></figure><p>如果我们只想分析从DATE a到DATE b的某个时间范围，则可以执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sed -n &#39;&#x2F;5\&#x2F;Nov\&#x2F;2010&#x2F;,&#x2F;5\&#x2F;Dec\&#x2F;2010&#x2F; p&#39; access.log | goaccess -a -</span><br></pre></td></tr></table></figure><p>如果我们只想保留一定数量的数据并回收存储，则只能保留一定的天数。例如保留并显示最近5天：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># goaccess access.log --keep-last&#x3D;5</span><br></pre></td></tr></table></figure><h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h4><p>假设您的日志包含虚拟主机字段。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vhost.io:80 8.8.4.4 - - [02&#x2F;Mar&#x2F;2016:08:14:04 -0600] &quot;GET &#x2F;shop HTTP&#x2F;1.1&quot; 200 615 &quot;-&quot; &quot;Googlebot-Image&#x2F;1.0&quot;</span><br></pre></td></tr></table></figure><p>并且您想将虚拟主机附加到请求中，以查看顶级URL属于哪个虚拟主机：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &#39;$8&#x3D;$1$8&#39; access.log | goaccess -a -</span><br></pre></td></tr></table></figure><p>为此，还可以使用实时过滤和解析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f  access.log | unbuffer -p awk &#39;$8&#x3D;$1$8&#39; | goaccess -a -</span><br></pre></td></tr></table></figure><p>要排除虚拟主机列表，您可以执行以下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># grep -v &quot;&#96;cat exclude_vhost_list_file&#96;&quot; vhost_access.log | goaccess -</span><br></pre></td></tr></table></figure><h4 id="文件，状态代码和漫游器"><a href="#文件，状态代码和漫游器" class="headerlink" title="文件，状态代码和漫游器"></a>文件，状态代码和漫游器</h4><p>解析特定页面，例如，页面浏览，<code>html</code>，<code>htm</code>，<code>php</code>，等的请求中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># awk &#39;$7~&#x2F;\.html|\.htm|\.php&#x2F;&#39; access.log | goaccess -</span><br></pre></td></tr></table></figure><p>注意，<code>$7</code>是通用和组合日志格式的请求字段（无虚拟主机），如果您的日志包括虚拟主机，则您可能想使用它<code>$8</code>。最好检查您要拍摄的领域，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tail -10 access.log | awk &#39;&#123;print $8&#125;&#39;</span><br></pre></td></tr></table></figure><p>或解析特定的状态代码，例如500（内部服务器错误）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># awk &#39;$9~&#x2F;500&#x2F;&#39; access.log | goaccess -</span><br></pre></td></tr></table></figure><p>或多个状态代码，例如所有3xx和5xx：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tail -f -n +0 access.log | awk &#39;$9~&#x2F;3[0-9]&#123;2&#125;|5[0-9]&#123;2&#125;&#x2F;&#39; | goaccess -o out.html -</span><br></pre></td></tr></table></figure><p>并获得有关攻击您服务器的机器人（爬虫）数量的概述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tail -F -n +0 access.log | grep -i --line-buffered &#39;bot&#39; | goaccess -</span><br></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>另外，值得指出的是，如果我们想以较低的优先级运行GoAccess，可以将其运行为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># nice -n 19 goaccess -f access.log -a</span><br></pre></td></tr></table></figure><p>如果您不想将其安装在服务器上，仍然可以从本地计算机上运行它！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># ssh root@server &#39;cat &#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log&#39; | goaccess -a -</span><br></pre></td></tr></table></figure><h4 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h4><p>我们收到许多以前已经回答过的问题。</p><ul><li>日期/时间匹配问题？检查您的日志格式和运行GoAccess的系统区域设置是否匹配。参见<a href="https://github.com/allinurl/goaccess/issues/1571#issuecomment-543186858">＃1571</a></li><li>模式匹配有问题吗？空间通常是个问题，例如，参见<a href="https://github.com/allinurl/goaccess/issues/136">＃136</a>，<a href="https://github.com/allinurl/goaccess/issues/1579">＃1579</a></li><li>与日志条目匹配的其他问题：<a href="https://github.com/allinurl/goaccess/issues?q=is%3Aissue+is%3Aclosed+label%3A"log%2Fdate%2Ftime+format"">关于日志/日期/时间格式，</a>请参阅<a href="https://github.com/allinurl/goaccess/issues?q=is%3Aissue+is%3Aclosed+label%3A"log%2Fdate%2Ftime+format"">&gt; 200个已解决的问题</a></li><li>日志处理有问题吗？请参阅<a href="https://github.com/allinurl/goaccess/issues?q=is%3Aissue+is%3Aclosed+label%3Alog-processing">&gt; 111关于日志处理的问题</a></li></ul><h4 id="增量日志处理"><a href="#增量日志处理" class="headerlink" title="增量日志处理"></a>增量日志处理</h4><p>GoAccess能够通过其内部存储逐步处理日志并将其数据转储到磁盘。它以以下方式工作：</p><ol><li>数据集必须先使用<code>--persist</code>保留，然后才能加载相同的数据集。</li><li><code>--restore</code>。如果传递了新数据（通过管道或通过日志文件），它将把它附加到原始数据集中。</li></ol><h5 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h5><p>GoAccess跟踪所有已处理文件的inode（假设文件将保留在同一分区上）以及每个文件的最后一行和最后一行的时间戳。例如， <code>inode:29627417|line:20012|ts:20171231235059</code></p><p>如果该索引节点与当前文件不匹配，它将解析所有行。如果当前文件与索引节点匹配，则它将读取剩余的行并更新已解析的行数和时间戳。作为额外的预防措施，它不会解析时间戳小于等于存储的时间戳的日志行。</p><p>管道传输数据基于最后读取的行的时间戳工作。例如，它将解析并丢弃所有传入的条目，直到找到时间戳&gt; =而不是存储的时间戳。</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; last month access log</span><br><span class="line"># goaccess access.log.1 --persist</span><br></pre></td></tr></table></figure><p>然后，用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; append this month access log, and preserve new data</span><br><span class="line"># goaccess access.log --restore --persist</span><br></pre></td></tr></table></figure><p>仅读取持久数据（不分析新数据）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># goaccess --restore</span><br></pre></td></tr></table></figure><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>欢迎使用GoAccess。最有用的方法是尝试一下并提供反馈。随时使用Github问题跟踪器并提出请求，以讨论和提交代码更改。</p><p>请享用！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/allinurl/goaccess&quot;&gt;https://github.com/allinurl/goaccess&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://goaccess.io/download&quot;&gt;https://goaccess.io/download&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://a-little-bear.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="工具" scheme="https://a-little-bear.github.io/categories/%E8%BD%AF%E4%BB%B6/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>将bat批处理命令文件固定到任务栏</title>
    <link href="https://a-little-bear.github.io/p/3d73/"/>
    <id>https://a-little-bear.github.io/p/3d73/</id>
    <published>2020-07-06T06:27:04.000Z</published>
    <updated>2020-07-06T06:40:38.470Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里有两种，第一种就是转化成exe，第二种就要用<code>巧方法了</code></p><a id="more"></a><ol><li><p>通过<code>Bat To Exe Converter</code> 将bat文件转化成exe文件，论坛有，不过不是最新版的</p></li><li><p>转载自：<a href="https://blog.csdn.net/qq446282412/article/details/84587186">https://blog.csdn.net/qq446282412/article/details/84587186</a></p></li></ol><h1 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h1><p>最近有个需求，想把写好的bat脚本固定在任务栏上面，这样方便快速点击。<br>比如我桌面上有一个kill java.bat 文件，如下所示：</p><p><img src="https://img-blog.csdnimg.cn/20181128163133168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""></p><p>kill java.bat 文件的内容为</p><p><code>taskkill /im java.exe /f</code></p><p>现在怎么才能将这个kill java.bat文件固定在任务栏上面呢？</p><h1 id="二、将bat批处理命令文件固定到任务栏"><a href="#二、将bat批处理命令文件固定到任务栏" class="headerlink" title="二、将bat批处理命令文件固定到任务栏"></a>二、将bat批处理命令文件固定到任务栏</h1><h2 id="2-1-第一步，将kill-java-bat-文件重命名为kill-java-exe"><a href="#2-1-第一步，将kill-java-bat-文件重命名为kill-java-exe" class="headerlink" title="2.1 第一步，将kill java.bat 文件重命名为kill java.exe"></a>2.1 第一步，将kill java.bat 文件重命名为kill java.exe</h2><h2 id="2-2-将-kill-java-exe-拉到任务栏"><a href="#2-2-将-kill-java-exe-拉到任务栏" class="headerlink" title="2.2 将 kill java.exe 拉到任务栏"></a>2.2 将 kill java.exe 拉到任务栏</h2><h2 id="2-3-修改桌面的-kill-java-exe-回-kill-java-bat"><a href="#2-3-修改桌面的-kill-java-exe-回-kill-java-bat" class="headerlink" title="2.3 修改桌面的 kill java.exe 回 kill java.bat"></a>2.3 修改桌面的 kill java.exe 回 kill java.bat</h2><h2 id="2-4-打开快速启动栏路径"><a href="#2-4-打开快速启动栏路径" class="headerlink" title="2.4 打开快速启动栏路径"></a>2.4 打开快速启动栏路径</h2><p>快速启动栏的路径为：</p><p>%userprofile%\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch</p><p>在我的电脑路径上输入刚才的路径，然后回车即可</p><p>回车之后，会显示 快速启动栏的目录，如下所示</p><p><img src="https://img-blog.csdnimg.cn/20181128164236382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="2-5-修改快速启动栏的属性"><a href="#2-5-修改快速启动栏的属性" class="headerlink" title="2.5 修改快速启动栏的属性"></a>2.5 修改快速启动栏的属性</h2><p>我们进入上面目录的子目录</p><blockquote><p>%userprofile%\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20181128164600702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""></p><p>如上图所示，我们找到 <strong>kill java</strong></p><p> 文件，然后右键该文件–属性<br><img src="https://img-blog.csdnimg.cn/20181128164714530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""><br>属性 目标的数据如下<br><img src="https://img-blog.csdnimg.cn/20181128164815893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""></p><p>修改属性 目标的值为 桌面上的 kill java.bat 的路径即可。 <strong>“C:\Users\000\Desktop\kill java.bat”</strong></p><p><img src="https://img-blog.csdnimg.cn/20181128164952443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="2-6-运行我们的快速启动栏"><a href="#2-6-运行我们的快速启动栏" class="headerlink" title="2.6 运行我们的快速启动栏"></a>2.6 运行我们的快速启动栏</h2><p><img src="https://img-blog.csdnimg.cn/2018112816525283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""></p><p>点击运行之后， 任务管理器里面就没有java进程了。成功！</p><h1 id="三、修改任务栏图标"><a href="#三、修改任务栏图标" class="headerlink" title="三、修改任务栏图标"></a>三、修改任务栏图标</h1><p>可能你会觉得刚才固定到任务栏的图标不好看，那么你可以通过修改图标的方式来进行修改<br>进入目录</p><blockquote><p>%userprofile%\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar</p></blockquote><p>选择刚才的 【kill java】 图标，然后鼠标右键，点击【属性】<br><img src="https://img-blog.csdnimg.cn/20181129090446358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""><br>然后点击【更改图标】按钮<br><img src="https://img-blog.csdnimg.cn/20181129090325484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""></p><p>比如我们打算换成下面的图标</p><p><img src="https://img-blog.csdnimg.cn/20181129090614650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""></p><p>选择好图标之后，点击【确定】按钮<br><img src="https://img-blog.csdnimg.cn/20181129090652179.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""></p><p>再次点击【确定】按钮<br><img src="https://img-blog.csdnimg.cn/2018112909072570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""></p><p>图标换了，但是任务栏上的图标没有刷新。</p><p><img src="https://img-blog.csdnimg.cn/20181129090900448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""></p><p>任务栏图标没有刷新，我当时也没有去管它了。不过重启windows系统的话，就会刷新，如下所示：</p><p><img src="https://img-blog.csdnimg.cn/20181129091345198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h1><ul><li><a href="https://zhidao.baidu.com/question/1637917825238414900.html">https://zhidao.baidu.com/question/1637917825238414900.html</a></li><li><a href="http://www.xstui.com/read/345">http://www.xstui.com/read/345</a></li><li><a href="https://github.com/DarrenRainey/battoexe">https://github.com/DarrenRainey/battoexe</a></li></ul><p>还有其他方式来实现将bat批处理命令文件固定到任务栏，参考以下链接</p><ul><li><p><a href="https://blog.csdn.net/tty521/article/details/79673843">https://blog.csdn.net/tty521/article/details/79673843</a></p><p><img src="https://img-blog.csdnimg.cn/20181128170455967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNDQ2MjgyNDEy,size_16,color_FFFFFF,t_70" alt=""></p></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里有两种，第一种就是转化成exe，第二种就要用&lt;code&gt;巧方法了&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="bat" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/bat/"/>
    
    
  </entry>
  
  <entry>
    <title>微软官方发布已删除数据恢复工具-Windows-File-Recovery</title>
    <link href="https://a-little-bear.github.io/p/5c8/"/>
    <id>https://a-little-bear.github.io/p/5c8/</id>
    <published>2020-06-30T04:58:58.000Z</published>
    <updated>2020-06-30T05:04:00.883Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Windows File Recovery是微软发布的用于数据恢复的命令行工具，可以用来恢复 NTFS, FAT, exFAT 和 ReFS 文件系统的文件，支持 HDD, SSD, USB, 和记忆卡。</p><a id="more"></a><p><img src="https://img3.appinn.net/images/202006/windows-file-recovery.jpg!o" alt="微软官方发布已删除数据恢复工具 Windows File Recovery 1"></p><p>这次 Windows File Recovery 并没有提供图形界面，只需要在 <a href="https://www.microsoft.com/zh-cn/p/windows-file-recovery/9n26s50ln705?activetab=pivot:overviewtab">Windows 商店</a>安装即可。</p><p>然后，从开始菜单打开 Windows File Recovery：</p><p><img src="https://img3.appinn.net/images/202006/screenshot-2020-06-30-at-11-16-39.jpg!o" alt="微软官方发布已删除数据恢复工具 Windows File Recovery 2"></p><p>你也可以通过以管理员权限启动的 cmd 或者 powershell 来直接运行 winfr，效果相同。</p><p>直接来看例子吧，winfr 给了三个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">winfr C: D:\RecoveryDestination &#x2F;n Users\appinn.com\Downloads\</span><br><span class="line">winfr C: D:\RecoveryDestination &#x2F;x &#x2F;y:PDF,JPEG</span><br><span class="line">winfr C: D:\RecoveryDestination &#x2F;r &#x2F;n *.pdf &#x2F;n *.jpg</span><br></pre></td></tr></table></figure><p>这里的 /n /x /r 是 winfr 根据磁盘结构提供的三种恢复模式：</p><ul><li>默认模式：使用主文件表 (MFT) 和 FRS 来定位丢失的文件。</li><li>/r – 分段模式(仅支持 NTFS，不需要 MFT 但需要 Segment 来恢复数据)</li><li>/x – 签名模式（使用文件头恢复）。</li></ul><p>青小蛙在<a href="https://support.microsoft.com/zh-cn/help/4538642/windows-10-restore-lost-files">文档</a>里研究里半天默认模式和分段模式里都提到的 Segment，不确定这两个模式里的 Segment 是不是同一个东西，总之默认模式和分段模式让青小蛙比较困惑。</p><p>而签名模式，对小文件不起作用，但如果你要恢复外出存储设备，比如 U 盘，那只能使用签名模式。</p><p>比如，你要恢复 U 盘（E: 盘）里的 pdf 文件，那么就需要使用签名模式，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winfr E: C: &#x2F;x &#x2F;n *.pdf</span><br></pre></td></tr></table></figure><p>然后就开始扫描（需要按下 Y 同意继续）、恢复文件了：</p><p><img src="https://img3.appinn.net/images/202006/cmd_b0wrrixksd.jpg!o" alt="微软官方发布已删除数据恢复工具 Windows File Recovery 3"></p><p>最终，winfr 将图片也一起恢复了，并且保存在了 C 盘下的 Recovery_20200630_120328 文件夹。</p><p>Windows File Recovery 唯一的问题就是命令行操作对于普通用户过于复杂，而且参数众多也不容易搞清楚…不过，在数据丢失又没有备份的事实面前，向命令行低头是很容易的事情。</p><p>转自：<a href="https://www.appinn.com/windows-file-recovery/">https://www.appinn.com/windows-file-recovery/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Windows File Recovery是微软发布的用于数据恢复的命令行工具，可以用来恢复 NTFS, FAT, exFAT 和 ReFS 文件系统的文件，支持 HDD, SSD, USB, 和记忆卡。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>gclone转存bat</title>
    <link href="https://a-little-bear.github.io/p/f18d/"/>
    <id>https://a-little-bear.github.io/p/f18d/</id>
    <published>2020-06-27T10:52:59.000Z</published>
    <updated>2020-06-27T11:57:42.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>需要gclone，rclone等”基础“，还需要安装git。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自己弄的一个gclone转存bot（搞了1周呢ww），需要能上GoogleDrive，需要配置好rclone，gclone，还有安装git。</p><p>比不上群里某些大佬写的python程序，但是我认为我的优势还是在：</p><ol><li>单文件 <del>（目前是俩文件，相信能解决的hh，ps：已解决）</del></li><li>批处理，不是python，不需要安装python，不需要安装node，不需要啥，除了一个git（玩Github的都有安装吧），还有配置完gclone就能运行。</li><li>代码看着简单，找着改着也简单，没有一堆程序文件</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">chcp 65001</span><br><span class="line"></span><br><span class="line">C:</span><br><span class="line"><span class="built_in">cd</span> C:\AutoRclone-master</span><br><span class="line"></span><br><span class="line">::输入分享链接，并自动转化为id</span><br><span class="line"><span class="built_in">set</span> /p url=文件夹/文件链接：</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> url=%url:https://drive.google.com/drive/folders/=%</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> RESULT=</span><br><span class="line"></span><br><span class="line">:next</span><br><span class="line"><span class="keyword">if</span> <span class="string">"%url%"</span> equ <span class="string">""</span> goto end</span><br><span class="line"><span class="built_in">set</span> a=%url:~0,1%</span><br><span class="line"><span class="keyword">if</span> <span class="string">"%a%"</span> equ <span class="string">"="</span> (<span class="built_in">set</span> RESULT=%RESULT%<span class="comment">#) else (set RESULT=%RESULT%%a%)</span></span><br><span class="line"><span class="built_in">set</span> url=%url:~1%</span><br><span class="line">goto next</span><br><span class="line"></span><br><span class="line">:end</span><br><span class="line"><span class="built_in">set</span> RESULT=%RESULT:?usp<span class="comment">#sharing=%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">::这里是已经废弃的手动输入名字</span><br><span class="line">::<span class="built_in">set</span> /p name=文件夹名称：</span><br><span class="line">::<span class="built_in">set</span> name=%name: =%</span><br><span class="line">::<span class="built_in">echo</span> 文件夹/文件链接id是：%RESULT%</span><br><span class="line">::<span class="built_in">echo</span> 转存的文件夹名称为：%name%</span><br><span class="line">::<span class="built_in">echo</span> 任意键开始转存（转存三次）</span><br><span class="line">::pause &gt; nul</span><br><span class="line">::gclone lsf &#123;&#125;:&#123;&#123;&#123;&#125;&#125;&#125; --dump bodies -vv 2&gt;&amp;1 | grep <span class="string">'"&#123;&#125;","name"'</span> | cut -d <span class="string">'"'</span> -f 8</span><br><span class="line">::gclone lsf alittlebear:&#123;%RESULT%&#125; --dump bodies -vv 2&gt;&amp;1 | grep \<span class="string">'"%RESULT%","name"\'</span> | cut -d <span class="string">''</span>\<span class="string">'"\'</span> -f 8</span><br><span class="line">::<span class="built_in">echo</span>:</span><br><span class="line">::<span class="built_in">echo</span> 任意键退出</span><br><span class="line">::pause &gt; nul</span><br><span class="line"></span><br><span class="line">::start 1.bat %RESULT%</span><br><span class="line"></span><br><span class="line">::这里是1.bat的内容</span><br><span class="line">@<span class="built_in">echo</span> on</span><br><span class="line">gclone lsf alittlebear:&#123;%RESULT%&#125; --dump bodies -vv 2&gt;&amp;1 | grep <span class="string">'"%RESULT%","name"'</span> | cut -d <span class="string">''</span><span class="string">'"'</span> -f 8</span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span>:</span><br><span class="line"><span class="built_in">echo</span> 复制lsf指令再按任意键（gclone lsf 到 -f 8）</span><br><span class="line">pause &gt; nul</span><br><span class="line"></span><br><span class="line">::打开git窗口,准备输入lsf获取分享名指令</span><br><span class="line">start <span class="string">"Open Git Bash"</span> <span class="string">"%SYSTEMDRIVE%\Program Files\Git\git-bash.exe"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> /p name=输入git窗口获取到的分享名：</span><br><span class="line"><span class="built_in">set</span> name=%name: =.%</span><br><span class="line"></span><br><span class="line">::开始转存,转存3次</span><br><span class="line">gclone copy alittlebear:&#123;%RESULT%&#125; alittlebear:/bat转存/%name%/ --transfers=40 --drive-server-side-across-configs -P</span><br><span class="line">gclone copy alittlebear:&#123;%RESULT%&#125; alittlebear:/bat转存/%name%/ --transfers=40 --drive-server-side-across-configs -P</span><br><span class="line">gclone copy alittlebear:&#123;%RESULT%&#125; alittlebear:/bat转存/%name%/ --transfers=40 --drive-server-side-across-configs -P</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>:</span><br><span class="line"><span class="built_in">echo</span> 转存完毕，按任意键退出</span><br><span class="line">pause &gt; nul</span><br></pre></td></tr></table></figure><h2 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h2><p><a href="https://alittlebear.lanzous.com/ikKBEe36q7g">https://alittlebear.lanzous.com/ikKBEe36q7g</a></p><p>ps：不想下载可以直接复制代码框的指令到记事本，然后命名为.bat文件就好</p><h2 id="要改动的地方"><a href="#要改动的地方" class="headerlink" title="要改动的地方"></a>要改动的地方</h2><ol><li><p>把结尾<code>&quot;%SYSTEMDRIVE%\Program Files\Git\git-bash.exe&quot;</code>改成你自己的git路径，默认应该就是我这个了。</p></li><li><p>结尾<code>gclone copy alittlebear</code> 中的<code>alittlebear</code>要改成你自己的remote名称</p></li><li><p>结尾<code>alittlebear:/bat转存/</code>也要改成你自己的remote名称和转存路径</p></li><li><p><del>1.bat中的<code>alittlebear</code>也要改成自己的remote名称</del></p></li><li><p>开头的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:</span><br><span class="line">cd C:\AutoRclone-master</span><br></pre></td></tr></table></figure><p>请换成自己的gclone路径</p></li><li><p>待补充</p></li></ol><h2 id="已知bug"><a href="#已知bug" class="headerlink" title="已知bug"></a>已知bug</h2><ol><li><del>暂时还需要1.bat，不能合并成1个单文件</del></li><li><del>运行1.bat时会弹出另外一个窗口，不会解决这bug。。。</del></li><li>待补充</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;需要gclone，rclone等”基础“，还需要安装git。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="bat" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/bat/"/>
    
    
  </entry>
  
  <entry>
    <title>主流 Markdown 编辑器推荐</title>
    <link href="https://a-little-bear.github.io/p/34c8/"/>
    <id>https://a-little-bear.github.io/p/34c8/</id>
    <published>2020-06-23T23:52:07.000Z</published>
    <updated>2020-06-23T23:57:12.682Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><img src="https://telegra.ph/file/61ccbcaeeb6edecb4a6ac.jpg" alt=""></p><p>Markdown ，2004年由 John Gruberis 设计和开发，是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，以下将介绍目前比较流行的一些 Markdown 编辑器（排名不分先后）</p><a id="more"></a><h4 id="●-MarkdownPad"><a href="#●-MarkdownPad" class="headerlink" title="● MarkdownPad"></a>● MarkdownPad</h4><p>目前分为 MarkdownPad2 和 MarkdownPad Pro 版本，后者收费，我们使用前者足矣，用户可以通过键盘快捷键和工具栏按钮来使用或者移除 Markdown 各种语法格式，支持自定义配色方案、字体、大小和布局 、即时HTML预览、HTML和PDF导出，被很多人称赞为 Windows 平台最好用的 Markdown 编辑器，实用性强，仅支持 Windows 系统，个人觉得在 Windows 10 系统上界面并不是很好看，有时候添加音乐什么的，资源多了，实时预览会显示资源加载失败，<a href="https://link.zhihu.com/?target=http%3A//markdownpad.com/">点击此处</a>访问 MarkdownPad 官网</p><p><img src="https://pic4.zhimg.com/v2-3496d428ed2def7b4e581c75828e822f_b.jpg" alt=""></p><hr><h4 id="●-BookPad"><a href="#●-BookPad" class="headerlink" title="● BookPad"></a>● BookPad</h4><p>无意间在 Microsoft Store 上发现的，完美搭配 Win10 系统，界面非常简洁漂亮，2017年9月份发布，大小30.82 MB，官方网站：<a href="https://link.zhihu.com/?target=https%3A//sosfos.wordpress.com/">https://sosfos.wordpress.com/</a> ，收费14人民币，可免费使用7天，各种功能应有尽有，和其他编辑器不相上下，本来想着百度百度看看有没有破解版，结果全网看不见 BookPad 的影子，估计是新出来的还不为人所知吧，可以直接在 Microsoft Store 搜索下载，或者点击链接获取：<a href="https://link.zhihu.com/?target=https%3A//www.microsoft.com/store/apps/9N6P5ZH2SJSX">https://www.microsoft.com/store/apps/9N6P5ZH2SJSX</a></p><p><img src="https://pic4.zhimg.com/v2-41ce403ff92faf6cd705aa582f05e133_b.jpg" alt=""></p><p><img src="https://pic4.zhimg.com/v2-a8aea709e9064ecaf8912f0006262db3_b.jpg" alt=""></p><hr><h4 id="●-小书匠"><a href="#●-小书匠" class="headerlink" title="● 小书匠"></a>● 小书匠</h4><p>分为免费版和收费版，收费版¥20/年，其实免费版的功能已经足够强大了，多种编辑模式、多种主题选择、多种编辑器实现、丰富的语法支持、第三方同步、强大的文件管理功能，让人使用一次就爱上了它，支持 Windows 和 Web，推荐使用，<a href="https://link.zhihu.com/?target=http%3A//soft.xiaoshujiang.com/">点击此处</a>访问小书匠官网</p><p><img src="https://pic4.zhimg.com/v2-81fe6b08a21a97d2a78f46e52af6d703_b.jpg" alt=""></p><p><img src="https://pic2.zhimg.com/v2-bc2e8cf42cd97e44f89d678aa6b47d5d_b.jpg" alt=""></p><hr><h4 id="●-Typora"><a href="#●-Typora" class="headerlink" title="● Typora"></a>● Typora</h4><p>Typora 同样支持 Windows、OS X 和 Linux，Typora 支持即时渲染技术，这也是与其他 Markdown 编辑器最显著的区别，支持数学编辑，可与 Word 直接格式转换，在 Pandoc 的支持下进行多种文档格式转换，Typora 适合那些对码字手速和排版顺畅度有要求的人群，譬如码农、网站小编等，<a href="https://link.zhihu.com/?target=https%3A//www.typora.io/">点击此处</a>访问 Typora 官网</p><p><img src="https://pic1.zhimg.com/v2-f9ce7bdd3e07fe1a34dec0253a7955ac_b.jpg" alt=""></p><hr><h4 id="●-Visual-Studio-Code"><a href="#●-Visual-Studio-Code" class="headerlink" title="● Visual Studio Code"></a>● Visual Studio Code</h4><p>Visual Studio Code 是众所周知的神器，是微软推出一款轻量级的文本编辑工具，类似于 Sublime，它已经默认集成 Markdown 文档编辑插件，原生就支持高亮 Markdown 的语法，但想要实时预览还需要选择 Markdown: Open Preview to the Side 命令实现，相关教程请<a href="https://link.zhihu.com/?target=https%3A//www.cnblogs.com/shawWey/p/8931697.html">点击此处</a>，<a href="https://link.zhihu.com/?target=https%3A//code.visualstudio.com/">点击此处</a> 访问 Visual Studio Code 官网</p><p><img src="https://pic1.zhimg.com/v2-2d6b965c3135cbf75a37d7c5c95280f8_b.jpg" alt=""></p><hr><h4 id="●-Marxico"><a href="#●-Marxico" class="headerlink" title="● Marxico"></a>● Marxico</h4><p>Marxico 中文名马克飞象，提供桌面客户端以及离线 Chrome App，支持移动端 Web，可以直接把文本存到印象笔记，<a href="https://link.zhihu.com/?target=http%3A//marxi.co/">点击此处</a>访问 Marxico，<a href="https://link.zhihu.com/?target=https%3A//maxiang.io/">点击此处</a>访问 马克飞象</p><p><img src="https://pic2.zhimg.com/v2-49e1828f5c647cda3c1da1bcdb95bb51_b.jpg" alt=""></p><hr><h4 id="●-Sublime-Text-3"><a href="#●-Sublime-Text-3" class="headerlink" title="● Sublime Text 3"></a>● Sublime Text 3</h4><p>Sublime Text 3 是基于 Vim 开发的跨平台代码编辑器，收费80美元，好像可以免费试用，支持 OS X、Windows、Ubuntu 等 UNIX 及 Linux 操作系统，由于其功能的多样性而广受好评，界面简约大方，定位专业，原生支持的编程语言就多达十几种，通过第三方插件，还能实现更多语法的支持，其中就包括 Markdown ，但也有个缺点，就是不能实时预览，但是用户可以通过 Markdown Preview 的插件实现对 Markdown 的预览，具体教程请<a href="https://link.zhihu.com/?target=https%3A//blog.csdn.net/qazxswed807/article/details/51235792">点击此处</a>查看，<a href="https://link.zhihu.com/?target=http%3A//www.sublimetext.com/">点击此处</a>访问 Sublime Text 官网</p><p><img src="https://pic2.zhimg.com/v2-f3475373d93b51a6ee9aa00e6d64f601_b.jpg" alt=""></p><hr><h4 id="●-Mou"><a href="#●-Mou" class="headerlink" title="● Mou"></a>● Mou</h4><p>Mou 是一款由国人独立开发者罗晨开发的实时预览型 Markdown 编辑器，仅支持 OS X操作系统，是目前同类应用中对汉字兼容性最好的作品，也是目前最好用的免费 Markdown 编辑器，提供语法高亮、在线预览、同步滚动、全屏模式，支持自定保存、自动匹配，允许自定义主题，支持 CSS，HTML 和 PDF 导出等功能，<a href="https://link.zhihu.com/?target=http%3A//25.io/mou/">点击此处</a>访问 Mou 官网</p><p><img src="https://pic2.zhimg.com/v2-2a290963b8b97f91d7f60b04c9ed190d_b.jpg" alt=""></p><hr><h4 id="●-Atom"><a href="#●-Atom" class="headerlink" title="● Atom"></a>● Atom</h4><p>Atom 是 Github 专门为程序员推出的一个跨平台文本编辑器，具有简洁和直观的图形用户界面，并有很多有趣的特点：支持CSS，HTML，JavaScript等网页编程语言，当然也支持 Markdown ，支持宏，自动完成分屏功能，集成了文件管理器，<a href="https://link.zhihu.com/?target=https%3A//atom.io/">点击此处</a>访问 Atom 官网</p><p><img src="https://pic2.zhimg.com/v2-254964e626d410196a327822738a9f69_b.jpg" alt=""></p><hr><h4 id="●-Smark"><a href="#●-Smark" class="headerlink" title="● Smark"></a>● Smark</h4><p>国人编写的开源软件，Windows / Linux 等主流系统跨平台支持，完美支持 LaTex 数学公式、脚注、尾注等，支持使用本地 MathJax 调用，不需要在线访问 MathJax CDN，用户可配置的 Markdown 语法高亮显示，美观整洁，多种格式文件导出支持，简洁友好的界面布局，完备的各类快捷键，能极大地提高工作效率，<a href="https://link.zhihu.com/?target=https%3A//gitee.com/elerao/Smark">点击此处</a>访问 Smark 官网</p><p><img src="https://pic1.zhimg.com/v2-b58aecfb0975b902f5af8ca7c69eecf8_b.jpg" alt=""></p><hr><h4 id="●-Haroopad"><a href="#●-Haroopad" class="headerlink" title="● Haroopad"></a>● Haroopad</h4><p>Haroopad 覆盖三大主流桌面系统，支持 Windows、OS X 和 Linux，多种主题样式供你选择，语法标亮支持 54 种编程语言，该工具重点推荐 Ubuntu/Linux 用户使用，<a href="https://link.zhihu.com/?target=http%3A//pad.haroopress.com/user.html">点击此处</a>访问 Haroopad 官网</p><p><img src="https://pic3.zhimg.com/v2-9a86021b5635f1971724d7e26abb14e6_b.jpg" alt=""></p><hr><h4 id="●-CuteMarkEd"><a href="#●-CuteMarkEd" class="headerlink" title="● CuteMarkEd"></a>● CuteMarkEd</h4><p>CuteMarkEd 是一个基于qt5的跨平台的 Markdown 编辑器，开源的， 提供实时 HTML 预览、数学表达式、源码高亮和PDF导出，<a href="https://link.zhihu.com/?target=https%3A//cloose.github.io/CuteMarkEd/">点击此处</a> 访问 CuteMarkEd 官网</p><p><img src="https://pic3.zhimg.com/v2-ce693a3033faa8bfefc134df6377d35a_b.jpg" alt=""></p><hr><h4 id="●-MarkPad"><a href="#●-MarkPad" class="headerlink" title="● MarkPad"></a>● MarkPad</h4><p>MarkPad 是款开源的 Markdown 编辑器，与 Window 8 风格和谐友好的界面，可以直接在你的博客或者 GitHub 中打开、保存文档，直接将图片粘贴到 Markdown 文档中，<a href="https://link.zhihu.com/?target=http%3A//code52.org/DownmarkerWPF/">点击此处</a>访问 MarkPad 官网</p><p><img src="https://pic1.zhimg.com/v2-f27e4ff26cb722ed707a384e21f7cd70_b.jpg" alt=""></p><hr><h4 id="●-Cmd-Markdown"><a href="#●-Cmd-Markdown" class="headerlink" title="● Cmd Markdown"></a>● Cmd Markdown</h4><p>作业部落出品，是一款不错的工具和博客平台兼顾的产品，同时支持 Linux、Mac 和 Windows 操作系统，此外还提供 Web 在线创作，社交化批注、智能云同步，最简单的方法，满足多种写作需要，<a href="https://link.zhihu.com/?target=https%3A//www.zybuluo.com/cmd/">点击此处</a>访问 Cmd Markdown 官网</p><p><img src="https://pic1.zhimg.com/v2-eaa5bc35dc0f4fcbdd574c1b58b7076c_b.jpg" alt=""></p><hr><h4 id="●-FarBox"><a href="#●-FarBox" class="headerlink" title="● FarBox"></a>● FarBox</h4><p>同样是一款不错的 Markdown 编辑器和博客平台兼顾的产品，让用户通过Dropbox（现在默认是自己的同步服务器）直接建立个人网站。FarBox编辑器免费，同时支持 Linux、Mac 和 Windows 操作系统，Farbox服务可以免费试用，在本地编辑器内写作自动同步发布在个人博客，对于希望有个人博客但却不愿折腾的小白来说，是个不错的选择，<a href="https://link.zhihu.com/?target=https%3A//www.farbox.com/">点击此处</a>访问 FarBox 官网</p><p><img src="https://pic1.zhimg.com/v2-cdb7e74a53c814349363d3c3e94bff48_b.jpg" alt=""></p><p><img src="https://pic2.zhimg.com/v2-dbbf781edc6be878f8b60837f646d835_b.jpg" alt=""></p><hr><h4 id="●-Miu"><a href="#●-Miu" class="headerlink" title="● Miu"></a>● Miu</h4><p>Miu 是一款 Windows 下的 Markdown 编辑器，支持 Markdown 高亮、代码高亮、即时预览，以及可以快速发布到 Github Gist，小众软件，界面美观，已经找不到官网了，小众软件网有提供百度云下载，<a href="https://link.zhihu.com/?target=https%3A//www.appinn.com/miu-markdown-editor/">Miu 下载地址</a></p><p><img src="https://pic2.zhimg.com/v2-e36b0ee849573cb910c37809678b22d5_b.jpg" alt=""></p><hr><h4 id="●-MacDown"><a href="#●-MacDown" class="headerlink" title="● MacDown"></a>● MacDown</h4><p>MacDown 引用了许多 Mou 的设计方式，仅支持 Mac ，开源免费，<a href="https://link.zhihu.com/?target=http%3A//macdown.uranusjr.com/">点击此处</a>访问 MacDown 官网</p><p><img src="https://pic3.zhimg.com/v2-0b0ecfc8a92fc2a811ba6ecba4a1feea_b.jpg" alt=""></p><hr><h4 id="●-Ulysses"><a href="#●-Ulysses" class="headerlink" title="● Ulysses"></a>● Ulysses</h4><p>一款由国外开发商 The Soulmen 制作的 Markdown 编辑器。与其它同类应用相比，Ulysses 最大的不同在于，它能根据内置的文件管理器，以及与 iCloud 云服务器的实时同步方案，达到最快捷的文章整理效率，支持OS X , iPad，26人民币每月，14天免费试用，<a href="https://link.zhihu.com/?target=https%3A//ulysses.app/">点击此处</a>访问 Ulysses 官网</p><p><img src="https://pic3.zhimg.com/v2-2d4356b543cf5dfa7cbc8851f884a9ba_b.jpg" alt=""></p><hr><h4 id="●-Byword"><a href="#●-Byword" class="headerlink" title="● Byword"></a>● Byword</h4><p>一款轻量级的 Markdown 编辑器，支持Mac，iPhone和iPad，界面极简，功能强大，貌似要付费使用，<a href="https://link.zhihu.com/?target=https%3A//bywordapp.com/">点击此处</a> 访问 Byword 官网</p><p><img src="https://pic1.zhimg.com/v2-37d720b12bb8ec4bb98a623f56e46460_b.jpg" alt=""></p><hr><h4 id="●-MaHua"><a href="#●-MaHua" class="headerlink" title="● MaHua"></a>● MaHua</h4><p>一个在线编辑 Markdown 文档的编辑器，小众软件，VIM 快捷键支持，完美兼容 Github 的 Markdown 语法，界面稍许简陋，<a href="https://link.zhihu.com/?target=http%3A//mahua.jser.me/">点击此处</a>访问 MaHua</p><p><img src="https://pic2.zhimg.com/v2-51d684e81d5692ef6bae316c5fc2f775_b.jpg" alt=""></p><hr><h4 id="●-Dillinger"><a href="#●-Dillinger" class="headerlink" title="● Dillinger"></a>● Dillinger</h4><p>来自国外的 Markdown 编辑器，漂亮强大，支持md、 html、pdf 文件导出，支持Dropbox、Github、Google Drive、Onedrive 一键保存，<a href="https://link.zhihu.com/?target=https%3A//dillinger.io/">点击此处</a>访问 Dillinger</p><p><img src="https://pic4.zhimg.com/v2-c7b64f1d3405f9860d00034d23dc51bf_b.jpg" alt=""></p><hr><h4 id="●-CSDN"><a href="#●-CSDN" class="headerlink" title="● CSDN"></a>● CSDN</h4><p>中国专业IT社区CSDN (Chinese Software Developer Network) 创立于1999年，致力于为中国软件开发者提供知识传播、在线学习、职业发展等全生命周期服务。CSDN的在线编辑器功能强大，支持导出为HTML和md文件，注册账号后即可开始创作，<a href="https://link.zhihu.com/?target=https%3A//www.csdn.net/">点击此处</a>访问CSDN官网</p><p><img src="https://pic4.zhimg.com/v2-f7817daa1597538df2135007b93f11f7_b.jpg" alt=""></p><hr><h4 id="●-简书"><a href="#●-简书" class="headerlink" title="● 简书"></a>● 简书</h4><p>简书是一个优质的创作社区，你可以在线创作并发表到社区，是国内优质原创内容输出平台，简书从一开始就已经支持 Markdown 和富文本编辑，是一个为专门为作者打造的平台，<a href="https://link.zhihu.com/?target=https%3A//www.jianshu.com/">点击此处</a>访问简书官网</p><p><img src="https://pic2.zhimg.com/v2-481c92254a5f13e201e4bbd81a0afec9_b.jpg" alt=""></p><hr><p>要细数 Markdown 编辑器的话，可能永远也数不尽，而且每个人的看法也不同，正所谓萝卜白菜各有所爱，什么编辑器不是最重要的，重要的是我们能写出优质的文章，不断学习进步！不断提升自我！</p><p>参考资料：</p><p><a href="https://link.zhihu.com/?target=http%3A//www.williamlong.info/archives/4319.html">《好用的Markdown编辑器一览》</a>（By：月光）</p><p><a href="https://link.zhihu.com/?target=https%3A//blog.csdn.net/jinhui157/article/details/73872795/">《10款流行的Markdown编辑器，总有一款适合你》</a>（By：xiaoxiao_engineer）</p><p><a href="https://link.zhihu.com/?target=https%3A//sspai.com/post/27792">《解决作者们的焦虑：7 款优秀 Markdown 编辑工具推荐》</a>（By：JailJT）</p><p>‏<em>Source</em>  <a href="https://zhuanlan.zhihu.com/p/69210764">zhuanlan.zhihu.com</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://telegra.ph/file/61ccbcaeeb6edecb4a6ac.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Markdown ，2004年由 John Gruberis 设计和开发，是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，以下将介绍目前比较流行的一些 Markdown 编辑器（排名不分先后）&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://a-little-bear.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>盘ta-谷歌云盘目录程序-goindex魔改版</title>
    <link href="https://a-little-bear.github.io/p/4f83/"/>
    <id>https://a-little-bear.github.io/p/4f83/</id>
    <published>2020-06-23T15:54:06.000Z</published>
    <updated>2020-06-23T15:55:13.754Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/Hidove/goindex">https://github.com/Hidove/goindex</a></p><a id="more"></a><p>盘ta</p><ul><li>一个goindex 修改版</li><li>更改播放器为dplayer、支持切片资源播放.</li><li>其他功能与原版相同.</li><li>切片需要安装<code>FFmpeg</code></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Hidove/goindex&quot;&gt;https://github.com/Hidove/goindex&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="其他" scheme="https://a-little-bear.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
      <category term="网盘" scheme="https://a-little-bear.github.io/categories/%E5%85%B6%E4%BB%96/%E7%BD%91%E7%9B%98/"/>
    
    
  </entry>
  
</feed>
