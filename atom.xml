<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>alittlebear&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://a-little-bear.github.io/"/>
  <updated>2020-12-01T02:57:20.549Z</updated>
  <id>https://a-little-bear.github.io/</id>
  
  <author>
    <name>alittlebear</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开始学Java之14 Arrays</title>
    <link href="https://a-little-bear.github.io/p/23e4/"/>
    <id>https://a-little-bear.github.io/p/23e4/</id>
    <published>2020-12-01T02:03:20.000Z</published>
    <updated>2020-12-01T02:57:20.549Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>只有代码。。</p></blockquote><a id="more"></a><p>理论啥的就不讲了。。。。直接上代码</p><h2 id="数组初始值"><a href="#数组初始值" class="headerlink" title="数组初始值"></a>数组初始值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayEg1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] stuff = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">    stuff[<span class="number">0</span>] = <span class="number">23</span>; stuff[<span class="number">1</span>] = <span class="number">38</span>; stuff[<span class="number">2</span>] = <span class="number">7</span>*<span class="number">2</span>;</span><br><span class="line">    System.out.println(<span class="string">"stuff[0] has "</span> + stuff[<span class="number">0</span>] );</span><br><span class="line">    System.out.println(<span class="string">"stuff[1] has "</span> + stuff[<span class="number">1</span>] );</span><br><span class="line">    System.out.println(<span class="string">"stuff[2] has "</span> + stuff[<span class="number">2</span>] );</span><br><span class="line">    System.out.println(<span class="string">"stuff[3] has "</span> + stuff[<span class="number">3</span>] );</span><br><span class="line">    System.out.println(<span class="string">"stuff[4] has "</span> + stuff[<span class="number">4</span>] ); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>stuff[0] has 23<br>stuff[1] has 38<br>stuff[2] has 14<br>stuff[3] has 0<br>stuff[4] has 0</p></blockquote><p>初始值为0</p><h2 id="一个跟数组没啥关系的代码"><a href="#一个跟数组没啥关系的代码" class="headerlink" title="一个跟数组没啥关系的代码"></a>一个跟数组没啥关系的代码</h2><p>（答案是有关系的，但是我不明白为啥要用到数组。。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Task 1. </span></span><br><span class="line"><span class="comment">Write the code which counts the number </span></span><br><span class="line"><span class="comment">of digits of the number you have entered </span></span><br><span class="line"><span class="comment">and then prints a reverse number.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Input 637</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output : 3 digits, 736</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayEg2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">"Please enter a string"</span>);</span><br><span class="line">    String reverse=<span class="string">""</span>, num = <span class="keyword">new</span> Scanner(System.in).nextLine();</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"The number "</span> + num + <span class="string">" has "</span> + num.length() + <span class="string">" digits"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num.length(); i++)</span><br><span class="line">      reverse = num.charAt(i) + reverse;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"reverse number is "</span> + reverse );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Please enter a string<br>HAHHAHAHHAH<br>The number HAHHAHAHHAH has 11 digits<br>reverse number is HAHHAHAHHAH</p></blockquote><p>答案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptySpot</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        String number;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            arr[i] = scan.nextInt();</span><br><span class="line">            System.out.println(<span class="string">"array elemnent "</span> + arr[i]);</span><br><span class="line">            num = arr[i];</span><br><span class="line"></span><br><span class="line">            number = Integer.toString(num);</span><br><span class="line">            <span class="keyword">int</span> digits = number.length();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"The number  "</span> + num + <span class="string">" has  "</span> + digits + <span class="string">" digits"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = digits - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">char</span> a = number.charAt(j);</span><br><span class="line">                reversenumber = reversenumber + a;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"reversenumber is "</span> + reversenumber);</span><br><span class="line">            reversenumber = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="只保留输入字符串的”字母”"><a href="#只保留输入字符串的”字母”" class="headerlink" title="只保留输入字符串的”字母”"></a>只保留输入字符串的”字母”</h2><p>（这好像没啥关系。。。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayEg2_5</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    System.out.println(<span class="string">"Please enter a string"</span>);</span><br><span class="line">    String numL=<span class="string">""</span>, num = <span class="keyword">new</span> Scanner(System.in).nextLine();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num.length(); i++)&#123;</span><br><span class="line">      <span class="keyword">if</span> (Character.isLetter(num.charAt(i))) </span><br><span class="line">        numL = numL + num.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"only letters: "</span> + numL );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Please enter a string<br>ABUIDQ)<em>!H)</em>D!@JE(!)J)IDNQ)AHHCD!D<br>only letters: ABUIDQHDJEJIDNQAHHCDD</p></blockquote><h2 id="寻找输入数组中重复数字的位置"><a href="#寻找输入数组中重复数字的位置" class="headerlink" title="寻找输入数组中重复数字的位置"></a>寻找输入数组中重复数字的位置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Task 2. Dublicate elements:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Application  that prints duplicate elements if any</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Entry: 1, 2, 3, 3, 4, 5, 6, 7, 8, 8,9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:  3  in the position  2 and 3</span></span><br><span class="line"><span class="comment">         8  in the position  8 and 9</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayEg3</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">      </span><br><span class="line">    System.out.println(<span class="string">"How many numbers"</span>);</span><br><span class="line">    <span class="keyword">int</span> numNum = scan.nextInt();</span><br><span class="line">    <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[numNum];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numNum; i++)&#123;</span><br><span class="line">      num[i] = scan.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numNum; i++)&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;numNum; n++)&#123;</span><br><span class="line">        <span class="keyword">if</span> ((num[i] == num[n]) &amp;&amp; (i&lt;n))</span><br><span class="line">          System.out.println(num[i] + <span class="string">" in the position "</span> + i + <span class="string">" and "</span> + n);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>How many numbers<br>11<br>1<br>2<br>3<br>3<br>4<br>5<br>6<br>7<br>8<br>8<br>9<br>3 in the position 2 and 3<br>8 in the position 8 and 9</p></blockquote><h2 id="寻找输入数组内有没有这个数字"><a href="#寻找输入数组内有没有这个数字" class="headerlink" title="寻找输入数组内有没有这个数字"></a>寻找输入数组内有没有这个数字</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Task 3. Find if an array contains a given number.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Input array &#123; 45,89,67,345, -8,6&#125;  Number: 89</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Ouput:true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Input array &#123; 45,89,67,345, -8,6&#125;  Number: 80 </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">Output: false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayEg4</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">      </span><br><span class="line">    System.out.println(<span class="string">"How many numbers"</span>);</span><br><span class="line">    <span class="keyword">int</span> arrNum = scan.nextInt();</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[arrNum];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arrNum; i++)&#123;</span><br><span class="line">      arr[i] = scan.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"Number:"</span>);</span><br><span class="line">    <span class="keyword">int</span> num = scan.nextInt();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">boolean</span> out = <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arrNum; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span> (num == arr[i]) out=<span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(out?<span class="string">"true"</span>:<span class="string">"false"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>How many numbers<br>6<br>45<br>89<br>67<br>345<br>-8<br>6<br>Number:<br>89<br>true</p><p>-</p><p>How many numbers<br>6<br>45<br>89<br>67<br>345<br>-8<br>6<br>Number:<br>80<br>false</p></blockquote><h2 id="寻找数组内这个数字的位置"><a href="#寻找数组内这个数字的位置" class="headerlink" title="寻找数组内这个数字的位置"></a>寻找数组内这个数字的位置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Task 4. Find index of an element of an array:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#123;3,77,89,-9,76,56&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Element 77 is in the first position.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayEg5</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">      </span><br><span class="line">    System.out.println(<span class="string">"How many numbers"</span>);</span><br><span class="line">    <span class="keyword">int</span> arrNum = scan.nextInt();</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[arrNum];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arrNum; i++)&#123;</span><br><span class="line">      arr[i] = scan.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"Number:"</span>);</span><br><span class="line">    <span class="keyword">int</span> num = scan.nextInt();</span><br><span class="line">    </span><br><span class="line">    String[] posi = &#123;<span class="string">"first"</span>,<span class="string">"second"</span>,<span class="string">"third"</span>,<span class="string">"fourth"</span>,</span><br><span class="line">                     <span class="string">"fifth"</span>,<span class="string">"sixth"</span>,<span class="string">"seventh"</span>,<span class="string">"eighth"</span>,</span><br><span class="line">                     <span class="string">"ninth"</span>,<span class="string">"tenth"</span>,<span class="string">"eleventh"</span>,<span class="string">"twelth"</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arrNum; i++)&#123;</span><br><span class="line">      <span class="keyword">if</span> (num == arr[i]) </span><br><span class="line">        System.out.println(<span class="string">"Element "</span> + num + <span class="string">" is in the "</span> + posi[i] + <span class="string">" position."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>7<br>3<br>77<br>89<br>-9<br>76<br>56<br>77<br>Number:<br>77<br>Element 77 is in the second position.<br>Element 77 is in the seventh position.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;只有代码。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>13-14-小代码-骰子概率</title>
    <link href="https://a-little-bear.github.io/p/56ac/"/>
    <id>https://a-little-bear.github.io/p/56ac/</id>
    <published>2020-11-30T23:33:24.000Z</published>
    <updated>2020-12-01T06:03:52.510Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>自己写的。。</p></blockquote><a id="more"></a><p>计算同时投俩骰子xx次，他们的和出现的概率是多少。。。</p><p>比如说第一次是3+4，和就是7。。。</p><p>Enter number of rolls<br>100000000<br>2’s=  2777175  2.777%<br>3’s=  5552848  5.553%<br>4’s=  8336599  8.337%<br>5’s=  11108527  11.109%<br>6’s=  13890075  13.89%<br>7’s=  16670066  16.67%<br>8’s=  13885674  13.886%<br>9’s=  11113869  11.114%<br>10’s=  8331495  8.331%<br>11’s=  5556215  5.556%<br>12’s=  2777457  2.777%</p><p>投100000000次，和为12的有2777457次，也就是2.777%</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Write an application that counts the outcome of two dice in the number of rolls.</span></span><br><span class="line"><span class="comment"> * Enter number of rolls</span></span><br><span class="line"><span class="comment"> * 67</span></span><br><span class="line"><span class="comment"> * 2's= 2 2.985...</span></span><br><span class="line"><span class="comment"> * 3's= 2 2.985..</span></span><br><span class="line"><span class="comment"> * 4's= 3 4.4776...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoDices</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span>[] dice = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;, times = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">    </span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">    Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">      </span><br><span class="line">    System.out.println(<span class="string">"Enter number of rolls"</span>);</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (num &lt;= <span class="number">0</span>) num = scan.nextInt();</span><br><span class="line">    <span class="comment">/*System.out.println("Enter number of rolls");</span></span><br><span class="line"><span class="comment">    int num = scan.nextInt();*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">      <span class="keyword">int</span> randNum1 = dice[rand.nextInt(dice.length)];</span><br><span class="line">      <span class="keyword">int</span> randNum2 = dice[rand.nextInt(dice.length)];</span><br><span class="line">      times[randNum1+randNum2-<span class="number">2</span>] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">11</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">double</span> possi = times[i] * <span class="number">100.0</span> / num;</span><br><span class="line">      System.out.println(i+<span class="number">2</span> + <span class="string">"'s=    "</span> + times[i] + <span class="string">"    "</span> + Math.round(possi * <span class="number">1000</span>)/<span class="number">1000.0</span> + <span class="string">"%"</span>);</span><br><span class="line">      <span class="comment">//System.out.println(i+2 + "'s=    " + times[i] + "    " + possi + "%");</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有循环（num==负数 时退出）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Write an application that counts the outcome of two dice in the number of rolls.</span></span><br><span class="line"><span class="comment"> * Enter number of rolls</span></span><br><span class="line"><span class="comment"> * 67</span></span><br><span class="line"><span class="comment"> * 2's= 2 2.985...</span></span><br><span class="line"><span class="comment"> * 3's= 2 2.985..</span></span><br><span class="line"><span class="comment"> * 4's= 3 4.4776...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoDices</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    System.out.println(<span class="string">"Exit when input number &lt; 0"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (num &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dice = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;, times = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">        </span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> randNum1 = dice[rand.nextInt(dice.length)];</span><br><span class="line">            <span class="keyword">int</span> randNum2 = dice[rand.nextInt(dice.length)];</span><br><span class="line">            times[randNum1+randNum2-<span class="number">2</span>] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">11</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">double</span> possi = times[i] * <span class="number">100.0</span> / num;</span><br><span class="line">            System.out.println(i+<span class="number">2</span> + <span class="string">"'s=    "</span> + times[i] + <span class="string">"    "</span> + Math.round(possi * <span class="number">1000</span>)/<span class="number">1000.0</span> + <span class="string">"%"</span>);</span><br><span class="line">            <span class="comment">//System.out.println(i+2 + "'s=    " + times[i] + "    " + possi + "%");</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Enter number of rolls"</span>);</span><br><span class="line">        num = scan.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再更改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Write an application that counts the outcome of two dice in the number of rolls.</span></span><br><span class="line"><span class="comment"> * Enter number of rolls</span></span><br><span class="line"><span class="comment"> * 67</span></span><br><span class="line"><span class="comment"> * 2's= 2 2.985...</span></span><br><span class="line"><span class="comment"> * 3's= 2 2.985..</span></span><br><span class="line"><span class="comment"> * 4's= 3 4.4776...</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoDices</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    System.out.println(<span class="string">"Exit when input number &lt; 0"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (num &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] times = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">        <span class="comment">//int[] dice = &#123;1,2,3,4,5,6&#125;, times = new int[11];</span></span><br><span class="line">        </span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> randNum1 = rand.nextInt(<span class="number">6</span>)+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//int randNum1 = dice[rand.nextInt(dice.length)];</span></span><br><span class="line">            <span class="keyword">int</span> randNum2 = rand.nextInt(<span class="number">6</span>)+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//int randNum2 = dice[rand.nextInt(dice.length)];</span></span><br><span class="line">            times[randNum1+randNum2-<span class="number">2</span>] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">11</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">double</span> possi = times[i] * <span class="number">100.0</span> / num;</span><br><span class="line">            System.out.println(i+<span class="number">2</span> + <span class="string">"'s=    "</span> + times[i] + <span class="string">"    "</span> + Math.round(possi * <span class="number">1000</span>)/<span class="number">1000.0</span> + <span class="string">"%"</span>);</span><br><span class="line">            <span class="comment">//System.out.println(i+2 + "'s=    " + times[i] + "    " + possi + "%");</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Enter number of rolls"</span>);</span><br><span class="line">        num = <span class="keyword">new</span> Scanner (System.in).nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再再精简：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoDices</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    System.out.println(<span class="string">"Exit when input number &lt; 0"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (num &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span>[] times = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">        </span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">            times[rand.nextInt(<span class="number">6</span>)+rand.nextInt(<span class="number">6</span>)] += <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">11</span>; i++)</span><br><span class="line">            System.out.println((i+<span class="number">2</span>)+<span class="string">"'s=   "</span>+times[i]+<span class="string">"    "</span>+(Math.round(times[i]*<span class="number">100000.0</span>/num)/<span class="number">1000.0</span>)+<span class="string">"%"</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Enter number of rolls"</span>);</span><br><span class="line">        num = <span class="keyword">new</span> Scanner (System.in).nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再再再精简：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoDices</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"Exit when input number &lt; 0"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"Enter number of rolls"</span>);</span><br><span class="line">        <span class="keyword">int</span> num = <span class="keyword">new</span> Scanner (System.in).nextInt();</span><br><span class="line">        <span class="keyword">if</span> (num &lt;= <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] times = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>];</span><br><span class="line">        </span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;num; ++i)</span><br><span class="line">            ++times[rand.nextInt(<span class="number">6</span>)+rand.nextInt(<span class="number">6</span>)];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">11</span>; ++i)</span><br><span class="line">            System.out.println(String.format(<span class="string">"%d's  %d  %.3f%%"</span>, i+<span class="number">2</span>, times[i], times[i]*<span class="number">100.0</span>/num));        </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Enter number of rolls<br>80<br>2’s=    2    2.5%<br>3’s=    4    5.0%<br>4’s=    7    8.75%<br>5’s=    8    10.0%<br>6’s=    13    16.25%<br>7’s=    14    17.5%<br>8’s=    11    13.75%<br>9’s=    8    10.0%<br>10’s=    7    8.75%<br>11’s=    5    6.25%<br>12’s=    1    1.25%</p><p>-</p><p>-</p><p>Enter number of rolls<br>1000<br>2’s=    33    3.3%<br>3’s=    43    4.3%<br>4’s=    84    8.4%<br>5’s=    113    11.3%<br>6’s=    125    12.5%<br>7’s=    175    17.5%<br>8’s=    152    15.2%<br>9’s=    99    9.9%<br>10’s=    88    8.8%<br>11’s=    56    5.6%<br>12’s=    32    3.2%</p><p>-</p><p>-</p><p>Enter number of rolls<br>100000<br>2’s=    2757    2.757%<br>3’s=    5526    5.526%<br>4’s=    8372    8.372%<br>5’s=    11132    11.132%<br>6’s=    13970    13.97%<br>7’s=    16686    16.686%<br>8’s=    13802    13.802%<br>9’s=    11117    11.117%<br>10’s=    8332    8.332%<br>11’s=    5486    5.486%<br>12’s=    2820    2.82%</p><p>-</p><p>-</p><p>Enter number of rolls<br>100000000<br>2’s=    2777175    2.777%<br>3’s=    5552848    5.553%<br>4’s=    8336599    8.337%<br>5’s=    11108527    11.109%<br>6’s=    13890075    13.89%<br>7’s=    16670066    16.67%<br>8’s=    13885674    13.886%<br>9’s=    11113869    11.114%<br>10’s=    8331495    8.331%<br>11’s=    5556215    5.556%<br>12’s=    2777457    2.777%</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自己写的。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>5-6-超大数计算</title>
    <link href="https://a-little-bear.github.io/p/2378/"/>
    <id>https://a-little-bear.github.io/p/2378/</id>
    <published>2020-11-29T23:24:39.000Z</published>
    <updated>2020-11-29T23:29:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>感谢Natsumi大佬！</p></blockquote><a id="more"></a><p>需要用到任意精度算术 …</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Natsumi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">                BigInteger n1 = <span class="keyword">new</span> BigInteger(<span class="string">"123456789012345678901234567890123456789012345678901234567890"</span>); </span><br><span class="line">                BigInteger n2 = <span class="keyword">new</span> BigInteger(<span class="string">"987654321098765432109876543210987654321098765432109876543210"</span>); </span><br><span class="line"> </span><br><span class="line">                System.out.println(n1.multiply(n2)); </span><br><span class="line">                 </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取值范围是 -2^Integer.MAX_VALUE 到 2^Integer.MAX_VALUE …</p><p>如果你对这个数字有多大没概念的话 … 我可以举个例子 …</p><p>数字一千的长度是四 … 数字一亿的长度是九 … 数字一千亿的长度是十三 …</p><p>而 BigInteger 可以处理的数字长度是六亿四千六百多万 …</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;感谢Natsumi大佬！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>开始学Java之13 练习4-2</title>
    <link href="https://a-little-bear.github.io/p/6a46/"/>
    <id>https://a-little-bear.github.io/p/6a46/</id>
    <published>2020-11-29T22:19:35.000Z</published>
    <updated>2020-11-29T23:07:01.526Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>小练习！</p></blockquote><a id="more"></a><h2 id="练习1-整数相加"><a href="#练习1-整数相加" class="headerlink" title="练习1-整数相加"></a>练习1-整数相加</h2><p>编写一个程序，将用户输入的整数相加。 首先程序询问要累加多少个数字。 然后程序提示用户输入每个数字。 最后，它将打印总和。</p><blockquote><p>How many integers will be added:<br>5<br>Enter an integer:<br>3<br>Enter an integer:<br>4<br>Enter an integer:<br>-4<br>Enter an integer:<br>-3<br>Enter an integer:<br>7<br>The sum is 7</p></blockquote><p>注意不要将整数（在示例中为5）加到和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise4</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> addNum, num=<span class="number">0</span>;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"How many integers will be added:"</span>);</span><br><span class="line">        addNum = scan.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;addNum; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Enter an integer:"</span>);</span><br><span class="line">            num += scan.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"The sum is "</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h2><p>编写一个计算以下总和的程序：</p><p>sum = 1.0/1 + 1.0/2 + 1.0/3 + 1.0/4 + 1.0/5 + …. + 1.0/N</p><p>N是用户输入的整数。</p><blockquote><p>Enter N<br>4<br>Sum is: 2.08333333333</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise4</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Enter N"</span>);</span><br><span class="line">        n = scan.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            sum += <span class="number">1.0</span>/i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Sum is: "</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h2><p>编写一个程序，计算用户输入的一组浮点数的标准偏差。 首先，用户说出要跟随多少个数字N。 然后程序要求并读取每个浮点数。 最后，它写出标准偏差。 一组数字Xi的标准偏差为：</p><p>SD = Math.sqrt( avgSquare - avg^2)</p><p>在此，avg是N个数的平均值，avg ^ 2是其平方。<br>avgSquare是Xi * Xi的平均值。 换句话说，这是每个浮点数的平方值的平均值。<br>例如，如果N = 4，则数字为：</p><p><img src="https://i.loli.net/2020/11/30/kpaATdrb8PWEOIc.png" alt=""></p><p>为此，您需要为每个浮点值在循环体内执行几项操作：将其添加到总和中，将其平方后再将其添加到平方和中。 然后在循环完成后应用公式</p><p>（好复杂。。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardDeviation</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">double</span> num, sum=<span class="number">0</span>, sumSquare=<span class="number">0</span>;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"How many numbers:"</span>);</span><br><span class="line">        n = scan.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Please enter the number:"</span>);</span><br><span class="line">            num = scan.nextDouble();</span><br><span class="line">            </span><br><span class="line">            sum += num;</span><br><span class="line">            sumSquare += num * num;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span> avg2, avgSquare, sD;</span><br><span class="line">        avg2 = (sum / n) * (sum / n);</span><br><span class="line">        </span><br><span class="line">        avgSquare = sumSquare / n;</span><br><span class="line">        </span><br><span class="line">        sD = Math.sqrt(avgSquare - avg2);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Standard deviation: "</span> +sD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardDeviation</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">double</span> num, sum=<span class="number">0</span>, sumSquare=<span class="number">0</span>, sD;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"How many numbers:"</span>);</span><br><span class="line">        n = scan.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Please enter the number:"</span>);</span><br><span class="line">            num = scan.nextDouble();</span><br><span class="line">            </span><br><span class="line">            sum += num;</span><br><span class="line">            sumSquare += num * num;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (i==n)&#123;</span><br><span class="line">                sum=sum/n;</span><br><span class="line">                sumSquare=sumSquare/n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sD = Math.sqrt(sumSquare - (sum * sum));</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Standard deviation: "</span> +sD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再优化版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardDeviation</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">double</span> num, sum=<span class="number">0</span>, sumSquare=<span class="number">0</span>;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"How many numbers:"</span>);</span><br><span class="line">        n = scan.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Please enter the number:"</span>);</span><br><span class="line">            num = scan.nextDouble();</span><br><span class="line">            </span><br><span class="line">            sum += num;</span><br><span class="line">            sumSquare += num * num;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (i==n) sum=Math.pow(sum/n, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Standard deviation: "</span> + Math.sqrt(sumSquare/n - sum));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好吧我尽力了。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;小练习！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>11-12 勉强解读Natsumi大佬的神代码</title>
    <link href="https://a-little-bear.github.io/p/6e40/"/>
    <id>https://a-little-bear.github.io/p/6e40/</id>
    <published>2020-11-29T02:30:31.000Z</published>
    <updated>2020-11-29T03:10:34.075Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>66666666666666</p></blockquote><a id="more"></a><p>大佬是真的厉害，这逻辑我都看不懂了。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Natsumi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        String[][] str = &#123;&#123;<span class="string">"right"</span>,<span class="string">"left"</span>&#125;,&#123;<span class="string">"front"</span>,<span class="string">"rear"</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">boolean</span> warn = <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = i%<span class="number">2</span>;</span><br><span class="line">             </span><br><span class="line">            System.out.println(String.format(<span class="string">"Input %s %s pressure"</span>, str[<span class="number">0</span>][t], str[<span class="number">1</span>][i/<span class="number">2</span>]));</span><br><span class="line">            num[i] = scan.nextInt();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (<span class="number">35</span> &gt; num[i] || num[i] &gt; <span class="number">45</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"Warning: pressure is out of range"</span>);</span><br><span class="line">                warn = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">if</span> ( <span class="number">1</span> == t &amp;&amp; <span class="number">3</span> &lt; Math.abs(num[i] - num[i-<span class="number">1</span>])) warn = <span class="keyword">true</span>;</span><br><span class="line">         </span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        System.out.println(warn?<span class="string">"Inflation is not OK"</span> : <span class="string">"Inflation is OK"</span>);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Natsumi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>]; </span><br><span class="line">        <span class="comment">//创建num[0] num[1] num[2] num[3]</span></span><br><span class="line"></span><br><span class="line">        String[][] str = &#123;&#123;<span class="string">"right"</span>,<span class="string">"left"</span>&#125;,&#123;<span class="string">"front"</span>,<span class="string">"rear"</span>&#125;&#125;; </span><br><span class="line">        <span class="comment">//str[0][0]     str[0][1]    str[1][0]    str[1][1]</span></span><br><span class="line">        <span class="comment">//right front - right rear - left front - left rear</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> warn = <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = i%<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//0 1 0 1</span></span><br><span class="line">             </span><br><span class="line">            System.out.println(String.format(<span class="string">"Input %s %s pressure"</span>, str[<span class="number">0</span>][t], str[<span class="number">1</span>][i/<span class="number">2</span>]));</span><br><span class="line">            <span class="comment">//[i/2]: 0 0 1 1</span></span><br><span class="line">            <span class="comment">//right front - left front - right rear - left rear</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            num[i] = scan.nextInt();</span><br><span class="line">            <span class="comment">//get num[0] num[1] num[2] num[3]</span></span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (<span class="number">35</span> &gt; num[i] || num[i] &gt; <span class="number">45</span>)&#123; </span><br><span class="line">                <span class="comment">//如果数字超出范围，就报错，并将warn改为true（也就是一但报错，这个车肯定是有问题的）</span></span><br><span class="line">                System.out.println(<span class="string">"Warning: pressure is out of range"</span>);</span><br><span class="line">                warn = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> ( <span class="number">1</span> == t &amp;&amp; <span class="number">3</span> &lt; Math.abs(num[i] - num[i-<span class="number">1</span>])) warn = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// 第二次和第四次运行</span></span><br><span class="line">            <span class="comment">// 如果num[2]-num[1]的绝对值大于3 或者 如果num[4]-num[3]的绝对值大于3</span></span><br><span class="line">            <span class="comment">// warn改为true（俩前胎，或者俩后胎 只要有一对差大于3，就肯定有问题）</span></span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        System.out.println(warn?<span class="string">"Inflation is not OK"</span> : <span class="string">"Inflation is OK"</span>);</span><br><span class="line">        <span class="comment">// warn == true 输出not OK</span></span><br><span class="line">        <span class="comment">// warn == falses 输出OK</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;66666666666666&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>开始学Java之12 细讲计数循环</title>
    <link href="https://a-little-bear.github.io/p/dd5d/"/>
    <id>https://a-little-bear.github.io/p/dd5d/</id>
    <published>2020-11-29T01:35:22.000Z</published>
    <updated>2020-11-29T18:59:13.013Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开始给课程标号，已经Java之12了！</p></blockquote><a id="more"></a><p>[TOC]</p><h1 id="计数循环"><a href="#计数循环" class="headerlink" title="计数循环"></a>计数循环</h1><p>本章为您提供有关计数循环的更多练习。 还有其他类型的循环，但是计数循环是迄今为止最常见且值得进一步研究的地方。</p><h2 id="大纲："><a href="#大纲：" class="headerlink" title="大纲："></a>大纲：</h2><ul><li>Counting Upwards by Two’s</li><li>while条件（看门人一样）</li><li>迭代</li><li>减少循环控制变量</li><li>无限循环</li><li>基于循环控制变量的值</li></ul><h2 id="Counting-Upwards-by-Two’s"><a href="#Counting-Upwards-by-Two’s" class="headerlink" title="Counting Upwards by Two’s"></a>Counting Upwards by Two’s</h2><p><img src="https://i.loli.net/2020/11/29/4eK2qjy8w3PsWVG.png" alt=""></p><p><img src="https://i.loli.net/2020/11/29/l8Dr6P25jJutOT7.png" alt=""></p><h2 id="看门人"><a href="#看门人" class="headerlink" title="看门人"></a>看门人</h2><p><img src="https://i.loli.net/2020/11/29/rOfqjULoRe4QHCN.png" alt=""></p><p>循环控制变量计数不需要精确地达到极限：<br>while ( count &lt;= 6 )<br>在上面，值5通过了测试并执行了循环主体。 然后计数增加到7。然后7通过测试。 一会儿的病情就像是一个网守。 它检查是否要执行<br>进入循环体。 它不在乎事情如何发展。 如果测试结果为假，则跳过循环体。 这在流程图中显示。 执行沿箭头方向沿线流动。 标有“测试条件”的菱形代表关守。 如果条件测试为真，则执行进入循环主体。 如果条件测试为false，则不允许执行到循环主体中。<br>当执行循环体时，变量和其他内容都会改变。 然后执行将返回到循环的顶部，在此网闸将再次决定是否让其进入循环主体</p><h2 id="减少循环控制变量"><a href="#减少循环控制变量" class="headerlink" title="减少循环控制变量"></a>减少循环控制变量</h2><p><img src="https://i.loli.net/2020/11/29/Zva4AhPmHgcqe2y.png" alt=""></p><p><img src="https://i.loli.net/2020/11/29/AQqX4l9TDtJZb7V.png" alt=""></p><p>呃。。。原理都清楚，快进快进</p><h2 id="混乱的循环"><a href="#混乱的循环" class="headerlink" title="混乱的循环"></a>混乱的循环</h2><p><img src="https://i.loli.net/2020/11/29/R63GhNpaj4DxO1n.png" alt=""></p><h2 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h2><p><img src="https://i.loli.net/2020/11/29/qev9OnfkVSyzMCs.png" alt=""></p><h2 id="另一个例子"><a href="#另一个例子" class="headerlink" title="另一个例子"></a>另一个例子</h2><p><img src="https://i.loli.net/2020/11/29/XpcQZjfr2z8YHAn.png" alt=""></p><h2 id="更好的版本"><a href="#更好的版本" class="headerlink" title="更好的版本"></a>更好的版本</h2><p><img src="https://i.loli.net/2020/11/29/sohueH4fGDAxdzR.png" alt=""></p><h2 id="0-1的计数"><a href="#0-1的计数" class="headerlink" title="0.1的计数"></a>0.1的计数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[]args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> value;</span><br><span class="line">    <span class="keyword">int</span> tenths = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> inc = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (tenths &lt;= <span class="number">10</span>)&#123;</span><br><span class="line">        value = tenths / <span class="number">10.0</span>;</span><br><span class="line">        System.out.println( <span class="string">"value:"</span> + value );</span><br><span class="line">        tenths = tenths + inc;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"done"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（应该是这个意思。。管他呢）</p><h2 id="整数计数"><a href="#整数计数" class="headerlink" title="整数计数"></a>整数计数</h2><p><img src="https://i.loli.net/2020/11/29/tT6QyUuY7IvkPVn.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// enter a value for limit</span></span><br><span class="line">        <span class="keyword">float</span> inc = <span class="number">0.1</span>;</span><br><span class="line">        <span class="keyword">float</span> value = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">float</span> limit = <span class="number">10.0</span>;</span><br><span class="line">        <span class="keyword">while</span> (value &lt; limit) &#123;</span><br><span class="line">            value = value + inc;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Value was "</span> + value + <span class="string">" when the loop ended"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（运行不了，变量们改成double就行）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// enter a value for limit</span></span><br><span class="line">        <span class="keyword">double</span> inc = <span class="number">0.1</span>;</span><br><span class="line">        <span class="keyword">double</span> value = <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">double</span> limit = <span class="number">10.0</span>;</span><br><span class="line">        <span class="keyword">while</span> (value &lt; limit) &#123;</span><br><span class="line">            value = value + inc;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Value was "</span> + value + <span class="string">" when the loop ended"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Value was 10.09999999999998 when the loop ended</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;开始给课程标号，已经Java之12了！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>开始学Java之11 练习4-1</title>
    <link href="https://a-little-bear.github.io/p/e7ed/"/>
    <id>https://a-little-bear.github.io/p/e7ed/</id>
    <published>2020-11-29T00:06:00.000Z</published>
    <updated>2020-11-29T01:44:14.545Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一步一步来~</p></blockquote><a id="more"></a><h2 id="练习1-—胎压"><a href="#练习1-—胎压" class="headerlink" title="练习1 —胎压"></a>练习1 —胎压</h2><p>汽车的前轮胎应具有相同的压力。 同样，汽车的后轮胎应该都具有与前轮胎相同的压力（但不必与前轮胎相同）。编写一个程序，读取四个轮胎的压力，并写一条消息，说明充气是否正常 或不。</p><blockquote><p>Input right front pressure </p><p>38</p><p> Input left front pressure </p><p>38 </p><p>Input right rear pressure </p><p>42 </p><p>Input left rear pressure </p><p>42</p><p> Inflation is OK</p></blockquote><p>（数组自己提前跟着教程琢磨的。。我懒得创建num1 num2 num3 num4四个变量哈哈。。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TirePressure</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Input right front pressure"</span>);</span><br><span class="line">        num[<span class="number">0</span>] = scan.nextInt();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Input left front pressure"</span>);</span><br><span class="line">        num[<span class="number">1</span>] = scan.nextInt();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Input right rear pressure"</span>);</span><br><span class="line">        num[<span class="number">2</span>] = scan.nextInt();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Input left rear pressure"</span>);</span><br><span class="line">        num[<span class="number">3</span>] = scan.nextInt();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (num[<span class="number">0</span>] == num[<span class="number">1</span>] &amp;&amp; num[<span class="number">2</span>] == num[<span class="number">3</span>])</span><br><span class="line">            System.out.println(<span class="string">"Inflation is OK"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"Inflation is not OK"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习2-—胎压增加"><a href="#练习2-—胎压增加" class="headerlink" title="练习2 —胎压增加"></a>练习2 —胎压增加</h2><p>轮胎中的压力相同是不够的，但是压力必须<br>也在范围内。 修改练习1中的程序，以便它还检查每个<br>轮胎的压力在35到45之间。如果轮胎超出范围，请写出错误<br>立即发送消息，但继续输入值并对其进行处理：</p><blockquote><p>Input right front pressure<br>32<br>Warning: pressure is out of range</p><p>Input left front pressure<br>32<br>Warning: pressure is out of range</p><p>Input right rear pressure<br>42</p><p>Input left rear pressure<br>42</p><p>Inflation is BAD</p></blockquote><p>如果有任何警告，请写出最终错误消息。 （为此，请声明<br>初始化为true但更改为false的布尔变量goodPressure<br>首次发现超出范围的轮胎时。）</p><p>(String那个瞎学的。。。运行了几次没有bug，应该是能行的吧。。)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoreTirePressure</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        </span><br><span class="line">        String[] out = <span class="keyword">new</span> String[]&#123;<span class="string">"right front"</span>,<span class="string">"left front"</span>,<span class="string">"right rear"</span>,<span class="string">"left rear"</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        Boolean warn = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Input "</span> + out[i] + <span class="string">" pressure"</span>);</span><br><span class="line">            num[i] = scan.nextInt();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!(<span class="number">35</span> &lt;= num[i] &amp;&amp; num[i] &lt;= <span class="number">45</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">"Warning: pressure is out of range"</span>);</span><br><span class="line">                warn = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (num[<span class="number">0</span>] == num[<span class="number">1</span>] &amp;&amp; num[<span class="number">2</span>] == num[<span class="number">3</span>] &amp;&amp; !warn)</span><br><span class="line">            System.out.println(<span class="string">"Inflation is OK"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"Inflation is not OK"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习3-—压力不一定要完全一样"><a href="#练习3-—压力不一定要完全一样" class="headerlink" title="练习3 —压力不一定要完全一样"></a>练习3 —压力不一定要完全一样</h2><p>轮胎不必具有完全相同的压力。 修改练习2的程序，以使前轮胎之间的压力在3 psi之内，后轮胎之间的压力在3 psi之内。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoreTirePressureBuilding</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        </span><br><span class="line">        String[] out = <span class="keyword">new</span> String[<span class="number">4</span>];</span><br><span class="line">        out[<span class="number">0</span>] = <span class="keyword">new</span> String(<span class="string">"right front"</span>);</span><br><span class="line">        out[<span class="number">1</span>] = <span class="keyword">new</span> String(<span class="string">"left front"</span>);</span><br><span class="line">        out[<span class="number">2</span>] = <span class="keyword">new</span> String(<span class="string">"right rear"</span>);</span><br><span class="line">        out[<span class="number">3</span>] = <span class="keyword">new</span> String(<span class="string">"left rear"</span>);</span><br><span class="line">        </span><br><span class="line">        Boolean warn = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Input "</span> + out[i] + <span class="string">" pressure"</span>);</span><br><span class="line">            num[i] = scan.nextInt();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!(<span class="number">35</span> &lt;= num[i] &amp;&amp; num[i] &lt;= <span class="number">45</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">"Warning: pressure is out of range"</span>);</span><br><span class="line">                warn = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( (((num[<span class="number">0</span>]-num[<span class="number">1</span>]) &lt; <span class="number">3</span>)||((num[<span class="number">1</span>]-num[<span class="number">0</span>]) &lt; <span class="number">3</span>)) &amp;&amp; </span><br><span class="line">             (((num[<span class="number">2</span>]-num[<span class="number">3</span>]) &lt; <span class="number">3</span>)||((num[<span class="number">3</span>]-num[<span class="number">2</span>]) &lt; <span class="number">3</span>)) &amp;&amp;</span><br><span class="line">             !warn)</span><br><span class="line">            System.out.println(<span class="string">"Inflation is OK"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"Inflation is not OK"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后（感谢大佬帮忙！）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoreTirePressureBuilding</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        </span><br><span class="line">        String[] out = <span class="keyword">new</span> String[]&#123;<span class="string">"right front"</span>,<span class="string">"left front"</span>,<span class="string">"right rear"</span>,<span class="string">"left rear"</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        Boolean warn = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Input "</span> + out[i] + <span class="string">" pressure"</span>);</span><br><span class="line">            num[i] = scan.nextInt();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!(<span class="number">35</span> &lt;= num[i] &amp;&amp; num[i] &lt;= <span class="number">45</span>))&#123;</span><br><span class="line">                System.out.println(<span class="string">"Warning: pressure is out of range"</span>);</span><br><span class="line">                warn = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (Math.abs(num[<span class="number">0</span>]-num[<span class="number">1</span>])&lt;=<span class="number">3</span> &amp;&amp; Math.abs(num[<span class="number">2</span>]-num[<span class="number">3</span>])&lt;=<span class="number">3</span> &amp;&amp; !warn)</span><br><span class="line">            System.out.println(<span class="string">"Inflation is OK"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"Inflation is not OK"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一步一步来~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>开始学Java之10 布尔值表达式</title>
    <link href="https://a-little-bear.github.io/p/fcef/"/>
    <id>https://a-little-bear.github.io/p/fcef/</id>
    <published>2020-11-28T02:48:26.000Z</published>
    <updated>2020-11-29T01:43:56.269Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我好懒呀！！！</p></blockquote><a id="more"></a><h1 id="布尔值表达式"><a href="#布尔值表达式" class="headerlink" title="布尔值表达式"></a>布尔值表达式</h1><p>前几章的if语句会问一些简单的问题，例如<br>count&lt;10。 通常，简单的问题是不够的。 本章讨论更复杂的问题。</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li>关系运算符（复习）</li><li>逻辑运算符</li><li>AND运算符</li><li>如何检查数字是否在范围内</li><li>布尔表达式</li><li>或运算符</li><li>AND和OR之间的比较</li><li>非运算符</li></ul><blockquote><p>您已经决定烘烤一些饼干（比在购物中心购买便宜得多）。<br>一个有趣的曲奇食谱需要4杯面粉和2杯糖。 你看<br>您的厨房，找到3杯面粉和2杯糖。<br>您可以用自己的饼干烘烤饼干吗？<br>您需要4杯面粉和2杯糖。<br>您可以用3杯面粉和2杯糖烘烤饼干吗？</p></blockquote><p>答案是不，不行，糖够了但是面粉不够。</p><h2 id="两者都要"><a href="#两者都要" class="headerlink" title="两者都要"></a>两者都要</h2><p>有关您是否有足够成分的问题分为两个部分：<br>您需要至少4杯面粉，并且至少需要2杯糖<br>由于您没有足够的面粉，所以您没有足够的成分。</p><blockquote><p>如果您有9杯面粉和1杯糖怎么办。 现在您可以按照食谱了吗？</p></blockquote><p>答案还是不，不行，这次糖不够了。</p><h2 id="饼干计算器"><a href="#饼干计算器" class="headerlink" title="饼干计算器"></a>饼干计算器</h2><p>想做饼干，要两个东西正确</p><ul><li>你必须有4个及以上杯的面粉。</li><li>你必须有两个及以上杯的糖。（老外加的糖真是多的可怕哈）</li></ul><p>只要有任意一个不对，你就没有足够的材料做饼干</p><p>（这里懒得翻译了哈哈）</p><p><img src="https://i.loli.net/2020/11/28/9sTNyU7lkfYHtqn.png" alt=""></p><p>每个部分都是一个关系表达式。 关系表达式使用关系运算符 计算一个真或假值。 括号之间的整个表达式也是 布尔表达式。 布尔表达式通常由较小的布尔值组成 表达式。 这类似于人类语言中的复合句子 从较小的句子。</p><h2 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h2><p><img src="https://i.loli.net/2020/11/28/RL8UvbDBlVJOM9S.png" alt=""></p><p>想要有足够的材料，“&amp;&amp;”两边的关系表达式都必须是True，这就是“&amp;&amp;”在两个关系表达式之间的关系</p><p>“&amp;&amp;”需要：</p><p><code>flour &gt;= 4      和          sugar &gt;= 2</code></p><p>都为正确，整个if括号内的布尔值表达式需要为True才能进入True的分支</p><p>“和”运算符&amp;&amp;是逻辑运算符。 逻辑运算符检查两个true / false 值并输出单个true / false值。</p><h2 id="AND-Operator"><a href="#AND-Operator" class="headerlink" title="AND Operator"></a>AND Operator</h2><p>and运算符要求双方都为真：<br>这边必须是真实的&amp;&amp;这边必须是真实的<br>如果双方都为真，则整个表达式为真。 如果任何一方（或双方）均为假，则<br>整个表达式是错误的。 &amp;&amp;是逻辑运算符，因为它结合了两个true / false<br>值转换为单个true / false值。</p><p><img src="https://i.loli.net/2020/11/28/M6IjNo3Pe2SnUTC.png" alt=""></p><p>Here is what &amp;&amp; does:</p><ul><li>true &amp;&amp; true = true </li><li>false &amp;&amp; true = false </li><li>true &amp;&amp; false = false </li><li>false &amp;&amp; false = false</li></ul><h2 id="饼干程序"><a href="#饼干程序" class="headerlink" title="饼干程序"></a>饼干程序</h2><p>作为一种优化，Java仅根据需要确定表达式的值来确定<br>整个表达式的值。 当程序运行时，只要面粉&gt; = 4<br>被发现是假的，整个表达式是假的，并且的假分支<br>如果使用if语句。 这种优化称为短路评估。<br>（请参阅有关此主题的章节。）<br>这是cookie程序的完整Java版本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Cookie Ingredients Checker</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CookieChecker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Declare a Scanner and two integer variables</span></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> sugar, flour;</span><br><span class="line">        <span class="comment">// get the number of cups of flour</span></span><br><span class="line">        System.out.println(<span class="string">"How much flour do you have?"</span>);</span><br><span class="line">        flour = scan.nextInt();</span><br><span class="line">        <span class="comment">// get the number of cups of sugar</span></span><br><span class="line">        System.out.println(<span class="string">"How much sugar do you have?"</span>);</span><br><span class="line">        sugar = scan.nextInt();</span><br><span class="line">        <span class="comment">// check that there are enough of both ingredients</span></span><br><span class="line">        <span class="keyword">if</span> (flour &gt;= <span class="number">4</span> &amp;&amp; sugar &gt;= <span class="number">2</span>)</span><br><span class="line">            System.out.println(<span class="string">"Enough for cookies!"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"sorry...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尝试使用各种面粉和糖的值来检查程序是否了解AND的运作方式</p><h2 id="租车问题"><a href="#租车问题" class="headerlink" title="租车问题"></a>租车问题</h2><p>汽车租赁公司想要一个确定谁可以租车的程序。 规则是：</p><ul><li>房客必须年满21岁。</li><li>房客的信用卡必须有$ 10,000或更多的信用额度。</li></ul><p>该程序类似于cookie程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Rental Car Checker</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RenterChecker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Declare a Scanner and two integer variables</span></span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> age, credit;</span><br><span class="line">        <span class="comment">// get the age of the renter</span></span><br><span class="line">        System.out.println(<span class="string">"How old are you?"</span>);</span><br><span class="line">        age = scan.nextInt();</span><br><span class="line">        <span class="comment">// get the credit line</span></span><br><span class="line">        System.out.println(<span class="string">"How much credit do youhave?"</span>);</span><br><span class="line">        credit = scan.nextInt();</span><br><span class="line">        <span class="comment">// check that both qualifications are met</span></span><br><span class="line">        <span class="keyword">if</span> (age&gt;=<span class="number">21</span> &amp;&amp; credit&gt;=<span class="number">10000</span> ) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Enough to rent this car!"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Have you considered abicycle?"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户必须对年龄测试和信用测试都必须遵守。 如果两个测试都<br>通过后，&amp;&amp;将两个true组合为true。</p><h2 id="更多租客"><a href="#更多租客" class="headerlink" title="更多租客"></a>更多租客</h2><p><img src="https://i.loli.net/2020/11/28/qIcHyTmdfKBxW6J.png" alt=""></p><h2 id="范围测试"><a href="#范围测试" class="headerlink" title="范围测试"></a>范围测试</h2><p>拳击手的体重必须在136到147磅之间。 拳击手的体重每次打架之前都要进行测试，以确保他属于自己的体重类别。 这里有一个程序，检查打纬重量拳击手的体重是否在范围内：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Ringside Weigh-in</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Boxer must weigh between 136 and 147 pounds</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ringside</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> weight;</span><br><span class="line">        <span class="comment">// get the weight</span></span><br><span class="line">        System.out.print(<span class="string">"How heavy is the boxer? "</span>);</span><br><span class="line">        weight = scan.nextInt();</span><br><span class="line">        <span class="comment">// check that the weight is within range</span></span><br><span class="line">        <span class="keyword">if</span> (weight &gt;= <span class="number">136</span> &amp;&amp; weight &lt;= <span class="number">147</span>)</span><br><span class="line">            System.out.println(<span class="string">"In range!"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"Out of range."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拳击手必须满足（体重&gt; = 136），也要满足（体重&lt;= 147）。 两次测试的结果结合在一起<br>和运算符&amp;&amp;。 </p><h2 id="税率"><a href="#税率" class="headerlink" title="税率"></a>税率</h2><p>美国未婚纳税人，年收入在24,000美元至58,150美元（含）之间属于28％的“税收范围”。 这是一个测试纳税人是否属于此程序的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// IRS Weigh-in</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Income between $24000 and $58150 inclusive</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaxGouge</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> income;</span><br><span class="line">        <span class="comment">// get the income</span></span><br><span class="line">        System.out.println(<span class="string">"What is your income?"</span>);</span><br><span class="line">        income = scan.nextInt();</span><br><span class="line">        <span class="comment">// check that the income is within range for the 28% bracket</span></span><br><span class="line">        <span class="keyword">if</span> (income &gt;= <span class="number">24000</span> &amp;&amp; income &lt;= <span class="number">58150</span>)</span><br><span class="line">            System.out.println(<span class="string">"In the 28% bracket."</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"Time for an audit!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整的布尔表达式"><a href="#完整的布尔表达式" class="headerlink" title="完整的布尔表达式"></a>完整的布尔表达式</h2><p>每个关系表达式必须完整。 以下是一个错误的：</p><p><img src="https://i.loli.net/2020/11/28/IcmDKiBMrodGTSb.png" alt=""></p><p>这是不正确的，因为&amp;&amp;后面的字符没有形成完整的关系表达。 Java编译器看不懂。。</p><h2 id="任意顺序（通常）"><a href="#任意顺序（通常）" class="headerlink" title="任意顺序（通常）"></a>任意顺序（通常）</h2><p><img src="https://i.loli.net/2020/11/28/vJ75sXaSOPZYdCo.png" alt=""></p><p>警告：如果布尔表达式包含赋值运算符或方法调用，那么顺序有时很重要。 原因涉及短路前面提到的优化。 大多数情况下，您无需为此担心，但是关于这个潜在问题的心理说明。第40章详细介绍了这种情况。 对于本章中的示例，顺序操作数的大小无关紧要。</p><h2 id="用现金购买汽车"><a href="#用现金购买汽车" class="headerlink" title="用现金购买汽车"></a>用现金购买汽车</h2><p><img src="https://i.loli.net/2020/11/28/HgNnrYaA7T5FsWZ.png" alt=""></p><p>您想购买一辆价值25,000美元的Miata红色跑车。 要购买汽车，您需要足够的现金或足够的信用。<br>让我们忽略结合现金和信贷的可能性。</p><p><img src="https://i.loli.net/2020/11/28/jgOX8ELeQIcCdD3.png" alt=""></p><h2 id="赊购"><a href="#赊购" class="headerlink" title="赊购"></a>赊购</h2><p>回想一下问题：<br>您想购买一辆价值25,000美元的新Miata跑车。 买车，你可以<br>支付现金，或者您可以赊帐购买。<br>您手边可能没有25,000美元。 饼干罐似乎是空的。 没问题 -<br>如果您符合条件，则可以信用购买。</p><p><img src="https://i.loli.net/2020/11/28/ylcLvng5xhAV2WZ.png" alt=""></p><h2 id="学生购车"><a href="#学生购车" class="headerlink" title="学生购车"></a>学生购车</h2><p>回想一下问题：<br>您想购买一辆价值25,000美元的新Miata跑车。 您可以现金支付，也可以可以信用购买。<br>事实证明，您实际上手头有240美元，并且是一名失业学生主修哲学。 信贷经理不愿向您提供任何信贷</p><p><img src="https://i.loli.net/2020/11/28/jdPaM256h7WnIE4.png" alt=""></p><h2 id="购车决定"><a href="#购车决定" class="headerlink" title="购车决定"></a>购车决定</h2><p>您需要钱或信用。 只有一个会做。 当然，如果您有很多钱您可以肯定会买很多车。<br>有时，程序必须测试是否仅满足其中一个条件。 这是如何解决购车问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cash &gt;= <span class="number">25000</span> || credit &gt;= <span class="number">25000</span>)</span><br><span class="line">    System.out.println(<span class="string">"Enough to buy this car!"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    System.out.println(<span class="string">"Have you considered a Yugo?"</span>);</span><br></pre></td></tr></table></figure><p>符号|| （竖线，竖线）表示“或”。 在键盘上，竖线是“Enter”键上方键的顶端字符|||||||||||||||||||||||||||。 OR运算符在以下情况下计算为true满足一个条件或同时满足两个条件。 if语句与<br>两部分：</p><p><img src="https://i.loli.net/2020/11/28/KpDsWz9612OZBLh.png" alt=""></p><p>如果任一部分为true，或者两个部分均为true，则整个布尔表达式为true。</p><p><img src="https://i.loli.net/2020/11/28/28KJGxITHCe9EXa.png" alt=""></p><h2 id="具有OR的布尔表达式"><a href="#具有OR的布尔表达式" class="headerlink" title="具有OR的布尔表达式"></a>具有OR的布尔表达式</h2><p>布尔表达式中使用OR运算符来检查是否至少有一个正确。 如果双方都为正确，则整个表达式为正确。 如果只有一侧是正确的，那么整个表达式是正确的。 如果双方都为错误，则整个表达式为错误false。 OR运算符是逻辑运算符，因为它将两个true / false值合并为一true/false。（机翻）</p><p><img src="https://i.loli.net/2020/11/28/ZSfFNshBeaA2yPb.png" alt=""></p><p>OR检查是否满足至少一项要求。 这种OR称为包含式<br>OR因为一个或两个真实值的真实值。<br>当可以满足任意多个条件时，通常会使用英文单词“ or”。 对于<br>例如，这句话<br>成功的求职者必须具有经验或培训。<br>有时，一次只能满足一个条件时，会使用英文单词“或”。<br>例如，这句话<br>今天会下雨，或者会晴。<br>只有一个条件（“雨”或“晴朗”）可以成立。 这称为异或 exclusive OR。 在<br>在编程中，“或”表示包含性或 inclusive or。</p><p><img src="https://i.loli.net/2020/11/28/ENGr5knB1bROotY.png" alt=""></p><p>（后面没截图是true）</p><h2 id="购车计划"><a href="#购车计划" class="headerlink" title="购车计划"></a>购车计划</h2><p>上面的表达式的计算结果为true，因为至少一个操作数为true。 事实上，一旦检测到第一个为true，就知道整个表达式必须为true，因为是true的，否则任何事情都是true的。</p><p><img src="https://i.loli.net/2020/11/28/bWv87GOPlC9Kq4J.png" alt=""></p><p>作为一种优化，Java仅在确定表达式所需的范围内才对其求值。 程序运行时，一旦发现34&gt; 2为真，则整个众所周知，表达式是正确的，评估没有进一步的方法。 这种类型的优化称为短路评估。 （与AND一样。）<br>这是实现购车决策的完整Java程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Sports Car Purchase</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// You need $25000 in cash or credit</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HotWheels</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> cash, credit;</span><br><span class="line">        <span class="comment">// get the cash</span></span><br><span class="line">        System.out.print(<span class="string">"How much cash? "</span>);</span><br><span class="line">        cash = scan.nextInt();</span><br><span class="line">        <span class="comment">// get the credit line</span></span><br><span class="line">        System.out.print(<span class="string">"How much credit? "</span>);</span><br><span class="line">        credit = scan.nextInt();</span><br><span class="line">        <span class="comment">// check that at least one qualification is met</span></span><br><span class="line">        <span class="keyword">if</span> (cash &gt;= <span class="number">25000</span> || credit &gt;= <span class="number">25000</span>)</span><br><span class="line">            System.out.println(<span class="string">"Enough to buy this car!"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"What about a Yugo?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用各种现金和信贷值编译并运行该程序，以检查您是否<br>了解OR的运作方式。</p><p><img src="https://i.loli.net/2020/11/28/x7VSYlatBeLiH8d.png" alt=""></p><h2 id="保温墙问题"><a href="#保温墙问题" class="headerlink" title="保温墙问题"></a>保温墙问题</h2><p>为了满足建筑规范要求，新房子的外墙必须完好无损绝缘的。 假设建筑法规要求外墙至少要保温4英寸的玻璃纤维棉絮或至少3英寸的泡沫绝缘材料。这是一个程序，要求输入玻璃纤维的英寸数和<br>英寸的泡沫，并确定新房子是否符合建筑规范。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HotHouse</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> fiber, foam;</span><br><span class="line">        <span class="comment">// get the inches of fiber</span></span><br><span class="line">        System.out.println(<span class="string">"How much fiber?"</span>);</span><br><span class="line">        fiber = scan.nextInt();</span><br><span class="line">        <span class="comment">// get the inches of foam</span></span><br><span class="line">        System.out.println(<span class="string">"How much foam?"</span>);</span><br><span class="line">        foam = scan.nextInt();</span><br><span class="line">        <span class="comment">// check that at least one requirement is met</span></span><br><span class="line">        <span class="keyword">if</span> (fiber &gt;= <span class="number">4</span> || foam &gt;= <span class="number">3</span>)</span><br><span class="line">            System.out.println(<span class="string">"House passes the code requirements!"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">"House fails."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AND和OR之间的区别"><a href="#AND和OR之间的区别" class="headerlink" title="AND和OR之间的区别"></a>AND和OR之间的区别</h2><p>如果房屋有6英寸的玻璃纤维击球和0英寸的玻璃击球，将会发生以下情况</p><p><img src="https://i.loli.net/2020/11/28/F4yoKsOjMpdWXBZ.png" alt=""></p><p>一个True就足够了。<br>AND与OR不同。，他们都结合了两个布尔值（True/False）变成一个布尔值。 但是每个人都以不同的方式来做：</p><p>AND所有值必须为true才能得到true。<br>OR至少一个值为true就能获得true</p><p>AND和OR的运算可以显示在真值表中。 在表中，A和B是操作数。 它们代表真/假值或产生真/假的表达式价值观。 例如，A可以代表关系表达式，例如memory&gt;512或字符串比较，例如phrase.equals（“ quit”）。</p><p><img src="https://i.loli.net/2020/11/28/LOJtnlxQPamUzjg.png" alt=""></p><p>真值表的每一行都显示了逻辑运算符如何组合的真/假值<br>操作数。 例如，第一行说如果A为假而B为假，则A &amp;&amp; B为<br>假也A || B是假的。<br>第三行说，如果A为真，B为假，那么A &amp;&amp; B为假，A || B是真的。<br>左两栏中列出了操作数A和B的所有可能的真值。<br>每个操作数可以取值true或false，因此有四个可能<br>两个操作数的值的组合。</p><h2 id="NOT（-）"><a href="#NOT（-）" class="headerlink" title="NOT（!）"></a>NOT（!）</h2><p>Java中的NOT运算符是： ！（感叹号）。 NOT运算符更改从真值表中可以看到，从真到假和从假到真。 这看起来很愚蠢可以做，但通常很有用。 有时用特定的方式，但是程序逻辑要求与您编写的内容相反。</p><p><img src="https://i.loli.net/2020/11/28/Km4Hal9oiufI8Zn.png" alt=""></p><p><img src="https://i.loli.net/2020/11/28/Oy4IdzLMxVTRU5A.png" alt=""></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>将括号放在整个表达式上很重要，这样可以应用NOT<br>正确地。 假设您正在考虑购买35美元的鞋子。 计算过程如下</p><p><img src="https://i.loli.net/2020/11/28/twrI27p1GoLU6Zg.png" alt=""></p><p><img src="https://i.loli.net/2020/11/28/Wp6ETUM859l7zLs.png" alt=""></p><h2 id="NOT的优先顺序"><a href="#NOT的优先顺序" class="headerlink" title="NOT的优先顺序"></a>NOT的优先顺序</h2><p>NOT运算符具有较高的优先级，因此它是在算术和关系运算之前完成的<br>运算符，除非您使用括号。 检查以下内容：</p><p>! cost&lt;50</p><p>非法：不能使用！ 在算术变量上<br>因为“！” 具有较高的优先级，上面说将其应用于成本。 这不会<br>之所以起作用，是因为cost是一个整数，而不是仅适用于布尔值。</p><p><img src="https://i.loli.net/2020/11/28/T79pW3fLvywdCgA.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我好懒呀！！！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>8-9 小代码 检测是不是回文</title>
    <link href="https://a-little-bear.github.io/p/e2f2/"/>
    <id>https://a-little-bear.github.io/p/e2f2/</id>
    <published>2020-11-27T16:35:52.000Z</published>
    <updated>2020-11-29T02:30:59.106Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>自己写的哈哈</p></blockquote><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Palindrome</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String reverse=<span class="string">""</span>, same=<span class="string">""</span>;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Please enter the text: "</span>);</span><br><span class="line">        String text = scan.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"Your text: "</span> + text);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;text.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(text.charAt(i)) || Character.isLetter(text.charAt(i)))&#123;</span><br><span class="line">                same = same + text.charAt(i);</span><br><span class="line">                reverse = text.charAt(i) + reverse;</span><br><span class="line">                <span class="comment">/*same = same + Character.toLowerCase(text.charAt(i));</span></span><br><span class="line"><span class="comment">                reverse = Character.toLowerCase(text.charAt(i)) + reverse;*/</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Only Digits and Letters: "</span> + same);</span><br><span class="line">        System.out.println(<span class="string">"Reverse: "</span> + reverse);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (same.equalsIgnoreCase(reverse))&#123; <span class="comment">//same.equals(reverse)</span></span><br><span class="line">            System.out.println(<span class="string">"It is a palindrome."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"It is not a palindrome."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/28/egU2kGjI4yR9WY8.png" alt=""></p><p><img src="https://i.loli.net/2020/11/28/2uGtUnPp8OV6qHd.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;自己写的哈哈&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>开始学Java之9 对象</title>
    <link href="https://a-little-bear.github.io/p/3800/"/>
    <id>https://a-little-bear.github.io/p/3800/</id>
    <published>2020-11-27T13:43:12.000Z</published>
    <updated>2020-11-29T01:43:46.305Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首页显示摘要内容（替换成自己的）</p></blockquote><a id="more"></a><p>正文内容（替换成自己的）</p><p>表达式和运算符都学得差不多了，就不再学了。。不过有一个新的知识</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalculateTax</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> DURABLE = <span class="number">0.045</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> NONDURABLE = <span class="number">0.038</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保留字final告诉编译器该值不会更改。 常量的名称与变量的名称遵循相同的规则。 （程序员有时将所有大写字母用作常量；但这是个人风格的问题，而不是语言的一部分。）现在，常量可以在表达式中使用，例如：</p><p><code>taxamount = gross * DURABLE ;</code></p><p>但下面这个不行：</p><p><code>DURABLE = 0.441;</code></p><h1 id="对象数据"><a href="#对象数据" class="headerlink" title="对象数据"></a>对象数据</h1><p>本章简要讨论对象以及如何使用它们。 此处讨论的对象在Java随附的标准软件包中定义。 后面的章节讨论如何定义自己的对象</p><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><ul><li>Classes 类</li><li>Objects 对象</li><li>Reference variables 参考变量</li><li>String字符串对象</li><li>对象的运行方法</li><li>创建String对象的方法</li><li>类型包装器</li><li>包装</li></ul><h2 id="对象和基本数据"><a href="#对象和基本数据" class="headerlink" title="对象和基本数据"></a>对象和基本数据</h2><p><img src="https://i.loli.net/2020/11/27/sYc97CU3bPg5vma.png" alt=""></p><p>基本数据类型使用少量内存使用位模式表示单个数据项。 例如，基本数据类型int使用32位表示整数。 Java中只有八种基本数据类型：字节byte，短型short，整型int，长型long，浮点型float，双精度型double，字符型char和布尔型boolean。 Java程序无法定义任何其他基本数据类型。</p><p>对象是一个很大的内存块，它可能包含大量数据以及用于处理该数据的方法（小型程序）。 Java有成千上万种标准的对象类，程序员可以轻松地创建其他类。 （尽管有成千上万的标准类，但对于本课程而言，您只需要熟悉十几个左右的类即可。其他类用于高级编程。）<br>对象是如此有用，以至于我们需要立即开始使用它们，尽管直到第25章将不对它们进行全面讨论。</p><h2 id="对象的图片"><a href="#对象的图片" class="headerlink" title="对象的图片"></a>对象的图片</h2><p><img src="https://i.loli.net/2020/11/27/vs1yDAGdoIFCqkY.png" alt=""></p><p>对象由数据和方法组成。 图片说明了一个概念上的对象。 黄色的小砖块代表内存字节。 对象的方法和对象的数据以字节为单位构造。 该对象包含字符“Elementary, my dear Watson!” 并包含用于操纵该数据的几种方法。</p><p>类是对一种对象的描述。 它是一种对象的数据类型。 类描述组成特定类型的对象的内容，其数据及其方法。 类仅是描述。 这就像房子的计划。 在盖房子之前，您应该有一个计划。 但是，一旦有了计划，就可以建造任意数量的类似房屋。</p><p>图片表示String类的对象。 这样的对象包含一串字符以及可以使用这些字符执行操作的各种方法。 （一个String对象中有几十种方法。图中只显示了几种。）</p><h2 id="运行时创建的对象"><a href="#运行时创建的对象" class="headerlink" title="运行时创建的对象"></a>运行时创建的对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo1</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span> </span>&#123; </span><br><span class="line">        String str; </span><br><span class="line">        str = <span class="keyword">new</span> String( <span class="string">"Elementary, my dear Watson!"</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>String str</code>在这里创建了一个参考变量（reference variable），没有创建一个String对象。变量str用于在创建一个String后引用它。 下一条语句</p><p><code>str = new String( &quot;Elementary, my dear Watson!&quot; );</code></p><p>是一个创建对象的赋值语句，并将对该对象的引用放在str中。</p><p>程序停止运行后，String对象不再存在。 计算机系统回收其内存以用于其他用途。</p><h2 id="对象参考"><a href="#对象参考" class="headerlink" title="对象参考"></a>对象参考</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="keyword">new</span> String( <span class="string">"Elementary, my dear Watson!"</span> );</span><br></pre></td></tr></table></figure><p>上面是我们考虑的赋值语句</p><p>它是这样的：</p><ol><li>计算表达式。<br><code>new String( &quot;Elementary, my dear Watson!&quot;)</code><br>这将创建一个新对象。对该对象的引用描述了该对象在内存中的位置。它使Java虚拟计算机可以找到对象。</li><li>将值存储在变量中。<br>在第二步中，引用存储在引用变量中：<br><code>str = The reference to the string just created</code><br>现在，只要程序需要引用该对象，它就会使用变量str。<br>参考就像手机号码。拥有您电话号码的人可以向您发送消息，并要求您执行操作，无论您身在何处。想想您的老板打电话给您并发送一条消息，“开始处理该报告！”这就像使用对象引用来要求对象运行方法。<br>有时，变量str称为对象的“名称”。这很草率，如果不小心，可能会导致混乱。对象，引用变量和引用是三件事。</li></ol><h2 id="之前和之后"><a href="#之前和之后" class="headerlink" title="之前和之后"></a>之前和之后</h2><p>这是动作图片。 第一个图显示了该程序开始运行时的情况。 尚未创建任何对象，但是引用变量存在。 变量中的斜杠表示尚未引用对象。 然后，赋值语句执行：<br><code>str = new String( &quot;Elementary, my dear Watson!&quot; );</code><br>这将创建一个对象，用数据填充它，并将对它的引用放在str中。 如右图所示。 引用显示为通向对象的箭头，这是思考它的好方法。 （尽管实际上，它只是一种模式，就像计算机内存中的所有其他模式一样。）</p><p><img src="https://i.loli.net/2020/11/27/GKijwuveAxNr2ay.png" alt="">)<img src="https://i.loli.net/2020/11/27/WJypnS9jmOvroL2.png" alt=""></p><h2 id="运行一个方法method"><a href="#运行一个方法method" class="headerlink" title="运行一个方法method"></a>运行一个方法method</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        str = <span class="keyword">new</span> String(<span class="string">"Elementary, my dear Watson!"</span>);</span><br><span class="line">        len = str.length();</span><br><span class="line">        System.out.println(<span class="string">"The length is: "</span> + len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>str.length();</code> 这个表达式运行了str对象的length()方法。</p><p>此方法计算对象数据中的字符数。 在我们的对象中，它计算”Elementary, my dear Watson!”中的字符数。 这是27。空格字符和标点符号都计入字符串的长度。 然后将该值分配给int变量len。调用方法意味着要求方法运行。 该程序称为length（）方法。 （有时，短语“调用方法”是指同一件事。）</p><h2 id="点表示法"><a href="#点表示法" class="headerlink" title="点表示法"></a>点表示法</h2><p>对象包含的各种事物（变量及其方法）被称为该对象的成员。 使用点符号访问对象的成员，如下所示：</p><p><code>objectReference . memberName</code></p><p>通常，objectReference包含在变量中，但并不总是包含在变量中。 如果要运行对象的方法，请使用方法名称。 如果需要参数（提供给方法的值），则将它们放入（）内，如下所示</p><p><code>objectReference . methodName( parameter )</code></p><p>即使不需要参数，也始终将（）与方法名一起使用。</p><h2 id="声明参考变量"><a href="#声明参考变量" class="headerlink" title="声明参考变量"></a>声明参考变量</h2><p>有几种方法声明：</p><p>ClassName variableName;</p><ul><li>这个声明了一个参考变量和声明了所在类，没有对象被创建</li></ul><p>ClassName variableName = new ClassName( parameter, parameter, …);</p><ul><li>这声明了一个参考变量，并且声明了对象的类，但是现在，在运行时，将创建一个新对象，并将对该对象的引用放入变量中。 有时在构造对象时需要参数</li></ul><p>ClassName variableNameOne, variableNameTwo;</p><ul><li>这个声明了两个参考变量，两者都可能引用相同类的对象。 没有创建对象。 如果需要，可以使用两个以上的变量来执行此操作。</li></ul><p>ClassName variableNameOne = new ClassName( parameter, parameter, … ),<br>variableNameTwo = new ClassName( parameter, parameter, … ) ;</p><ul><li>这声明了两个参考变量。 在运行时，将创建两个对象，并将它们的引用分配给变量。 同样，只要遵循模式，就可以执行两次以上的操作</li></ul><h2 id="创建字符串的方法"><a href="#创建字符串的方法" class="headerlink" title="创建字符串的方法"></a>创建字符串的方法</h2><p>String对象的许多方法都会创建其他String对象。<br>例如，substring（int begin）方法创建一个新的String，该字符串包含原始字符串中部分数据的副本。 这是使用此方法的程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="keyword">new</span> String(<span class="string">"Golf is a good walk spoiled."</span>); <span class="comment">// create the original object String </span></span><br><span class="line">        sub = str.substring(<span class="number">8</span>); <span class="comment">//create a new object from the original</span></span><br><span class="line">        System.out.println(sub);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表达式：str.substring(8)  创建一个新的String对象。 该对象包含自己的数据，这些数据是从原始字符串复制的字符。 原始字符串不变。 复制从原始字符串的字符编号8开始，一直到结尾。 字符编号从零开始，因此原始字符串中的字符编号8是第一个“ a”。</p><p>原始字符串的子字符串包含在新的String对象中。 对该新字符串的引用将分配给引用变量sub</p><h2 id="新字符串"><a href="#新字符串" class="headerlink" title="新字符串"></a>新字符串</h2><p>这是程序运行时发生的情况的图片。 程序首次启动时，有两个参考变量，但没有对象。 第一条语句执行后，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String( <span class="string">"Golf is a good walk spoiled."</span> ); <span class="comment">// create the original object</span></span><br></pre></td></tr></table></figure><p>创建一个String对象，并将对该对象的引用放在变量str中。 （图片仅显示对象的数据部分。）</p><p><img src="https://i.loli.net/2020/11/28/JGMV61ZtunqajCm.png" alt=""></p><p>当第二条语句执行时，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sub = str.substring(<span class="number">8</span>); <span class="comment">//create a new object from the original</span></span><br></pre></td></tr></table></figure><p>创建一个新对象，该对象包含第一个对象中字符的子字符串。 为变量sub分配了对此对象的引用。</p><h2 id="对象创建对象"><a href="#对象创建对象" class="headerlink" title="对象创建对象"></a>对象创建对象</h2><p>一个对象可以创建另一个对象似乎有点奇怪。 这不是现实世界对象通常的行为方式。 砖块不会创建其他砖块。 汽车不会创造其他汽车。 但是某些现实世界中的物体，动物和其他生物可以通过复杂的过程来创建其他新物体，这些过程涉及DNA中包含的指令。<br>String对象的substring（）方法通过要求Java虚拟计算机创建一个新对象来创建一个新对象。 虚拟计算机按照类中包含的说明以通常的方式创建新对象</p><h2 id="其他字符串方法"><a href="#其他字符串方法" class="headerlink" title="其他字符串方法"></a>其他字符串方法</h2><p>有很多String方法。 以下列表仅包含一些。 有关完整列表和更多详细说明，请参阅您的文档（在硬盘或网络上）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">( <span class="keyword">int</span> index )</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span><span class="params">( String str )</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">( String suffix )</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">( Object anObject )</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">( String anotherString )</span> </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">( <span class="keyword">int</span> ch )</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">( String str )</span> </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">( String prefix )</span> </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">( <span class="keyword">int</span> beginIndex )</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">( <span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex )</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toLowerCase</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpperCase</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">trim</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>在练习和后续章节中将介绍其中一些方法</p><h2 id="包装"><a href="#包装" class="headerlink" title="包装"></a>包装</h2><p>通常将一组相关类放入称为包的集合中。 Java有许多软件包的标准配置。 例如，String类是名为java.lang的软件包的一部分。 该包中包含几个有用的类。 您可以使用此包中的类，而无需执行任何特殊操作。<br>Java还附带了其他标准软件包。 要使用其中一个软件包中的类，您的程序必须告诉编译器哪个软件包包含该类。 一种方法是将包名称与类一起使用。 这是一个明确提及在何处找到String类的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImportDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        java.lang.String str;</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        str = <span class="keyword">new</span> java.lang.String(<span class="string">"Elementary, my dear Watson!"</span>);</span><br><span class="line">        len = str.length();</span><br><span class="line">        System.out.println(<span class="string">"The length is: "</span> + len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该程序与以前的版本运行相同。 与大多数软件包不同，不需要明确提及软件包java.lang。</p><h2 id="导入-import"><a href="#导入-import" class="headerlink" title="导入 import"></a>导入 import</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImportDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        java.util.Scanner scan;</span><br><span class="line">        scan = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">        <span class="comment">// do something with the Scanner object (see next chapter)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器被告知类Scanner在软件包java.util中。 执行此操作的另一种方法是导入类，如以下程序所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImportDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan;</span><br><span class="line">        scan = <span class="keyword">new</span> Scanner(System.in); <span class="comment">// do something with the Scanner object (see next chapter)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该程序的第二个版本中，语句：<br>import java.util.Scanner;<br>告诉编译器在java.util包中找到了Scanner类，因此程序的其余部分不需要每次使用Scanner时都包含包名称。</p><h2 id="导入包中的所有类"><a href="#导入包中的所有类" class="headerlink" title="导入包中的所有类"></a>导入包中的所有类</h2><p>程序通常需要一个特定包（例如java.util）中的多个类。 在这种情况下，方便的是一次导入包中的所有类，如以下程序所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImportDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan; <span class="comment">// a class in java.util</span></span><br><span class="line">        Random rand; <span class="comment">// another class in java.util</span></span><br><span class="line">        scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        rand = <span class="keyword">new</span> Random(); </span><br><span class="line">        <span class="comment">// do something with the Scanner and Random objects (see following chapters)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>import java.util.*;  部分意味着导入包中的所有类。 即使您只需要其中一个或两个，这样做也没有什么害处</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首页显示摘要内容（替换成自己的）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>开始学Java之8 练习2.1-2.4</title>
    <link href="https://a-little-bear.github.io/p/7f57/"/>
    <id>https://a-little-bear.github.io/p/7f57/</id>
    <published>2020-11-26T18:57:15.000Z</published>
    <updated>2020-11-29T01:43:27.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不难。。</p></blockquote><a id="more"></a><h1 id="2-1"><a href="#2-1" class="headerlink" title="2.1"></a>2.1</h1><h2 id="练习一："><a href="#练习一：" class="headerlink" title="练习一："></a>练习一：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShortEg</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">short</span> value = <span class="number">32</span>;</span><br><span class="line">        System.out.println(<span class="string">"A short: "</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求：</p><ol><li>运行代码，看输出。</li><li>把32换成356，运行，看输出。</li><li>356换成35000，尝试编译，会发生啥？</li><li>数据类型换成int，有啥不同？</li></ol><p>-</p><ol><li>A short: 32</li><li>A short: 356</li><li>无法编译</li><li>A short: 35000 可以编译</li></ol><h2 id="练习二："><a href="#练习二：" class="headerlink" title="练习二："></a>练习二：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleEg</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> value = <span class="number">32</span>;</span><br><span class="line">        System.out.println(<span class="string">"A double: "</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求：编译与运行这个程序，输出跟上面那个值一样吗？</p><p>-</p><blockquote><p>A double: 32.0 ，后面有小数点，不一样</p></blockquote><h2 id="练习三："><a href="#练习三：" class="headerlink" title="练习三："></a>练习三：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleCrash</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> value = <span class="number">32</span>;</span><br><span class="line">        System.out.println(<span class="string">"e to the power value: "</span> + Math.exp(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求：这个编译与运行成不成功？把32一点点增大试试</p><p>-</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleCrash</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">30</span>; i&lt;<span class="number">1800</span>; i+=<span class="number">30</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"e to the power of "</span> +i+ <span class="string">" = "</span> + Math.exp(i));</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>e to the power of 30 = 1.0686474581524463E13<br>e to the power of 60 = 1.1420073898156842E26<br>e to the power of 90 = 1.2204032943178408E39<br>e to the power of 120 = 1.3041808783936323E52<br>e to the power of 150 = 1.3937095806663797E65<br>e to the power of 180 = 1.4893842007818383E78<br>e to the power of 210 = 1.5916266403779241E91<br>e to the power of 240 = 1.700887763567586E104<br>e to the power of 270 = 1.8176493851391E117<br>e to the power of 300 = 1.9424263952412558E130<br>e to the power of 330 = 2.075769029922787E143<br>e to the power of 360 = 2.2182652975385555E156<br>e to the power of 390 = 2.370543571722357E169<br>e to the power of 420 = 2.5332753623607178E182<br>e to the power of 450 = 2.7071782767869983E195<br>e to the power of 480 = 2.8930191842539453E208<br>e to the power of 510 = 3.091617597639242E221<br>e to the power of 540 = 3.3038492872965484E234<br>e to the power of 570 = 3.5306501429882274E247<br>e to the power of 600 = 3.7730203009299397E260<br>e to the power of 630 = 4.032028554146358E273<br>e to the power of 660 = 4.308817065586588E286<br>e to the power of 690 = 4.60460640478299E299<br>e to the power of 720 = Infinity<br>e to the power of 750 = Infinity<br>e to the power of 780 = Infinity<br>e to the power of 810 = Infinity<br>e to the power of 840 = Infinity<br>e to the power of 870 = Infinity<br>e to the power of 900 = Infinity<br>e to the power of 930 = Infinity<br>e to the power of 960 = Infinity<br>e to the power of 990 = Infinity<br>e to the power of 1020 = Infinity<br>e to the power of 1050 = Infinity<br>e to the power of 1080 = Infinity<br>e to the power of 1110 = Infinity<br>e to the power of 1140 = Infinity<br>e to the power of 1170 = Infinity<br>e to the power of 1200 = Infinity<br>e to the power of 1230 = Infinity<br>e to the power of 1260 = Infinity<br>e to the power of 1290 = Infinity<br>e to the power of 1320 = Infinity<br>e to the power of 1350 = Infinity<br>e to the power of 1380 = Infinity<br>e to the power of 1410 = Infinity<br>e to the power of 1440 = Infinity<br>e to the power of 1470 = Infinity<br>e to the power of 1500 = Infinity<br>e to the power of 1530 = Infinity<br>e to the power of 1560 = Infinity<br>e to the power of 1590 = Infinity<br>e to the power of 1620 = Infinity<br>e to the power of 1650 = Infinity<br>e to the power of 1680 = Infinity<br>e to the power of 1710 = Infinity<br>e to the power of 1740 = Infinity<br>e to the power of 1770 = Infinity</p></blockquote><h2 id="练习四："><a href="#练习四：" class="headerlink" title="练习四："></a>练习四：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CharEg</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="string">'A'</span>;</span><br><span class="line">        System.out.println(<span class="string">"A char: "</span> + ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要求</p><ol><li>‘A’改成’Z’</li><li>‘A’改成’AA’</li><li>‘A’改成’ ‘</li><li>‘A’改成’’</li><li>‘A’改成”A”</li></ol><p>-</p><ol><li>A char: Z</li><li>报错：不是语句</li><li>A char: </li><li>报错：空字符文字</li><li>报错：不兼容的类型，java.lang.String无法转换为char</li></ol><h1 id="2-2"><a href="#2-2" class="headerlink" title="2.2"></a>2.2</h1><h2 id="练习一：-1"><a href="#练习一：-1" class="headerlink" title="练习一："></a>练习一：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> hoursWorked = <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">double</span> payRate = <span class="number">10.0</span>, taxRate = <span class="number">0.10</span>;</span><br><span class="line">        System.out.println(<span class="string">"Hours Worked: "</span> + hoursWorked);</span><br><span class="line">        System.out.println(<span class="string">"pay Amount : "</span> + (hoursWorked * payRate));</span><br><span class="line">        System.out.println(<span class="string">"tax Amount : "</span> + (hoursWorked * payRate * taxRate));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对其进行修改，以便每个变量都由其自己声明并且不初始化。 接下来，编写三个赋值语句以为每个变量赋一个值。 运行程序； 检查输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> hoursWorked;</span><br><span class="line">        <span class="keyword">double</span> payRate, taxRate;</span><br><span class="line">        hoursWorked = <span class="number">40</span>;</span><br><span class="line">        payRate = <span class="number">10.0</span>;</span><br><span class="line">        taxRate = <span class="number">0.10</span>;</span><br><span class="line">        System.out.println(<span class="string">"Hours Worked: "</span> + hoursWorked);</span><br><span class="line">        System.out.println(<span class="string">"pay Amount : "</span> + (hoursWorked * payRate));</span><br><span class="line">        System.out.println(<span class="string">"tax Amount : "</span> + (hoursWorked * payRate * taxRate));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在让我们中断一些事情：从程序中删除一个声明。 你可以编译吗？</p><blockquote><p>不能。</p></blockquote><p>现在，从正确的程序中删除初始化之一。 （例如，从第一个声明中删除字符“ = 40”。尝试编译并运行该程序。何时发现问题？</p><blockquote><p>第一个输出时。</p></blockquote><h2 id="练习二：-1"><a href="#练习二：-1" class="headerlink" title="练习二："></a>练习二：</h2><p><img src="https://i.loli.net/2020/11/27/eMVqr2HC6WokFwK.png" alt=""></p><p>编写一个具有双精度变量X的程序。为其分配一个值。 写语句，计算该语句的值并将结果存储在另一个双精度变量中。 最后写出结果，类似：</p><p><img src="https://i.loli.net/2020/11/27/DsPTMbxW41VgiyN.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x, value;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        System.out.println(<span class="string">"Please enter the value of x "</span>);</span><br><span class="line">        x = scan.nextDouble();</span><br><span class="line">        </span><br><span class="line">        value = (<span class="number">3</span> * (x * x)) - (<span class="number">8</span> * x) + <span class="number">4</span>;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习三：-1"><a href="#练习三：-1" class="headerlink" title="练习三："></a>练习三：</h2><p>在练习2中修改程序，以便程序的一次运行将针对三个不同的X值（0.0、2.0和4.0（或您选择的任何三个值））计算并输出值。<br>仅使用两个变量（可能称为x和value）编写程序。 当然，这意味着您将不得不在程序中不同位置的这些变量中放置不同的内容。<br>在编写程序时，请使用编辑器的“复制”和“粘贴”功能，以避免重新键入相似的行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x, value;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Please enter the value of x "</span>);</span><br><span class="line">            x = scan.nextDouble();</span><br><span class="line">            </span><br><span class="line">            value = (<span class="number">3</span> * (x * x)) - (<span class="number">8</span> * x) + <span class="number">4</span>;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> x, value;</span><br><span class="line">        </span><br><span class="line">        x=<span class="number">2.1</span>;</span><br><span class="line">        value = (<span class="number">3</span> * (x * x)) - (<span class="number">8</span> * x) + <span class="number">4</span>;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        </span><br><span class="line">        x=<span class="number">4.8</span>;</span><br><span class="line">        value = (<span class="number">3</span> * (x * x)) - (<span class="number">8</span> * x) + <span class="number">4</span>;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        </span><br><span class="line">        x=<span class="number">6.6</span>;</span><br><span class="line">        value = (<span class="number">3</span> * (x * x)) - (<span class="number">8</span> * x) + <span class="number">4</span>;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-3"><a href="#2-3" class="headerlink" title="2.3"></a>2.3</h1><p>说明：请按照规定编写这些程序。 这些程序都不希望用户输入数据。 这些程序之一使用的值是通过声明语句或赋值语句“硬连线”到程序中的。 通常，这是编写程序的糟糕方法。 输入将在接下来的两章中介绍。 阅读它们之后，您可以返回并编写这些程序的更好版本。</p><p>注意：这些练习中的每一个都要求您使用不同的值多次运行该程序。 这很重要！ 玩程序对于理解它们并让您对皮肤有“感觉”是至关重要的</p><h2 id="练习一：-2"><a href="#练习一：-2" class="headerlink" title="练习一："></a>练习一：</h2><p>编写一个程序，将三个月（4月，5月和6月）的降雨平均化。 声明并初始化每个月的降雨变量。 计算平均值，然后写出结果，例如：</p><blockquote><p>Rainfall for April: 12<br>Rainfall for May : 14<br>Rainfall for June: 8<br>Average rainfall: 11.333333</p></blockquote><p>检查程序是否打印正确的结果。 这个程序中也潜伏着一个初学者的错误！ 您是它的受害者吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AveragerainFall</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> april, may, june;</span><br><span class="line">        april = <span class="number">12</span>;</span><br><span class="line">        may = <span class="number">14</span>;</span><br><span class="line">        june = <span class="number">8</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Rainfall for April: "</span> + april);</span><br><span class="line">        System.out.println(<span class="string">"Rainfall for May: "</span> + may);</span><br><span class="line">        System.out.println(<span class="string">"Rainfall for June: "</span> + june);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span> average;</span><br><span class="line">        average = (april + may + june) / <span class="number">3.0</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"Average rainfall: "</span> + average);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我觉得他说的初学者错误是 3→3.0。。。（好吧我犯了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rainfall <span class="keyword">for</span> April: <span class="number">12</span></span><br><span class="line">Rainfall <span class="keyword">for</span> May: <span class="number">14</span></span><br><span class="line">Rainfall <span class="keyword">for</span> June: <span class="number">8</span></span><br><span class="line">Average rainfall: <span class="number">11.333333333333334</span></span><br></pre></td></tr></table></figure><h2 id="练习二：-2"><a href="#练习二：-2" class="headerlink" title="练习二："></a>练习二：</h2><p>Math.sin( value )</p><p>Math.cos( value )</p><p>value is in radians</p><p>要求：</p><ol><li>计算0.5236弧度的sine并将其保存在变量中。</li><li>计算0.5236弧度的cosine并将其保存在另一个变量中。</li><li>计算这两个值各自的平方（使用变量），将两个平方相加，然后保存结果（在第三个变量中）。</li><li>输出三个变量。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tri</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sin, cos, ans;</span><br><span class="line">        sin = Math.sin(<span class="number">0.5236</span>);</span><br><span class="line">        cos = Math.cos(<span class="number">0.5236</span>);</span><br><span class="line">        ans = (sin * sin) + (cos * cos);</span><br><span class="line">        System.out.println(<span class="string">"sine: "</span> + sin + <span class="string">" cosine: "</span> + cos + <span class="string">" answer: "</span> + ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>sine: 0.5000010603626028 cosine: 0.866024791582939 answer: 1.0000000000000002</p></blockquote><h2 id="练习三：-2"><a href="#练习三：-2" class="headerlink" title="练习三："></a>练习三：</h2><blockquote><p>rad = degrees * Math.PI/180</p><p>30 degrees → ？radians</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Degr</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> deg = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">double</span> rad = deg * Math.PI / <span class="number">180</span>;</span><br><span class="line">        System.out.println(<span class="string">"radians "</span> + rad);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>radians 0.5235987755982988</p></blockquote><h1 id="2-4"><a href="#2-4" class="headerlink" title="2.4"></a>2.4</h1><p>说明：请按照规定编写这些程序。 这些程序都不希望用户输入数据。 这些程序之一使用的值是通过声明语句或赋值语句“硬连线”到程序中的。 通常这是编写程序的糟糕方法</p><h2 id="练习一：-3"><a href="#练习一：-3" class="headerlink" title="练习一："></a>练习一：</h2><p>编写一个程序，创建一个包含字符串“ Hello World”（或其他喜欢的字符串）的String对象。 将对对象的引用分配给引用变量，可能是str。 现在，将对象的字符写入监视器：<br>System.out.println（str）;<br>运行该程序，以确认它可以按预期工作。 现在，在程序中放置第二个引用变量，但不要创建要引用的对象。 放入一个试图使用其引用的对象的陈述并观察其效果：（看了半天看不懂，不做了。。）<br>System.out.println（secondVariable）;<br>试一试此程序，以使您牢记一个对象及其引用变量是不同的东西，并且在运行时创建了一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Degr</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"Hello World"</span>;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习二：-3"><a href="#练习二：-3" class="headerlink" title="练习二："></a>练习二：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        str = <span class="keyword">new</span> String(<span class="string">"Elementary, my dear Watson!"</span>);</span><br><span class="line">        len = str.length();</span><br><span class="line">        System.out.println(<span class="string">"The length is: "</span> + len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The length is: 27</p></blockquote><p>现在以各种方式更改String并观察对计算的字符串长度的影响。 在字符串的两侧和中间添加额外的空格； 添加更多的标点符号； 插入一个制表符Tab（一个真实的制表符Tab，而不仅仅是空格）。 注意，字符串“ MMMMMM”的长度与“ iiiiii”相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        str = <span class="keyword">new</span> String(<span class="string">" Elementary, my dear Watson! "</span>);<span class="comment">//" "*2</span></span><br><span class="line">        len = str.length();</span><br><span class="line">        System.out.println(<span class="string">"The length is: "</span> + len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> The length is: 29</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        str = <span class="keyword">new</span> String(<span class="string">"Elementary, my dear Watson!!!!"</span>);<span class="comment">//!*3</span></span><br><span class="line">        len = str.length();</span><br><span class="line">        System.out.println(<span class="string">"The length is: "</span> + len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The length is: 30</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        str = <span class="keyword">new</span> String(<span class="string">"  Elementary, my dear Watson!"</span>); <span class="comment">//Tab*1</span></span><br><span class="line">        len = str.length();</span><br><span class="line">        System.out.println(<span class="string">"The length is: "</span> + len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The length is: 29</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        str = <span class="keyword">new</span> String(<span class="string">"      Elementary, my dear Watson!"</span>); <span class="comment">//Tab*2</span></span><br><span class="line">        len = str.length();</span><br><span class="line">        System.out.println(<span class="string">"The length is: "</span> + len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The length is: 33</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str;</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        str = <span class="keyword">new</span> String(<span class="string">"          Elementary, my dear Watson!"</span>);<span class="comment">//Tab*3</span></span><br><span class="line">        len = str.length();</span><br><span class="line">        System.out.println(<span class="string">"The length is: "</span> + len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The length is: 37</p></blockquote><h2 id="练习三：-3"><a href="#练习三：-3" class="headerlink" title="练习三："></a>练习三：</h2><p>修剪字符串两侧的多余空间通常很有用。 String对象的trim（）方法可以做到这一点。 它从现有对象中创建一个新的String对象，其中新的String对象具有原始字符，但空格和制表符的边沿已修剪掉。 原始字符串不变。 例如，执行以下语句后</p><blockquote><p>String first = new String(“       In a Hole        in the ground there lived a Hobbit.          “);<br>String second;</p><p>second = first.trim();</p></blockquote><p>second输出：</p><blockquote><p>“In a Hole         in the ground there lived a Hobbit.”</p></blockquote><p>编写一个程序（或修改前一个程序），以通过调用原始String的trim（）创建一个String。 将两个字符串都写入监视器。 尝试使用空格和制表符来确定从原始内容中精确裁剪出的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String first = <span class="keyword">new</span> String(<span class="string">"                        In a Hole              in the ground there       lived a Hobbit.                      "</span>);<span class="comment">//两边都有Tab和空格</span></span><br><span class="line">        String second = first.trim();</span><br><span class="line">        System.out.println(second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>In a Hole              in the ground there       lived a Hobbit.</p></blockquote><h2 id="练习四：-1"><a href="#练习四：-1" class="headerlink" title="练习四："></a>练习四：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="keyword">new</span> String(<span class="string">"Golf is a good walk spoiled."</span>); <span class="comment">// create the original object</span></span><br><span class="line">        String sub = str.substring(<span class="number">8</span>); <span class="comment">// create a new object from the original</span></span><br><span class="line">        System.out.println(sub);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>a good walk spoiled.</p></blockquote><ul><li>substring(int beginIndex, int endIndex)</li></ul><p>此方法基于原始对象创建一个新的String对象，但仅包含以beginIndex开始并以endIndex结尾的字符。 创建了一个全新的对象； 它包含的字符是原始对象中那些字符的副本。 例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String( <span class="string">"Golf is a good walk spoiled."</span> ); <span class="comment">// create the original object</span></span><br><span class="line">String sub = str.substring(<span class="number">8</span>, <span class="number">18</span>); <span class="comment">//create a new object from the original</span></span><br></pre></td></tr></table></figure><blockquote><p>a good wal</p></blockquote><p>创建一个包含字符“ a good walk”的新对象（由sub引用）。<br>修改您的程序，使其使用此两个参数的substring（）。 实验这两个参数，以确认它们如何工作。 请尝试以下操作：<br>1.使两个参数具有相同的值。<br>2.将第一个参数设为0，将最后一个参数设为最后一个字符的索引（本例为28）。<br>3.代替上面的文字28，使用str.length（）-1<br>4.使第一个参数为负。<br>5.使第二个参数长于字符串。<br>6.颠倒参数顺序。</p><ol><li><pre><code class="java"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo3</span> </span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{        String str = <span class="keyword">new</span> String(<span class="string">"Golf is a good walk spoiled."</span>);         String sub = str.substring(<span class="number">0</span>);         System.out.println(sub);    }}<span class="comment">// Golf is a good walk spoiled.</span>&lt;!--￼<span class="number">24</span>--&gt;</code></pre></li><li><pre><code class="java"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo3</span> </span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{        String str = <span class="keyword">new</span> String(<span class="string">"Golf is a good walk spoiled."</span>);         String sub = str.substring(<span class="number">0</span>, str.length() - <span class="number">1</span>);         System.out.println(sub);    }}<span class="comment">// Golf is a good walk spoiled</span>&lt;!--￼<span class="number">25</span>--&gt;</code></pre></li><li><pre><code class="java"><span class="class"><span class="keyword">class</span> <span class="title">StringDemo3</span> </span>{    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{        String str = <span class="keyword">new</span> String(<span class="string">"Golf is a good walk spoiled."</span>);         String sub = str.substring(<span class="number">0</span>, str.length() + <span class="number">100</span>);         <span class="comment">// String sub = str.substring(0, 1000); </span>        System.out.println(sub);    }}<span class="comment">/*java.lang.StringIndexOutOfBoundsException: begin 0, end 128, length 28</span><span class="comment">    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)</span><span class="comment">    at java.base/java.lang.String.substring(String.java:1874)</span><span class="comment">    at StringDemo3.main(StringDemo3.java:4)*/</span>&lt;!--￼<span class="number">26</span>--&gt;</code></pre></li></ol><p>优秀的程序员编写的方法应明智地处理所有可能的输入值，即使是没有意义的方法。 为了获得良好的安全性，程序员必须预见到用户会恶意地尝试查找可能导致问题或导致奇怪行为的参数，从而以某种方式加以利用。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不难。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>开始学Java之7 细讲变量, 赋值语句, 表达式, 算术运算符</title>
    <link href="https://a-little-bear.github.io/p/3afb/"/>
    <id>https://a-little-bear.github.io/p/3afb/</id>
    <published>2020-11-26T16:35:59.000Z</published>
    <updated>2020-11-29T01:42:44.214Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>细讲一下，结束单元2</p></blockquote><a id="more"></a><p><strong>细讲一下。。应该有不少重复的</strong></p><p>这大概就是关于<code>开始学Java之 变量 与 Random</code>这篇的详细说明吧。。</p><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><ul><li>变量</li><li>赋值语句</li><li>表达式</li><li>算数运算符</li></ul><h1 id="变量（Variables）"><a href="#变量（Variables）" class="headerlink" title="变量（Variables）"></a>变量（Variables）</h1><p>除了最小的程序外，所有正在执行的程序都在不断使用值。 这些值保存在主存储器的称为变量的小部分中</p><p>家用计算机中数十亿字节的主存储器用于存储机器指令和数据。 主存储器（以及所有其他类型的存储器）的电子电路在两者之间没有区别。 当程序运行时，某些存储位置用于机器指令，而另一些用于数据。 稍后，当另一个程序正在运行时，以前保存的机器指令的某些字节现在可以保存数据，而以前保存的数据的某些字节现在可以保存机器指令。计算机先驱 John von Neumann 的想法是对指令和数据使用相同的内存。 要将值放入内存中，然后再取回它，程序必须为其使用的内存的每个部分都有一个名称。</p><p><strong>变量</strong>—主存储器中某个位置的名称，该位置使用特定的数据类型来保存值。</p><p>回想一下，数据类型是一种使用位模式表示值的方案。 可以将变量视为一个由一个或多个字节组成的小盒子，这些盒子可以使用特定的数据类型保存值：</p><p><img src="https://i.loli.net/2020/11/27/6GpMnrVaiENBAsD.png" alt=""></p><p>变量具有诸如 payAmount 之类的名称。 （详细信息将在几页中给出）</p><p>小问题：变量总是有数据类型吗？</p><p>答案：是的。</p><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><p>下面是用到<code>payAmount</code>变量的程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        <span class="keyword">long</span> payAmount = <span class="number">123</span>; <span class="comment">//a declaration of a variable</span></span><br><span class="line">        System.out.println(<span class="string">"The variable contains: "</span> + payAmount ); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>The variable contains: 123</p></blockquote><p><code>long payAmount = 123;</code>这一行是一个变量声明。</p><p>变量声明是程序表示需要变量的地方。 对于我们的小程序，声明语句将放置在main方法的两个大括号之间。</p><p>该声明给出了变量的名称和数据类型。 它还可能要求在变量中放置一个特定的值。 使用高级语言（例如Java），程序员无需担心计算机硬件实际上是如何完成所要求的。 如果您请求一个<code>long</code>类型的变量，您将得到它。 如果要求将值123放入变量中，则会发生这种情况。 字节，位模式和内存地址等详细信息取决于Java编译器。</p><p>在上方例子，声明需要一个八字节的储存部分名为<code>payAmount</code>用了基本数据<code>long</code>来代表数值。</p><p>程序开始运行时，该变量将存储值”123”。</p><p>除非已声明变量，否则不能在程序中使用该变量。 变量只能声明一次</p><h2 id="变量声明的语法"><a href="#变量声明的语法" class="headerlink" title="变量声明的语法"></a>变量声明的语法</h2><p>“Syntax” 这个词的意思是程序语言的语法。我们可以只谈一小部分程序的语法，例如变量声明的语法。</p><p>这里有几种办法声明变量：</p><p>数据类型 变量名 ;</p><ul><li>这将声明一个变量，声明其数据类型，并为其保留内存。 它没有说内存中储存的值是多少。 （稍后在这些说明中，您将了解到在某些情况下该变量会自动初始化，而在其他情况下该变量会保持未初始化状态。）</li></ul><p>数据类型 变量名 = 初始值 ;</p><ul><li>这将声明一个变量，声明其数据类型，为其保留内存，并将初始值放入该内存中。 初始值必须是正确的数据类型。</li></ul><p>数据类型 变量名1 , 变量名2 ;</p><ul><li>这将声明两个相同数据类型的变量，保留内存，但是变量内没有值，你可以像这样声明多余两个变量。。</li></ul><h2 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h2><p>程序员为程序中的每个变量选择一个名称。</p><p>程序中的各种事物被赋予名字。</p><p>程序员选择的名称称为标识符（identifier）。</p><p>这里有选择标识符的规则：<br>仅使用字符“ a”至“ z”，“ A”至“ Z”，“ 0”至“ 9”，<br>字符“ _”和字符“ $”。</p><ul><li>标识符（identifier）不能包含空格字符。</li><li>不能以数字开头。</li><li>标识符（identifier）可以是任何长度。</li><li>大写和小写被视为不同的字符。</li><li>SUM和Sum是不同的标识符。</li><li>标识符不能是保留字（reserved word ）。</li><li>标识符不能已被程序的一部分使用。</li></ul><p>保留字（reserved word ）是在Java中具有预定义含义的字。</p><p>例如，int，double，true和import是保留字。</p><p>变量名通常用小写字母开头，变量名如果由几个词组成，大写词首字母除了第一个，举个栗子，<code>payAmount</code>和<code>grandTotal</code>。这些要求在语法上不强制要求，但是读起来更好看一下。。</p><p>再举个栗子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> hoursWorked = <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">double</span> payRate = <span class="number">10.0</span>, taxRate = <span class="number">0.10</span>;</span><br><span class="line">        System.out.println(<span class="string">"Hours Worked: "</span> + hoursWorked);</span><br><span class="line">        System.out.println(<span class="string">"pay Amount : "</span> + (hoursWorked * payRate));</span><br><span class="line">        System.out.println(<span class="string">"tax Amount : "</span> + (hoursWorked * payRate * taxRate));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>Hours Worked: 40<br>pay Amount : 400.0<br>tax Amount : 40.0</p></blockquote><p>星号<code>*</code>代表了乘号。。</p><p>格式重要提示：在表达式中，变量的名称表示其持有的值。 （表达式是要求计算值的语句的一部分。）</p><p>当这个数值变量在string字符串的后面显示，+代表了把这个数值字符加到字符串后面。。</p><p><code>&quot;Hours Worked: &quot; + hoursWorked</code></p><p>如果hoursWorked是40，就是把40加到字符串后面，输出：</p><p><code>Hours Worked: 40</code></p><p>问题：为啥第一个输出是40（没有小数点），后两个就有小数点了？</p><p>答：第一个变量的数据类型是<code>long</code>整数数据类型，整数没有小数点；第二个double * int 的结果是double（这里说的都是数据类型），浮点数据类型。</p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> hoursWorked = <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">double</span> payRate = <span class="number">10.0</span>, taxRate = <span class="number">0.10</span>;</span><br><span class="line">        System.out.println(<span class="string">"Hours Worked: "</span> + hoursWorked);</span><br><span class="line">        <span class="comment">//仔细看这行 System.out.println("pay Amount : " + (hoursWorked * payRate));</span></span><br><span class="line">        System.out.println(<span class="string">"tax Amount : "</span> + (hoursWorked * payRate * taxRate));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（好像跟上面一样）</p><p>仔细看这行 System.out.println(“pay Amount : “ + (hoursWorked * payRate));</p><p>这两边的圆括号：(hoursWorked * payRate) 强制要求了先算乘法，然后再转换成字符，并且加到<code>pay Amount :</code>后面</p><p>如果你有跟上面类似的计算，用圆括号来表示计算步骤是个好想法。有时候没必要，但是看起来舒服一些。</p><h2 id="一个语句，多行占用"><a href="#一个语句，多行占用" class="headerlink" title="一个语句，多行占用"></a>一个语句，多行占用</h2><p>您可以使用占用多行来表达一个语句。空格可以拆分一条语句。 但不能在名称的中间，在字符串文字的引号之间，在数字文字的中间分割语句。 这里是一个可以运行的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> hoursWorked = <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">double</span> payRate = <span class="number">10.0</span>, taxRate = <span class="number">0.10</span>;</span><br><span class="line">        System.out.println(<span class="string">"Hours Worked: "</span> + </span><br><span class="line">                   hoursWorked);</span><br><span class="line">        System.out.println(<span class="string">"pay Amount : "</span> </span><br><span class="line">            + (hoursWorked * payRate));</span><br><span class="line">        System.out.println(<span class="string">"tax Amount : "</span> + (hoursWorked </span><br><span class="line">                                    * payRate * taxRate));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管正确，但陈述的划分却使人感到困惑。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> hoursWorked = <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">double</span> payRate = <span class="number">10.0</span>, taxRate = <span class="number">0.10</span>;</span><br><span class="line">        System.out.println(<span class="string">"Hours Worked: "</span> + </span><br><span class="line">                           hoursWorked);</span><br><span class="line">        System.out.println(<span class="string">"pay Amount : "</span> + </span><br><span class="line">                           (hoursWorked * payRate));</span><br><span class="line">        System.out.println(<span class="string">"tax Amount : "</span> + </span><br><span class="line">                           (hoursWorked * payRate * taxRate));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样更好看一些。。</p><p>问题：下面程序正不正确？</p><p><img src="https://i.loli.net/2020/11/27/eCwaN6ZULPSJOmg.png" alt=""></p><p>答：不正确，Class中不能有空格，字符串中不能加空格，变量名中不能加空格。</p><h1 id="赋值语句（Assignment-Statements）"><a href="#赋值语句（Assignment-Statements）" class="headerlink" title="赋值语句（Assignment Statements）"></a>赋值语句（Assignment Statements）</h1><p>目前为止，示例程序一直在使用最初放入变量中的值。 程序可以更改变量中的值。 赋值语句更改变量中保存的值。 这是一个使用赋值语句的程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> payAmount; <span class="comment">// payAmount is declared without an initial value </span></span><br><span class="line">        payAmount = <span class="number">123</span>; <span class="comment">// an assignment statement</span></span><br><span class="line">        System.out.println(<span class="string">"The variable contains: "</span> + payAmount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赋值语句将数值123写入<code>payAmount</code>变量中。</p><p>输出：</p><blockquote><p>The variable contains: 123</p></blockquote><h2 id="赋值语句语法"><a href="#赋值语句语法" class="headerlink" title="赋值语句语法"></a>赋值语句语法</h2><p>变量名 = 表达式 ;</p><ul><li>等号<code>=</code>是一个赋值运算符</li><li>变量名是在之前已经声明了的</li><li>表达式是要求赋值的字符的集合</li></ul><p>例子：</p><ul><li>total = 3 + 5;</li><li>price = 34.56;</li><li>tax = total*0.05;</li></ul><p>在源代码文件，变量必须在任何赋值语句前面提前声明。</p><p>问题：这个对不对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line">sum = <span class="number">42</span> - <span class="number">12</span>;</span><br></pre></td></tr></table></figure><p>答：对，这语法没问题。</p><h2 id="赋值语句的语义"><a href="#赋值语句的语义" class="headerlink" title="赋值语句的语义"></a>赋值语句的语义</h2><p>编程语言的句法（syntax）说明了程序的外观。 它是如何排列符号的语法。 </p><p>编程语言的语义（symantics）说明了程序在执行时的功能。 它说明了符号的含义。</p><p>本页说明了赋值语句的含义。 赋值语句要求计算机按以下顺序执行两个步骤：</p><ol><li>首先，计算等号右边<ul><li>这代表了表达式的值在右边</li><li>如果没有要计算的，直接用那个值</li></ul></li><li>然后，将右边的值替换成左边变量内的值</li></ol><p>举个例子：<code>total = 3 + 5;</code></p><p>首先计算3+5=8，然后将8写入名为<code>total</code>的变量，total里面有没有数值之前不重要。</p><h2 id="两步"><a href="#两步" class="headerlink" title="两步"></a>两步</h2><ol><li><img src="https://i.loli.net/2020/11/27/O3wrIoy5LDgBPRv.png" alt=""></li><li><img src="https://i.loli.net/2020/11/27/atwpTzveKCYfFrP.png" alt=""></li></ol><h2 id="更多练习"><a href="#更多练习" class="headerlink" title="更多练习"></a>更多练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> extra;</span><br><span class="line">extra = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>赋值语句正确，符合语法（变量名 = 表达式;）</p><p>表达式是5，没有计算需要完成，但是赋值语句<strong>仍然</strong>需要两个步骤</p><ol><li><img src="https://i.loli.net/2020/11/27/lFzWHBnCwcupO8i.png" alt=""></li><li><img src="https://i.loli.net/2020/11/27/3R4enJQ7uLIxoTk.png" alt=""></li></ol><p>问：变量会保持数值5多久？</p><p>答：直到其他语句将不同的值写入这个变量，或者知道程序结束</p><h2 id="给变量增加一个数值"><a href="#给变量增加一个数值" class="headerlink" title="给变量增加一个数值"></a>给变量增加一个数值</h2><p>首先extra变量已经有数值5了。</p><p><img src="https://i.loli.net/2020/11/27/sEygUcuPlQ6TC14.png" alt=""></p><p>新的语句<code>value = extra + 2;</code></p><p>还是两步，第一步extra + 2；第二步value写入7（extra+ 2）</p><p>问，下面程序输出啥？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Example assignment statements</span></span><br><span class="line"><span class="keyword">int</span> extra, value;</span><br><span class="line">extra = <span class="number">5</span>;</span><br><span class="line">value = extra + <span class="number">2</span>;</span><br><span class="line">System.out.println( <span class="string">"value now holds: "</span> + value );</span><br></pre></td></tr></table></figure><p>答：value now holds: 7</p><h2 id="相同变量在一个赋值语句出现两次"><a href="#相同变量在一个赋值语句出现两次" class="headerlink" title="相同变量在一个赋值语句出现两次"></a>相同变量在一个赋值语句出现两次</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value = <span class="number">5</span>;</span><br><span class="line">value = <span class="number">12</span> + value;</span><br></pre></td></tr></table></figure><p>第一个语句：</p><ol><li>得到右边=5</li><li>将5写入变量value</li></ol><p>第二个语句：</p><ol><li>右边计算12 + value<ul><li>先将value代入得到5</li><li>然后12+5=17，得到右边=17</li></ul></li><li>将右边数值17覆盖写入到value</li></ol><h3 id="第二个语句的动作"><a href="#第二个语句的动作" class="headerlink" title="第二个语句的动作"></a>第二个语句的动作</h3><p>重要说明：在同一赋值语句中，变量可以同时在等号=的LEFT和RIGHT。 在右侧使用时，它将提供用于计算结果的数字。 当在左侧使用它时，它会指出要在内存中保存该结果的位置。</p><p>这两个规则位于不同的步骤中，因此它们不会互相干扰。 步骤1使用变量开头的值执行计算。 然后，步骤2将新值（来自计算）放入变量中</p><p>问：下面程序输出啥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value = <span class="number">5</span>; </span><br><span class="line">System.out.println(<span class="string">"value is: "</span> + value ); </span><br><span class="line">value = value + <span class="number">10</span>; </span><br><span class="line">System.out.println(<span class="string">"value is: "</span> + value );</span><br></pre></td></tr></table></figure><p>答：</p><blockquote><p>value is: 5 </p><p>value is: 15</p></blockquote><h2 id="一个计数数列"><a href="#一个计数数列" class="headerlink" title="一个计数数列"></a>一个计数数列</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">// statement 1 </span></span><br><span class="line"></span><br><span class="line">System.out.println( count ) ; <span class="comment">// statement 2 </span></span><br><span class="line">count = count + <span class="number">1</span>; <span class="comment">// statement 3 </span></span><br><span class="line"></span><br><span class="line">System.out.println( count ) ; <span class="comment">// statement 4</span></span><br></pre></td></tr></table></figure><p>这里是步骤：</p><ol><li>语句1将0写入<code>count</code></li><li>语句2将0输出</li><li>语句3首先从<code>count</code>得到0，然后加上1，将结果放回<code>count</code></li><li>语句4输出1（也就是<code>count</code>现在的值）</li></ol><h3 id="计算多一点"><a href="#计算多一点" class="headerlink" title="计算多一点"></a>计算多一点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">// statement 1 </span></span><br><span class="line"></span><br><span class="line">System.out.println( count ) ; <span class="comment">// statement 2 </span></span><br><span class="line">count = count + <span class="number">1</span>; <span class="comment">// statement 3 </span></span><br><span class="line"></span><br><span class="line">System.out.println( count ) ; <span class="comment">// statement 4 </span></span><br><span class="line"></span><br><span class="line">count = count + <span class="number">1</span>; </span><br><span class="line">System.out.println( count ) ;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>0</p><p>1</p><p>2</p></blockquote><p>语句count = count + 1递增count中的数字。 有时程序员称此为“递增变量”，尽管（当然）实际上是变量中的数字实际上是递增的</p><p>问：<code>sum = 2*sum ;</code>的步骤</p><p>答：</p><ol><li>算出sum的两倍是多少，也就是sum乘二</li><li>将结果写入sum</li></ol><h1 id="表达式（Expressions）"><a href="#表达式（Expressions）" class="headerlink" title="表达式（Expressions）"></a>表达式（Expressions）</h1><p>有时您需要仔细考虑赋值语句的两个步骤。 </p><p>第一步是找到赋值运算符右侧的表达式值。</p><p>表达式（expression）是文字，运算符，变量名和用于计算值的括号的组合。</p><p>这个（略微不完整）的定义需要一些解释</p><ul><li>文字（literal） - 直接给你值的字符，如3.456</li><li>运算符（operator） - 像“+”，“*” 这样的算数运算符</li><li>变量（variable） - 计算机记忆的一部分包含的一个值（也就是多个char的意思吧。。）</li><li>括号（parentheses） - （ 和 ）</li></ul><p>听起来很糟糕，但是跟代数一样。。。</p><p>(32 - y) / ( x + 5 )</p><p>在上面，字符 / 表示除法。 不仅任何符号混乱都会起作用。 以下</p><p>32 - y) / ( x 5 + )</p><p>不是语法正确的表达。表达式有规则，但是最好的规则是表达式必须看起来像代数一样好。 但是，必须始终使用*运算符显示乘法。 您不能通过将两个变量彼此相邻来相乘。 因此，尽管xy在代数中可能是正确的，但您必须在Java中使用x * y</p><p>（这里的练习问题跳过，教程太。。内啥了）</p><h2 id="空格不是很重要"><a href="#空格不是很重要" class="headerlink" title="空格不是很重要"></a>空格不是很重要</h2><p>可以在不使用任何空格的情况下编写表达式。 运算符和括号足以分隔表达式的各个部分。 您可以在表达式中使用一个或多个空格来在视觉上分隔各部分，而无需更改其含义。 例如，以下是正确的表达式：<br><code>(hoursWorked*payRate)-deduction</code><br>以下含义完全相同：<br><code>(hoursWorked * payRate) - deduction</code><br>明智地使用空格以使表达式清楚。 通过使事情变得清楚，您可以节省调试时间。 空格不能放在标识符的中间。 以下是不正确的：<br><code>( hours Worked * pay Rate) -deduction</code><br>可能（但不太好）以空格欺骗。 例如，在以下内容中：<br><code>12-4    /    2+2</code><br>看起来好像从12中减去了4，然后将结果8除以4。但是，空格不计算在内，表达式与以下内容相同：<br><code>12 - 4/2 + 2</code><br>空间的这种排列使表达式很清楚</p><h1 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h1><p>算术运算符是要求进行某些算术运算的符号。 如前一个问题所示，如果在表达式中使用了多个运算符，则这些操作将以特定顺序进行。 优先级较高的运算符首先完成。 该表仅显示了Java中许多运算符中的几个。</p><p><img src="https://i.loli.net/2020/11/27/AMxlvG25WFVfg9p.png" alt=""></p><p>一些运算符具有相同的优先级。 例如，加号+和减号-具有相同的优先级。<br>一元减号和一元加号运算符用作负数或正数的一部分。 例如，-23表示负二十三，而+23表示正二十三。 稍后对此进行更多讨论。<br>当操作数（数字）都是整数时，这些运算符将执行整数算术运算。 如果一个或两个操作数都是浮点数，则这些运算符会做浮点数<br>算术。 使用除法记住这一点尤其重要，因为整数除法的结果是整数。 例如，5/2是2（不是2.5），而5/10是0（不是0.5）。 </p><p>（练习跳过）</p><p>（剩下太简单了，跳过）</p><h2 id="一元减"><a href="#一元减" class="headerlink" title="一元减"></a>一元减</h2><p>（说白了这就是正负数，正负数算术中最优先）</p><p>如果您在运算符表中查找，则会看到字符-被列出两次。 这是因为-用于两个目的。 在某些情况下，-是一元减号运算符。 在其他情况下，-是减法运算符。<br>一元减号用于显示负数。 例如：<br>-97.34<br>表示“负九十七点三十四”。 减法运算符用于显示一个数与另一个数的减法。 例如：<br>95-12<br>是一个表达式，要求从95中减去12。一元减运算符具有较高的优先级。 加减法的优先级较低。 例如<br>-12 + 3<br>表示将3加到负12（得出-9）。 一元加号可应用于数字以表明它是正数。 它也具有很高的优先级。 很少使用</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;细讲一下，结束单元2&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>开始学Java之6 变量 与 Random</title>
    <link href="https://a-little-bear.github.io/p/e9bc/"/>
    <id>https://a-little-bear.github.io/p/e9bc/</id>
    <published>2020-11-26T04:45:01.000Z</published>
    <updated>2020-11-29T01:38:45.241Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>可能有学的东西重叠了。。</p></blockquote><a id="more"></a><h2 id="Math-exp-amp-double"><a href="#Math-exp-amp-double" class="headerlink" title="Math.exp &amp; double"></a>Math.exp &amp; double</h2><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCrash</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> value = <span class="number">32</span>;</span><br><span class="line">        System.out.println(<span class="string">"e to the power value: "</span> + Math.exp(value) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>e to the power value: 7.896296018268069E13</p></blockquote><p>将value改为64</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCrash</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> value = <span class="number">64</span>;</span><br><span class="line">        System.out.println(<span class="string">"e to the power value: "</span> + Math.exp(value) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>e to the power value: 6.235149080811617E27</p></blockquote><p>将value改为1640</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCrash</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> value = <span class="number">1640</span>;</span><br><span class="line">        System.out.println(<span class="string">"e to the power value: "</span> + Math.exp(value) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>e to the power value: Infinity </p></blockquote><p>事实证明数太大了double也算不了。。。</p><h2 id="char-amp-string"><a href="#char-amp-string" class="headerlink" title="char &amp; string"></a>char &amp; string</h2><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCrash</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="string">"A"</span> ;</span><br><span class="line">        System.out.println(<span class="string">"A char: "</span> + ch );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“A” 这时候报错：不兼容的类型：java.lang.String无法转化为char</p><p>修改成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCrash</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch = <span class="string">'A'</span> ;</span><br><span class="line">        System.out.println(<span class="string">"A char: "</span> + ch );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候输出：</p><blockquote><p>A char: A </p></blockquote><p>所以string是=”xxxx”;</p><p>char=’xxx’;</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>数据类型 变量名字 = 初始值；</p><p>（dataType variableName = initialValue ;）</p><p>这将声明一个变量，声明其数据类型，为其保留内存，并将初始值放入该内存中。 初始值必须是正确的数据类型。</p><p>-</p><p>数据类型 变量名1， 变量名2；</p><p>（dataType variableNameOne, variableNameTwo ; ）</p><p>这将声明两个都具有相同数据类型的变量，为每个变量保留内存，但不会在任何变量中放置任何内容。 如果需要，可以使用两个以上的变量来执行此操作。</p><h2 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h2><p>程序员为程序中的每个变量选择一个名称。</p><p>程序中的各种事物被赋予名字。</p><p>程序员选择的名称称为标识符（identifier）。</p><p>这里有选择标识符的规则：<br>仅使用字符“ a”至“ z”，“ A”至“ Z”，“ 0”至“ 9”，<br>字符“ _”和字符“ $”。</p><ul><li><p>标识符（identifier）不能包含空格字符。</p></li><li><p>不能以数字开头。</p></li><li><p>标识符（identifier）可以是任何长度。</p></li><li><p>大写和小写被视为不同的字符。</p></li><li><p>SUM和Sum是不同的标识符。</p></li><li><p>标识符不能是保留字（reserved word ）。</p></li><li><p>程序的这一部分中一定不能使用标识符。</p><p>保留字（reserved word ）是在Java中具有预定义含义的字。</p><p>例如，int，double，true和import是保留字。</p></li></ul><p>下面那些变量声明是正确的：</p><ol><li>int myPay, yourPay; </li><li>long good-by ; </li><li>short shrift = 0; </li><li>double bubble = 0, toil= 9, trouble = 8</li><li>byte the bullet ;<ol start="6"><li>int double; </li></ol></li><li>char thisMustBeTooLong ;</li><li>int 8ball; </li><li>float a=12.3; b=67.5; c= -45.44;</li></ol><p>答案：1，3 。（7在格式上是没错的，但是下面说。。）</p><p>解析：</p><ul><li>int myPay, yourPay; 正确</li><li>long good-by ;  不能有”-“</li><li>short shrift = 0;  正确</li><li>double bubble = 0, toil= 9, trouble = 8  结尾没有“;”</li><li>byte the bullet ;  不能有空格</li><li>int double;  ”double“不能作为变量名</li><li>char thisMustBeTooLong ;   语法没问题，但是变量名不一定需要很长。</li><li>int 8ball;  不能以数字开头</li><li>float a=12.3; b=67.5; c= -45.44;   中间要用逗号”，“不是分号”；“。</li></ul><h2 id="相同变量在俩语句中出现"><a href="#相同变量在俩语句中出现" class="headerlink" title="相同变量在俩语句中出现"></a>相同变量在俩语句中出现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value = <span class="number">5</span>; </span><br><span class="line">value = <span class="number">12</span> + value;</span><br></pre></td></tr></table></figure><p>最后输出value，值会是多少？</p><p>答：17.（5+12)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;                <span class="comment">// statement 1 </span></span><br><span class="line">System.out.println( count ) ; <span class="comment">// statement 2 </span></span><br><span class="line">count = count + <span class="number">1</span>;            <span class="comment">// statement 3 </span></span><br><span class="line">System.out.println( count ) ; <span class="comment">// statement 4</span></span><br><span class="line">count = count + <span class="number">1</span>; </span><br><span class="line">System.out.println( count ) ;</span><br></pre></td></tr></table></figure><p>输出会是什么？</p><ul><li>0</li><li>1</li><li>2</li></ul><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>表达式是文字，运算符，变量名和括号的组合，用于计算值。</p><p>这个（略微不完整）的定义需要一些解释：</p><ul><li>文字（literal）— 直接为您提供数值的字符，例如：3.456</li><li>运算符（operator）— 如加号+或乘号*。</li><li>变量（variable）— 包含值的内存部分。</li><li>括号（parentheses）—（ &amp; ）。</li></ul><p>实际上，这是您从代数中了解的东西，例如：<br>（32-y）/（x + 5）<br>在上面，字符/表示除法。 不仅任何符号混乱都会起作用。<br>以下<br>32-y）/（x 5 +）<br><strong>不是一个语法正确的表达式</strong>。 </p><p>最好的规则是表达式必须看起来像代数一样好。 但是，必须始终显示乘法通过使用*运算符。 您不能通过将两个变量放在每个变量旁边来相乘其他。 因此，尽管xy在代数中可能是正确的，但您必须在Java中使用x * y。</p><p>哪一个表达式是正确的？</p><p>53      12 - 3)      x + 34       *z 99       sum + value</p><p>答案：53， x + 34， sum + value</p><p>12-4    /     2+2  这样看起来像：(12-4) / (2+2)，但是电脑不知道，电脑是这么看的： 12-4/2+2</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>运算符含义优先级（呃。。。）</p><ul><li><code>-</code> （一元减）高</li><li><code>+</code> （一元加）高</li><li><code>*</code> 中</li><li><code>/</code> 中</li><li><code>%</code> 中</li><li><code>+</code>（加） 低</li><li><code>-</code>（减） 低</li></ul><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class Random.</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">(<span class="keyword">int</span> bound)</span></span></span><br></pre></td></tr></table></figure><p>参数：bound - 上限（不包括这个数），必须是正数。</p><p>返回：下一个伪随机的数值，从0到bound（不包括这个数）的随机数字生成数列。</p><blockquote><p>大佬说明（真清晰）：</p><p>public int nextInt(int n) ;</p><p>该方法的作用是生成一个随机的int值，该值介于[0,n)的区间，也就是0到n之间的随机int值，包含0而不包含n。</p></blockquote><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandonNumbers</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       Random rand = <span class="keyword">new</span> Random(); <span class="comment">// create an object of class Random </span></span><br><span class="line">        <span class="keyword">int</span> n= rand.nextInt(<span class="number">45</span>);</span><br><span class="line">        System.out.println(<span class="string">"Random Number is  "</span>+ n);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><ul><li>Random Number is  32</li><li>Random Number is  44</li></ul></blockquote><p>好吧有点少。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandonNumbers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       Random rand = <span class="keyword">new</span> Random(); <span class="comment">// create an object of class Random </span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">30</span>; i++)&#123;</span><br><span class="line">           <span class="keyword">int</span> n= rand.nextInt(<span class="number">10</span>);</span><br><span class="line">           System.out.println(<span class="string">"Random Number is  "</span>+ n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>Random Number is  9<br>Random Number is  7<br>Random Number is  1<br>Random Number is  8<br>Random Number is  3<br>Random Number is  2<br>Random Number is  1<br>Random Number is  6<br>Random Number is  3<br>Random Number is  6<br>Random Number is  6<br>Random Number is  0<br>Random Number is  2<br>Random Number is  7<br>Random Number is  8<br>Random Number is  6<br>Random Number is  5<br>Random Number is  6<br>Random Number is  9<br>Random Number is  0<br>Random Number is  8<br>Random Number is  9<br>Random Number is  9<br>Random Number is  9<br>Random Number is  4<br>Random Number is  8<br>Random Number is  6<br>Random Number is  7<br>Random Number is  8<br>Random Number is  2</p></blockquote><p>0~9都包括了，就是没有10，验证了上面的内啥</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;可能有学的东西重叠了。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>开始学Java之5 基本数据</title>
    <link href="https://a-little-bear.github.io/p/9d66/"/>
    <id>https://a-little-bear.github.io/p/9d66/</id>
    <published>2020-11-25T18:51:14.000Z</published>
    <updated>2020-11-29T01:38:32.588Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天也拆成两份吧</p></blockquote><a id="more"></a><p>（可能有重复内容。。）</p><p>之前用的是DrJava，现在准备开始用BlueJ。。。。</p><h2 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h2><p>先说说类</p><ul><li>类（Class），是一个对象（Object）的蓝图</li><li>为啥你需要一个对象（是Object，不是那个对象。。当然也需要hh）<ul><li>Java是一个面向对象编程语言</li><li>用Java编程，都是围绕对象（Object）</li></ul></li><li>一个类（Clasee），包含了变量，methods，构造函数（constructors），等等。。</li></ul><p><img src="https://i.loli.net/2020/11/26/qj1RCK5oUsrySpG.png" alt=""></p><h2 id="Java的8-1种基本数据类型"><a href="#Java的8-1种基本数据类型" class="headerlink" title="Java的8+1种基本数据类型"></a>Java的8+1种基本数据类型</h2><p>字符串（String）不是基本数据。</p><blockquote><p>感谢作者大佬：<a href="https://blog.csdn.net/qq_36784953/article/details/67634421">https://blog.csdn.net/qq_36784953/article/details/67634421</a></p></blockquote><table><thead><tr><th>类型</th><th>中文</th><th>大小</th><th>最小值</th><th>最大值</th><th>包装类</th></tr></thead><tbody><tr><td>boolean</td><td>布尔类型</td><td>-</td><td>-</td><td>-</td><td>Boolean</td></tr><tr><td>char</td><td>字符型</td><td>16bits</td><td>Unicode 0</td><td>Unicode 216-1</td><td>Character</td></tr><tr><td>byte</td><td>字节型</td><td>8bits</td><td>-128</td><td>+127</td><td>Byte</td></tr><tr><td>short</td><td>短整型</td><td>16bits</td><td>-215</td><td>+215-1</td><td>Short</td></tr><tr><td>int</td><td>整型</td><td>32bits</td><td>-231</td><td>+231-1</td><td>Integer</td></tr><tr><td>long</td><td>长整型</td><td>64bits</td><td>-263</td><td>+263-1</td><td>Long</td></tr><tr><td>float</td><td>浮点型</td><td>32bits</td><td>1.4E-45</td><td>3.4028235E38</td><td>Float</td></tr><tr><td>double</td><td>双精度浮点型</td><td>64bits</td><td>4.9E-324</td><td>1.7976931348623157E308</td><td>Double</td></tr><tr><td>void</td><td>无</td><td>-</td><td>-</td><td>-</td><td>Void</td></tr></tbody></table><p>○ boolean 类型所占空间大小没有明确指定(2),其值只能为true或false，用于表示条件的真或假<br>○ char 类型为字符型，用于表示一个字符，可以是字母、数字、下划线、中文、以及特殊符号，char的表示方法为单引号中间加一个字符，比如‘天’、‘ ’(空格)<br>○ byte、short、int、long 都表示整数，但是由于类型的不同，其所占的空间和表示数字的范围都不同，为了表示一个数字是long类型，需要在数字后面加L或l，推荐使用大写L，避免与1混淆，如果不加l，默认是int类型，可能会造成未知错误<br>○ float、double 表示小数，但是不同类型之间，所占空间和表示范围不同，其精度也不同，推荐使用double类型，为了表示一个小数是float类型，需要在后面加F或f，避免出现未知错误<br>○ void 表示空类型，它通常作为函数无返回值时的标识符</p><h3 id="String-类型简介"><a href="#String-类型简介" class="headerlink" title="String 类型简介"></a>String 类型简介</h3><p>String类型是一种常用的<strong>引用类型</strong>，它表示一个字符串，可以看做是几个char拼接在一起，在字符串中，一个中文字符占2个字节，一个英文字符占1个字节，字符串用双引号表示，如“Hello World！”，表面上看这个字符串有10个字母，1个空格和1个叹号，应该占12个字节，实际上它却占用了13个字节，因为在字符串的结尾为了表示字符串已经停止了，会自动加一个‘\0’，它导致字符串多占了一个字节</p><p>注释：</p><ol><li>包装类是数据类型对应的引用类型，可以通过引用类型做类型之间的转换，进制转换等一些操作</li><li>boolean本身只占1bit，但是计算机分配内存时会四个bits为一组分配，所以就算本身只占1bit，也会占4bit，如果声明为boolean数组，也会默认增长至4的倍数个bits</li></ol><h2 id="Java中定义了8种基本数据类型"><a href="#Java中定义了8种基本数据类型" class="headerlink" title="Java中定义了8种基本数据类型"></a>Java中定义了8种基本数据类型</h2><blockquote><p>感谢作者大佬：<a href="https://blog.csdn.net/weixin_43662429/article/details/104532582">https://blog.csdn.net/weixin_43662429/article/details/104532582</a></p></blockquote><blockquote><p>数值型－ byte、 short、int、 long、float、 double<br>字符型－ char<br>布尔型－boolean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基本数据类型（primitive data type）</span></span><br><span class="line"><span class="comment"> * 引用类型占用四个字节，表示的是地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> creep_creep_creep</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A_primitive</span> </span>&#123;</span><br><span class="line"><span class="comment">//数值型</span></span><br><span class="line"><span class="keyword">byte</span> a;<span class="comment">//1字节</span></span><br><span class="line"><span class="keyword">short</span> b;<span class="comment">//2字节</span></span><br><span class="line"><span class="keyword">int</span> c;<span class="comment">//4字节</span></span><br><span class="line"><span class="keyword">long</span> d;<span class="comment">//8字节</span></span><br><span class="line"><span class="keyword">float</span> e;<span class="comment">//4字节</span></span><br><span class="line"><span class="keyword">double</span> f;<span class="comment">//8字节</span></span><br><span class="line"><span class="comment">//字符型</span></span><br><span class="line"><span class="keyword">char</span> name;<span class="comment">//2字节</span></span><br><span class="line"><span class="comment">//布尔型</span></span><br><span class="line"><span class="keyword">boolean</span> g;<span class="comment">//1位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整型变量-常量"><a href="#整型变量-常量" class="headerlink" title="整型变量/常量"></a>整型变量/常量</h3><table><thead><tr><th>类型</th><th>存储空间</th><th>范围</th></tr></thead><tbody><tr><td>byte</td><td>1字节</td><td>− 2 7 -2^{7}−27 ~ 2 7 − 1 / 2^{7}-1/27−1/(-128~127)</td></tr><tr><td>short</td><td>2字节</td><td>− 2 15 -2^{15}−215<del>2 15 − 1 / 2^{15}-1/215−1/ (-32768</del>-32767)</td></tr><tr><td>int</td><td>4字节</td><td>− 2 31 -2^{31}−231~2 31 − 1 / 2^{31}-1/231−1/约21亿</td></tr><tr><td>long</td><td>8字节</td><td>− 2 63 -2^{63}−263~2 63 − 1 2^{63}-1263−1</td></tr></tbody></table><h3 id="Java-语言整型常量的四种表示形式"><a href="#Java-语言整型常量的四种表示形式" class="headerlink" title="Java 语言整型常量的四种表示形式"></a>Java 语言整型常量的四种表示形式</h3><blockquote><p>十进制整数，如：99, -500, 0<br>八进制整数，要求以 0 开头，如：015<br>十六进制数，要求 0x 或 0X 开头，如：0x15<br>二进制数，要求0b或0B开头，如：0b01110011</p></blockquote><h3 id="Java语言的整型常数默认为int型，声明long型常量可以后加‘-l-’或‘-L-’-。"><a href="#Java语言的整型常数默认为int型，声明long型常量可以后加‘-l-’或‘-L-’-。" class="headerlink" title="Java语言的整型常数默认为int型，声明long型常量可以后加‘ l ’或‘ L ’ 。"></a>Java语言的整型常数默认为int型，声明long型常量可以后加‘ l ’或‘ L ’ 。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  测试基本数据类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> creep_creep_creep</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A_integer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">015</span>;<span class="comment">//八进制</span></span><br><span class="line"><span class="keyword">int</span> c=<span class="number">0x15</span>;<span class="comment">//十六进制</span></span><br><span class="line"><span class="keyword">int</span> d=<span class="number">0b1111</span>;<span class="comment">//二进制</span></span><br><span class="line"></span><br><span class="line">System.out.println(a);<span class="comment">//15</span></span><br><span class="line">System.out.println(b);<span class="comment">//13</span></span><br><span class="line">System.out.println(c);<span class="comment">//21</span></span><br><span class="line">System.out.println(d);<span class="comment">//15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> a = <span class="number">6666666</span>;  <span class="comment">//编译成功，在int表示的范围内(21亿内)。</span></span><br><span class="line"><span class="keyword">long</span> b = <span class="number">66666666666</span>;<span class="comment">//不加L编译错误，已经超过int表示的范围。</span></span><br><span class="line"><span class="keyword">long</span> b = <span class="number">66666666666L</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526</span></span><br></pre></td></tr></table></figure><h3 id="浮点型变量-常量"><a href="#浮点型变量-常量" class="headerlink" title="浮点型变量/常量"></a>浮点型变量/常量</h3><table><thead><tr><th>类型</th><th>存储空间</th><th>范围</th></tr></thead><tbody><tr><td>float</td><td>4字节</td><td>-3.403E38~3.403E38</td></tr><tr><td>double</td><td>8字节</td><td>-1.798E308~1.798E308</td></tr></tbody></table><blockquote><ul><li>float类型又被称作单精度类型，尾数可以精确到7位有效数字。</li><li>double表示这种类型的数值精度约是float类型的两倍，又被称作双精度类型。</li><li>浮点型常量默认类型也是double。</li></ul></blockquote><h3 id="Java浮点类型常量有两种表示形式"><a href="#Java浮点类型常量有两种表示形式" class="headerlink" title="Java浮点类型常量有两种表示形式"></a>Java浮点类型常量有两种表示形式</h3><blockquote><ol><li>十进制数形式，例如:3.14 314.0 0.314</li><li>科学记数法形式，如314e2 314E2 314E-2</li></ol></blockquote><ul><li>float类型的数值有一个后缀F或者f ，没有后缀F/f的浮点数值默认为double类型。</li><li>可以在浮点数值后添加后缀D或者d， 以明确其为double类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.*;<span class="comment">//导包</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试浮点型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> creep_creep_creep</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A_floating</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">float</span> a=<span class="number">3.14f</span>;</span><br><span class="line"><span class="keyword">double</span> b=<span class="number">6.28</span>;</span><br><span class="line"><span class="keyword">double</span> c=<span class="number">628E-2</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(c);<span class="comment">//6.28</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//浮点数不精确，不能用作比较</span></span><br><span class="line"><span class="keyword">float</span> d1=<span class="number">0.1f</span>;</span><br><span class="line"><span class="keyword">double</span> d2=<span class="number">1.0</span>/<span class="number">10</span>;</span><br><span class="line">System.out.println(d1==d2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> f1=<span class="number">4343433434f</span>;</span><br><span class="line"><span class="keyword">float</span> f2=f1+<span class="number">1</span>;</span><br><span class="line">System.out.println(f1==f2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">BigDecimal bd=BigDecimal.valueOf(<span class="number">1.0</span>);</span><br><span class="line">bd=bd.subtract(BigDecimal.valueOf(<span class="number">0.1</span>));</span><br><span class="line">bd=bd.subtract(BigDecimal.valueOf(<span class="number">0.1</span>));</span><br><span class="line">bd=bd.subtract(BigDecimal.valueOf(<span class="number">0.1</span>));</span><br><span class="line">bd=bd.subtract(BigDecimal.valueOf(<span class="number">0.1</span>));</span><br><span class="line">bd=bd.subtract(BigDecimal.valueOf(<span class="number">0.1</span>));</span><br><span class="line">System.out.println(bd);<span class="comment">//0.5</span></span><br><span class="line">System.out.println(<span class="number">1.0</span>-<span class="number">0.1</span>-<span class="number">0.1</span>-<span class="number">0.1</span>-<span class="number">0.1</span>-<span class="number">0.1</span>);<span class="comment">//0.5000000000000001</span></span><br><span class="line"></span><br><span class="line">BigDecimal bd2=BigDecimal.valueOf(<span class="number">0.1</span>);</span><br><span class="line">BigDecimal bd3=BigDecimal.valueOf(<span class="number">1.0</span>/<span class="number">10</span>);</span><br><span class="line">System.out.println(bd2.equals(bd3));<span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031323334353637</span></span><br></pre></td></tr></table></figure><h3 id="字符型变量-常量"><a href="#字符型变量-常量" class="headerlink" title="字符型变量/常量"></a>字符型变量/常量</h3><blockquote><ul><li>字符型在内存中占2个字节，在Java中使用单引号来表示字符常量。’A’是一个字符，”A”表示含有一个字符的字符串。</li><li>char 类型用来表示在Unicode编码表中的字符。Unicode编码被设计用来处理各种语言的文字，它占2个字节，可允许有65536个字符。</li><li>Unicode具有从0到65535之间的编码，他们通常用从’\u0000’到’\uFFFF’之间的十六进制值来表示（前缀为u表示Unicode）</li><li>Java 语言中还允许使用转义字符 ‘\’ 来将其后的字符转变为其它的含义。常用的转义字符及其含义和Unicode值如表2-6所示。</li></ul></blockquote><table><thead><tr><th>转义符</th><th>含义</th><th>Unicode值</th></tr></thead><tbody><tr><td>\b</td><td>退格（backspace）</td><td>\u0008</td></tr><tr><td>\n</td><td>换行</td><td>\u000a</td></tr><tr><td>\r</td><td>回车</td><td>\u000d</td></tr><tr><td>\t</td><td>制表符（tab）</td><td>\u0009</td></tr><tr><td>\“</td><td>双引号</td><td>\u0022</td></tr><tr><td>\‘</td><td>单引号</td><td>\u0027</td></tr><tr><td>\</td><td>反斜杠</td><td>\u005c</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试字符类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> creep_creep_creep</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A_char</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> a=<span class="string">'z'</span>;</span><br><span class="line"><span class="keyword">char</span> b=<span class="string">'中'</span>;</span><br><span class="line"><span class="keyword">char</span> c=<span class="string">'\u0061'</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(c);<span class="comment">//a</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"a"</span>+<span class="string">"\b"</span>+<span class="string">"b"</span>);<span class="comment">//退格 ab</span></span><br><span class="line">System.out.println(<span class="string">"a"</span>+<span class="string">"\n"</span>+<span class="string">"b"</span>);<span class="comment">//换行a</span></span><br><span class="line"> <span class="comment">//b</span></span><br><span class="line">System.out.println(<span class="string">"a"</span>+<span class="string">"\r"</span>+<span class="string">"b"</span>);<span class="comment">//回车 a</span></span><br><span class="line"> <span class="comment">//b</span></span><br><span class="line">System.out.println(<span class="string">"a"</span>+<span class="string">"\t"</span>+<span class="string">"b"</span>);<span class="comment">//制表符（tab） ab</span></span><br><span class="line">System.out.println(<span class="string">"a"</span>+<span class="string">"\""</span>+<span class="string">"b"</span>);<span class="comment">//双引号  a"b</span></span><br><span class="line">System.out.println(<span class="string">"a"</span>+<span class="string">"\'"</span>+<span class="string">"b"</span>);<span class="comment">//单引号  a'b</span></span><br><span class="line">System.out.println(<span class="string">"a"</span>+<span class="string">"\\"</span>+<span class="string">"b"</span>);<span class="comment">//反斜杠  a\b</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789101112131415161718192021222324</span></span><br></pre></td></tr></table></figure><h3 id="boolean类型变量-常量"><a href="#boolean类型变量-常量" class="headerlink" title="boolean类型变量/常量"></a>boolean类型变量/常量</h3><blockquote><ul><li>boolean类型有两个常量值，true和false，在内存中占一位（不是一个字节），不可以使用 0 或非 0 的整数替代 true 和 false ，这点和C语言不同。 boolean 类型用来判断逻辑条件，一般用于程序流程控制 。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试布尔类型</span></span><br><span class="line"><span class="comment"> *Less is More</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> creep_creep_creep</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A033BuErXing</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> flag;</span><br><span class="line">flag=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">System.out.println(<span class="string">"正确"</span>);<span class="comment">//正确</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本数据"><a href="#基本数据" class="headerlink" title="基本数据"></a>基本数据</h2><p>Computer memory stores arbitrary bit patterns. Making sense of these patterns involves the use of data types.</p><p>大纲：</p><ul><li>Data Types（数据类型）</li><li>Primitive Data vs. Objects （基本数据 vs 对象）</li><li>The Eight Primitive Data Types of Java （八个java的基本数据类型，上面提到了）</li><li>Numeric Data Types （数值数据类型）</li><li>Character and Boolean Data Types （字符Character和布尔Boolean数据类型）</li></ul><h4 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h4><p>Q：假设您遇到了右边撕碎的纸片，是什么意思：MIX</p><p>A：不好说，没有更多信息。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>您想查看本文的其余部分，或者知道它的来源。 在不了解上下文的情况下，很难说出MIX的含义。 它可以是罗马数字1009，也可以是英文单词“ mix”（其本身具有多种含义），也可以是旧电台英雄Tom Mix的姓氏。 它可以是音乐CD上的标签“ MTV Dance MIX”的一部分，也可以是瓶上的“ BLOODY MARY MIX”的标签的一部分。 也许您正在颠倒看它，它应该是“ XIW”。 当然，它可能根本不是英语。 在不知道上下文的情况下，一串字母没有什么意义。<br>计算机内存存储任意位模式（Computer memory stores arbitrary bit patterns）。，与一串字母一样，一串比特（Bits）的含义取决于如何使用。 数据类型（Data Type）是特定位（Bits）字符串的特定格式。</p><p>数据类型（Data Type）：</p><ul><li>是一种使用位（Bits）表示值的格式。</li><li>值不仅可能是数字，还可以是计算机可以处理的任何类型的数据。</li><li>计算机中的所有值都被一种或另一种数据类型包含在内。</li></ul><p>举个栗子</p><blockquote><p>0000000001100111</p></blockquote><p>是16位（Bits）模式的一个例子，他可能在计算机内存的一个地方被发现到，这代表了啥？</p><p>如果不了解上面例子的使用方式，就无法说出它代表什么。 short类型是Java的数据类型之一。 如果模式的数据类型为short，则它表示值103（一百零三）</p><h4 id="小问题-1"><a href="#小问题-1" class="headerlink" title="小问题"></a>小问题</h4><p>Q：下面的16位（Bit）模式代表了啥</p><blockquote><p>0000000000000000</p></blockquote><p>A：这东西我不晓得（呃。。。。）</p><p>额外：<a href="https://zhuanlan.zhihu.com/p/46317118">https://zhuanlan.zhihu.com/p/46317118</a></p><h3 id="Java有很多种数据类型"><a href="#Java有很多种数据类型" class="headerlink" title="Java有很多种数据类型"></a>Java有很多种数据类型</h3><p>您可能会说模式0000000000000000表示“零”。 但这并不一定。 即使是这种明显的模式也没有自动含义。<br>如果告诉您上述模式的类型是<code>short</code>，那么您会知道它表示整数零。</p><p> 这是另一种模式：</p><blockquote><p>1111111110011001 </p></blockquote><p>当这个模式是<code>short</code> ，此模式表示 -103（负一百三十三）。（话说翻译成“模式”合不合适。。）<br>在计算机的内存中可以表示无数种类型的数据。 如果特定模式始终具有特定含义，则只能表示几种类型的数据。 这太过严格了。 程序员在编写程序时发明了许多数据类型。 没有这种灵活性，计算机的用处将大大减少</p><p>并非所有机器都以这种方式使用内存。 例如，一个简单的电子计算器仅将存储器用于一个目的：存储浮点数。 它仅使用一种数据类型，并且只能使用已连接完成的那种数据类型来做几件事。 设计计算器的工程师决定了如何用位字符串表示数字，然后设计电子设备使其仅与这些字符串一起使用。 这对于通用计算机而言过于严格</p><h4 id="小问题-2"><a href="#小问题-2" class="headerlink" title="小问题"></a>小问题</h4><p>Q：你能想象1960年的电脑是为了处理音频数据而构建的不</p><p>A：无法想象。。。这不是现在电脑常用的一个功能</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>但是1960年代的某些计算机确实用于处理音频数据。 这只是发明一种用位模式表示音频，然后为其编写程序的情况。<br>如果每次使用数据都必须发明自己的方案来用位表示它，那将很尴尬。 某些类型的数据是如此基础，因此Java中内置了表示数据的方式。 这些是原始数据类型。 八种原始数据类型是：</p><ul><li>byte</li><li>short</li><li>int</li><li>long</li><li>float</li><li>double</li><li>char</li><li>boolean</li></ul><p>大写和小写字符很重要。 因此，“byte”是原始数据类型的名称，而“BYTE”则不是。 区分大小写的计算机语言称为区分大小写。 某些语言不区分大小写，尤其是当数据输入设备没有小写字母时设计的旧语言。<br>在短语“基本数据类型”（“Primitive Data Type”）中，“基本”（“Primitive”）一词的意思是“用于创建其他较大部分的基本组件”。 这个词在计算机科学中经常使用。 要解决一个大问题，您需要查找所需的原始操作，然后使用它们来构建解决方案</p><h4 id="小问题-3"><a href="#小问题-3" class="headerlink" title="小问题"></a>小问题</h4><p>Q：Int 是一个基本数据类型吗？</p><p>A：不是，int才是，Int不是，不能有大写。</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>Java中的所有数据都属于两类之一：基本数据（Primitive Data）和对象（Objects）。基本数据类型（Primitive Data Type）只有八种， 但是Java有许多类型的对象（Objects），您可以根据需要”发明“许多其他对象。 您发明的任何数据类型都是对象（Objects）类型。</p><p><img src="https://i.loli.net/2020/11/26/MahwfAZSQbcvdzG.png" alt=""></p><p>在以后的章节中将更多地讨论对象（因为Java是一种面向对象的编程语言）。 现在，您需要了解以下所有信息：</p><ul><li><p>基本数据值使用固定的少量字节。</p></li><li><p>只有八种原始数据类型。</p></li><li><p>程序员无法创建新的原始数据类型。</p></li></ul><ul><li><p>对象在数据中占很大一部分。 一个对象可能使用许多字节的内存。</p></li><li><p>一个对象通常由许多内部部分组成。</p></li><li><p>对象的数据类型称为其类（Class）。</p></li><li><p>Java中已经定义了许多类（Class）。</p></li><li><p>程序员可以发明新的类（Class）以满足程序的特定需求。</p></li></ul><p>一个粗略的例子是，原始数据值就像一个螺母或螺栓，而一个对象就像一台整个机器。</p><h4 id="小问题-4"><a href="#小问题-4" class="headerlink" title="小问题"></a>小问题</h4><p>Q：基本数字对计算机程序重要吗？（Are numbers of fundamental importance to computer programs）</p><p>A：是滴。</p><h3 id="基本数据类型（数字类）"><a href="#基本数据类型（数字类）" class="headerlink" title="基本数据类型（数字类）"></a>基本数据类型（数字类）</h3><p>数字对Java特别重要，八种基本数据有六种都是数字类（Numeric）。。。或者说纯数字？</p><p><img src="https://i.loli.net/2020/11/26/xqrOIhVlEefPHG6.png" alt=""></p><p><img src="https://i.loli.net/2020/11/26/C26FT4gXZMocSlb.png" alt=""></p><p>这六种基本数据可以分为整数类，和浮点（小数）类</p><p>整数类型没有分数（小数）部分；浮点类型有分数（小数）部分。在纸上，整数没有小数点，浮点数有。但是在电脑主记忆哪里没有小数点，即使是小数也是由Bit Patterns（位模式）表示。用于表示整数的方法与用于表示浮点数的方法之间存在根本的区别。</p><p>每个基本类型使用固定数量的位。 这意味着，如果您使用的是特定的数据类型，则无论表示什么值，都将使用相同数量的位</p><p>举个例子，所有数据类型为<code>short</code>的值都会占用16位（bits），数据类型为<code>short</code>的“0”和“30000”都会占用16位（bits）</p><p>所有数据类型为<code>long</code>的值都会占用64位（bits），“0”占用64位（bits），“99999999999999”占用64位（bits）</p><p>大小较大的值（负或正）需要表示更多的位。 这类似于在纸上写数字：大数字需要更多数字。 如果某个值需要比特定数据类型使用的位数更多的位，则无法使用该数据类型来表示它</p><h4 id="小问题-5"><a href="#小问题-5" class="headerlink" title="小问题"></a>小问题</h4><p>Q：假设您要处理计算机程序中的数字1,023,004，可以用<code>short</code>当作数据类型吗？</p><p>A：不能，超过范围（-32,768 ~ +32,767）</p><h3 id="更多的位（Bits），更大的范围（Range）"><a href="#更多的位（Bits），更大的范围（Range）" class="headerlink" title="更多的位（Bits），更大的范围（Range）"></a>更多的位（Bits），更大的范围（Range）</h3><p>较大范围的数值需要更多位。 整数数据的不同大小使您可以为正在使用的数据选择适当的大小。 通常，您应该选择一个数据类型，该数据类型的范围要比您希望处理的数字范围大得多。 如果程序仅使用几十个变量，则无论其变量使用什么大小，它的运行速度都一样快，并且占用的主内存也一样多</p><p>那么为什么存在小型数据类型呢？ 好吧，许多现实世界中的程序都处理大量数据（数十亿个数据项），然后使用较小的大小可以节省大量的空间和时间。 但是我们不会在这些注释中使用太多数据。 通常，您应该将<code>int</code>或<code>double</code>用作数字数据。</p><p>编写程序时，您不必知道如何用位表示数字。 您可以像在打字机上一样键入数字。 这称为文字。 “文字”一词的含义是，值明确地是程序的一部分。 例如，125实际代表值一百二十五。 程序中的整数文字与书中的文字一样，除非没有逗号</p><p>125                   -32                  16                  0                 -123987</p><p>上面的所有例子都是32位（bits）的<code>int</code>文字。一个64位（bits）的<code>long</code>文字有一个大写L或者小写l在结尾，无论如何，<strong>永远</strong>不要用小写l因为这很容易和数字1搞混。</p><p>25L                           -32L                   16L             0l              -123987l</p><p>最后一个例子虽然没错，但是看起来头疼，不知道是l还是1</p><h4 id="小问题-6"><a href="#小问题-6" class="headerlink" title="小问题"></a>小问题</h4><p>Q：右边是一个整数（<code>int</code>）的文字？ 197.0</p><p>A：不是，因为这个有小数点，不能归类为整数数据类型的<code>int</code>。</p><h3 id="浮点（小数）类型"><a href="#浮点（小数）类型" class="headerlink" title="浮点（小数）类型"></a>浮点（小数）类型</h3><p>如果你用文字“197.0”在一个程序中，小数点告诉了编译器这个值需要用一个浮点型数据类型来代表。“197.0”的位模式（bit pattern）跟整数“197”有很大不同。</p><p>有两种浮点基本数据类型。</p><p><img src="https://i.loli.net/2020/11/26/C26FT4gXZMocSlb.png" alt=""></p><p>数据类型<code>float</code>有时候也被称为”single-precision floating point”（“单精度浮点”）。</p><p>数据类型<code>double</code>有两倍的位（bits），或者说大小。并且他有时被称为”double-precision floating point”（“双精度浮点”）</p><p>这些短语来自编程语言语言<code>FORTRAN</code>，它曾经是主要的编程语言。</p><p><a href="https://baike.baidu.com/item/FORTRAN%E8%AF%AD%E8%A8%80/295590?fr=aladdin">https://baike.baidu.com/item/FORTRAN%E8%AF%AD%E8%A8%80/295590?fr=aladdin</a></p><blockquote><p>FORTRAN语言是Formula Translation的缩写，意为“公式翻译”。它是为科学、工程问题或企事业管理中的那些能够用数学公式表达的问题而设计的，其数值计算的功能较强。</p><p>FORTRAN语言是世界上第一个被正式推广使用的<a href="https://baike.baidu.com/item/高级语言/299113">高级语言</a>。它是1954年被提出来的，1956年开始正式使用，直到2014年已有六十年的历史，但仍历久不衰，它始终是数值计算领域所使用的主要语言。</p></blockquote><p>在程序中，浮点写起来都会有一个小数点在里面，并且<strong>没有逗号</strong>（没有千位分隔符）</p><p>123.0                      -123.5                           -198234.234                       0.00000381</p><p>注意：上面写的文字将自动为double类型。 几乎总是，如果要处理浮点数，则应使用double类型的变量。 然后，像上面这样的文字数据类型将与您的变量的数据类型匹配。 数据类型float必须仅在特殊情况下使用（例如，当您需要处理包含32位float的数据文件时）</p><h4 id="小问题-7"><a href="#小问题-7" class="headerlink" title="小问题"></a>小问题</h4><p>Q：（思考问题）你觉得用<code>float</code>代替<code>double</code>能节约大量的计算机内存？</p><p>A：不会的，对于大多数使用double类型变量的程序，在一个数千字节长的程序中只需花费几个额外的字节。</p><h3 id="明确的浮点文字"><a href="#明确的浮点文字" class="headerlink" title="明确的浮点文字"></a>明确的浮点文字</h3><p>有时您需要明确要求一个单精度浮点（<code>float</code>）文字。 为此，请在结尾处放置小写字母“f”或大写字母“F”：</p><p>123.0f        -123.5F         -198234.234f            0.00000381F</p><p>有时您需要明确要求一个双精度浮点（<code>double</code>）文字。 为此，请在结尾处放置小写字母“d”或大写字母“D”：</p><p>123.0d -123.5D -198234.234d 0.00000381D</p><p>记住，后面没有任何字母的话，这个浮点数文字会自动归类为<code>double</code>数据类型。</p><h4 id="小问题-8"><a href="#小问题-8" class="headerlink" title="小问题"></a>小问题</h4><p>Q：你觉得这个代码有没有问题</p><p><code>double rats = 8912D ;</code></p><p>A：没问题。’D’将使文字为双精度型（即使它没有小数点）。 但是，为避免混淆，即使在不需要的地方，也始终在浮点文字中包含小数点。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天也拆成两份吧&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>开始学Java之4 Scanner 与 Random</title>
    <link href="https://a-little-bear.github.io/p/3941/"/>
    <id>https://a-little-bear.github.io/p/3941/</id>
    <published>2020-11-24T20:54:46.000Z</published>
    <updated>2020-11-29T01:38:07.869Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Java输入真麻烦哈</p></blockquote><a id="more"></a><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p>我这个萌新看来目前就相当于python的input吧。。</p><h3 id="找出三个整数中最大的那一个（手动输入）"><a href="#找出三个整数中最大的那一个（手动输入）" class="headerlink" title="找出三个整数中最大的那一个（手动输入）"></a>找出三个整数中最大的那一个（手动输入）</h3><p>上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;  <span class="comment">//导入java模块，或者是类Scanner（应该就是扫描输入内容用的吧。。）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaximumThree</span> //定义类</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="comment">//Main method 入口</span></span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner (System.in); <span class="comment">//将变量scan定为新的Scanner，呃咋解释。。括号内应该是代表这个scan变量干嘛用的，这个scan是用来Input的。。。晚点查查</span></span><br><span class="line">    <span class="keyword">int</span> num1, num2, num3, maxnum; <span class="comment">//定义变量为整数</span></span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"Please enter three numbers!"</span>);</span><br><span class="line">    System.out.println(<span class="string">"Please enter the first number:"</span>);</span><br><span class="line">    num1 = scan.nextInt(); <span class="comment">//获取第一个数字</span></span><br><span class="line">    System.out.println(<span class="string">"Please enter the second number:"</span>);</span><br><span class="line">    num2 = scan.nextInt(); <span class="comment">//获取第二个数字</span></span><br><span class="line">    System.out.println(<span class="string">"Please enter the third number:"</span>);</span><br><span class="line">    num3 = scan.nextInt(); <span class="comment">//获取第三个数字</span></span><br><span class="line">    </span><br><span class="line">    maxnum = num1; <span class="comment">//先将maxnum设定为第一个数字</span></span><br><span class="line">    <span class="keyword">if</span> (maxnum &lt; num2) <span class="comment">//如果小于第二个数字，改为第二个</span></span><br><span class="line">      maxnum = num2;</span><br><span class="line">    <span class="keyword">if</span> (maxnum &lt; num3) <span class="comment">//如果小于第三个数字，改为第三个</span></span><br><span class="line">      maxnum = num3;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"The biggest number is "</span> + maxnum); <span class="comment">//输出最大的数字</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先要跟python的模块一样，import， 代码是<code>import java.util.Scanner;</code></p><p>然后不能直接用这个Scanner类，需要先将一个变量（scan）定义为这个Scanner类。。<code>Scanner scan = new Scanner (System.in);</code></p><p>然后就是逻辑运算，最大数设为第一个，分别比较，两个比哪个大改成哪个，最后剩下最大的，输出。。</p><h3 id="找出五个整数（或者更多）中最大的那一个（手动输入）"><a href="#找出五个整数（或者更多）中最大的那一个（手动输入）" class="headerlink" title="找出五个整数（或者更多）中最大的那一个（手动输入）"></a>找出五个整数（或者更多）中最大的那一个（手动输入）</h3><p>这时候就需要用到for loop了（不然你复制粘贴几百个if，和输入呀。。。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">//导入Scanner模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaximumFive</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner (System.in); <span class="comment">//设定scan变量为新的Scanner类（系统输入）</span></span><br><span class="line">    <span class="keyword">int</span> num, max=<span class="number">0</span>; <span class="comment">//定义num， max为整数，并且max为0（后面会先改成第一个的，不定义具体数字就运行不了。。）</span></span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"Please enter three numbers!"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123; <span class="comment">//运行3次</span></span><br><span class="line">      System.out.println(<span class="string">"Please enter the number:"</span>);</span><br><span class="line">      num = scan.nextInt();</span><br><span class="line">      <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="comment">//获取输入的数字，第一次循环直接把数字设定为max</span></span><br><span class="line">        max = num;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (max &lt; num ) <span class="comment">//如果不是第一次循环，就把输入和max进行比较</span></span><br><span class="line">        max = num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"The biggest number is "</span> + max); <span class="comment">//输出max</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里学到一个小知识：else if，中间有空格，不是python的elif。。下面大佬解释的好清楚呀。。elif可以说是一个指令，else if是两个，拆开来就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Boolean)&#123;</span><br><span class="line">        <span class="comment">//Code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样吧。。。。</p><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><p>Java同样要导入random模块</p><h3 id="找出（手动输入）个整数（0-250）中最大的那一个（自动随机）"><a href="#找出（手动输入）个整数（0-250）中最大的那一个（自动随机）" class="headerlink" title="找出（手动输入）个整数（0-250）中最大的那一个（自动随机）"></a>找出（手动输入）个整数（0-250）中最大的那一个（自动随机）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; <span class="comment">//导入Scanner类（输入用的）</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;  <span class="comment">//导入Random类（计算随机整数用的）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomMaximumFive</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner (System.in); <span class="comment">//定义scan为新的Scanner类（系统输入）</span></span><br><span class="line">    Random rand = <span class="keyword">new</span> Random(); <span class="comment">//定义rand为新的Random类，（）应该是没有限制，说明啥的意思吧</span></span><br><span class="line">    <span class="keyword">int</span> num, max=<span class="number">0</span>, number; <span class="comment">//定义这些变量为整数，并且max=0</span></span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"Please enter how many numbers in the sequence"</span>);</span><br><span class="line">    num = scan.nextInt(); <span class="comment">//输入你要随机多少个0-250的整数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; num; i++) <span class="comment">//循环你输入的次数</span></span><br><span class="line">    &#123;</span><br><span class="line">      number = rand.nextInt(<span class="number">250</span>); <span class="comment">//number变量设定为0-250随机一个整数，可能是123，可能是10，可能是250，可能是0。。</span></span><br><span class="line">      System.out.println(number); <span class="comment">//每次都显示随机生成的数字</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (max &lt; number) <span class="comment">//比较max（0）与生成的数字，大的话就覆盖，小的话就管他呢。。</span></span><br><span class="line">        max = number;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">"The biggest number is "</span> + max); <span class="comment">//输出最大的那个数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里random只学到了java.util.Random.nextInt ，为啥叫nextInt，不叫randInt啥的呢。。</p><h2 id="大佬解惑"><a href="#大佬解惑" class="headerlink" title="大佬解惑"></a>大佬解惑</h2><blockquote><p>首先 else if 和 elif 虽然表现一致但其实不是一码事 …</p><p>else if 不是一个独立的关键字 … else if 解释为省略了 {} 的 else { if () … } …</p><p>nextInt 的定名来源于 Random 类 …</p><p>这个类的原理是「实例化即产生一个伪随机数列」 … 然后根据每次 next 不同的参数处理成不同的值 …</p><p>这话可能有点难以理解 … 你也可以理解成既然类名已经是 Random 了 … 再用 randInt 就语义重复了 …</p><p>严谨来说不太对 … 因为执行 next 的时候并没有产生随机动作 … 但单纯按照「语义重复」来理解问题不大 …</p></blockquote><blockquote><p>哦对「实例化」这个词你应该也还没接触到 … 理解成「new 了就有」就行 …</p><p>反正就是 new Random 之后就有一堆随机数在数学意义上等着 … 然后一个一个 next 出来就好 …</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Java输入真麻烦哈&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>开始学Java之3 IF, FOR, 与运算</title>
    <link href="https://a-little-bear.github.io/p/d29f/"/>
    <id>https://a-little-bear.github.io/p/d29f/</id>
    <published>2020-11-24T20:28:08.000Z</published>
    <updated>2020-11-29T01:37:54.889Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>挺多东西的</p></blockquote><a id="more"></a><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>一段代码立马理解↓</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AO</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">   <span class="keyword">int</span> a, b, sum, dif, q, p;</span><br><span class="line">   a=<span class="number">10</span>; b=<span class="number">7</span>;</span><br><span class="line">   </span><br><span class="line">   sum=a+b;</span><br><span class="line">   dif=a-b;</span><br><span class="line">   q=a/b;</span><br><span class="line">   p=a*b;</span><br><span class="line">   </span><br><span class="line">   System.out.println(<span class="string">"The sum is "</span> + sum);</span><br><span class="line">   System.out.println(<span class="string">"The difference is "</span> + dif);</span><br><span class="line">   System.out.println(<span class="string">"The quotient is "</span> + q);</span><br><span class="line">   System.out.println(<span class="string">"The product is "</span> + p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先定义所有变量为int（还没学到小数啥的）</p><p>然后a=10; b=7; 这里全都要用“；”</p><p>接着 sum = a + b;      语句后面好像都要加“;”</p><p>。。。省略一堆</p><p>最后就是输出了：   System.out.println(“The sum is “ + sum);   输出：和是 17</p><p>这里用的是+号，不是（“The sum is ”, sum) 这样。。</p><h2 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h2><p>Java的if应该是这么用的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Boolean)</span><br><span class="line">    <span class="comment">//True</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">//False</span></span><br></pre></td></tr></table></figure><p>这里有个小问题，这个if不需要加{}大括号嘛</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Boolean)&#123;</span><br><span class="line">    <span class="comment">//True</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//False</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之类的。。</p><h2 id="IF与运算例子"><a href="#IF与运算例子" class="headerlink" title="IF与运算例子"></a>IF与运算例子</h2><p>看这个数是不是偶数（取模：%）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvenOdd</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">  </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">11</span>; <span class="comment">//定义数字</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ( num % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">//判断这个数字除以二的余数是不是零</span></span><br><span class="line">      System.out.println(<span class="string">"The number "</span> + num + <span class="string">" is an even number!"</span>); <span class="comment">//是零</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      System.out.println(<span class="string">"The number "</span> + num + <span class="string">" is an odd number!"</span>);  <span class="comment">//不是零</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*   这个似乎也能运行？</span></span><br><span class="line"><span class="comment">    if ( num % 2 == 0) &#123;</span></span><br><span class="line"><span class="comment">      System.out.println("The number " + num + " is an even number!");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else &#123;</span></span><br><span class="line"><span class="comment">      System.out.println("The number " + num + " is an odd number!");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>呃。。没啥想说的</p><h2 id="FOR"><a href="#FOR" class="headerlink" title="FOR"></a>FOR</h2><p>上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) <span class="comment">//为了方便看，我把大括号移到了下面，不影响的。。</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是这句话<code>int i = 0; i &lt; 3; i++</code></p><p>int i = 0 ：将整数i（通常用i）设定为0</p><p>i &lt; 3 ：i 小于 3，意思就是 当i等于3就结束循环</p><p>i++ ：i+1的意思，如果是i–，就是i-1. 暂时不太知道为啥。。（尝试过直接把i++换成i+1似乎不成功）</p><p>总的来说，就是i=0时循环一次，然后i+1（1）再循环一次，i+1（2）再循环一次，最后i+1（3），3 不小于 3，不在运行，总共运行三次。</p><p>例子下一篇文章给。。。（因为要包括别的东西）</p><h2 id="大佬解惑"><a href="#大佬解惑" class="headerlink" title="大佬解惑"></a>大佬解惑</h2><p>问：for和if为啥有时候不需要加大括号？</p><p>答：if statement 如果后面只有一句大括号可以省略 … 多句必须要大括号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for 同理</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    System.out.println( i );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">    System.out.println( i );</span><br><span class="line">    System.out.println( i );</span><br><span class="line">    System.out.println( i );</span><br><span class="line">    System.out.println( i );</span><br><span class="line">    System.out.println( i );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>「句」 … short for 语句 … 并不是行 … 一条语句可以拆分成多行 …</p><p>最简单的分句方法 … 有几个分号视为几句 … 这个不太准 … 但作为初学按这个记最容易 …</p><p>示例如下 … if 段有两个分号 … 则必须用括号标段 … else 段只有一个 … 则不需要 …</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Natsumi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> ( <span class="keyword">true</span> ) &#123;</span><br><span class="line">            System.out.print(<span class="string">"Hello "</span>);</span><br><span class="line">            System.out.print(<span class="string">"alittlebear"</span>);   </span><br><span class="line">       &#125; <span class="keyword">else</span> System.out.print(<span class="string">"Never"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例二 … 虽然多行但依然是同一条语句 … 这时候可用 {} 可不用 …</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Natsumi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> ( <span class="keyword">true</span> ) System</span><br><span class="line">                   .out</span><br><span class="line">                   .print(</span><br><span class="line">                       <span class="string">"Hello"</span></span><br><span class="line">                   );</span><br><span class="line">           <span class="keyword">else</span> System.out.print(<span class="string">"Never"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例三 … 两条语句却没有 {} … 这时候会报错 ‘else’ without ‘if’ …</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Natsumi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> ( <span class="keyword">true</span> )</span><br><span class="line">                   System.out.print(<span class="string">"Not"</span>);</span><br><span class="line">                   System.out.print(<span class="string">"Works"</span>);</span><br><span class="line">           <span class="keyword">else</span> System.out.print(<span class="string">"Never"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是大括号随便用的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Natsumi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span> </span>&#123;</span><br><span class="line">                &#123;</span><br><span class="line">                        &#123;</span><br><span class="line">                                System.out.print(<span class="string">"测试"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">               System.out.print(<span class="string">"MD"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">       System.out.print(<span class="string">"高亮"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;挺多东西的&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>开始学Java之2 源代码和字节码 与 解析代码</title>
    <link href="https://a-little-bear.github.io/p/c84c/"/>
    <id>https://a-little-bear.github.io/p/c84c/</id>
    <published>2020-11-24T01:41:50.000Z</published>
    <updated>2020-11-29T01:37:37.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>具体内容看文章。。j</p></blockquote><a id="more"></a><h1 id="源代码与字节码"><a href="#源代码与字节码" class="headerlink" title="源代码与字节码"></a>源代码与字节码</h1><p>源代码（Source code）</p><p>字节码（Bytecode）</p><p>总的来说源代码是给人看的，字节码是给机器看的</p><p>在上一篇文章中，Hello.java 是源代码， Hello.class 是字节码</p><p>字节码是由源代码编译出来的</p><h1 id="简单解析Hello-World"><a href="#简单解析Hello-World" class="headerlink" title="简单解析Hello World"></a>简单解析Hello World</h1><h2 id="第一行-类"><a href="#第一行-类" class="headerlink" title="第一行-类"></a>第一行-类</h2><p>上代码（<code>Hello.java</code>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>文件名字必须与类名相同，比如说上面的 class <strong>Hello *<em>必须等于 *</em>Hello</strong>.java（在Java，文件和文件名的大小写都很重要）</p></li><li><p><code>class Hello</code> 第一行，定义了类名为Hello （类是程序的一部分，小的程序一般都只有一个类，后面会详细学到。。）</p></li><li><p>编译源代码文件 <code>Hello.java</code> 后会出现一个字节码文件 <code>Hello.class</code> 。</p></li><li><p>所有代码在类里面都是在{}之中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//代码放这里（好吧我暂时不清楚注释是哪个，好像是这个）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类，和文件名必须有英文字母和数字组成，第一个字符必须是字母，不能出现空格，类名一般都用大写字母开头（比如说这里的class <strong>H</strong>ello ，但是不强制要求。 源代码文件只能以.java结尾，并且都是小写字母</p></li></ol><h3 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h3><p>Q：Java程序第一行是 <code>class AddUpNumbers</code> ，源代码和字节码的文件名应该是什么？</p><p>A： AddUpNumbers.java 和 AddUpNumbers.class</p><h2 id="第二行-大括号"><a href="#第二行-大括号" class="headerlink" title="第二行-大括号"></a>第二行-大括号</h2><ul><li>所有东西都是在类的俩大括号{}之间（不知道咋描述。。。）</li><li>开始学Java，最好每个源代码文件仅放一个类，后面一个源代码文件可能包含多个类</li></ul><h2 id="第三行-文件开始处"><a href="#第三行-文件开始处" class="headerlink" title="第三行-文件开始处"></a>第三行-文件开始处</h2><ul><li><code>public static void main ( String[] args )</code> 显示了文件从哪里开始</li><li>上面的<code>main</code>代表了这是“main method”（不知道咋翻译），也就是程序入口的意思</li><li><a href="https://www.cnblogs.com/cac2020/p/5049315.html">https://www.cnblogs.com/cac2020/p/5049315.html</a> （好奇熊）</li></ul><p>问题：Java main方法为什么是  public static void main(String[] args)???</p><table><thead><tr><th>序号</th><th>场景</th><th>编译</th><th>运行</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td>public修改为private protected或者去掉</td><td>正常</td><td>Main Method not public</td><td>只有当main方法在公有级别上时才对JVM可见，所以需要使用public修饰</td></tr><tr><td>2</td><td>去掉static</td><td>正常</td><td>Exception in thread “main” java.lang.NoSuchMethodError:main</td><td>如果要使main方法作为程序入口，不必要先去创建该类实例而是直接调用，所以该方法需要用static修饰</td></tr><tr><td>3</td><td>修改返回值类型</td><td>正常</td><td>Exception in thread “main” java.lang.NoSuchMethodError:main</td><td>JVM对Java程序已经是最底层，由它调用的方法返回值没有任何地方可去，因此main方法不需要返回值，所以使用void修饰</td></tr><tr><td>4</td><td>修改参数类型或添加多个参数</td><td>正常</td><td>Exception in thread “main” java.lang.NoSuchMethodError:main</td><td>main方法需要接收命令行传入的参数（参数之间使用空格分隔），java规范使用字符串数组作为main方法的唯一入参，参数名可以不是args,如果不穿参数，该数组是empty而不是null</td></tr><tr><td>5</td><td>修改方法名</td><td>正常</td><td>Exception in thread “main” java.lang.NoSuchMethodError:main</td><td>含有main方法的类是Java应用程序，JVM只识别main作为程序入口，所以只能使用main作为方法名</td></tr><tr><td>6</td><td>添加throw Exception</td><td>正常</td><td>正常</td><td>main方法可以抛出异常</td></tr><tr><td>7</td><td>public与static互换位置</td><td>正常</td><td>正常</td><td></td></tr></tbody></table><h3 id="小问题-1"><a href="#小问题-1" class="headerlink" title="小问题"></a>小问题</h3><p>Q：<code>public             static void main(String[] args)</code>  能不能作为开始（也就是那些空格有没有关系）</p><p>A：没关系，编辑器显示正常，但是人看起来有点不舒服就是了。。</p><h2 id="第五行-输出"><a href="#第五行-输出" class="headerlink" title="第五行-输出"></a>第五行-输出</h2><p>重新给一下代码<code>Hello.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>); <span class="comment">//看这行</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序的main method 由一行代码组成</p><p><code>System.out.println(&quot;Hello World!&quot;);</code> （←就是我）</p><p>这个语句将引号内的字符写入计算机系统的监视器（也就是输出到屏幕吧），不包括引号。</p><p>“Hello World!” 这部分叫String字符串（俺晓得），也就是字符”们“的序列</p><h3 id="小问题-2"><a href="#小问题-2" class="headerlink" title="小问题"></a>小问题</h3><p>Q：Hello.java包含了程序例子，文件在硬盘 C:\Temp 文件夹里，想要运行这个程序，需要完成哪两件事？</p><p>A：1. 编译成Hello.class；2.用Java 解释器运行Hello.class</p><h2 id="语法错误"><a href="#语法错误" class="headerlink" title="语法错误"></a>语法错误</h2><p>这里是一个故意写错的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Class Hello</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>class “不小心”变成了 Class，这是一个 ”Syntax Error” ，也就是语法错误</p><p>语法错误（Syntax Error）是编程语言解释 “语法错误” （呃。。）时用的词语</p><h3 id="小问题-3"><a href="#小问题-3" class="headerlink" title="小问题"></a>小问题</h3><ol><li><p>怎么修改这个错误，并且运行文件</p><p>先把Class改成class，再编译，运行Hello.class</p></li><li><p>如果你修改了语法错误后忘记保存了，并且直接运行了程序，会发生什么？</p><p>你会编译旧的错误版本，并且得到相同错误信息，当你在用“记事本”软件，或者其他文本编辑器，你在修改main memory里的代码。Javac编译器会编译已经保存在硬盘上的文件</p></li></ol><h2 id="Bugs"><a href="#Bugs" class="headerlink" title="Bugs"></a>Bugs</h2><p>上代码（我看不出来bug。。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello Neptune!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个程序成功编译与运行不等于这是正确的。举个栗子，上面的代码，这个代码</p><p>当一个代码编译时没有任何语法错误，但是并没有按照预期执行，这就叫有bug（快修快修）</p><h3 id="小问题-4"><a href="#小问题-4" class="headerlink" title="小问题"></a>小问题</h3><ol><li><p>这个程序编译时有没有错误</p><p>无</p></li><li><p>这个程序可以不可以运行</p><p>可以</p></li><li><p>这个程序跟Hello World要求相同不相同？（噢我知道为啥了，这是跟上面Hello World找不同，World 改成了 Neptune 。</p><p>不，这有bug（理直气壮）</p></li></ol><h2 id="长一点的程序例子"><a href="#长一点的程序例子" class="headerlink" title="长一点的程序例子"></a>长一点的程序例子</h2><p>可以先写短一点的程序，这样更好找出语法错误和bugs；然后拼接成，或者再写长一点的程序</p><p>上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Emily</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"A bird came down the walk:"</span>); </span><br><span class="line">        System.out.println(<span class="string">"He did not know I saw;"</span>); </span><br><span class="line">        System.out.println(<span class="string">"He bit an angle-worm in halves"</span>); </span><br><span class="line">        System.out.println(<span class="string">"And ate the fellow, raw."</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序应该被命名为Emily.java，然后编译器会创建一个字符码为Emily.class</p><h3 id="小问题-5"><a href="#小问题-5" class="headerlink" title="小问题"></a>小问题</h3><p>Q：这个程序会在显示器上写入啥？当他运行</p><p>A：每一个<code>System.out.println</code> 语句会输出引号内的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A bird came down the walk:</span><br><span class="line">He did not know I saw;</span><br><span class="line">He bit an angle-worm in halves</span><br><span class="line">And ate the fellow, raw.</span><br></pre></td></tr></table></figure><h2 id="另一个例子"><a href="#另一个例子" class="headerlink" title="另一个例子"></a>另一个例子</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>一个很像Hello World的例子，但是 main method 有更多语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Haiku</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        System.out.println(_______________________________); </span><br><span class="line">        System.out.println(_______________________________); </span><br><span class="line">        System.out.println(_______________________________); </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>要输出：</p><p>On a withered branch<br>A crow has just alighted:<br>Nightfall in autumn.</p><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Haiku</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span> </span></span><br><span class="line"><span class="function">    </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"On a withered branch"</span>); </span><br><span class="line">        System.out.println(<span class="string">"A crow has just alighted:"</span>); </span><br><span class="line">        System.out.println(<span class="string">"Nightfall in autumn."</span>); </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果您一直在创建示例程序并编译和运行它们，您可能已经注意到程序中的空格和新行并不重要。（但是，不能将空格放在单词中间，引号内的空格很重要。）例如，以下版本的程序将正确编译，并在运行时执行完全相同的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>                <span class="title">Haiku</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span>             <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.     println(                   <span class="string">"On a withered branch"</span>);</span><br><span class="line">System      .     out.println(<span class="string">"A crow has just alighted:"</span>           );</span><br><span class="line">System.out.println(<span class="string">"Nightfall in autumn."</span>);</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>编译器“看不到”程序的二维外观，编译器将程序视为字符流，一个接一个。</p><p>无论如何，人对文字的布局很敏感，写代码保持整齐是很重要的，虽然最后一个乱七八糟的代码也能运行，但是看起来就秃头</p><h3 id="小问题-6"><a href="#小问题-6" class="headerlink" title="小问题"></a>小问题</h3><p>Q：如果在这个布局不好的程序中有一个小错误，很容易找到吗？</p><p>A：不好找到，看起来一团糟，很容易错过一个错误的地方</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释（Comment）是人类读者写的一个笔记，或者就是注释（呃。。）</p><p>在Java，注释由 //开始 ，跟在后面的文字会被编辑器忽略</p><p>上代码（呃。。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Write three lines of a poem to the computer monitor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Haiku</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"On a withered branch"</span> );</span><br><span class="line">System.out.println(<span class="string">"A crow has just alighted:"</span>);</span><br><span class="line">System.out.println(<span class="string">"Nightfall in autumn."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加没加注释，运行起来都一个样儿，上方橙色（不知道你那里显示啥颜色）就是注释的颜色，大多数程序编辑器可以把不同代码变为不同的颜色，但是啥颜色都没关系，源代码文件不会有这些代码。。</p><h3 id="小问题-7"><a href="#小问题-7" class="headerlink" title="小问题"></a>小问题</h3><p>Q：注释会不会包含在字节码文件内</p><p>A：不会，编译器会忽略注释</p><h2 id="一堆注释"><a href="#一堆注释" class="headerlink" title="一堆注释"></a>一堆注释</h2><p>下代码（哈哈）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Haiku</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"On a withered branch"</span> );  <span class="comment">// Write first line of the poem</span></span><br><span class="line">        System.out.println(<span class="string">"A crow has just alighted:"</span>);   <span class="comment">// Write 2nd line of the poem </span></span><br><span class="line">        System.out.println(<span class="string">"Nightfall in autumn."</span>);    <span class="comment">// Write 3rd line of the poem </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释可以放在语句的后面，来解释这是干啥的，所有注释都是在//后面的，注释前面的语句不会被注释影响到</p><h3 id="小问题-8"><a href="#小问题-8" class="headerlink" title="小问题"></a>小问题</h3><p>Q：有没有可能写一大段注释</p><p>A：有可能</p><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><p>来，代码！（shua~）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Program 1 </span></span><br><span class="line"><span class="comment">Write out three lines of a poem. </span></span><br><span class="line"><span class="comment">The poem describes a single moment in time, </span></span><br><span class="line"><span class="comment">using 17 syllables. </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Haiku</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"On a withered branch"</span> ); </span><br><span class="line">        System.out.println(<span class="string">"A crow has just alighted:"</span>); </span><br><span class="line">        System.out.println(<span class="string">"Nightfall in autumn."</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/* 和 */ 之间的所有字符，都会被编辑器忽略（也就是全都是注释的意思）</p><p>/ 和 * 中间不能有任何字符</p><p>/* 和 */ 中间可能隔着好几行</p><h3 id="小问题-9"><a href="#小问题-9" class="headerlink" title="小问题"></a>小问题</h3><p>Q：你为啥要用注释帮助别人了解你的程序</p><p>A：这人可能是你，注释经常告诉你这是啥，或者为啥你用这个方法做了一些事情（呃。。就是那个意思）</p><h2 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h2><p>还有一个要注意的地方，就是每一个左大括号{都会跟着一个右大括号}</p><p>一般大括号都会像套娃一样，一套包着一套，举例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Haiku</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println( <span class="string">"On a withered branch"</span> ); </span><br><span class="line">    System.out.println( <span class="string">"A crow has just alighted:"</span> ); </span><br><span class="line">System.out.println( <span class="string">"Nightfall in autumn."</span> );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样排版可以让人读起来舒服，和有逻辑一些</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>不止有{}，还有()和[]</p><p>大程序有一对上面的括号，用来组成程序的不同部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Haiku</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println( <span class="string">"On a withered branch"</span> );</span><br><span class="line">System.out.println( <span class="string">"A crow has just alighted:"</span> );</span><br><span class="line">System.out.println( <span class="string">"Nightfall in autumn."</span> );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;具体内容看文章。。j&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>开始学Java之1 Hello World （别问我为啥不学python了。。）</title>
    <link href="https://a-little-bear.github.io/p/f108/"/>
    <id>https://a-little-bear.github.io/p/f108/</id>
    <published>2020-11-23T20:23:41.000Z</published>
    <updated>2020-11-29T01:37:11.402Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好吧，因为不得不学Java（我想学python的呀！！www）</p></blockquote><a id="more"></a><p><img src="https://i.loli.net/2020/11/24/vBcO9PbRZEDMWXK.png" alt=""></p><p>首先更新了一下JDK8（感谢一个Github的大佬：<a href="https://gist.github.com/wavezhang/ba8425f24a968ec9b2a8619d7c2d86a6">https://gist.github.com/wavezhang/ba8425f24a968ec9b2a8619d7c2d86a6</a> 大佬威武）</p><p><img src="https://i.loli.net/2020/11/24/r1Oj8tRLsyzKewv.png" alt=""></p><p>然后下载了一个开源的软件DrJava（<a href="https://sourceforge.net/projects/drjava/files/">https://sourceforge.net/projects/drjava/files/</a> ）</p><p>长这样：</p><p><img src="https://i.loli.net/2020/11/24/mlaKgPqkubQV7i1.png" alt=""></p><h3 id="抄代码"><a href="#抄代码" class="headerlink" title="抄代码"></a>抄代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><p><img src="https://i.loli.net/2020/11/24/aZV56Ok3tmwWGUK.png" alt=""></p><p>这里java文件的名字class好像必须要相同</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><img src="https://i.loli.net/2020/11/24/EgLX7MhSavdBPU4.png" alt=""></p><p>然后好像就出来一个Hello.class的文件</p><p><img src="https://i.loli.net/2020/11/24/xsVwNeCy2379k5K.png" alt=""></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p><img src="https://i.loli.net/2020/11/24/1ndDrjbI9hLAxNX.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;好吧，因为不得不学Java（我想学python的呀！！www）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Java" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Win10任务管理器查看线程数、PID值等方法</title>
    <link href="https://a-little-bear.github.io/p/5430/"/>
    <id>https://a-little-bear.github.io/p/5430/</id>
    <published>2020-09-30T00:08:43.000Z</published>
    <updated>2020-09-30T00:14:16.618Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>侵删，转载自：<a href="https://jingyan.baidu.com/article/851fbc37a337023e1f15ab0e.html">https://jingyan.baidu.com/article/851fbc37a337023e1f15ab0e.html</a></p></blockquote><a id="more"></a><p>学python进程线程时遇到了任务管理器看不到线程，就找到了这篇文章</p><p>使用了很久的Win7，一直很习惯任务管理器里面可以自定义信息列的功能</p><p>这几天开始流行Win10并将永久不更新而是以打补丁的形式升级，迫使我只能熟悉它。</p><p>一直搞不明白Win10的任务管理器，以为没有自定义信息列的功能，</p><p>在网上也没找到合适的答案，挺是费解的==。</p><p>直到今天一次偶然的使用，才揭开了这层面纱，下面分享给不知道的人~~</p><p>也希望有有用经验的朋友，能分享出来，避免大家走更多弯路！</p><h2 id="方法-步骤"><a href="#方法-步骤" class="headerlink" title="方法/步骤"></a>方法/步骤</h2><ol><li><p>打开任务管理器，熟悉的Ctrl+Alt+Del键，或者菜单栏右键点击。</p><p>然后就能见到我们熟悉的任务管理器，一开始的界面可能不是很习惯</p><p>点击【详细信息】按钮，就能看到如图所示的任务管理器界面！</p><p><img src="https://exp-picture.cdn.bcebos.com/3931cb413a8ca6083dc7ea48db8c9bcec6f8fe1c.jpg?x-bce-process=image%2Fresize%2Cm_lfit%2Cw_500%2Climit_1" alt=""></p></li><li><p>从默认的【进程】选项卡，切换到【详细信息】选项卡</p><p>我们能看到大部分的进程信息，PID值已经默认勾选了，</p><p>但是还是没能找到我们所需要的，比如线程数，句柄，</p><p>所以我们需要进行一定程度的调整掉出来！</p><p><img src="https://exp-picture.cdn.bcebos.com/e40b3127e7ef2806cfc9ec69b840b6f39087f21c.jpg?x-bce-process=image%2Fresize%2Cm_lfit%2Cw_500%2Climit_1" alt=""></p></li><li><p>在【详细信息】选项卡中的表头位置，点击右键！</p><p>我们可以看到弹出一个菜单栏，有[隐藏列]跟[选择列]两项，</p><p>我们选择[选择列]功能，然后请看下一步。</p><p><img src="https://exp-picture.cdn.bcebos.com/9881b1fce186242f06baeaab35e434daf15ee81c.jpg?x-bce-process=image%2Fresize%2Cm_lfit%2Cw_500%2Climit_1" alt=""></p></li><li><p>我们可以在新弹出来的菜单里面，看到Win7界面下熟悉的列功能选择项</p><p>勾选你需要的功能，再返回去看看，是不是有了新的列项目了？</p><p><img src="https://exp-picture.cdn.bcebos.com/4b626771fe1d96d8afd11f942ccd0c6efaf2e11c.jpg?x-bce-process=image%2Fresize%2Cm_lfit%2Cw_500%2Climit_1" alt=""></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;侵删，转载自：&lt;a href=&quot;https://jingyan.baidu.com/article/851fbc37a337023e1f15ab0e.html&quot;&gt;https://jingyan.baidu.com/article/851fbc37a337023e1f15ab0e.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>学python第十三课-进程和线程</title>
    <link href="https://a-little-bear.github.io/p/bda0/"/>
    <id>https://a-little-bear.github.io/p/bda0/</id>
    <published>2020-09-29T23:54:38.000Z</published>
    <updated>2020-09-30T03:57:53.325Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学python第十三课-进程和线程</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr><p>我只是个学python拖了好久的小萌新，一直要学一直要学，刚来注册说到现在，终于开始了。。（好吧，开始了还是整天拖，沉迷小说无法自拔）</p><p>这几个月一直在找适合自己的教程，看过几百本电子书，看过无数新老视频教程，最后还是决定用 骆昊大大 的：<a href="https://github.com/jackfrued/Python-100-Days">Python - 100天从新手到大师</a>（zzzain46大大友情推荐）</p><p>ummm别问我为啥这么久没学了，我会努力的…..吧？但愿</p><p>软件方面，没有用<code>PyCharm</code>，在用<code>VS Code</code></p><p>python 版本：<code>3.8.1</code>              操作系统：<code>Windows 10</code></p><h1 id="要牢记的话"><a href="#要牢记的话" class="headerlink" title="要牢记的话"></a>要牢记的话</h1><hr><p>感谢：<a href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></p><ul><li>Make English as your working language. （<strong>让英语成为你的工作语言</strong>）</li><li>Practice makes perfect. （<strong>熟能生巧</strong>）</li><li>All experience comes from mistakes. （<strong>所有的经验都源于你犯过的错误</strong>）</li><li>Don’t be one of the leeches. （<strong>不要当伸手党</strong>）</li><li>Either outstanding or out. （<strong>要么出众</strong>，<strong>要么出局</strong>）</li></ul><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><h2 id="Day13-进程和线程"><a href="#Day13-进程和线程" class="headerlink" title="Day13 - 进程和线程"></a>Day13 - <a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/13.进程和线程.md">进程和线程</a></h2><ul><li>进程和线程的概念 - 什么是进程 / 什么是线程 / 多线程的应用场景</li><li>使用进程 - fork函数 / multiprocessing模块 / 进程池 / 进程间通信</li><li>使用线程 - thread模块 / threading模块 / Thread类 / Lock类 / Condition类 / 线程池</li></ul><h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><p>今天我们使用的计算机早已进入多CPU或多核时代，而我们使用的操作系统都是支持“多任务”的操作系统，这使得我们可以同时运行多个程序，也可以将一个程序分解为若干个相对独立的子任务，让多个子任务并发的执行，从而缩短程序的执行时间，同时也让用户获得更好的体验。因此在当下不管是用什么编程语言进行开发，实现让程序同时执行多个任务也就是常说的“并发编程”，应该是程序员必备技能之一。为此，我们需要先讨论两个概念，一个叫进程，一个叫线程。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。</p><p>一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间。使用多线程实现并发编程为程序带来的好处是不言而喻的，最主要的体现在提升程序的性能和改善用户体验，今天我们使用的软件几乎都用到了多线程技术，这一点可以利用系统自带的进程监控工具（如macOS中的“活动监视器”、Windows中的“任务管理器”）来证实，如下图所示。</p><p><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/res/macos-monitor.png"><img src="https://github.com/jackfrued/Python-100-Days/raw/master/Day01-15/res/macos-monitor.png" alt="img"></a></p><p>当然多线程也并不是没有坏处，站在其他进程的角度，多线程的程序对其他程序并不友好，因为它占用了更多的CPU执行时间，导致其他程序无法获得足够的CPU执行时间；另一方面，站在开发者的角度，编写和调试多线程的程序都对开发者有较高的要求，对于初学者来说更加困难。</p><p>Python既支持多进程又支持多线程，因此使用Python实现并发编程主要有3种方式：多进程、多线程、多进程+多线程。</p><h3 id="Python中的多进程"><a href="#Python中的多进程" class="headerlink" title="Python中的多进程"></a>Python中的多进程</h3><p>Unix和Linux操作系统上提供了<code>fork()</code>系统调用来创建进程，调用<code>fork()</code>函数的是父进程，创建出的是子进程，子进程是父进程的一个拷贝，但是子进程拥有自己的PID。<code>fork()</code>函数非常特殊它会返回两次，父进程中可以通过<code>fork()</code>函数的返回值得到子进程的PID，而子进程中的返回值永远都是0。Python的os模块提供了<code>fork()</code>函数。由于Windows系统没有<code>fork()</code>调用，因此要实现跨平台的多进程编程，可以使用multiprocessing模块的<code>Process</code>类来创建子进程，而且该模块还提供了更高级的封装，例如批量启动进程的进程池（<code>Pool</code>）、用于进程间通信的队列（<code>Queue</code>）和管道（<code>Pipe</code>）等。</p><p>下面用一个下载文件的例子来说明使用多进程和不使用多进程到底有什么差别，先看看下面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_task</span><span class="params">(filename)</span>:</span></span><br><span class="line">    print(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    print(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = time()</span><br><span class="line">    download_task(<span class="string">'Python从入门到住院.pdf'</span>)</span><br><span class="line">    download_task(<span class="string">'Peking Hot.avi'</span>)</span><br><span class="line">    end = time()</span><br><span class="line">    print(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>下面是运行程序得到的一次运行结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">开始下载Python从入门到住院.pdf...</span><br><span class="line">Python从入门到住院.pdf下载完成! 耗费了6秒</span><br><span class="line">开始下载Peking Hot.avi...</span><br><span class="line">Peking Hot.avi下载完成! 耗费了7秒</span><br><span class="line">总共耗费了13.01秒.</span><br></pre></td></tr></table></figure><p>从上面的例子可以看出，如果程序中的代码只能按顺序一点点的往下执行，那么即使执行两个毫不相关的下载任务，也需要先等待一个文件下载完成后才能开始下一个下载任务，很显然这并不合理也没有效率。接下来我们使用多进程的方式将两个下载任务放到不同的进程中，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getpid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_task</span><span class="params">(filename)</span>:</span></span><br><span class="line">    print(<span class="string">'启动下载进程，进程号[%d].'</span> % getpid())</span><br><span class="line">    print(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    print(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = time()</span><br><span class="line">    p1 = Process(target=download_task, args=(<span class="string">'Python从入门到住院.pdf'</span>, ))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2 = Process(target=download_task, args=(<span class="string">'Peking Hot.avi'</span>, ))</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    print(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们通过<code>Process</code>类创建了进程对象，通过<code>target</code>参数我们传入一个函数来表示进程启动后要执行的代码，后面的<code>args</code>是一个元组，它代表了传递给函数的参数。<code>Process</code>对象的<code>start</code>方法用来启动进程，而<code>join</code>方法表示等待进程执行结束。运行上面的代码可以明显发现两个下载任务“同时”启动了，而且程序的执行时间将大大缩短，不再是两个任务的时间总和。下面是程序的一次执行结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">启动下载进程，进程号[1530].</span><br><span class="line">开始下载Python从入门到住院.pdf...</span><br><span class="line">启动下载进程，进程号[1531].</span><br><span class="line">开始下载Peking Hot.avi...</span><br><span class="line">Peking Hot.avi下载完成! 耗费了7秒</span><br><span class="line">Python从入门到住院.pdf下载完成! 耗费了10秒</span><br><span class="line">总共耗费了10.01秒.</span><br></pre></td></tr></table></figure><p>我们也可以使用subprocess模块中的类和函数来创建和启动子进程，然后通过管道来和子进程通信，这些内容我们不在此进行讲解，有兴趣的读者可以自己了解这些知识。接下来我们将重点放在如何实现两个进程间的通信。我们启动两个进程，一个输出Ping，一个输出Pong，两个进程输出的Ping和Pong加起来一共10个。听起来很简单吧，但是如果这样写可是错的哦。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_task</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> counter</span><br><span class="line">    <span class="keyword">while</span> counter &lt; <span class="number">10</span>:</span><br><span class="line">        print(string, end=<span class="string">''</span>, flush=<span class="literal">True</span>)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    Process(target=sub_task, args=(<span class="string">'Ping'</span>, )).start()</span><br><span class="line">    Process(target=sub_task, args=(<span class="string">'Pong'</span>, )).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>看起来没毛病，但是最后的结果是Ping和Pong各输出了10个，Why？当我们在程序中创建进程的时候，子进程复制了父进程及其所有的数据结构，每个子进程有自己独立的内存空间，这也就意味着两个子进程中各有一个<code>counter</code>变量，所以结果也就可想而知了。要解决这个问题比较简单的办法是使用multiprocessing模块中的<code>Queue</code>类，它是可以被多个进程共享的队列，底层是通过管道和<a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15">信号量（semaphore）</a>机制来实现的，有兴趣的读者可以自己尝试一下。</p><h3 id="Python中的多线程"><a href="#Python中的多线程" class="headerlink" title="Python中的多线程"></a>Python中的多线程</h3><p>在Python早期的版本中就引入了thread模块（现在名为_thread）来实现多线程编程，然而该模块过于底层，而且很多功能都没有提供，因此目前的多线程开发我们推荐使用threading模块，该模块对多线程编程提供了更好的面向对象的封装。我们把刚才下载文件的例子用多线程的方式来实现一遍。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(filename)</span>:</span></span><br><span class="line">    print(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    print(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = time()</span><br><span class="line">    t1 = Thread(target=download, args=(<span class="string">'Python从入门到住院.pdf'</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = Thread(target=download, args=(<span class="string">'Peking Hot.avi'</span>,))</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    print(<span class="string">'总共耗费了%.3f秒'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>我们可以直接使用threading模块的<code>Thread</code>类来创建线程，但是我们之前讲过一个非常重要的概念叫“继承”，我们可以从已有的类创建新类，因此也可以通过继承<code>Thread</code>类的方式来创建自定义的线程类，然后再创建线程对象并启动线程。代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span><span class="params">(Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, filename)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self._filename = filename</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'开始下载%s...'</span> % self._filename)</span><br><span class="line">        time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">        sleep(time_to_download)</span><br><span class="line">        print(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (self._filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = time()</span><br><span class="line">    t1 = DownloadTask(<span class="string">'Python从入门到住院.pdf'</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = DownloadTask(<span class="string">'Peking Hot.avi'</span>)</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    print(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>因为多个线程可以共享进程的内存空间，因此要实现多个线程间的通信相对简单，大家能想到的最直接的办法就是设置一个全局变量，多个线程共享这个全局变量即可。但是当多个线程共享同一个变量（我们通常称之为“资源”）的时候，很有可能产生不可控的结果从而导致程序失效甚至崩溃。如果一个资源被多个线程竞争使用，那么我们通常称之为“临界资源”，对“临界资源”的访问需要加上保护，否则资源会处于“混乱”的状态。下面的例子演示了100个线程向同一个银行账户转账（转入1元钱）的场景，在这个例子中，银行账户就是一个临界资源，在没有保护的情况下我们很有可能会得到错误的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._balance = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deposit</span><span class="params">(self, money)</span>:</span></span><br><span class="line">        <span class="comment"># 计算存款后的余额</span></span><br><span class="line">        new_balance = self._balance + money</span><br><span class="line">        <span class="comment"># 模拟受理存款业务需要0.01秒的时间</span></span><br><span class="line">        sleep(<span class="number">0.01</span>)</span><br><span class="line">        <span class="comment"># 修改账户余额</span></span><br><span class="line">        self._balance = new_balance</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._balance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddMoneyThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, account, money)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self._account = account</span><br><span class="line">        self._money = money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._account.deposit(self._money)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    account = Account()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="comment"># 创建100个存款的线程向同一个账户中存钱</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t = AddMoneyThread(account, <span class="number">1</span>)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="comment"># 等所有存款的线程都执行完毕</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    print(<span class="string">'账户余额为: ￥%d元'</span> % account.balance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>运行上面的程序，结果让人大跌眼镜，100个线程分别向账户中转入1元钱，结果居然远远小于100元。之所以出现这种情况是因为我们没有对银行账户这个“临界资源”加以保护，多个线程同时向账户中存钱时，会一起执行到<code>new_balance = self._balance + money</code>这行代码，多个线程得到的账户余额都是初始状态下的<code>0</code>，所以都是<code>0</code>上面做了+1的操作，因此得到了错误的结果。在这种情况下，“锁”就可以派上用场了。我们可以通过“锁”来保护“临界资源”，只有获得“锁”的线程才能访问“临界资源”，而其他没有得到“锁”的线程只能被阻塞起来，直到获得“锁”的线程释放了“锁”，其他线程才有机会获得“锁”，进而访问被保护的“临界资源”。下面的代码演示了如何使用“锁”来保护对银行账户的操作，从而获得正确的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._balance = <span class="number">0</span></span><br><span class="line">        self._lock = Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deposit</span><span class="params">(self, money)</span>:</span></span><br><span class="line">        <span class="comment"># 先获取锁才能执行后续的代码</span></span><br><span class="line">        self._lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            new_balance = self._balance + money</span><br><span class="line">            sleep(<span class="number">0.01</span>)</span><br><span class="line">            self._balance = new_balance</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 在finally中执行释放锁的操作保证正常异常锁都能释放</span></span><br><span class="line">            self._lock.release()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._balance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddMoneyThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, account, money)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self._account = account</span><br><span class="line">        self._money = money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._account.deposit(self._money)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    account = Account()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t = AddMoneyThread(account, <span class="number">1</span>)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    print(<span class="string">'账户余额为: ￥%d元'</span> % account.balance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>比较遗憾的一件事情是Python的多线程并不能发挥CPU的多核特性，这一点只要启动几个执行死循环的线程就可以得到证实了。之所以如此，是因为Python的解释器有一个“全局解释器锁”（GIL）的东西，任何线程执行前必须先获得GIL锁，然后每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行，这是一个历史遗留问题，但是即便如此，就如我们之前举的例子，使用多线程在提升执行效率和改善用户体验方面仍然是有积极意义的。</p><h3 id="多进程还是多线程"><a href="#多进程还是多线程" class="headerlink" title="多进程还是多线程"></a>多进程还是多线程</h3><p>无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？我们打个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、化学这5科的作业，每项作业耗时1小时。如果你先花1小时做语文作业，做完了，再花1小时做数学作业，这样，依次全部做完，一共花5小时，这种方式称为单任务模型。如果你打算切换到多任务模型，可以先做1分钟语文，再切换到数学作业，做1分钟，再切换到英语，以此类推，只要切换速度足够快，这种方式就和单核CPU执行多任务是一样的了，以旁观者的角度来看，你就正在同时写5科作业。</p><p>但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、钢笔（这叫保存现场），然后，打开数学课本、找出圆规直尺（这叫准备新环境），才能开始做数学作业。操作系统在切换进程或者线程时也是一样的，它需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后，把新任务的执行环境准备好（恢复上次的寄存器状态，切换内存页等），才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。如果有几千个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态。所以，多任务一旦多到一个限度，反而会使得系统性能急剧下降，最终导致所有任务都做不好。</p><p>是否采用多任务的第二个考虑是任务的类型，可以把任务分为计算密集型和I/O密集型。计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如对视频进行编码解码或者格式转换等等，这种任务全靠CPU的运算能力，虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低。计算密集型任务由于主要消耗CPU资源，这类任务用Python这样的脚本语言去执行效率通常很低，最能胜任这类任务的是C语言，我们之前提到了Python中有嵌入C/C++代码的机制。</p><p>除了计算密集型任务，其他的涉及到网络、存储介质I/O的任务都可以视为I/O密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待I/O操作完成（因为I/O的速度远远低于CPU和内存的速度）。对于I/O密集型任务，如果启动多任务，就可以减少I/O等待时间从而让CPU高效率的运转。有一大类的任务都属于I/O密集型任务，这其中包括了我们很快会涉及到的网络应用和Web应用。</p><blockquote><p><strong>说明：</strong> 上面的内容和例子来自于<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000">廖雪峰官方网站的《Python教程》</a>，因为对作者文中的某些观点持有不同的看法，对原文的文字描述做了适当的调整。</p></blockquote><h3 id="单线程-异步I-O"><a href="#单线程-异步I-O" class="headerlink" title="单线程+异步I/O"></a>单线程+异步I/O</h3><p>现代操作系统对I/O操作的改进中最为重要的就是支持异步I/O。如果充分利用操作系统提供的异步I/O支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型。Nginx就是支持异步I/O的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。用Node.js开发的服务器端程序也使用了这种工作模式，这也是当下实现多任务编程的一种趋势。</p><p>在Python语言中，单线程+异步I/O的编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。协程最大的优势就是极高的执行效率，因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销。协程的第二个优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不用加锁，只需要判断状态就好了，所以执行效率比多线程高很多。如果想要充分利用CPU的多核特性，最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。关于这方面的内容，我稍后会做一个专题来进行讲解。</p><h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><h4 id="例子1：将耗时间的任务放到线程中以获得更好的用户体验。"><a href="#例子1：将耗时间的任务放到线程中以获得更好的用户体验。" class="headerlink" title="例子1：将耗时间的任务放到线程中以获得更好的用户体验。"></a>例子1：将耗时间的任务放到线程中以获得更好的用户体验。</h4><p>如下所示的界面中，有“下载”和“关于”两个按钮，用休眠的方式模拟点击“下载”按钮会联网下载文件需要耗费10秒的时间，如果不使用“多线程”，我们会发现，当点击“下载”按钮后整个程序的其他部分都被这个耗时间的任务阻塞而无法执行了，这显然是非常糟糕的用户体验，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 模拟下载任务需要花费10秒钟时间</span></span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    tkinter.messagebox.showinfo(<span class="string">'提示'</span>, <span class="string">'下载完成!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_about</span><span class="params">()</span>:</span></span><br><span class="line">    tkinter.messagebox.showinfo(<span class="string">'关于'</span>, <span class="string">'作者: 骆昊(v1.0)'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    top = tkinter.Tk()</span><br><span class="line">    top.title(<span class="string">'单线程'</span>)</span><br><span class="line">    top.geometry(<span class="string">'200x150'</span>)</span><br><span class="line">    top.wm_attributes(<span class="string">'-topmost'</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    panel = tkinter.Frame(top)</span><br><span class="line">    button1 = tkinter.Button(panel, text=<span class="string">'下载'</span>, command=download)</span><br><span class="line">    button1.pack(side=<span class="string">'left'</span>)</span><br><span class="line">    button2 = tkinter.Button(panel, text=<span class="string">'关于'</span>, command=show_about)</span><br><span class="line">    button2.pack(side=<span class="string">'right'</span>)</span><br><span class="line">    panel.pack(side=<span class="string">'bottom'</span>)</span><br><span class="line"></span><br><span class="line">    tkinter.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>如果使用多线程将耗时间的任务放到一个独立的线程中执行，这样就不会因为执行耗时间的任务而阻塞了主线程，修改后的代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadTaskHandler</span><span class="params">(Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">            tkinter.messagebox.showinfo(<span class="string">'提示'</span>, <span class="string">'下载完成!'</span>)</span><br><span class="line">            <span class="comment"># 启用下载按钮</span></span><br><span class="line">            button1.config(state=tkinter.NORMAL)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># 禁用下载按钮</span></span><br><span class="line">        button1.config(state=tkinter.DISABLED)</span><br><span class="line">        <span class="comment"># 通过daemon参数将线程设置为守护线程(主程序退出就不再保留执行)</span></span><br><span class="line">        <span class="comment"># 在线程中处理耗时间的下载任务</span></span><br><span class="line">        DownloadTaskHandler(daemon=<span class="literal">True</span>).start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_about</span><span class="params">()</span>:</span></span><br><span class="line">        tkinter.messagebox.showinfo(<span class="string">'关于'</span>, <span class="string">'作者: 骆昊(v1.0)'</span>)</span><br><span class="line"></span><br><span class="line">    top = tkinter.Tk()</span><br><span class="line">    top.title(<span class="string">'单线程'</span>)</span><br><span class="line">    top.geometry(<span class="string">'200x150'</span>)</span><br><span class="line">    top.wm_attributes(<span class="string">'-topmost'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    panel = tkinter.Frame(top)</span><br><span class="line">    button1 = tkinter.Button(panel, text=<span class="string">'下载'</span>, command=download)</span><br><span class="line">    button1.pack(side=<span class="string">'left'</span>)</span><br><span class="line">    button2 = tkinter.Button(panel, text=<span class="string">'关于'</span>, command=show_about)</span><br><span class="line">    button2.pack(side=<span class="string">'right'</span>)</span><br><span class="line">    panel.pack(side=<span class="string">'bottom'</span>)</span><br><span class="line"></span><br><span class="line">    tkinter.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="例子2：使用多进程对复杂任务进行“分而治之”。"><a href="#例子2：使用多进程对复杂任务进行“分而治之”。" class="headerlink" title="例子2：使用多进程对复杂任务进行“分而治之”。"></a>例子2：使用多进程对复杂任务进行“分而治之”。</h4><p>我们来完成1~100000000求和的计算密集型任务，这个问题本身非常简单，有点循环的知识就能解决，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    number_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100000001</span>)]</span><br><span class="line">    start = time()</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> number_list:</span><br><span class="line">        total += number</span><br><span class="line">    print(total)</span><br><span class="line">    end = time()</span><br><span class="line">    print(<span class="string">'Execution time: %.3fs'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>在上面的代码中，我故意先去创建了一个列表容器然后填入了100000000个数，这一步其实是比较耗时间的，所以为了公平起见，当我们将这个任务分解到8个进程中去执行的时候，我们暂时也不考虑列表切片操作花费的时间，只是把做运算和合并运算结果的时间统计出来，代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_handler</span><span class="params">(curr_list, result_queue)</span>:</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> curr_list:</span><br><span class="line">        total += number</span><br><span class="line">    result_queue.put(total)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    processes = []</span><br><span class="line">    number_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100000001</span>)]</span><br><span class="line">    result_queue = Queue()</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 启动8个进程将数据切片后进行运算</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">        p = Process(target=task_handler,</span><br><span class="line">                    args=(number_list[index:index + <span class="number">12500000</span>], result_queue))</span><br><span class="line">        index += <span class="number">12500000</span></span><br><span class="line">        processes.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="comment"># 开始记录所有进程执行完成花费的时间</span></span><br><span class="line">    start = time()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()</span><br><span class="line">    <span class="comment"># 合并执行结果</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> result_queue.empty():</span><br><span class="line">        total += result_queue.get()</span><br><span class="line">    print(total)</span><br><span class="line">    end = time()</span><br><span class="line">    print(<span class="string">'Execution time: '</span>, (end - start), <span class="string">'s'</span>, sep=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>比较两段代码的执行结果（在我目前使用的MacBook上，上面的代码需要大概6秒左右的时间，而下面的代码只需要不到1秒的时间，再强调一次我们只是比较了运算的时间，不考虑列表创建及切片操作花费的时间），使用多进程后由于获得了更多的CPU执行时间以及更好的利用了CPU的多核特性，明显的减少了程序的执行时间，而且计算量越大效果越明显。当然，如果愿意还可以将多个进程部署在不同的计算机上，做成分布式进程，具体的做法就是通过<code>multiprocessing.managers</code>模块中提供的管理器将<code>Queue</code>对象通过网络共享出来（注册到网络上让其他计算机可以访问），这部分内容也留到爬虫的专题再进行讲解。</p><h1 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h1><ol><li><del>任务管理器和火绒剑似乎只能看到进程，不能看到有多少线程….</del></li><li>已解决：<a href="https://jingyan.baidu.com/article/851fbc37a337023e1f15ab0e.html">https://jingyan.baidu.com/article/851fbc37a337023e1f15ab0e.html</a></li></ol><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学python第十三课-进程和线程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="python" scheme="https://a-little-bear.github.io/categories/%E6%8A%80%E6%9C%AF/python/"/>
    
    
  </entry>
  
</feed>
