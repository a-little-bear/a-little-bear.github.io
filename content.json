{"pages":[{"title":"404 Not Found：该页无法显示","text":"umm,不知道是出了啥状况，竟然404了！！！ …..不知道是不是我的问题，如果是请务必留言告诉我呀~~ 熊猫镇楼","link":"/404.html"},{"title":"想说的一些话","text":"说实话我搭博客的初衷特别搞笑… 本来想弄个域名（alittlebear.tk），然后去申请企业邮箱，就可以有G Suite 管理员账号辣（admin@alittlebear.tk) 但是嘞，我申请不到….国内的几个都需要国内手机号，或者是银行卡，然后我就去申请国外得了… 然后稀里糊涂的(没记错的话)找到了一个批量发广告邮件的网站(鬼知道我是怎么找到的)，还有一个网页设计功能啥的，我就在那里设计网页。。。 然后慢慢的，我都从弄企业邮箱变成弄网站了233 而且不是很想花钱（看我还用白嫖的域名就知道hh），于是我找到了github page来搭建。。 弄了一天又一天，最终还是用了辣椒酱的源码加以改造，感谢🙇‍ 我也不知道发点啥好，以前总是羡慕别人有博客，现在咱也是有博客的人了哈哈😄 另外我评论用的Gitalk（Github）可能有人访问不了….有人可能换个浏览器就好了（俺滴朋友换了edge浏览器就好了）","link":"/about/index.html"},{"title":"分享一点自己喜欢的图片","text":"图片加载可能有点慢…","link":"/album/index.html"},{"title":"在线小游戏","text":"小游戏平台https://game.alittlebear.tk/ 这个就不多说了，有很多小游戏。 无名杀https://game.alittlebear.tk/wms HTML单机三国杀 迷宫https://www.alittlebear.tk/g/migong 游戏操作方法很简单，用键盘的方向键控制即可（所以手机不能玩）;如果你觉得太简单，可以随时调整迷宫的宽和高，增加迷宫的难度，刷新网页后迷宫还原。 圈小猫https://www.alittlebear.tk/g/cat 游戏规则 点击小圆点，围住小猫； 你点击一次，小猫走一次； 直到你把小猫围住（赢），或者小猫走到边界并逃跑（输），游戏结束。 (我才不会告诉你我懒的截图) 切水果https://www.alittlebear.tk/g/FruitNinja 自从iOS和Android兴起以来，水果忍者游戏一直是这两个平台上面相当热门的游戏，很多玩家都会在工作学习之余切切水果，打发时间。今天，HTML5网页版水果忍者游戏同样给大家带来了不同的感觉，赶紧来试试这款好玩的HTML5网页版水果忍者游戏吧。 中国象棋https://www.alittlebear.tk/g/xiangqi 棋类游戏在桌面游戏中已经非常成熟，中国象棋的版本也非常多。今天这款基于HTML5技术的中国象棋游戏非常有特色，我们不仅可以选择中国象棋的游戏难度，而且可以切换棋盘的样式。程序写累了，喝上一杯咖啡，和电脑对弈几把吧，相信这HTML5中国象棋游戏的实现算法你比较清楚，可以打开源码来研究一下这款HTML5中国象棋游戏。 Flappy Birdhttps://www.alittlebear.tk/g/flappy-text 前段时间Flappy Bird游戏那是相当的火，有无数年轻人为之疯狂，这里我们要分享一款奇葩版的Flappy Bird——HTML5 Flappy Text游戏，用若干个字母来代替bird，每触碰一个障碍，字母就会少一个。一起来玩玩吧。 吃豆人https://www.alittlebear.tk/g/pacman HTML5吃豆人游戏，画面上有一个吃豆人和一群怪物，你需要控制吃豆人移动吃掉路上的小豆子，一旦吃豆人遇到怪物被吃掉的时候，你就GAME OVER了。这款HTML5游戏还有一点没完善，就是吃豆人碰到怪物的时候不能被怪物吃掉，有兴趣的同学可以继续把它完善。HTML5游戏开发不仅需要技术，也需要创意。 太空战机https://www.alittlebear.tk/g/fly 这又是一款制作精良的HTML5游戏，该HTML5游戏的主角是一架英勇威武的太空战机，进入游戏后按”Z”键发射子弹，消灭敌机。该HTML5战机游戏的特点是：1、游戏画面非常华丽逼真，并且加入声音元素，让游戏更加迷人；2、游戏元素很多，敌机类型和发射子弹类型也很多，让玩家不会枯燥。 超级玛丽https://www.alittlebear.tk/g/mario 还记得小时候一起玩过的超级玛丽冒险游戏吗？是的，那是我们小时候很火的一款游戏，今天老外利用HTML5技术让超级玛丽可以在网页上跑了，HTML5版的超级玛丽虽然没有原版的功能强大，但是如果你有兴趣，完全可以把它写完善了。HTML5真的很强大，HTML5游戏方面更是犀利。 城市消消乐https://www.alittlebear.tk/g/xiaoxiaole 很不错的HTML5消除游戏，同样颜色的建筑相邻，可以将它们进行合成，建筑随之升级。必要的时候可以点击没有与之相邻的建筑物进行拆除。游戏结束后会有当前分数和历史最高分数，有预留的分享功能待开发，有需要的下手吧！ 打地鼠https://www.alittlebear.tk/g/mouseHit 游戏功能： 帮助界面 游戏预备开始 5种不同地鼠的随机出现 关卡设置，当然有计时条显示 失败和通过关卡设置 音效设置 该游戏兼容Chrome和FF（效果最不错），但IE有问题（声音也播不出）。。。 捕鱼达人https://www.alittlebear.tk/g/buyudaren 非常逼真的捕鱼达人网页游戏源码下载，基于HTML5和JS特效实现，游戏动画非常的炫，不卡顿，大家有时间的完全可以学习学习，HTML5做游戏跟客户端其实是各有各的优势，做到平衡就好。 神殿逃亡https://www.alittlebear.tk/g/shendian 神殿逃亡是一款逃亡向的休闲益智小游戏。神殿逃亡游戏采用的像素风格将带领玩家回到老板卡带游戏时代。玩家在神殿逃亡游戏中需要控制自己的小主人公移动和躲避，逃脱神殿里袭来的各种威胁。游戏操作简单，角色也有多种选择。还有各种成就为追求完美的你而准备。 小游戏平台源码网盘：https://wp.alittlebear.tk/zw/game.7z OneDrive：https://alilin-my.sharepoint.com/personal/alittlebear_yam_ink/_layouts/52/download.aspx?share=Ebz2ry4L3NFGjqokXrtpQiwB0X3QQ3hQQnaQH2KhBPlJrg","link":"/game_index/index.html"},{"title":"","text":"来说点啥呗~","link":"/message/index.html"},{"title":"","text":"无法释怀的循环音乐 标签：轻音乐-放松-经典 介绍： 闭上双眼，感受这些音乐带给你我心灵的冲击... 书店音乐单-安静英文歌 标签：清新-学习-安静 介绍： 喜欢逛书店，也喜欢书店里的那些音乐，似乎书店和读者之间总有一些共鸣，听音乐、看书，和一切美好的时光相遇。 历届格莱美金曲 标签：欧美-流行-摇滚 介绍： 格莱美奖(Grammy Awards)，美国录音界与世界音乐界最重要的奖项之一，由录音学院(Recording Academy)负责颁发。学院由录音业的专业人士所组成，目的在于奖励过去一年中业界岀色的成就。格莱美奖是美国四个主要音乐奖之一，相当于电影界的奥斯卡奖；另三个音乐奖分别为公告牌音乐奖、全美音乐奖和摇滚名人堂收录典礼。 不朽的声音(人生最难忘的歌) 标签：欧美-经典-怀旧 介绍： 《不朽的声音-人生最难忘的歌》从小到大，我们一直在聆听。聆听父母的教诲、聆听老师的教导、聆听领导的指示、聆听女朋友的悲情苦诉、聆听男朋友的志得意满。突然有一天在那一刹那，心象开了一个口的急流，沉积了多年的声音尤如涛涛江水一般绵绵不绝地涌了出来。 这声音是那样的熟悉、真切、它曾引导我们走出懵懂无知的岁月，它曾支撑我们度过苦涩艰难的日子，就象漆黑夜晚的点点星光，就象汪洋大海中的引航灯，让我们再次感觉到了身体里流过了一股幸福的暖流。流出的是声音，流不走的是留在我们心中的深深印记。在我们开始遗忘、再度开始迷茫的时候，静静地、静静地，它用不朽的声音，再度弥漫在我们呼吸的每一口空气中。 经典国内老歌 标签：粤语-怀旧-华语 介绍： 在时光中沉淀的首首经典老歌，承载了一段段印刻在内心最深处的回忆。重温经典，回味那些逝去的时光 满满的回忆~，有Beyond，陈百强，刘德华，陈慧娴，周华健，张学友，谭咏麟，张国荣，李克勤。怀旧必备~！ 草原歌曲100首 标签：民族-驾车-旅行 介绍： 人们都非常向往大草原，想象着那里的茵茵碧草，悠悠白云，湛蓝如洗的天空，还有奔驰的骏马和成群的牛羊……并非每个人都去过美丽的大草原，但每个人肯定都听过草原歌曲。美妙的旋律，一下子就能把我们的心带到大草原。今天，好听的草原歌曲送给你，祝你每天都有好心情~ 永远听不腻的英文歌 标签：欧美-驾车-校园 介绍： 每一首都值得单曲循环，节奏、歌词、旋律，至少一个能打动你我… 世界顶级古典钢琴曲 标签：古典-钢琴-轻音乐 介绍： 钢琴，乐器之皇，钢琴文化发展至今，已经有不计其数的脍炙人口的钢琴曲流传下来，其中一些流传至今，仍是社会上流人士的最爱，让我们来一起聆听一下传世名曲吧！","link":"/music/index.html"},{"title":"每日60秒新闻","text":"","link":"/news/index.html"},{"title":"","text":"碎碎念 tips：github登录后按时间正序查看、可点赞加❤️、本插件地址..「+99次查看」 碎碎念加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: 'd0798e8bd674820814c0', clientSecret: '41d5dbaf6272137f779a4d31effccf0831f5d4ec', id: '666666', repo: 'a-little-bear.github.io', owner: 'a-little-bear', admin: \"a-little-bear\", createIssueManually: true, distractionFreeMode: false }); gitalk.render('comment-container1'); });","link":"/self-talking/index.html"},{"title":"没有时间的时间轴","text":"​ 1-12可能不是很详细，因为我是临时起意（才发现没弄时间轴伤心..） ​ ——–2020.5.11更新 ​ ———下面都是在我Github Page博客搭建的（只支持静态源码） 弄半天弄出个博客源码 Github搭建了这个hexo博客 弄了个在线小游戏（一个平台+一堆小游戏） 弄了个聚合搜索（这个没花多久时间，因为都没动过啥东西） 弄了个视频解析（本来弄了4个基本源码，后来太麻烦改成3个了） 找了找视频接口（找了半天找不到bilibili的。。好吧） 搭了个GoogleDrive网盘（goindex，用的Cloudflare） 搭了第二个GoogleDrive网盘（gdindex,这个支持上传，还能进到其他目录，所以私用了） 搭了个Onedrive网盘（有点”丑“，所以又找了个，这个备用） 搭了第二个Onedrive网盘（叫做Onedrive Index，还不错，样子很像GoogleDrive的两个） 弄了个短链接html源码（我不会搞呀这个，准备放弃了） ———到这里就开始了我的国外免费php服务器之旅（其实以下目前只花了1天时间，上面几周了） 自己找了半天支持静态的免费服务器（国内的coding page好像不支持了，尝试过） 发了个悬赏，一位大佬给了一堆国外免费php服务器（所以国内应该是没有了，那个风贝云啥的就算了把） 研究设置国外服务器中（免费所以很多功能都限制了） 下载了国内的phpstudy（听说有后门啥的好可怕） phpstudy本地搭建了discuz论坛+一个影视搜索（论坛不错，那个影视搜索似乎api坏了，搜不了） 尝试用FTP上传影视搜索到服务器（从任务管理器变成了FileZilla） 上传了影视搜索没用给删了（似乎后面api用不了了。。） 上传了discuz论坛，上传文件好多都出错（不会用FileZilla） 删了，上传了一个影视网站（豆瓣api用不了了，网站gg） 这个也删了，然后安装了wordpress（改不了中文，后台修改时，一直在加载） wordpress卸了，FileZilla又上传了几遍discuz终于好了（结果还有几个mp3上传不了，算了管他呢） 搞数据库+安装discuz，可以用了（国内访问巨慢） 邀请盆友测试（国内访问巨慢+2） 设置discuz（还加了一个老虎表情包） ———–2020.5.14更新 搭了一个苹果cms，但是因为数据库只能弄1个+似乎那个国外服务器不支持采集，就找了一个国内服务器 找到了国内的三丰云 接码平台注册三丰云+绑定微信+弄域名+安装影视站 苹果cms成功，开始设置+采集视频（整天断线烦死了。。） 找主题，替换；找插件，添加。 弄短链接（adwz.tk专门注册了一个网址a短网址.tk） 搞了半天不会，放弃了。 继续采集视频，整天断线，+找到了vip版本插件开心 国内三丰云太垃圾准备搬回国外php服务器 弄了好几家，传到最后把我账号封了（说什么非法操作。。我只是上传源代码呀喂） 注册了跟discuz”同一家网站“，开了一个新户口。（似乎就这个有简中，稀奇） 上传源码+数据库，搞了半天，影视站搬家成功。 果然没用。。采集不了，废了。。。 尝试播放googledrive视频，搞了半天算了（还不如自己GoogleDrive看，只是想有点成就感） 哎，准备放弃影视站了（不管他，不过搭建时弄到了俩解析，一个vip视频解析，一个mp4+m3u8） 说做就做，打开博客-视频解析源码-修改-上传；用不了（稀奇） 发现主网址得接口好像坏了，烦透了。。。 添加到另外两个源码也不行（似乎是服务器问题？） 尝试用剩下的三丰云连接，还是没用，得。 ———–到了这里我已经放弃了 影视站，短链接生成，还有视频解析—————————– 思考人生（决定不搞那么多了，老老实实搞主博客） 把博客导航栏的视频解析，还有短链接去掉。（永远的留在了我的收藏中） 思考论坛中（也准备放弃了，之前搞了那么久好辛苦，早知道就不接触这么多东西了，哎，不过也好，php，服务器，域名，数据库，FTP啥的经过这么多次搬家移动，也懂得不少了。。 给自己说一声辛苦辣！！！（哎。。。。。/(ㄒoㄒ)/~~） 恢复更新，全球疫情。 ————-2020.5.15更新 尝试使用SM.MS图床（i.loli.net是什么神仙域名） ​ （目前图床：OneDrive，GoogleDrive，SM.MS，Github） 准备美化博客，来截个图纪念一下： 已经把音乐设置为自动播放（花了我几个小时的大好光阴，桑心。。） 添加了每日60秒新闻。 简化导航栏，去掉上图前面4个（没啥用）。 优化了相册（折叠功能） 不小心把主题的配置文档打回原形了，吓死了，还好有win10的还原文档，变回昨天的了，慢慢改。。 ——————2020.5.18更新 增加了神殿逃亡在线游戏。 —————–2020.5.24更新 添加了三个公开网盘：（https://wp.alittlebear.tk/ ）（https://pan.alittlebear.tk/0:/ ）（https://yun.alittlebear.tk/0:/ ）；另有私人用网盘：（https://gd.alittlebear.tk/ ）（https://gdwp.alittlebear.tk/ ）；上面都是Google Drive的，还有One Drive的（https://od.alittlebear.tk/ ）（https://alittlebear.tk/onedrive/ ） 简单整改了一下上方导航栏。 把博客网盘备份到了其他的团队盘。 取消自动播放音乐，修改地址：主题/layout/common/footer.jsx 准备尝试开拓影视推荐分类，尝试给post分文件夹，删除空白文件夹，取消自动生成文件夹 简单去掉了404页面的几个字 添加了：访客地球 —————-2020.5.25更新 添加了短网址。。刚搭建好就发现翻车了一个。。。（能用就好）还是不会搞api 去掉了访客地球 启用source内的_杂物文件夹，放旧的文件夹（比如说视频解析） 添加了音乐歌单，/music。这个挺不错的，之前一直没机会设置，现在整理杂物时重出江湖。 ————–2020.5.25更新 终于博客有背景了。。https://www.52pojie.cn/thread-1186779-4-1.html；本来还想修改一下夜间设置的，唉不会改，算了，也不好意思麻烦大佬。。。不过自己把透明度都改了一下，感觉不错。（不是很喜欢二次元壁纸，但是大多数都是，想要个风景图。。。找到一个竟然出来的都是妹子mmp嫌弃） 找到风景图api了（跟我的新闻一个api，hh） 这风景api有毛病，换别的 我的天，我换回了博天api（感觉更快）（背景图） ————-2020.5.27更新 添加了所有网盘地址教程，开了其他-网盘分类（挺多的，后台post也弄了个） 把分类仅显示10改为15（主题下layout/widget/categories.jsx；tag和archives同地） ————-2020.5.28更新 打字有特效了，文件在：主题/layout/layout.jsx body后面，html前面 夜间模式搞好了，本来想直接弄个动图得了，后来还是照搬了iMaegoo大佬的。好看，星星密度速度调高了点。👏开心 ————–2020.5.29更新 Gitalk坏了，尝试用Valine不行。。。 更新聚合搜索。 ————–2020.5.31更新 Gitalk电脑端终于好了。。 ————–2020.6.17更新 加了一个古典乐，网站背景也改成这个。。","link":"/time_line/index.html"},{"title":"收藏","text":"输入正确の密码把！ ","link":"/shoucang/index.html"},{"title":"网盘","text":"网盘1号：https://wp.alittlebear.tk/ 网盘2号：https://pan.alittlebear.tk/0:/ 网盘3号：https://yun.alittlebear.tk/0:/ 也许部分浏览器打不开，换一个试试？ 如果还是不行那我可能没办法了抱歉。","link":"/wp/index.html"},{"title":"","text":"网易云音乐地址：https://music.163.com/#/playlist?id=67191770 --- 温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/%E4%B8%8D%E6%9C%BD%E7%9A%84%E5%A3%B0%E9%9F%B3(%E4%BA%BA%E7%94%9F%E6%9C%80%E9%9A%BE%E5%BF%98%E7%9A%84%E6%AD%8C)/index.html"},{"title":"","text":"网易云音乐地址：https://music.163.com/#/playlist?id=517182285 --- 温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/%E5%8E%86%E5%B1%8A%E6%A0%BC%E8%8E%B1%E7%BE%8E%E9%87%91%E6%9B%B2/index.html"},{"title":"","text":"网易云音乐地址：https://music.163.com/#/playlist?id=39554181 温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/%E4%B9%A6%E5%BA%97%E9%9F%B3%E4%B9%90%E5%8D%95-%E5%AE%89%E9%9D%99%E8%8B%B1%E6%96%87%E6%AD%8C/index.html"},{"title":"","text":"网易云音乐地址：https://music.163.com/#/playlist?id=8435661 温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/%E6%97%A0%E6%B3%95%E9%87%8A%E6%80%80%E7%9A%84%E5%BE%AA%E7%8E%AF%E9%9F%B3%E4%B9%90/index.html"},{"title":"","text":"网易云音乐地址：https://music.163.com/#/playlist?id=2985941712 --- 温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/%E7%BB%8F%E5%85%B8%E5%9B%BD%E5%86%85%E8%80%81%E6%AD%8C/index.html"},{"title":"","text":"网易云音乐地址：https://music.163.com/#/playlist?id=2985915860 --- 温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/%E6%B0%B8%E8%BF%9C%E5%90%AC%E4%B8%8D%E8%85%BB%E7%9A%84%E8%8B%B1%E6%96%87%E6%AD%8C/index.html"},{"title":"","text":"网易云音乐地址：https://music.163.com/#/playlist?id=2985947572 --- 温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/%E8%8D%89%E5%8E%9F%E6%AD%8C%E6%9B%B2100%E9%A6%96/index.html"},{"title":"","text":"网易云音乐地址：https://music.163.com/#/playlist?id=706851956 --- 温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/%E4%B8%96%E7%95%8C%E9%A1%B6%E7%BA%A7%E5%8F%A4%E5%85%B8%E9%92%A2%E7%90%B4%E6%9B%B2/index.html"}],"posts":[{"title":"全球疫情非实时数据","text":"#全球 确诊7855431例，死亡431728例，治愈4020699例#北美 确诊2454501例，死亡144135例，治愈1050066例#欧洲 确诊2190153例，死亡182580例，治愈1158327例#亚洲 确诊1577672例，死亡39476例，治愈966021例#南美 确诊1387767例，死亡59115例，治愈728399例#非洲 确诊235704例，死亡6283例，治愈108835例#大洋洲 确诊8913例，死亡124例，治愈8400例 【#全球 确诊 7,855,431 例，死亡 431,728 例，治愈 4,020,699 例 】#美国 确诊2142159例，死亡117526例，治愈852601例#巴西 确诊850796例，死亡42791例，治愈427610例#俄罗斯 确诊520129例，死亡6829例，治愈274641例#印度 确诊321626例，死亡9199例，治愈162326例#英国 确诊294375例，死亡41662例，治愈例#西班牙 确诊290685例，死亡27136例，治愈例#意大利 确诊236651例，死亡34301例，治愈174865例#秘鲁 确诊220749例，死亡6308例，治愈107133例#德国 确诊187423例，死亡8867例，治愈171900例#伊朗 确诊184955例，死亡8730例，治愈146748例#土耳其 确诊176677例，死亡4792例，治愈150087例#智利 确诊167355例，死亡3101例，治愈137296例#法国 确诊156813例，死亡29398例，治愈72808例#墨西哥 确诊139196例，死亡16448例，治愈101767例#巴基斯坦 确诊132405例，死亡2551例，治愈50056例#沙特阿拉伯 确诊123308例，死亡932例，治愈82548例#加拿大 确诊98410例，死亡8107例，治愈59354例#孟加拉国 确诊84379例，死亡1139例，治愈17828例#中国 确诊84710例，死亡4645例，治愈79905例#卡塔尔 确诊78416例，死亡70例，治愈55252例#南非 确诊65736例，死亡1423例，治愈36850例#比利时 确诊59918例，死亡9650例，治愈16547例#白俄罗斯 确诊53241例，死亡303例，治愈29111例#瑞典 确诊50931例，死亡4874例，治愈例#哥伦比亚 确诊48746例，死亡1592例，治愈19426例#荷兰 确诊48640例，死亡6057例，治愈例#厄瓜多尔 确诊46356例，死亡3874例，治愈22865例#埃及 确诊42980例，死亡1484例，治愈11529例#阿联酋 确诊41990例，死亡288例，治愈26761例#新加坡 确诊40197例，死亡26例，治愈28808例#印尼 确诊37420例，死亡2091例，治愈13776例#葡萄牙 确诊36463例，死亡1512例，治愈22438例#科威特 确诊35466例，死亡289例，治愈25882例#瑞士 确诊31094例，死亡1938例，治愈28800例#乌克兰 确诊30506例，死亡880例，治愈13976例#阿根廷 确诊30295例，死亡815例，治愈9083例#波兰 确诊29017例，死亡1237例，治愈14104例#菲律宾 确诊25392例，死亡1074例，治愈5706例#爱尔兰 确诊25295例，死亡1705例，治愈22698例#阿富汗 确诊24102例，死亡451例，治愈4201例#多米尼加共和国 确诊22572例，死亡577例，治愈13084例#阿曼 确诊22077例，死亡99例，治愈7530例#罗马尼亚 确诊21679例，死亡1394例，治愈15635例#巴拿马 确诊20059例，死亡429例，治愈13759例#以色列 确诊18972例，死亡300例，治愈15357例#伊拉克 确诊18950例，死亡549例，治愈7515例#巴林 确诊17713例，死亡37例，治愈12191例#日本 确诊17382例，死亡924例，治愈15580例#奥地利 确诊17078例，死亡677例，治愈16012例#玻利维亚 确诊16929例，死亡559例，治愈2431例#亚美尼亚 确诊16004例，死亡264例，治愈6081例#尼日利亚 确诊15682例，死亡407例，治愈5101例#哈萨克斯坦 确诊14238例，死亡73例，治愈8829例#塞尔维亚 确诊12251例，死亡253例，治愈11348例#丹麦 确诊12139例，死亡597例，治愈11035例#美国韩国 确诊12051例，死亡277例，治愈10691例#摩尔多瓦 确诊11459例，死亡398例，治愈6421例#加纳 确诊11118例，死亡48例，治愈3979例#阿尔及利亚 确诊10810例，死亡760例，治愈7420例#捷克 确诊9991例，死亡329例，治愈7219例#阿塞拜疆 确诊9570例，死亡115例，治愈5309例#危地马拉 确诊8982例，死亡351例，治愈1702例#摩洛哥 确诊8692例，死亡212例，治愈7696例#喀麦隆 确诊8681例，死亡212例，治愈4836例#挪威 确诊8628例，死亡242例，治愈8138例#马来西亚 确诊8445例，死亡120例，治愈7311例#洪都拉斯 确诊8132例，死亡306例，治愈844例#澳大利亚 确诊7302例，死亡102例，治愈6812例#芬兰 确诊7087例，死亡325例，治愈6200例#苏丹 确诊7007例，死亡447例，治愈2556例#尼泊尔 确诊5335例，死亡18例，治愈913例#塞内加尔 确诊4996例，死亡60例，治愈3228例#塔吉克斯坦 确诊4971例，死亡50例，治愈3288例#乌兹别克斯坦 确诊4966例，死亡19例，治愈3874例#象牙海岸 确诊4848例，死亡45例，治愈2397例#刚果民主共和国 确诊4724例，死亡106例，治愈595例#几内亚 确诊4484例，死亡25例，治愈3213例#吉布提 确诊4449例，死亡41例，治愈2823例#匈牙利 确诊4064例，死亡559例，治愈2476例#卢森堡 确诊4063例，死亡110例，治愈3922例#海地 确诊3941例，死亡64例，治愈24例#北马其顿 确诊3895例，死亡179例，治愈1705例#萨尔瓦多 确诊3603例，死亡72例，治愈1738例#加蓬 确诊3463例，死亡23例，治愈1024例#肯尼亚 确诊3457例，死亡100例，治愈1221例#保加利亚 确诊3266例，死亡172例，治愈1723例#埃塞俄比亚 确诊3166例，死亡55例，治愈495例#泰国 确诊3134例，死亡58例，治愈2987例#希腊 确诊3112例，死亡183例，治愈1374例#委内瑞拉 确诊2904例，死亡24例，治愈487例#波斯尼亚和黑塞哥维那 确诊2893例，死亡163例，治愈2119例#索马里 确诊2579例，死亡87例，治愈559例#马约特 确诊2282例，死亡28例，治愈1790例#克罗地亚 确诊2251例，死亡107例，治愈2134例#古巴 确诊2238例，死亡84例，治愈1923例#吉尔吉斯斯坦 确诊2207例，死亡27例，治愈1722例#中非 确诊2057例，死亡7例，治愈363例#马尔代夫 确诊2013例，死亡8例，治愈1217例#爱沙尼亚 确诊1973例，死亡69例，治愈1705例#斯里兰卡 确诊1884例，死亡11例，治愈1252例#冰岛 确诊1808例，死亡10例，治愈1794例#马里 确诊1776例，死亡104例，治愈1058例#立陶宛 确诊1763例，死亡75例，治愈1416例#南苏丹 确诊1693例，死亡27例，治愈49例#毛利塔尼亚 确诊1682例，死亡83例，治愈311例#哥斯达黎加 确诊1662例，死亡12例，治愈743例#斯洛伐克 确诊1545例，死亡28例，治愈1410例#新西兰 确诊1504例，死亡22例，治愈1482例#斯洛文尼亚 确诊1492例，死亡109例，治愈1359例#尼加拉瓜 确诊1464例，死亡55例，治愈953例#阿尔巴尼亚 确诊1464例，死亡36例，治愈1039例#几内亚比绍 确诊1460例，死亡15例，治愈153例#黎巴嫩 确诊1442例，死亡32例，治愈868例#赞比亚 确诊1357例，死亡10例，治愈1104例#赤道几内亚 确诊1306例，死亡12例，治愈200例#巴拉圭 确诊1261例，死亡11例，治愈647例#马达加斯加 确诊1252例，死亡10例，治愈362例#法属圭亚那 确诊1161例，死亡2例，治愈520例#塞拉利昂 确诊1132例，死亡51例，治愈670例#香港 确诊1110例，死亡4例，治愈1061例#拉脱维亚 确诊1097例，死亡28例，治愈845例#突尼斯 确诊1094例，死亡49例，治愈995例#尼日尔 确诊980例，死亡66例，治愈881例#塞浦路斯 确诊980例，死亡18例，治愈807例#约旦 确诊953例，死亡9例，治愈678例#布吉纳法索 确诊892例，死亡53例，治愈799例#安道尔 确诊853例，死亡51例，治愈781例#格鲁吉亚 确诊851例，死亡14例，治愈702例#乍得 确诊848例，死亡72例，治愈718例#乌拉圭 确诊847例，死亡23例，治愈784例#刚果 确诊728例，死亡24例，治愈221例#佛得角 确诊726例，死亡6例，治愈294例#钻石公主 确诊712例，死亡13例，治愈651例#也门 确诊705例，死亡160例，治愈39例#圣马力诺 确诊694例，死亡42例，治愈520例#乌干达 确诊694例，死亡例，治愈219例#圣多美和普林西比 确诊659例，死亡12例，治愈176例#马耳他 确诊646例，死亡9例，治愈601例#牙买加 确诊614例，死亡10例，治愈417例#海峡群岛 确诊565例，死亡48例，治愈512例#莫桑比克 确诊553例，死亡2例，治愈151例 #卢旺达 确诊541例，死亡2例，治愈332例#多哥 确诊530例，死亡13例，治愈291例#马拉维 确诊529例，死亡5例，治愈66例#坦桑尼亚 确诊509例，死亡21例，治愈183例#巴勒斯坦 确诊489例，死亡3例，治愈415例#留尼旺 确诊489例，死亡1例，治愈460例#斯威士兰 确诊486例，死亡3例，治愈247例#利比里亚 确诊446例，死亡32例，治愈214例#台湾 确诊443例，死亡7例，治愈431例#利比亚 确诊418例，死亡8例，治愈62例#贝宁 确诊412例，死亡6例，治愈222例#津巴布韦 确诊356例，死亡4例，治愈54例#毛里求斯 确诊337例，死亡10例，治愈325例#英国属地曼岛 确诊336例，死亡24例，治愈312例#越南 确诊334例，死亡例，治愈323例#黑山 确诊324例，死亡9例，治愈315例 注：中国的数据包括港澳台，丹麦包括法罗群岛，日本包括游轮，确诊数少于300因条目限制未显示。 其它参考统计：ChinaCDC(http://2019ncov.chinacdc.cn/2019-nCoV/index.html)ECDC(https://www.ecdc.europa.eu/en/geographical-distribution-2019-ncov-cases)WHO(https://covid19.who.int/)丁香园(https://ncov.dxy.cn/ncovh5/view/pneumonia)Johns Hopkins University(https://coronavirus.jhu.edu/)Reuters(https://graphics.reuters.com/CHINA-HEALTH-MAP/0100B59S39E/index.html)BNO News(https://bnonews.com/index.php/2020/02/the-latest-coronavirus-cases/)World Meters(https://www.worldometers.info/coronavirus/#countries) 截止北京时间 2020 年 06 月 14日 08 时 00 分","link":"/p/a5w7/"},{"title":"气球塔防6-Bloons-TD-6-v18-1-2747","text":"关于这款游戏精彩纷呈的塔防游戏大家熟悉的气球塔防游戏回来了，而且比以往更好玩！现在就来玩这款大型 3D 塔防游戏吧，最好的策略游戏体验等着你。 充分利用各种猴子塔、升级、英雄和激活技能搭建完美的防线，击破每一个出现的气球。 全新 3D《气球塔防》*令人耳目一新的全新猴子动画和升级皮肤*强烈的视觉效果*30 张全新地图，其中不乏阻挡视线的 3D 物体 史诗级猴子塔升级*20 种强大的猴子塔，包括 2 种全新的猴子 - 德鲁伊和炼金师！*3 种升级路线 - 所有猴子塔都有 3 种不同的路线可供选择*5 级升级 - 鉴于最高级非常强大，仅有一只猴子可以拥有 英雄！*这些身怀绝技、本领高超的猴子拥有 20 种标志性升级*每个英雄拥有两种击破气球的激活技能*根据每个英雄的能力和协同效应制定新的游戏策略 丰富的猴子知识体系*超过 100 种优化升级，增强每一种猴子塔或猴子群*添加新的游戏力量，助你赢得更多地图，达成更高自由游戏回合更多精彩*随时随地玩 - 单人离线游戏，即时没有 WiFi 也没关系！*新气球 - 增加多种难以对付的新气球，如：紫气球、强化气球和凶残的 B.A.D.气球*每种游戏难度增加新的游戏模式，如：受限制的猴子、双倍血量 MOAB 及残酷的 CHIMPS 规则 更多更新会陆续推出！我们这次带来了大量的内容更新的游戏优化，并且我们会在今后的定期更新中添加新的功能、内容和挑战。我们非常尊重你投入的时间和提供的支持，衷心地希望《气球塔防 6》成为你玩过的最好玩的策略游戏。那些气球可不会自己破掉…准备好你的飞镖，来玩《气球塔防 6》吧！ 系统需求最低配置 需要 64 位处理器和操作系统 操作系统: Windows 7 (64bit) 处理器: 1.5Ghz or better 内存: 4096 MB RAM 显卡: OpenGL 2.0 compatible, ATI, Nvidia or Intel HD 存储空间: 需要 2048 MB 可用空间 声卡: Windows compatible sound card 推荐配置 需要 64 位处理器和操作系统 操作系统: Windows 10 (64bit) 处理器: 2Ghz or better 内存: 8192 MB RAM 显卡: OpenGL 2.0 compatible, ATI, Nvidia or Intel HD 存储空间: 需要 4096 MB 可用空间 声卡: Windows compatible sound card 下载Steam：https://store.steampowered.com/app/960090/Bloons_TD_6/ OneDrive：https://alilin-my.sharepoint.com/:f:/g/personal/alittlebear_yam_ink/EpDLLsPYXZhKiUzWjmnxwT8BxtDV3CitkioRAL5mUQMERw GoogleDrive：https://drive.google.com/uc?id=1-SyVbOCVIvyzp1Ot4w2CL0f3FeNRtZ6q&amp;export=download 游戏常见问题1、确保游戏安装路径为全英文2、确保游戏安装完整3、确保你电脑的硬件配置和操作系统达到游戏要求4、安装好所有单机游戏运行必备插件，比如DirectX、VC++2005，VC++2008，.NET Framework等等5、7z格式的压缩包，如果您的解压软件不支持，请务必换一个，推荐Bandizip6、还有啥问题回复我","link":"/p/ef4/"},{"title":"【策略塔防】Mindustry-V103-3","text":"款以资源管理为核心的无尽塔防游戏。 最近评测：特别好评 (237)全部评测：好评如潮 (4,441)发行日期：2019年9月26日开发商： AnukenDev发行商： AnukenDev 关于这款游戏建造精密的传送带供应链，提供炮塔弹药，生产建筑材料，保护你的建筑并抵御敌人。在跨平台多人合作游戏中与朋友一起玩，或在基于团队的PVP比赛中向他们挑战。 游戏操作 游戏操作 建造钻头和传送带来将资源转移到核心 建造无人机以自动采矿，协助建造和保卫核心 分配液体并扑灭突发火灾 用特定物品冷却炮塔和提高生产 战役模式 在12张可重复游玩的内建区域中前进 收集并发射资源 研究科技以进步 携带资源进入每个区域 多样的任务与目标 研究120+科技 19种不同类型的无人机、机甲及飞船 达成50+成就 游戏模式 生存：建造炮塔来防御敌人。尽可能长的生存下来，发射你的核心来使用你收集的资源进行研究。为Boss的到来做好准备。 攻击：为建造工厂生产机甲来摧毁敌人的核心，同时保护你的基地，抵御敌人的攻击。创建各种不同类型的支援和进攻单位，以协助你实现目标。 PVP：与最多4个不同团队的其他玩家互相伤害。创建单位，或者直接用你的飞船攻击他人基地。 沙盒：无限的资源，没有敌人的威胁。使用只限于沙盒的物品源和液体源来测试设计，和根据需要生成敌人。 自定义游戏和跨平台多人游戏 用于自定义的12个内置地图 游玩合作，PvP或沙盒模式 加入公共专用服务器，或邀请朋友参加您自己的私人服务器 可定制的游戏规则 混合和匹配游戏模式：结合PvP和PvE游戏模式 自定义地图编辑器 使用编辑器绘制地图 在游戏中编辑和预览 可更改的工具模式 具有多种不同类型的地形处理过滤器的强大的地图生成系统 将随机地形应用于地图 随机配置和生成矿石，以及放置河流和资源 配置敌方波次布局 在Steam创意工坊上共享导出的地图 自定义地图的基础规则 使用75+个不同的环境块 系统需求 操作系统: Windows 7/8/10 内存: 1 GB RAM 显卡: Any card with OpenGL 2.0 support and the framebuffer_object extension 存储空间: 需要 100 MB 可用空间 下载强烈推荐给喜欢玩塔防滴~刚玩了一会，很不错，硬核塔防，steam也全是好评 OneDrive：https://alilin-my.sharepoint.com/personal/alittlebear_yam_ink/_layouts/52/download.aspx?share=EZvosmBoMXdNiAMMcCOttvIBp-V0H7v9dtC1-JJ9-J74Mg GoogleDrive：https://drive.google.com/uc?id=1_V5mPWd6-q-bHcfTRnz0EDPGy1zPFjcu&amp;export=download 游戏常见问题1、确保游戏安装路径为全英文2、确保游戏安装完整3、确保你电脑的硬件配置和操作系统达到游戏要求4、安装好所有单机游戏运行必备插件，比如DirectX、VC++2005，VC++2008，.NET Framework等等5、7z格式的压缩包，如果您的解压软件不支持，请务必换一个，推荐Bandizip6、还有啥问题回复我","link":"/p/825e/"},{"title":"天空商人-v1-6-5","text":"成为一名飞艇船长！出售物品，收集资源，并在云端发展您的贸易公司！ 关于这款游戏 在《天空商人》中，您是一名飞艇的船长！出售物品，收集资源，并在云端建立自己的贸易帝国！《天空商人》是一款贸易游戏，同时具有基地建造和模拟经营元素。您开始时是一辆小型云船的船长，然后逐步建立发展自己的贸易公司。 《天空商人》是一款实验性游戏：它不局限于单一的游戏类型，而是尝试带领玩家体验环游世界、建立公司的感觉。这意味着我们会尝试融合多种游戏元素：探索，基地建造，交易和一点点角色扮演。 特色 成为一名商人！找到到最佳的贸易路线并从中获利 探索世界！在空中小岛之间旅行，体验各种各样的经历 沙盒模式：按自己的节奏做你想做的事 积累贸易经验，然后开始自己生产商品 建立贸易路线，从而实现自动运输、出售货物 成为一个富翁，并用200多种不同的积木建造自己的豪宅 《空中商人》包含6-8小时的剧情流程，您可以在游戏中帮助不同的角色，恢复世界的昔日光辉，还可以在沙盒模式中专注于发展自己的公司，建立商队路线，以及建造您的豪宅。 系统需求 操作系统: Windows 7 SP1+ 处理器: Intel Core 2 Duo 内存: 1024 MB RAM 显卡: shader 3.0 supporting card (i.e. Intel HD Graphics 4000) DirectX 版本: 9.0a 存储空间: 需要 512 MB 可用空间 附注事项: DX9 (shader model 3.0) support 下载OneDrive：https://alilin-my.sharepoint.com/personal/alittlebear_yam_ink/_layouts/52/download.aspx?share=Ebp2ayQHLh9ChfBuVfpTyJYBSiJ-vb336dN5dxA4tSq3LQ 备用网盘：https://wp.alittlebear.tk/3e5f/Merchant-of-the-Skies.7z GoogleDrive：https://drive.google.com/file/d/1OmluPE_qCYojXvErmBUM7Bp-QTZ0J9EM/view?usp=sharing 游戏常见问题1、确保游戏安装路径为全英文2、确保游戏安装完整3、确保你电脑的硬件配置和操作系统达到游戏要求4、安装好所有单机游戏运行必备插件，比如DirectX、VC++2005，VC++2008，.NET Framework等等5、7z格式的压缩包，如果您的解压软件不支持，请务必换一个，推荐Bandizip6、还有啥问题回复我","link":"/p/3e5f/"},{"title":"60-Parsecs-60秒太空版-15-06-2020更新","text":"游戏名称：60秒差距 英文名称：60 Parsecs! 游戏类型：模拟经营(SIM)游戏 游戏制作：Robot Gentleman 游戏发行：Robot Gentleman 游戏平台：PC 发售时间：2018年9月19日 游戏介绍：《60秒差距 60 Parsecs!》（太空版）是一款以原子太空时代为背景的探索求生大冒险游戏。保护舰员存活，时刻准备行动。做出艰难抉择，面对食物短缺等外太空的挑战。或许最终你能够抵达终点，又或许只能殒命途中。 游戏特色：搜寻与撤离在太空站被核爆炸成真空中的碎片之前，你只有60秒的时间。在离开前，尽可能的搜寻你能找到的所有物资与舰员。那只袜子玩偶说不定什么时候就能派上用场。生存与抉择太空葬礼十分麻烦，所以尽可能不要死掉。使用你有限的物资和（希望不是有限的）智慧来做出艰难抉择，确保你能够存活下去，即使困难重重，希望渺茫。探索与制造强力胶带可以修复所有问题，但你该怎样修复（或者至少是制造）强力胶带呢？通过外出探险来寻找资源，制造生存必需品，并探索陌生的新世界，进行一场程序性的，很可能是有去无回的冒险。领导与保护作为舰长，让舰员保持开心是你的职责——这样他们就不太可能会杀掉你。随着他们之间的关系变得紧密，你要妥善处理他们的关系，尽量避免他们闹内讧，打开气压过渡舱把对方扔进太空里去。 最低配置:需要 64 位处理器和操作系统操作系统: Windows 7/8/10 64 Bit处理器: i5-2430M内存: 4 GB RAM显卡: Nvidia GT540DirectX 版本: 10存储空间: 需要 3 GB 可用空间 Steam：https://store.steampowered.com/app/646270/ GoogleDrive：https://drive.google.com/uc?id=12peY31fpYkCitNXtrMzoSGk121PR_k_E&amp;export=download OneDrive：https://alilin-my.sharepoint.com/personal/alittlebear_yam_ink/_layouts/52/download.aspx?share=EdlIalPHYK1AoWFk4l0wELQBxiDR3JB8663MIFIovkF9Ig 坚果云：https://www.jianguoyun.com/p/DbkvjiwQhoTGCBihkaQD 文叔叔：https://ws28.cn/f/2sgvnkh4sbh 奶牛：https://c-t.work/s/6c330370de254d ac359s 备用：https://wp.alittlebear.tk/6afc/60%20Parsecs!.7z","link":"/p/6afc/"},{"title":"这个盗版游戏的防盗版技术竟然比正版游戏还厉害","text":"转载：https://zhuanlan.zhihu.com/p/51119911 在以往许多文章里，我们都反复讲过那些年盗版游戏对当年中国游戏市场的危害。 其实这不光是一个普通的现象，更准确的说是一段历史进程。 这一方面是由于当年的玩家普遍拮据了一些，动辄七八十的正版游戏对那个时候的普通学生来说实在可望不可及，所以低价的盗版实在是不二的选择； 另一方面也是因为当时的防盗版技术实在是捉急，基本上没有什么强有力的防刻录技术，即便是类似后来“两败俱伤”的starforce技术，也并没有真正的防住盗版。 ![ttps://pic4.zhimg.com/80/v2-7932fa77ceb03c803db023ae8b9e2c03_720w.jpg) 不过有趣的是，当年有一个盗版游戏品牌竟然解决了上面的问题——即既能够以4-5块钱的价格出售，又防止了别的盗版商盗版自己的盗版盘，可谓称霸业界，堪称一时之雄。 它就是藏经阁系列。 如果是有一些年龄的游戏玩家，多少在那个网速堪忧，盗版横行的年代会遇到将盗版游戏盘插入光驱后，显示“对不起，你买的不是gamez88的盘，请去退盘”这样的字样，同时你的安装进度也会卡住，让你不得不放弃安装。 可以说是简单粗暴，一招见效。 只不过，这也是藏经阁不得已而为之—— 谁能知道，我一个做盗版游戏的，也会被其他盗版游戏盗版？ 这一切，都要从藏经阁的诞生说起。 1 在上世纪90年代，有一个杂志叫做《家用电脑与游戏机》，这是在那个网络不发达，游戏大多只能靠看和听来接触的年代，连接玩家和游戏之间的桥梁之一。 也正是在这个杂志上，我第一次看到了Gamez88这个名字，但文章已经被遗忘了，貌似是某游戏的攻略，不过这已经不重要了。 重要的是在后来许多盗版光盘上，玩家又可以很容易地看到这个名字。 所有的以“藏经阁”系列命名的盗版光盘封面上，都会有这个名字，安装时也会有这个名字的文件夹。 这到底是何方神圣呢？ 说实话，目前特别具体的答案谁也不能拍板，唯一可以确定的是，这是一个技术水平不错，甚至拥有良好的品牌意识的盗版破解团队。 抛开“藏经阁”系列的前身“桃花岛”系列这个不太成熟的作品不谈，藏经阁这个盗版系列从1999年开始到2004年，这个系列一共做了490期，这490期为CD版，从491期开始变为DVD版本，每一期的内容都不同。 并且藏经阁和许多当年别的盗版游戏不同，他们秉承了以前国内FC时期盗版游戏打包出售的精神，即便是容量不大的CD也通过强大的压缩技术塞进去多个游戏。 同时由于他们属于当年CFB（China Free Byte，商业内部破解组织）的边缘组织，所以当时能够获得相当高水平的破解游戏。 于是在当时许多盗版游戏都是坏盘（无法读取）的情况下，藏经阁一直保持着非常高的质量水平，坏盘率极低。 所以在质量和数量的双重碾压下，藏经阁在21世纪的头几年一直是盗版游戏界的翘楚。 在那个年代，甚至有许多人以收藏藏经阁的盗版游戏为乐，直到现在都能看到。 而在网上也有人整理出藏经阁出版的所有游戏的合集，内容高达1.7TB，让人叹为观止。 也正是在这个时候，出现了盗版藏经阁的盗版厂商。 是的，你没有看错，盗版盗版的盗版，简称盗中有盗。 毕竟那个时候技术水平差的不多，盗版厂商连正版游戏都能破了盗版，何况是盗版游戏，于是一时之间《伪·藏经阁》系列充斥市场。 诸多不明就里的小朋友看到藏经阁的名字就往家里拿，结果发现质量远不如原来的藏经阁，于是控诉藏经阁良心坏了。 藏经阁的破解组织也很头疼，毕竟真的想不到会被友商背刺。 于是他们在自己的盘中内置了程序，如果是被其他人刻录的话，就会直接无法安装，在1%的进度就停下来，并且弹出这句话，让买家去店家退换。 不退也可以，那就没法玩了。 我到现在也不懂这是怎么做到的，但在那个野蛮生长的年代，这一招确实遏制住不少盗版他们的盗版商。 只可惜口碑这个东西，一旦有了污点就没法恢复，所以藏经阁的质量也不再那么被玩家信任。 2 但是游戏还是会继续出（盗）下去，毕竟要赚钱。 也正是在2000年前后，网络的社区版块逐渐发展了起来，早期有个论坛叫做西祠胡同，在里面有着各种各样的人，自然也有游戏玩家。 即便那个时候玩游戏还是不太能被说出口的娱乐项目，但并不妨碍同好者们在这个地方一起交流。 那个时候的交流，当然交流的大多数都是盗版游戏了。 其中藏经阁系列自然不会被放过，甚至由于藏经阁是每隔一段时间出一期的，所以就有爱好者按照每一期的内容来进行测评。 当时这个测评被称为“藏经阁碟评”，一度非常受到游戏玩家的关注。 因为当年的网络实在太差，下载游戏不现实，外网的内容也看不到，所以只能等藏经阁的游戏上架，才能看到和接触到那些海外的作品。 也正是透过这一扇小小的窗户，国内玩家逐渐接触到了各类或是好的，或是坏的海外游戏。 在那个信息闭塞，经济落后的年代，这样的产品可以说是顺应时代而生。 甚至于藏经阁还出版过杂志，简直是做一行爱一行，堪称盗版游戏界的翘楚~ 但藏经阁系列也有各种各样的问题。 其中最臭名昭著的就是他们会把游戏的cg，甚至于许多音乐都给去掉，以至于许多人到现在都不知道《红警》是有真人过场电影的，《星际争霸》是有很多动画和CG的。 早期的CD的储存不过600M，后来的DVD才有了7G以上，或许是因为容量原因，所以许多过场动画，开场CG等等都被阉割了。 尤其是有一些游戏结局就是用动画来展现的，比如《仙剑奇侠传3》，我的一个基友就发现自己好不容易打通关了，结果打完了游戏戛然而止，看不到结局，让他气了10年，每次提及必然破口大骂： “害老子白玩了！” 另一个则是当年和游侠以及3DM的纠葛。 许多人认为藏经阁是游侠网的下属机构，不过据我了解并非如此，但应该确实有合作关系。 在后期的藏经阁逐渐式微，网络发展迅速，网上下载盗版成为主流的时候，游侠网和3DM为了争夺流量和资源，也是明争暗斗。 有一天3DM发出一个通告，表示藏经阁依靠自己在盗版市场巨大的影响力，偷偷在许多游戏的安装包里附带了修改玩家电脑的hosts文件的程序，使得安装了这些游戏的玩家无法登陆3DM网站。 当然，这只是当年3DM大战游侠网的逸事之一。 然后就是你来我往打了好多年。 3 不过，也正是在这个时候，藏经阁逐渐消失了。 和其他诸多盗版碟商贩一样，他们不是输给了正版，而是败给了网络，败给了不需要付钱就能下载的各类资源。 甚至随着网速的进一步提升，藏经阁这些盗版盘也只剩下了被收藏的用途。 而多年之后，随着版权意识的和大家生活水平的提高，当年鼎盛一时的3DM等网站也不得不逐渐走向了转型。 在一共710期的藏经阁系列中，包含着超过4000款全球各地的游戏，这些盗版游戏见证了中国游戏圈的发展和衰落，也见证了中国网络的萌芽和发展。 而它作为盗版光盘中的代表之一，其衰落也让作为旁观者的我产生了许多思考。 或许，纯粹依靠外力去杜绝是无法消灭盗版这种阳光背面的产物的，毕竟在经济基础没有夯实的情况下，要求大家牺牲生活资料去购买正版，明显不现实，毕竟仓廪实而知礼节，衣食足而知荣辱； 而纯粹依靠玩家的自觉，也同样无法消灭盗版，这就像黄赌毒一样，是对人性考验，在没有监督和强制手段的压力影响的情况下，人是经受不住考验的。 只有科技逐渐发展，防盗技术增强，相关的法律条例逐渐完善，同时大家的思想观念也逐渐随着经济发展而改变，才能内外结合，慢慢让这些阴暗面减少或是消失。 也只有这样，中国的游戏业界才有未来可言。 -END-","link":"/p/5b2d/"},{"title":"神秘风格动作冒险游戏-天空之山-黑雾-SKYHILL:-Black-Mist","text":"游戏名称：天空之山：黑雾英文名称：SKYHILL: Black Mist游戏类型：动作游戏ACT游戏制作：Mandragora游戏发行：Klabater游戏平台：PC游戏语言：中文,英文,日文 【游戏介绍】在《SKYHILL: 黑雾》游戏中，你从到处都是通道相连的巨型公寓里苏醒过来。这个公寓是一家行动诡异的生物科技公司Skyhill建造的，而这家公司就是整座城市的实际控制者。你作为该公司的一名员工，刚分到一间公寓并搬了进去。意外发生了，情况很糟糕：你的女儿被绑架了，整个公寓突然被黑暗怪物和疯狂邪教徒所占领，人为刀俎，你为鱼肉。神秘黑雾笼罩全城，能够把人类全部变成待宰羔羊，而你必须拯救你的家人，并不惜一切代价战胜一切危险生存下去。 【游戏截图】 【游戏配置】 推荐配置操作系统: Windows 7 SP1 / 8.1 / 10处理器 : 3.1 GHz Dual-Core - Intel i3 2100图形显卡: 1 GB VRAM, NVIDIA GeForce GTX 550 Ti / AMD Radeon HD 5850内存容量: 6 GB RAM硬盘空间: 需要 4 GB 可用空间 最低配置操作系统: Windows 7 SP1 / 8.1 / 10处理器 : 3.0 GHz Dual-Core - Intel Core 2 Duo E8400图形显卡: 512 MB VRAM, Intel HD 4400 / NVIDIA GeForce 9600GT / AMD Radeon HD 3850内存容量: 4 GB RAM硬盘空间: 需要 4 GB 可用空间 https://www.yun.cn/s/90090c3c871d4ba4af9298692fe9447f?chkey=qeph4 https://pan.baidu.com/s/1p1OKR4pyx6pIpLqXLP_fwg","link":"/p/fa57/"},{"title":"Large-Text-Compression-Benchmark","text":"纯英文 Large Text Compression Benchmark Matt MahoneyLast update: Mar. 9, 2020. history This competition ranks lossless data compression programs by the compressed size (including the size of the decompression program) of the first 109 bytes of the XML text dump of the English version of Wikipedia on Mar. 3, 2006. About the test data. The goal of this benchmark is not to find the best overall compression program, but to encourage research in artificial intelligence and natural language processing (NLP). A fundamental problem in both NLP and text compression is modeling: the ability to distinguish between high probability strings like recognize speech and low probability strings like reckon eyes peach. Rationale. This is an open benchmark. Anyone may contribute results. Please read the rules first. Open source compression improvements to this benchmark with certain hardware restrictions may be eligible for the Hutter Prize. Benchmark ResultsCompressors are ranked by the compressed size of enwik9 (109 bytes) plus the size of a zip archive containing the decompresser. Options are selected for maximum compression at the cost of speed and memory. Other data in the table does not affect rankings. This benchmark is for informational purposes only. There is no prize money for a top ranking. Notes about the table: Program: The version believed to give the best compression. A | denotes a combination of 2 programs. Compression options: selected for what I believe gives the best compression. enwik8: compressed size of first 108 bytes of enwik9. This data is used for the Hutter Prize, and is also ranked here but has no effect on this ranking. enwik9: compressed size of first 109 bytes of enwiki-20060303-pages-articles.xml. decompresser size: size of a zip archive containing the decompression program (source code or executable) and all associated files needed to run it (e.g. dictionaries). A letter following the size has the following meaning: x = executable size. s = source code size (if available and smaller). d = size of a separate decompression program (separate from compression). For self extracting archives (SFX), the size is 0 because the decompresser and compressed data are combined into one file. For testing, if no zip file is supplied I create archives using InfoZIP 2.32 -9. (Prior to July 1, 2008 I used 7zip 4.32 -tzip -mx=9). Total size: total size of compressed enwik9 + decompresser size, ranked smallest to largest. Comp: compression rate in nanoseconds per byte on the largest file tested (e.g. seconds for enwik9). Speed is approximate and has no effect on ranking. A ~ means “very approximate”. Not all tests are done on the same computer. Times reported are the smaller of process time (summed over processors if multi-threaded) or real time as measured with timer). If there is no note then the program was tested on a Compaq Presario 5440, 2.188 GHz, Athlon-64 3500+ in 32 bit Windows XP. An underlined time means that no better compressor is faster. Decomp: decompression time as above. If blank, decompression was not tested yet and ranking is pending verification that the output is identical. An underlined time means that no better compressor is faster. Mem: approximate memory used for compression in MB. Decompression uses the same or possibly less. There is some ambiguity whether a megabyte means 106 bytes or 220 bytes. The approximation is course enough that it doesn’t matter. I use peak memory as measured with Windows Task Manager during compression (so if you really want to know, 1 MB = 1,024,000 bytes :) Memory does not include swap or temporary files. An underlined value means that no better compressor uses less memory. Alg: compression algorithm, referring to the method of parsing the input into symbols (strings, bytes, or bits) and estimating their probabilities (modeling) for choosing code lengths. Symbols may be arithmetic coded (fractional bit length for best compression), Huffman coded (bit aligned for speed), or byte aligned as a preprocessing step. Dict (Dictionary). Symbols are words, coded as 1 or 2 bytes, usually as a preprocessing step. LZ (Lempel Ziv). Symbols are strings. LZ77: repeated strings are coded by offset and length of previous occurrence. LZW (LZ Welch): repeats are coded as indexes into a dynamically built dictionary. ROLZ (Reduced Offset LZ): LZW with multiple small dictionaries selected by context. LZP (LZ predictive): ROLZ with a dictionary size of 1. on (Order-n, e.g. o0, o1, o2…): symbols are bytes, modeled by frequency distribution in context of last n bytes. PPM (Prediction by Partial Match): order-n, modeled in longest context matched, but dropping to lower orders for byte counts of 0. SR (Symbol Ranking): order-n, modeled by time since last seen. BWT (Burrows Wheeler Transform): bytes are sorted by context, then modeled by order-0 SR. ST (Sort Transform): BWT using stable sort with truncated string comparison. DMC (Dynamic Markov Coding): bits modeled by PPM. CM (Context Mixing): bits, modeled by combining predictions of independent models. Some compressors combine multiple steps such as Dict+PPM or LZP+DMC. I indicate the last stage before coding. Notes: Brief notes. See program descriptions for details. Usually this means the result was reported by somebody else on a different computer. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----cmix v18 14,838,332 115,714,367 208,961 s 115,923,328 602867 601569 25738 CM 83phda9 1.8 15,010,414 116,544,849 42,944 xd 116,587,793 86182 86305 6319 CM 83nncp 2019-11-16 16,292,774 119,167,224 238,452 xd 119,405,676 826048 1156467 5360 LSTM 84paq8pxd_v48_bwt1 -s14 16,004,759 126,183,029 153,295 s 126,336,324 579894 51865 CM 81durilca'kingsize -m13000 -o40 -t2 16,209,167 127,377,411 407,477 xd 127,784,888 1398 1797 13000 PPM 31cmve 0.2.0 -m2,3,0x7fed7dfd 16,424,248 129,876,858 307,787 x 130,184,645 1140801 19963 CM 81paq8hp12any -8 16,230,028 132,045,026 330,700 x 132,375,726 37660 37584 1850 CM 41drt|emma 1.23 16,523,517 134,164,521 1,358,251 xd 135,522,772 73006 67097 3800 CM 81zpaq 6.42 -m s10.0.5fmax6 17,855,729 142,252,605 4,760 sd 142,257,365 6699 14739 14000 CM 61drt|lpaq9m 9 17,964,751 143,943,759 110,579 x 144,054,338 868 898 1542 CM 4110mcm 0.83 -x11 18,233,295 144,854,575 79,574 s 144,934,149 394 281 5961 CM 72nanozip 0.09a -cc -m32g -p1 -t1 -nm 18,594,163 148,545,179 783,642 x 149,328,821 1149 1141 32000 CM 74xwrt 3.2 -l14 -b255 -m96 -s -e40000 -f200 18,679,742 151,171,364 52,569 s 151,223,933 2537 2328 1691 CMfp8 v3 -8 18,438,169 153,188,176 50,068 s 153,238,244 20605 22593 1192 CM 26WinRK 3.03 pwcm +td 800MB SFX 18,612,453 156,291,924 99,665 xd 156,391,589 68555 800 CM 10ppmonstr J -m1700 -o16 19,055,092 157,007,383 42,019 x 157,049,402 3574 ~3600 1700 PPMzcm 0.93 -m8 -t1 19,572,089 159,135,549 227,659 x 159,363,208 421 411 3100 CM 48slim 23d -m1700 -o12 19,077,276 159,772,839 69,453 x 159,842,292 5232 ~5400 1700 PPMbwmonstr 0.02 20,307,295 160,468,597 69,401 x 160,537,998 331801 156147 590 BWT 30nanozipltcb 0.09 20,537,902 161,581,290 133,784 x 161,715,074 64 30 3350 BWT 4020M03 1.1b 1000000000 20,710,197 163,667,431 50,468 x 163,717,899 457 406 5735 BWT 52glza 0.10.1 -x -p3 20,356,097 163,768,203 69,935 s 163,838,138 8184 11.9 8205 Dict 67bcm 0.14 c1000 20,736,614 163,885,873 74,569 x 163,960,442 162 153 5000 BWT 60bsc 2.00 -b1000p 20,789,147 163,888,465 122,581 s 164,011,046 237 199 5095 BWT 39bbb m1000 20,847,290 164,032,650 11,227 s 164,043,877 4524 2619 1401 BWTpcompress 3.1 -c libbsc -l14 -s1000m 20,769,968 163,391,884 1,370,611 x 164,762,495 359 74 3300 BWT 48paq9a -9 19,974,112 165,193,368 13,749 s 165,207,117 3997 4021 1585 CMuda 0.300 19,393,460 166,272,261 11,264 x 166,283,525 25282 25174 180 CMBWTmix v1 c10000 20,608,793 167,852,106 9,565 x 167,861,671 1794 690 5000 BWT 49lrzip 0.612 -z -L 9 -p 1 19,847,690 169,318,794 99,363 x 169,418,157 2987 2929 2700 CM 3330cm4_ext 20,188,048 170,566,799 204,782 x 170,771,581 4123 4130 1906 CM 26M1x2 v0.6 7 enwik7.txt 20,723,056 172,212,773 38,467 s 172,251,240 711 715 1051 CM 26cmm4 v0.1e 96 20,569,034 172,669,955 31,314 x 172,701,269 2052 2056 1321 CMlstm-compress v3 20,318,653 173,874,407 144,567 s 174,018,974 92342 91876 9 LSTM 83ccmx 1.30 7 20,857,925 174,142,092 15,014 x 174,157,106 1313 1338 1332 CMbit 0.7 -p=5 20,823,204 174,425,039 62,493 x 174,487,532 2050 2100 663 CM 26mcomp 2.00 -mw -M320m 21,103,670 174,388,351 172,531 x 174,560,882 473 399 1643 BWT 26epmopt|epm r9 -m800 -n20 --fixedorder:12 19,713,502 174,817,424 141,101 x 174,958,525 3179 3376 800 PPMWinUDA 2.91 mode 3 (194 MB) 20,332,366 174,975,730 17,203 x 174,992,933 23610 23473 194 CMdark 0.51 -b333mf 21,169,819 175,471,417 34,797 x 175,506,214 533 453 1692 BWT40FreeArc 0.40pre-4 -mppmd:1012m:o13:r1 20,931,605 175,254,732 748,202 x 176,002,934 1175 1216 1046 PPMhook v1.4 1700 21,990,502 176,648,663 37,004 x 176,685,667 741 695 1777 DMC 267zip 4.46a -m0=ppmd:mem=1630m:o=10 ... 21,197,559 178,965,454 0 xd 178,965,454 503 546 1630 PPM 23rings 2.5 -m8 -t1 20,873,959 178,747,360 240,523 x 178,987,883 280 163 2518 BWT 48pimple2 20,871,457 180,251,530 78,642 x 180,330,172 18474 17992 128 CMash 04a /m700 /o10 19,963,105 180,735,542 11,137 x 180,746,679 6100 5853 700 CMbce3 22,729,148 180,732,702 19,889 s 180,752,591 1151 2444 5000 CM 71ocamyd LTCB 1.0 -s0 -m3 21,285,121 182,359,986 21,030 x 182,381,016 108960~110000 300 DMC 6bee 0.79 b0154 -m3 -d8 20,975,994 182,373,904 57,046 x 182,430,950 9295 9285 512 PPMuhbc 1.0 -m3 -b100m 20,930,838 182,918,172 56,242 x 182,974,414 1569 809 800 BWT50smac 1.20 21,781,544 183,190,888 4,356 x 183,195,244 4249 4399 1542 CM 26ppmd J1 -m256 -o10 -r1 21,388,296 183,964,915 11,099 s 183,976,014 880 895 256 PPMtc 5.2 dev 2 21,481,399 184,939,711 41,112 x 184,980,823 3637 3655 230 CMbwtsdc v1 23,414,955 185,709,858 8,421 s 185,718,279 2100 420 5213 BWT 47fbc v1.1 333333334 22,554,133 185,975,548 23,576 x 185,999,124 451 415 1647 BWT 55ppmvc v1.1 -m256 -o8 -r1 21,484,294 186,208,405 25,241 x 186,233,646 898 913 272 PPMchile 0.4 -b=244141 22,218,917 186,979,614 11,530 s 186,991,144 2513 512 1426 BWTbwtdisk 0.9.0 -b 2 -m 3500 24,725,277 190,004,306 169,579 s 190,173,885 1124 3500 BWT 48CTXf 0.75 pre b1 -me 22,072,783 191,008,871 57,337 x 191,066,298 1112 1037 78 PPMm03exp 2005-02-15 32MB blocks 21,948,192 191,250,500 44,593 x 191,295,093 ~4800 ~2100 256 BWT60Stuffit 12.0.0.17 -m=4 -l=16 -x=30 22,105,654 190,372,707 2,658,122 xd 193,030,829 628 658 1062 PPMplzma v3b c2 ... (see below) 24,206,571 193,240,160 101,221 x 193,341,381 8889 55 10110 LZ77 58crook v0.1 -m1600 -O8 22,503,627 193,333,159 8,539 s 193,341,698 483 513 1641 PPM 26ppmx 0.03 22,572,808 193,643,464 54,964 x 193,698,428 777 784 609 PPM 26lzturbo 1.1 -49 -b1000 -p0 24,416,777 194,681,713 110,670 x 194,792,383 1920 9 14700 LZ77 59enc 0.15 aq 22,156,982 195,604,166 94,888 x 195,699,054 6843 6868 50 CMcomprolz 0.11.0-bugfix1 -b250 -f 22,813,215 196,651,379 29,453 x 196,680,832 984 308 688 ROLZ 26sbc 0.970r2 -ad -m3 -b63 22,470,539 197,066,203 99,094 xd 197,165,297 1733 313 224 BWTxz 5.2.1--lzma2=preset=9e,dict=1GiB,lc=4,pb=0 24,703,772 197,331,816 36,752 xd 197,368,568 5876 20 6000 LZ77 73WinRAR 3.60b3 -mc7:128t+ -sfxWinCon.sfx 22,713,569 198,454,545 0 xd 198,454,545 506 415 128 PPM70quark v0.95r beta -m1 -d25 -l8 22,988,924 198,600,023 80,264 x 198,680,287 27952 217 534 LZ77lzip 1.14-rc3 -9 -s512MiB 24,756,063 199,410,543 21,682 s 199,432,225 2409 21 5632 LZ77 57comprox 0.11.0-bugfix1 -b250 -f -m100 23,064,386 199,515,912 34,176 x 199,550,088 917 153 688 LZ77 26bssc 0.95 alpha -b16383 23,117,061 201,810,709 45,489 x 201,856,198 578 217 140 BWT 4flashzip 1.0.0 -mx7 -b7 23,869,034 202,363,445 123,053 x 202,486,498 1296 122 802 ROLZ 26lzham 1.0 -d29 -x 25,002,070 202,237,199 191,600 s 202,428,799 1096 6.6 7800 LZ77 70csarc 3.3 -m5 -d1024m 24,516,202 203,995,005 69,848 s 204,064,853 621 22 2463 LZ77 48packet 1.9 -mx -b512 -h8 24,968,492 204,195,438 261,967 x 204,457,405 974 14 2824 LZ77 48uharc 0.6b -mx -md32768 23,911,123 208,026,696 73,608 xd 208,100,304 1666 1330 50 PPMTarsaLZP Jan 29 2012 24,751,389 208,867,187 13,081 s 208,880,268 203 ~2000 LZP 5480GRZipII 0.2.4 -b8m 23,846,878 208,993,966 41,645 s 209,035,641 312 216 58 BWT4x4 0.2a 4t (grzip:m1:h18) 23,833,244 208,787,642 317,097 x 209,104,739 386 240 269 BWTrzm 0.07h 24,361,070 210,126,103 17,667 x 210,143,770 2336 81 160 ROLZpim 2.50 best 24,303,638 210,124,895 330,901 x 210,455,796 764 ~764 88 PPMCTW 0.1 -d6 -n16M -f16M 23,670,293 211,995,206 43,247 x 212,038,452 19221 19524 144 CMboa 0.58b -m15 24,322,643 213,845,481 55,813 x 213,901,294 3953 ~4100 17 PPMyxz 0.11 -m9 -b7 -h6 25,754,856 214,317,684 131,062 x 214,448,746 642 77 1590 LZ 26zstd 0.6.0 -22 --ultra 25,405,601 215,674,670 69,687 s 215,744,357 701 2.2 792 LZ77 76tornado 0.6 -16 25,768,105 217,749,028 83,694 s 217,832,722 1482 9 1290 LZ77 48LZPXj 1.2h 9 25,205,783 217,880,584 4,853 s 217,885,437 783 717 1316 PPM 90scmppm 0.93.3 -l 9 25,198,832 217,867,392 37,043 s 217,904,435 708 644 20 PPMacb 2.00c u 25,063,656 218,473,968 38,976 x 218,512,944 10656 10883 16 LZ77 26crushm 25,013,576 218,656,416 30,097 x 218,686,513 617 649 39 CM 26PX v1.0 24,971,871 219,091,398 3,054 s 219,094,452 1838 1809 66 CM 3DGCA 1.10 default+SFX 25,203,248 219,655,072 0 xd 219,655,072 858 270 76Squeez 5.20.4600 sqx2.0 32MB Ultra 25,118,441 220,004,873 91,019 xd 220,095,892 2575 116 365fpaq2 25,287,775 221,242,386 3,429 s 221,245,815 20183 20186 131 CMTinyCM 0.1 9 25,913,605 221,773,542 12,553 x 221,786,095 1342 1330 1083 CM 26dmc c 1800000000 25,320,517 222,605,607 2,220 s 222,607,827 676 721 1800 DMClza 0.82b -mx9 -b7 -h7 26,396,613 222,808,457 285,766 x 223,094,223 449 9.7 2000 LZ77 48100brotli 18-Feb-2016 -q 11 -w 24 25,764,698 223,597,884 542,385 s 224,140,269 3400 5.9 437 LZ77 48szip 1.12a -b41o16 26,120,472 227,586,463 31,708 x 227,618,171 1191 289 21 BWT 26balz 1.13 ex 26,421,416 228,337,644 49,024 x 228,286,668 3700 190 206 ROLZlzpm 0.11 9 26,501,542 229,083,971 46,824 x 229,130,795 15395 57 740 ROLZqazar 0.0pre5 -l7 -d9 -x7 26,455,170 229,846,871 71,959 x 229,918,830 5738 903 105 LZPKuaiZip 2.3.2 x86 25,895,915 227,905,650 3,857,649 x 231,763,299 1061 47 197 LZ77 26qc 0.050 -8 26,763,343 232,784,501 46,100 x 232,830,601 8218 1503 151ppms J -o5 26,310,248 233,442,414 16,467 x 233,458,881 330 354 1.8 PPMdzo beta 26,616,115 235,056,859 618,883 x 235,675,742 1088 159 200 LZ77 26comprox_ba 20110929 27,828,189 242,846,243 4,134 s 242,850,377 397 101 226 BWTS 48110WinTurtle 1.60 512 MB buffer 28,379,612 245,217,944 160,090 x 245,378,034 273 237 583 PPMdiz 26,545,256 246,679,382 12,945 s 246,692,327 21240 22746 1350 PPM 26cabarc 1.00.0601 -m lzx:21 28,465,607 250,756,595 51,917 xd 250,808,853 1619 15 20 LZ77sr3 28,926,691 253,031,980 9,399 s 253,054,625 148 160 68 SR 26bzip2 1.0.2 -9 29,008,736 253,977,839 30,036 x 254,007,875 379 129 8 BWTrh5_x64 -window:27 c6 29,078,552 254,220,469 36,744 x 254,257,213 196 9.4 145 ROLZ 48RangeCoderC v1.7 c7 26 28,788,013 254,527,369 7,858 x 254,535,227 2460 2436 1116 CM 26quad v1.11 -x 29,110,579 256,145,858 13,387 s 256,159,245 956 116 34 ROLZWinACE -sfx -m5 -d4096 29,481,470 257,237,710 0 xd 257,237,710 1080 77 4lzsr 0.01 29,433,834 258,912,605 40,287 x 258,952,892 194 88 6 LZ77 26120libzling 20160107 e4 29,721,114 259,475,639 35,582 s 259,511,221 83 27 28 ROLZ 48xpv5 c2 29,963,217 262,525,246 14,371 x 262,539,617 2359 516 9 ROLZ 26sr3c 1.0 29,731,019 266,035,006 7,701 x 266,042,707 160 145 5 SR 26lzc v0.08 10 30,611,315 266,565,255 11,364 x 266,576,619 302 63 550 LZ77nakamichi 2019-Jul-01 32,917,888 277,293,058 112,899 s 277,405,957 8200000 1.3 302000 LZSS 85crush 1.00 cx 31,731,711 279,491,430 2,489 s 279,493,919 948 2.9 148 LZ77 60xeloz 0.3.5.3 c889 32,441,272 283,621,211 18,771 s 283,639,982 1079 8 230 LZ77 48bzp 0.2 31,563,865 283,908,295 36,808 x 283,945,103 110 120 3 LZPha 0.98 a2 31,250,524 285,739,328 28,404 x 285,767,732 2010 1800 0.8 PPMulz 0.06 c9 32,945,292 291,028,084 49,450 x 291,077,534 325 1.1 490 LZ77 82130irolz 33,310,676 292,448,365 4,584 s 292,452,949 274 144 17 ROLZ 26lcssr 0.2 -b7 -l9 34,549,048 296,160,661 8,802 x 296,169,463 8186 8281 1184 SRzlite 33,975,840 298,470,807 4,880 s 298,475,687 61 28 36 ROLZ 26lazy 1.00 5 35,024,082 306,245,949 5,986 s 306,251,935 273 24 96 LZ77 26zhuff 0.97 beta -c2 34,907,478 308,530,122 63,209 x 308,593,331 24 3.5 32 LZ77 48slug 1.27 35,093,954 309,201,454 6,809 x 309,208,263 32 28 14 ROLZpigz 2.3 -11 35,002,893 309,812,953 52,717 s 309,865,670 2237 13 25 LZ77 48kzip May 13 2006 /b1024 35,016,649 310,188,783 29,184 xd 310,217,967 6063 62 121 LZ77 2uc2 rev 3 pro -tst 35,384,822 312,767,652 123,031 x 312,890,683 360 63 4 LZ77thor 0.95 e4 35,795,184 314,092,324 49,925 x 314,142,249 64 34 16 LZP140etincelle a3 35,776,971 314,801,710 44,103 x 314,845,813 29 18 976 ROLZ 26lz5 1.3.3 -18 36,514,408 319,510,433 138,210 s 319,648,643 10578 3.7 1139 LZ77 48gzip124hack 1.2.4 -9 36,273,716 321,050,648 62,653 x 321,113,301 149 19 1 LZ77 doboz 0.1 36,367,430 322,415,409 83,591 x 322,499,000 533 3.4 1200 LZ77 48gzip 1.3.5 -9 36,445,248 322,591,995 38,801 x 322,630,796 101 17 1.6 LZ77Info-ZIP 2.3.1 -9 36,445,373 322,592,120 57,583 x 322,649,703 104 35 0.1 LZ77pkzip 2.0.4 -ex 36,556,552 323,403,526 29,184 xd 323,432,710 171 50 2.5 LZ77jar (Java) 0.98-gcc cvfM 36,520,144 323,747,582 19,054 x 323,766,636 118 95 1.2 LZ77PeaZip better, no integrity check 36,580,548 323,884,274 561,079 x 324,445,353 243 243 8 LZ77 20arj 3.10 -m1 37,091,317 328,553,982 143,956 x 328,697,938 262 67 3 LZ77 26150lzgt3a 37,444,440 334,405,713 4,387 xd 334,410,100 1581 2886 2 LZ77lzuf Apr.15.2009 38,036,810 338,488,945 4,070 xd 338,493,015 446 40 2 LZ77 26pucrunch -d -c0 39,199,165 350,265,471 34,359 s 350,299,830 2649 463 2 LZ77packARC v0.7RC11 -sfx -np 38,375,065 361,905,425 0 xd 361,905,425 1359 1486 23 CMurban 38,215,763 362,677,440 4,280 s 362,681,720 381 450 6 o2 48lzop v1.01 -9 41,217,688 366,349,786 54,438 x 366,404,224 289 12 1.8 LZ77lzw 0.2 41,960,994 367,633,910 671 s 367,634,581 3597 31 18 LZWMTCompressor v1.0 41,295,546 370,152,396 3,620 x 370,156,016 173 117 74 LZ77 26lz4x 1.02 c4 41,950,112 372,068,437 48,609 x 372,117,046 79 1.4 114 LZ77 68arbc2z 38,756,037 379,054,068 6,255 sd 379,060,323 2659 2674 68 PPM160lz4 v1.2 -c2 42,870,164 379,999,522 49,128 x 380,048,650 91 6 20 LZ77 26lzss 0.02 cx 42,874,387 380,192,378 48,114 x 380,240,492 107 2.3 145 LZSS 63xdelta 3.0u -9 44,288,463 389,302,725 107,985 x 389,410,710 1021 30 47 LZ77brieflz 1.1.0 43,300,800 390,122,722 14,907 s 390,137,629 21 7.5 3 LZ77 48mtari 0.2 41,655,528 397,232,608 4,156 s 397,236,764 80 99 18 CM 26lzf 1.02 cx 45,198,298 406,805,983 48,359 x 406,854,342 68 2.2 151 LZ77 68srank 1.1 -C8 43,091,439 409,217,739 6,546 x 409,224,285 51 45 2 SRQuickLZ 1.30b (quick3) 46,378,438 410,633,262 44,202 x 410,677,464 48 12 3 LZ77stz 0.7.2 -c2 47,192,312 416,524,596 41,941 x 416,566,537 14 13 3 LZ77 26compress 4.3d 45,763,941 424,588,663 16,473 x 424,605,136 103 70 1.8 LZW170lzrw3-a 48,009,194 438,253,704 4,750 x 438,258,454 38 17 2 LZ77fcm1 45,402,225 447,305,681 1,116 s 447,306,797 228 261 1 CM1runcoder1 46,883,939 458,125,932 5,488 s 458,131,420 140 156 4 o1 26data-shrinker 23Mar2012 51,658,517 459,825,318 3,706 s 459,829,024 14 4 2 LZ77 26lzwc_bitwise 0.7 46,639,414 463,884,550 4,183 x 463,888,733 123 134 71 LZW 26 exdupe 0.3.3 53,717,422 478,788,378 1,092,986 x 479,881,364 27 5 1000 LZ77 48lzv 0.1.0 54,950,847 488,436,027 10,385 x 488,446,412 4 2.6 3 LZ77 48FastLZ Jun 12 2007 54,658,924 493,066,558 7,065 xd 493,073,623 18 13 1 LZ77sharc 0.9.11b -c2 53,175,042 494,421,068 81,001 s 494,502,069 15 14 6 LZP 26flzp v1 57,366,279 497,535,428 3,942 s 497,539,370 78 38 8 LZP180alba 0.5.1 cd 52,728,620 515,760,096 4,870 s 515,764,966 239 10 4 BPE 48snappy 1.0.1 58,350,605 527,772,054 23,844 s 527,795,898 25 12 0.1 LZ77 26bpe 5000 4096 200 3 53,906,667 532,250,688 1,037 sd 532,251,725 639 28 0.5 Dict 26kwc 54,097,740 532,622,518 15,186 x 532,637,704 438 145 668 Dict 26bpe2 v3 55,289,197 542,748,980 2,979 s 542,751,959 518 132 0.5 Dict 26fpaq0f2 56,916,872 558,645,708 3,066 x 558,648,769 222 207 0.4 o0ppp 61,657,971 579,352,307 1,472 s 579,353,779 80 59 1 SRksc 4 59,511,259 580,557,413 13,507 x 580,570,920 40050 7917 1700 SR 48lzbw1 0.8 67,620,436 590,235,688 21,751 x 590,257,439 15 12 55 LZP 26lzp2 0.7c 67,909,076 598,076,882 40,819 x 598,117,701 11 8 15 LZP 26190NTFS LZNT1 76,955,648 636,870,656 0 636,870,656 10 9 0.1 LZ77 26shindlet_fs 62,890,267 637,390,277 1,275 xd 637,391,552 113 103 0.6 o0arb255 63,501,996 644,561,595 4,871 sd 644,566,466 2551 2574 1.6 o0compact 63,862,371 648,370,029 3,600 sd 648,373,629 216 164 0.2 o0TinyLZP 0.1 79,220,546 694,274,932 2,811 s 694,277,743 32 38 10 LZP 26smile 71,154,788 695,562,502 207 xd 695,562,709 10517 10414 0.6 MTF 26barf (2 passes) 76,074,327 758,482,743 983,782 s 759,466,525 756 53 4 LZ77arb2x v20060602 99,642,909 995,674,993 3,433 sd 995,678,426 2616 2464 1.6 o0b set 限制解除 Fails on enwik91234567 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----hipp 5819 /o8 20,555,951 (fails) 36,724 x 5570 5670 719 CMppmz2 23,557,867 (fails) 29,362 s 92210 88070 1497 PPM 26XMill 0.8 -w -P -9 -m800 26,579,004 (fails) 114,764 xd 616 530 800 PPMlzp3o2 33,041,439 (fails) 23,427 xd 230 270 151 LZP Programs that properly decompress enwik8 and don’t use external dictionaries are still eligible for the Hutter Prize. Testing not yet completed12345 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----rdmc 0.06b 33,181,612 1394 1381 DMC 6ESP v1.92 36,651,292 223 LZ77 16 Pareto frontier: compressed size vs. compression time as of Aug. 18, 2008 from the main table (options for maximum compression). Pareto frontier: compressed size vs. memory as of Aug. 18, 2008 (options for maximum compression). Notes about compressorsI only test the latest supported version of a program. I attempt to find the options that select the best compression, but will not generally do an exhausitve search. If an option advertises maximum compression or memory, I don’t try the alternatives. If you know of a better combination, please let me know. I will select the maximum memory setting that does not cause disk thrashing, usually about 1800 MB. If the compressor is not downloadable as a zip file then I will compress the source or executable (whichever archive is smaller) plus any other needed files (dictionaries) into a single zip archive using 7zip 4.32 -tzip -mx=9. If no executable is available I will attempt to compile in C or C++ (MinGW 3.4.2, Borland 5.5 or Digital Mars), Java 1.5.0, MASM, NASM, or gas. \\1. Reported by Guillermo Gabrielli, May 16, 2006. Timed on a Celeron D325 2.53Ghz Windows XP SP2 256MB RAM.\\2. Decompression size and time for pkzip 2.0.4. kzip only compresses.\\3. Reported by Ilia Muraviev (author of PX, TC, pimple), June 10-July 18, 2006. Timed on a P4 3.0 GHz, 1GB RAM, WinXP SP2.\\4. enwik9 reported by Johan de Bock, May 19, 2006. Timed on Intel Pentium-4 2.8 GHz 512KB L2-cache, 1024MB DDR-SDRAM.\\5. Compressed with paq8h (VC++ compile) and decompressed with paq-8h (Intel compile of same source code). Normally compression and decompression are the same speed.\\6. ocamyd 1.65.final and LTCB 1.0 reported by Mauro Vezzosi, May 30-June 20, 2006. Timed on a 1.91 GHz AMD Athlon XP 2600+, 512 MB, WinXP Pro 2002 SP2 using timer 3.01. ocamyd 1.66.final reported Feb. 3, 2007. Times are process times.\\7. Under development by Mauro Vezzosi, May 24, 2006.\\8. Reported by Denis Kyznetsov (author of qazar), June 2, 2006.\\9. Reported by sportman, May 24, 2006. Timed on a Intel Pentium D 830 dual core 3.0GHz, 2 x 512MB DDR2-SDRAM PC4300 533Mhz memory timing 4-4-4-12 (833.000KB free), Windows XP Home SP2. CPU was at 52% so apparently only one of 2 cores was used. Decompression verified on enwik8 only (not timed, about 2.5 hours). WinRK compression options: Model size 800MB, Audio model order: 255, Bit-stream model order: 27, Use text dictionary: Enabled, Fast analyses: Disabled, Fast executable code compression: Disabled\\10. Reported by Malcolm Taylor (author of WinRK), May 24, 2006. Timed on an Athlon X2 4400+ with 2GB, running WinXP 64. Decompression not tested. decompresser size is based on SFX stub size reported by Artyom (A.A.Z.), Sept. 2, 2007, although it was not tested this way.\\11. Reported by sportman, May 25, 2006. CPU as in note 9.\\12. Reported by sportman, May 30, 2006. CPU as in 9 (50% utilized).\\13. xwrt 3.2 options are -2 -b255 -m250 -s -f64. ppmonstr J options are -o10 -m1650.\\14. Reported by Michael A Maniscalco, June 15, 2006.\\15. Reported by Jeremiah Gilbert on the Hutter group, Aug. 18, 2006. Tested under Linux on a dual Xeon 1.6 GHz(lv) (overclocked to 2.13 GHz) with 2 GB memory. Time is user+sys (real=196500 B/ns).\\16. Reported by Anthony Williams, Aug. 19-22. 2006. Timed on a 2.53 GHz Pentium 4 with 512 MB under WinXP Home SP2.\\17. Tested Aug. 20, 2006 under Ubuntu Linux 2.6.15 on a 2.2 GHz Athlon-64 with 2 GB memory. Time is approximate wall time due to disk thrashing. User+sys time is 153600 ns/byte compress, 148650 decompress.\\18. Reported by Dmitry Shkarin (author of durilca4linux), Aug. 22-23, 2006 for durilca4linux_1; and Oct. 16-18, 2006 for durilca4linux_2. 3 GB memory usage is RAM + swap. Tested on AMD Athlon X2 4400+, 2.22 GHz, 2 GB memory under SuSE Linux AMD64 v10.0. durilca4linux_3 reported Feb. 21, 2008 using 4 GB RAM + 1 GB swap. v2 reported Apr. 22, 2008. v3 reported May 22, 2008.\\19. enwik8 confirmed by sportman, Sept. 20, 2006. Compression time 61480 ns/byte timed on a 2 x dual core (only one core active) Intel Woodcrest 2GHz with 1333MHz fsb and 4GB 667MHz CL5 memory under SiSoftware Sandra Lite 2007.SP1 (10.105). Drystone ALU 37,014 MIPS, Whetstone iSSE3 25,393 MFLOPS, Integer x8 iSSE4 220,008 it/s, Floating-point x4 iSSE2 119,227 it/s.\\20. Reported by Giorgio Tani (author of PeaZip) on Nov. 10, 2006. Tested on a MacBook Pro, Intel T2500 Core Duo CPU (one core used), with 512 MB memory under WinXP SP2. Time is combined compression and decompression.\\21. enwik9 -8 reported by sportman, Dec. 12-13, 2006. Hardware as note 19. enwik9 decompression not verified. paq8hp7 -8 enwik8 compression was reported as 16,417,650 (4 bytes longer; the size depends on the length of the input filename, which was enwik8.txt rather than enwik8). I verified enwik8 -7 and -8 decompression.\\22. paq8hp8 -8 enwik9 reported by sportman, Jan. 18, 2007. paq8hp10 -8 enwik9 on Apr. 2, 2007. paq8hp11 -8 enwik9 on May 10, 2007. paq8hp12 -8 enwik8/9 on May 20, 2007. Hardware as in note 19. Decompression verified for enwik8 only.\\23. 7zip 4.46a options were -m0=PPMd:mem=1630m:o=10 -sfx7xCon.sfx\\24. paq8o8-intel (intel compile of paq8o8) -1, paq8o8z-jun7 (DOS port of paq8o8) -1 reported by Rugxulo on Jun 10, 2008. Timed on a AMD64x2 TK-53 Tyler 1.7 GHz laptop with Vista Home Premium SP1.\\25. paq8o8z -1 enwik8 (DJGPP compile) reported by Rugxulo on Jun 17, 2008. Tested on a 2.52 Ghz P4 Northwood, no HTT, WinXP Home SP2.\\26. Tested on a Gateway M-7301U laptop with 2.0 GHz dual core Pentium T3200 (1MB L2 cache), 3 GB RAM, Vista SP1, 32 bit. Run times are similar to my older computer.\\27. enwik9 size reported by Eugene Shelwien, Mar. 5, 2009. enwik8 size and all speeds are tested as in note 26.\\28. Reported by Eugene Shelwien on a Q6600, 3.3 GHz, WinXP SP3, ramdrive: bcm 0.06 on Mar. 15, 2009, bcm 0.08 on June 1, 2009.\\29. Reported by kaitz (KZ): paq8p3 on Apr. 19, 2009, v2 on Apr. 21, 2009, paq8pxd on Jan. 21, 2012, v2 on Feb. 11, 2012, v3 on Feb. 23, 2012, v4 on Apr. 23, 2012. 2012 tests on a Core2Duo T8300 2.4 GHz, 2 GB.\\30. Reported by Sami Runsas (author of bwmonstr), July 14, 2009. Tested on an Athlon XP 2200 (Win32).\\31. Reported by Dmitry Shkarin, July 21, 2009, Nov. 12, 2009. Tested on a 3.8 GHz Q9650 with 16 GB memory under Windows XP 64bit Pro SP2. Requires msvcr90.dll.\\32. Reported by Mike Russell, Sept. 11, 2009. Tested on an 2.93 GHz Intel Q6800 with 3.5 GB memory.\\33. Reported by Con Kolivas (author of lrzip) on Nov. 27, 2009 (lrzip 0.40), Nov. 30, 2009 (lrzip 0.42), Mar. 17, 2012 (lrzip 0.612). Tested on a 3 GHz quad core Q9650, 8 GB, 64 bit debian linux.\\34. Reported by sportman, Nov. 29, 2009 (durilca’kingsize), Nov. 30, 2009 (durilca’kingsize4), Apr. 8, 2010 (bsc 1.0.0). Test hardware: 2 x 2.4GHz (overclocked at 2.53 GHz) quad core Xeon Nahalem, 24GB DDR3 1066MHz, 8 x 2TB RAID5, Windows 2008 Server R2 64bit\\35. Reported by zody on Dec. 12, 2009. Tested in Windows 7, x64, 3.6 GHz e8200, 4 GB 1066 MHz RAM.\\36. Reported by Ilia Muraviev on Dec. 16, 2009. Tested on a 2.40 GHz Core 2 Duo, DDR2-800 4GB RAM, Windows7 x64.\\37. Reported by Sami Runsas, Mar. 3, 2010. Tested under Win64 on a Q6600 at 3.0 GHz.\\38. Reported by Ilya Grebnov, Apr. 7, 2010. Tested on an Intel Core 2 Duo E8500, 8 GB memory, Windows 7.\\39. Reported by Ilya Grebnov, Apr. 8, 2010. Tested on an Intel Core 2 Quad Q9400, 8 GB memory, Windows 7. bsc 2.00 on May 3, 2010. bsc 2.2.0 on June 15, 2010.\\40. Reported by Sami Runsas, May 10, 2010. Tested on an overclocked Intel Core i7 860. nanozip 0.08a tested June 6, 2010. nanozip 0.09a on Nov. 5, 2011.\\41. lpaq9m reported by Alexander Rhatushnyak on June 9, 2010. Tested on an Intel Core i7 CPU 930 (8 core), 2.8 GHz, 2.99 GB RAM. paq8hp12any tested June 28, 2010.\\42. Reported by Michal Hajicek, June 4, 2010 on an AMD Phenom II 965, 64 bit Windows. WinRK, ppmonstr on June 14.\\43. Reported by Ilia Muraviev, June 26, 2010. Tested on a Core 2 Quad Q9300, 2.50 GHz, 4 GB DDR2, Windows 7.\\44. Timed on a Dell Latitude E6510 laptop Core I7 M620, 2.66 GHz, 4 GB, Windows 7 32-bit.\\45. Reported by Richard Geldreich (lzham author) on Aug. 30, 2010. Tested on a 2.6 GHz Core i7 (quad core + HT), 6 GB, Win7 x64.\\46. Reported by Stefan Gedo (ST author) on Oct. 14, 2010. Tested on Athlon II X4 635 2.9 GHz, 4 GB memory, Windows 7.\\47. Reported by David A. Scott on Dec. 15, 2010. Tested on a I3-370 with 6 GB DDR3 1033 MHz memory.\\48. Timed on a Dell Latitude E6510 laptop Core I7 M620, 2.66 GHz, 4 GB, Ubuntu Linux 64-bit.\\49. Tested by the author on a Q9450, 3.52 GHz = 440x8, ramdrive.\\50. Tested by the author on an Intel Core i7-2600, 3.4 GHz, Kingston 8 GB DDR3, WD VeloicRaptor 10000 RPM 600 GB SATA3, Windows 7 Ultimate SP1.\\51. Tested by Bulat Ziganshin on i7-2600, 4.6 GHz with 1600 MHz RAM (8-8-8-21-1T) and NVIDEA GeForce 560Ti at 900/2000 MHz.\\52. Tested by Michael Maniscalco on an 8 core Intel Xeon E5620, 2.40 GHz, 12 GB memory running Windows 7 Enterprise SP1, 64 bit.\\53. Tested by the author on a Core i7-2600K @ 4.6GHz, 8GB DDR3 @ 1866MHz, 240GB Corsair Force GT SSD.\\54. Tested by Piotr Tarsa on a Core 2 Duo E8400, 8 GiB RAM, Ubuntu 11.10 64-bit, OpenJDK 7.\\55. Tested by David Catt on a 64 bit Windows 7 laptop, 2.33 GHz, 4 GB, 4 cores.\\56. Reported by the author on a Athlon II X4 635 2.9 GHz, 4GB, Windows 8 Enterprise.\\57. Reported by the author on a x86_64 Athlon 64 X2 5200+ with 8 GiB of RAM running GNU/Linux 2.6.38.6-libre.\\58. Reported by the author on a 4 GHz i7-930 from ramdrive.\\59. Reported by the author on a I7-2600, 4.6 GHz, 16 GB RAM, Ubuntu 13.04.\\60. Tested by Ilia Muravyov on an Intel Core i7-3770K, 4.8 GHz, 16 GB Corsair Vengeance LP 1800 MHz CL9, Corsair Force GS 240 GB SSD, Windows 7 SP1.\\61. Tested by Matt Mahoney on a dual Xeon E-2620, 2.0 GHz, 12+12 hyperthreads, 64 GB RAM (20 GB usable), Fedora Linux.\\62. Tested by Valéry Croizier on a 2.5 GHz Core i5-2520M, 4 GB memory, Windows 7 64 bit.\\63. Tested by Ilia Muravyov on an Intel i7-3770, 4.7 GHz, Corsair Vengenance LP 1600 MHz CL9 16 GB RAM, Samsung 840 Pro 512 GB SSD, Windows 7 SP1.\\64. Tested by Kennon Conrad on a 3.2 GHz AMD A8-5500.\\65. Tested by sportman on an Intel Core i7 4960X 3.6GHz OC at 4.5GHz - 6 core (12 threads) 22nm Ivy Bridge-E, Kingston 8 x 4GB (32GB) DDR3 2400MHz 11-14-14 under clocked at 2000MHz 10-11-11. Windows 8.1 Pro 64-bit, SoftPerfect RAM Disk 3.4.5 64-bit.\\66. Tested by Byron Knoll on a Intel Core i7-3770, 31.4 GB memory, Linux Mint 14.\\67. Tested by Kennon Conrad on a 4.0 GHz i4790K, 16 GB at 1866 MHz, 128 GB SSD Windows 8.1.\\68. Tested by Ilia Muraviev on an Intel Core i7-3770K @ 4.8GHz, 8GB 2133 MHz CL11 DDR3, 512GB Samsung 840 Pro SSD, Windows 7 Ultimate SP1.\\69. Tested by Nania Francesco Antonio on a Intel Core i7 920 2.67 ghz 6GB ram.\\70. Tested by Richard Geldreich on a Core i7 Gulftown 3.3 Ghz, Win64.\\71. Tested by Christoph Diegelmann on a Core i7-4770K, 8 GB DDR3, Samsung 840Pro 128 GB, Fedora 21 64 bit, gcc 4.9.2.\\72. Tested by Skymmer on a i7-2770K, WinXP x64 SP2.\\73. Tested by Andreas M. Nilsson on a 1.7 GHz Intel Core i7, 8 GB 1600 MHz DDR3, Mac OS X 10.10.3 (14D136).\\74. Tested by Michael Crogan on a Core i7-3930K, 3.20 GHz, 6+HT, 64 MB, Linux64.\\75. Tested by Mauro Vezzosi on a Core i7-4710HQ 2.50-3.50 GHz, 8 GB DDR3, Windows 8.1 64 bit.\\76. Tested by Yann Collet on Core i7-3930K, 4.5 GHz, Linux 64, gcc 5.2.0-5.3.1.\\77. Tested by Darek on a Core i7 4900 MQ, 2.8 GHz overclocked to 3.7 GHz, 16 GB, Win7Pro 64.\\78. Tested by mpais on a Core i7 5820K 4.4 GHz, Windows 10.\\79. Tested by Sportman on2 x Intel Xeon E5-2643 v3 6 cores (12 threads) 3.4GHz, 3.7GHz turbo, 20MB L3 cache, 8 x 32GB DDR4 2133MHz CAS 15, SoftPefect RAM Disk 3.4.7, Windows Server 2012 R2 64-bit.\\80. Tested by kaitz on an Intel Celeron G1820 DDR3 8GB PC3-12800 (800 MHz).\\81. Tested by Darek on Core i7 4900MQ 2.8GHz ovwerclocked to 3.8GHz, 32GB, Win7Pro 64.\\82. Tested by Ilia Muraviev on an Intel Core i7-4790K @ 4.6GHz, 32GB @ 1866MHz DDR3 RAM, RAMDisk.\\83. Tested by Byron Knoll on an Intel Core i7-7700K, 32 GB DDR4, Ubuntu 16.04-18.04.\\84. Tested by Fabrice Bellard on 2 x Xeon E5-2640 v3 @ 2.6 GHz, 196 GB RAM, Linux.\\85. Tested by Georgi Marinov on a Windows 10 Laptop: Lenovo Ideapad 310; i5-7200u @2.5GHz; 8GB DDR4 @1066MHz (2133MHz) CL15 CR2T; L2 cache: 2x256KB; L3 cache: 3MB; SSD: Crucial MX500 500GB I have not verified results submitted by others. Timing information, when available, may vary widely depending on the test machine used. About the CompressorsThe numbers in the headings are the compression ratios on enwik9. .1159 cmixcmix v1 is a free, open source (GPL) file compressor by Byron Knoll, Apr. 16, 2014. It is a context mixing compressor with dictionary preprocessing based on code from paq8hp12any and paq8l but increasing the number of context models and mixer layers. It takes no compression options. cmix v2 was released May 29, 2014. cmix v3 was released June 27, 2014. cmix v4 was released July 22, 2014. It uses 28,976,428 KiB memory (29.7 GB). cmix v5 was released Aug. 13, 2014. The decompressor size is a zip archive containing the source code, makefile, and a dictionary compressed with cmix from 465211 to 90065 bytes. cmix v6 was released Sept. 3, 2014. The decompressor size includes the dictionary compressed with cmix from 465211 to 90207 bytes. cmix v7 was released Feb. 4, 2015. cmix v8 was released Nov. 10, 2015. cmix v9 was released Apr. 8, 2016. cmix v10 was released June 17, 2016. cmix v11 was released July 3, 2016. It incorporates a modification originally developed by Eugene Shelwien in which PPMd is included as a model. cmix v12 was released Nov. 7, 2016. It includes a LSTM model. cmix v13 was released Apr. 24, 2017. cmix v14 was released Nov. 22, 2017. cmix v15 was released May 19, 2018. cmix v16 was released Oct 6, 2018. cmix v17 was released Mar. 24, 2019. cmix v18 was released Aug. 2, 2019. 123456789101112131415161718192021 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Notes------- ------- ---------- ----------- ----------- ----------- ------ ------ ----- -----cmix v1 16,076,381 128,647,538 279,185 x 128,926,723 181924 179706 20785 66cmix v2 15,863,623 126,323,656 310,068 x 126,633,724 580083 577626 28152 66cmix v3 15,809,519 125,971,560 274,992 x 126,246,552 267978 266622 26681 66cmix v4 15,784,946 125,621,620 278,375 x 125,899,995 284243 282390 28976 66cmix v5 15,769,367 125,526,628 163,552 s 125,690,180 282056 282647 28865 66cmix v6 15,738,922 124,172,611 161,908 s 124,334,519 280749 282137 30882 66cmix v7 15,738,825 124,168,463 166,785 s 124,335,248 280416 280904 30600 66cmix v8 15,709,216 123,930,173 164,882 s 124,095,055 344244 346641 30311 66cmix v9 15,627,536 123,874,398 161,911 s 124,036,309 346436 345681 26929 66cmix v10 15,587,868 123,257,156 164,263 s 123,421,419 355721 355850 29924 66cmix v11 15,566,358 122,977,954 172,261 s 123,150,215 377529 374440 27745 66cmix v12 15,440,186 121,718,424 175,953 s 121,894,377 571339 574522 27865 66cmix v13 15,323,969 120,480,684 177,979 s 120,658,664 617346 615987 27803 66cmix v14 15,210,458 119,017,492 203,717 s 119,221,209 631838 627802 28287 83cmix v15 15,111,677 117,959,016 217,830 s 118,176,846 650055 651716 28365 83cmix v16 14,955,482 116,912,035 226,121 s 117,138,156 613898 658679 27708 83cmix v17 14,877,373 116,394,271 208,263 s 116,602,534 641189 645651 25258 83cmix v18 14,838,332 115,714,367 208,961 s 115,923,328 602867 601569 25738 83 .1165 phda9phda 1.0 (discussion) is the public version of a winning Hutter prize submission dated Dec. 15, 2017 by Alexander Rhatushnyak. There are Windows and Linux executables, no source. The original prize winning version is a 64 bit Linux decompressor (no source) and compressed enwik8 as a RAR archive, awarded Nov. 4, 2017, posted Aug. 12, 2019. Archive plus decompressor size is 15,284,944 bytes. It uses 1 GB memory and a 176 MB scratch file. There is a version that uses only RAM. phda9 1.2 (discussion) was released Mar. 13, 2018. phda9 1.3 was released Apr. 21, 2018. The decompressor size for enwik8 is different (557050 bytes) because the dictionary is loosely compressed in the decompressor instead of in the compressed file. phda9 1.4 was released May 20, 2018. This is mainly a bug fix version. phda9 1.5 was released Aug. 1, 2018. enwik8 uses a separate decompressor with a size of 557415 bytes. phda9 1.6 was released Oct. 20, 2018. enwik8 uses a separate decompressor with a size of 564616 bytes. phda9 1.7 was released Feb. 18, 2019. enwik8 uses a separate decompressor with a size of 565,352 bytes. phda9 1.8 was released July 4, 2019. enwik8 uses a separate decompressor with a size of 558,298 bytes. 1234567891011 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Notes------- ------- ---------- ----------- ----------- ----------- ------ ------ ----- -----phda9 1.0 15,173,565 118,658,060 41,994 xd 118,700,054 56815 55201 5031 83phda9 1.2 15,144,786 118,335,817 42,745 xd 118,378,562 60726 61586 4992 83phda9 1.3 15,069,752 117,617,185 42,108 xd 117,659,293 86557 87375 4996 83phda9 1.4 15,074,624 117,603,125 42,110 xd 117,645,235 87520 87909 4992 83phda9 1.5 15,063,267 117,223,130 42,428 xd 117,265,558 85877 86365 4995 83phda9 1.6 15,040,647 117,039,346 41,911 xd 117,081,257 84713 88401 4996 83phda9 1.7 15,023,870 116,940,874 43,274 xd 116,984,148 83712 87596 4996 83phda9 1.8 15,010,414 116,544,849 42,944 xd 116,587,793 86182 86305 6319 83 .1194 nncpnncp is a free, experimental file compressor by Fabrice Bellard, released May 8, 2019. It uses a neural network model with dictionary preprocessing described in the paper Lossless Data Compression with Neural Networks. Compression of enwik9 uses the options: 123456789./preprocess c out.words enwik9 out.pre 16384 512./nncp -n_layer 7 -hidden_size 384 -n_embed_out 5 -n_symb 16388 -full_connect 1 -lr 6e-3 c out.pre out.binVersion 2019-11-16 was released Nov. 16, 2019. It was run in 8 threads. Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Notes------- ------- ---------- ----------- ----------- ----------- ------ ------ ----- --- -----nncp 2019-05-08 16,791,077 125,623,896 161,133 xd 125,785,029 420168 602409 2040 LSTM 84nncp 2019-11-16 16,292,774 119,167,224 238,452 xd 119,405,676 826048 1156467 5360 LSTM 84 .1263 paq8pxd_v48_bwt1paq8pxd_v47 is one the latest versions in the following PAQ series of open source (GPL) context mixing archivers. p5, p6, and p12 (Matt Mahoney, May 13, 2000) use a neural network with 256K or 4M inputs, no hidden layer and a single output to predict the next bit of input, given hashes of various contexts to select active inputs. The output is arithmetic coded. p5 uses 1 MB memory and context orders 0 to 3. p6 uses 16 MB and orders 0-5. p12 uses 16 MB, orders 1-4 and word-level orders 0-1 as an optimization for text. The programs take no options. The algorithm is described in M. Mahoney, Fast Text Compression with Neural Networks, Proc. AAAI FLAIRS, Orlando, 2000 (C) 2000, AAAI. paq1 (Matt Mahoney, Jan. 6, 2001) replaces the neural network in p5, p6, p12 with a fixed weighted averaging of model outputs. Described in an unpublished report, M. Mahoney, The PAQ1 Data Compression Program, 2002. paq6 (Matt Mahoney and Serge Osnach, Dec. 30, 2003) evolved as a series of improvements to paq1. It is described in M. Mahoney, Adaptive Weighing of Context Models for Lossless Data Compression, Florida Tech. Technical Report CS-2005-16, 2005. The most significant improvements are replacing the fixed model weights with adaptive linear mixing (Matt Mahoney), and SSE (secondary symbol estimation) postprocessing on the output probability, and modeling of sparse contexts (Serge Osnach). Other models were added for x86 executable code, and automatic detection of fixed length records in binary data. Intermediate versions can be found here. paqar 4.5 (Alexander Rhatushnyak, Feb. 13, 2006) is the last of a long series of improvements to paq6 by Alexander Rhatushnyak (paqar: multimixer model, .exe preprocessor, other model improvements), Przemyslaw Skibinski (WRT text preprocessing), Berto Destasio (model tuning), Fabio Buffoni (speed optimizations), David. A Scott (arithmetic coder optimizations), Jason Schmidt (model improvements), and Johan de Bock (compiler optimizations). For text, the biggest improvement was from WRT (Word Reducing Transform), which replaces words with shorter codes from an external English dictionary to PAsQDa 1.0 on Jan. 18, 2005. WRT is described in P. Skibiński, Sz. Grabowski, and S. Deorowicz, Revisiting dictionary-based compression, Software - Practice &amp; Experience, 35 (15), pp. 1455-1476, December 2005. There were a great number of versions by many contributors, mostly in 2004 when the PAQ series moved to the top of most compression benchmarks and attracted interest. Prior to PAQ, the top ranked programs were generally closed source. paq8f (Matt Mahoney, Feb. 28, 2006) evolved from paq7 (Dec. 24, 2005) as a complete rewrite of paq6/paqar. The important improvements were replacing the adaptive linear mixing of models with a neural network (coded in MMX assembler), a more memory-efficient mapping of contexts to bit histories using a cache-aligned hash table, adaptive mapping of bit histories to probabilities, and models for bmp, tiff, and jpeg images. It models text using whole-word contexts and case folding, like all versions back to p12, but lacks WRT text preprocessing. It served as a baseline for the Hutter prize. Details are in the source code comments. paq8g (Przemyslaw Skibinski, Mar. 3, 2006) adds back WRT text preprocessing. paq8h (Alexander Rhatushnyak, Mar. 24, 2006) added additional contexts to the neural network mixer. It was top ranked on enwik9 (but not enwik8) when the Hutter prize was launched on Aug. 6, 2006. This is the 78’th version since p5. raq8g by Rudi Cilibrasi, released 0721Z Aug. 16, 2006, is a modification of paq8f. It adds a NestModel to model nesting of parenthesis and brackets. The test below for -7 is based on a Windows compile, raq8g.exe. The test for -8 was under Linux. The unzipped Linux executable is 27,660 bytes. paq8j by Bill Pettis, Nov. 13, 2006, is based on paq8f (no dictionary) with model improvements taken from paq8hp5. It is a general purpose compressor like paq8f, not specialized for text. paq8ja.zip by Serge Osnach, Nov. 16, 2006, is an improvement of paq8j, using additional contexts based on character classifications. paq8jb.zip by Serge Osnach, Nov. 22, 2006, adds contexts using the distance to an anchor byte (x00, space, newline, xff) combined with previous characters. The -8 test caused some minor disk thrashing at 2 GB memory under WinXP Home (82% CPU usage). Time reported is wall time. paq8jc.zip by Serge Osnach, Nov. 28, 2006, improves the record model for better compression of some binary files, although it is slightly worse for text. Time for -8 is wall time at 72% CPU usage. paq8jd by Bill Pettis, Dec. 30, 2006, improves on paq8j with additional SSE (APM) stages. enwik8 -8 caused some disk thrashing at 2 GB memory. paq8k is by Bill Pettis, Feb. 13, 2007. paq8l by Matt Mahoney, Mar. 8, 2007, is based on paq8jd. It adds a DMC model and minor improvements. paq8fthis2 by Jan Ondrus, Aug. 12, 2007, is paq8f with an improved model for compressing JPEG images. It is otherwise archive compatible with paq8f for data without JPEG images (such as enwik8 and enwik9). paq8n by Matt Mahoney, Aug. 18, 2007, combines paq8l with the JPEG model from paq8fthis2. paq8o and paq8osse by Andreas Morphis, Aug 22 2007, is paq8n with an improved model for .bmp images. There are two executables that produce identical archives. paq8o.exe is for Pentium MMX or higher. paq8osse.exe is for newer processors that support SSE2 instructions like the Pentium 4. It is about 8% faster, but uses more memory. Both use the same C++ source but use different (but equivalent) assembler code to implement the neural network mixer. paq8osse.exe was compiled with Intel C++, which produces slightly faster executables than g++ used in earlier versions. The current version is paq8o ver. 2 (Aug. 24, 2007), which fixes the file name extension (was .paq8n) but does not change compression. The benchmark is based on the first version. paq8o3 by KZ, Sept. 11, 2007, combines paq8o with an improved JPEG model from paq8fthis3 (Jan Ondrus, Sept. 8, 2007) and an improved model for grayscale PGM images from paq8i (Pavel Holoborodko, Aug. 18, 2006). Text compression is unchanged from paq8l, paq8m, paq8o, or paq8o2. paq8o4 v1 by KZ, Sept. 15, 2007, includes a grayscale .bmp model (based on the grayscale PGM model). Text compression is unaffected. It was compiled with Intel C++. paq8o4 v2 by Matt Mahoney, Sept. 17, 2007, is a port to g++ which allows wildcards, directory traversal, and directory creation, but is 8% slower. It is archive compatible with v1. paq8o6 by KZ, Sept. 28, 2007, is based on paq8o5 by KZ, Sept. 21, 2007 with the improved JPEG model from paq8fthis4 by Jan Ondrus, Sept. 27, 2007. paq8o5 is paq8o4 with an improved StateMap from lpaq1. The improved compression of enwik8 comes from this StateMap. Compression of enwik8 is unchanged from paq8o5 to paq8o6. paq8o7 by KZ, Oct. 16, 2007, improves paq8o6 with improved JPEG compression and support for 4 and 8 bit BMP images. Text is not affected. paq8o8 by KZ, Oct. 23, 2007, improves paq8o7 with improved JPEG compression further. paq8o8-jun7 is a DOS port of paq8o8 by Rugxulo, June 7, 2008. paq8o10t is by KZ, June 11, 2008. Discussion. paq8p3 is by KZ, Apr. 19, 2009. paq8p3 v2 is by KZ, Apr. 21, 2009. paq8px_v60_turbo (source code and discussion) was by Jan Ondrus (with contributions from many others), June 20, 2009, and speed optimized by LovePimple on July 11, 2009. By default the turbo version runs in high priority under Windows, but was tested at normal priority. The v60 version was released after a long period of development beginning with v1 on Apr. 25, 2009. Development was aimed mostly at improving x86, image and wav compression. Decompression was not verified. paq8px_v69 was released Apr. 26, 2010. paq8pxd by kaitz, Jan. 21, 2012, modifies paq8px_v69 by adding dynamic dictionary preprocessing (based on XWRT), UTF-8 detection, and an alternating byte sparse model. paq8pxd_v2 by kaitz (KZo) was released Feb. 11, 2012. paq8pxd_v3 by kaitz (KZo) was released Feb. 23, 2012. Modified im8model, base64 in email model, and fixes false image detection in enwik9. paq8pxd_v4 by kaitz was released Apr. 19, 2012. Adds 4 bit bmp model, base64 fixes, combines WRT source code and has other fixes. paq8pxd_v5 by kaitz was released Apr. 18, 2013. paq8pxd_v7 by kaitz was released Aug. 14, 2013. paq8pxd_v8 by kaitz was a temporary release on June 16, 2014. It was still under development to fix bugs causing it to fail on JPEG and WAV input, but there were no errors for enwik8 or enwik9. To test, it was compiled from source under 64 bit Ubuntu using g++ 4.8.1 -O3. paq8pxd_v10fix by kaitz was released June 21, 2014. It was compiled from source under 64 bit Ubuntu, g++ 4.8.1 -O3. paq8pxd_v12 by kaitz was released July 28, 2014. It was compiled from source under 64 bit Ubuntu, g++ 4.8.1 -O3. paq8pxd_v12-skbuild, Aug. 9, 2014, is a 64 bit port of paq8pxd_v12 by Skymmer with work by AlexDoro adding options -9 and -10, each of which doubles memory usage from the previous level. paq8pxd_v13_x64 is the 64 bit compile by Skymmer of paq8pxd_v13fix3 by kaitz on Aug. 26, 2014. It supports levels up to 15 using 25955 MB memory. paq8pxd_v15 was released Sept. 17, 2014. It has options -s1…-s15 and -f1…-f15 which mean slow or fast respectively. Higher levels use more memory. Faster methods use fewer models. Levels 9 and higher require a 64 bit compile. To test, the program was compiled with g++ 4.8.2 for 64 bit Ubuntu with option -O3. paq8pxd_v12_biondivers1_x64 is a 64 bit build of v12 by Luca Biondi, Oct. 27, 2014. paq8pxd_v18 by kaitz was released July 18, 2016. Options -{qfs} select quick, fast, slow, followed by a number selecting memory usage. paq8px_v77 was released July 10, 2017. paq8px_v32 and pax8pxd_v96 with DRT and split preprocessing of enwik9 were released Aug. 29, 2017. paq8pxd_v47 was released Mar. 18, 2018. paq8pxd_v48_bwt1 was released Aug. 9, 2018. paq8pxd_v61 was released Feb. 23, 2019. Resplit package. Options select memory usage as shown in the table. Early versions took no options. Most versions were not tested on enwik9 due to their slow speed. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ----p5 31,255,092 9,298 s 3421 1 6p6 25,377,998 9,421 s 4190 16 6p12 24,714,219 9,598 s 4160 16 6paq1 22,156,982 16,436 s 7800 7790 50paq6 v2 -8 19,589,267 26,548 s 47624 808paqar 4.5 -7 18,388,609 414,164 s 118690 119010 470paq8f -7 18,289,559 34,371 x 68960 854 -8 18,075,265 34,371 x 69170 1693paq8g -7 17,817,246 804,867 s 44130 854paq8h -7 17,674,700 147,195,723 801,612 s 147,997,335 56511 57278 854 5raq8g -7 18,132,399 33,483 x 84555 84793 1089 -8 17,923,022 27,660 x 337430~330000 2095 17 -8 17,923,022 27,660 x 196540~196000 2095 15paq8j -7 18,208,284 39,366 s 138030 138260 959 -8 17,991,628 39,366 s 138990 136500 1896paq8ja -7 18,184,224 39,781 s 148560 143200 993 -8 17,968,233 39,781 s 154700 153990 1965paq8jb -7 18,180,081 39,982 s 148570 148200 1009 -8 17,964,363 39,982 s 188590 190190 1999paq8jc -7 18,185,705 40,064 s 150910 152080 1017 -8 17,970,943 40,064 s 224410 234900 2015paq8jd -7 18,158,159 40,460 s 157340 156350 1030 -8 17,943,042 40,460 s 406730 2028paq8k -8 18,239,915 41,881 s 457150 1463paq8l -6 18,518,485 35,955 x 133910 435 -7 18,168,563 35,955 x 134770 837 -8 17,916,450 35,955 x 136000 136390 1643paq8fthis2 -8 18,075,265 34,846 x 69100 69310 1693paq8n -8 17,916,420 37,402 x 134880 135480 1643paq8o -8 17,916,451 42,389 s 135850 135260 1643paq8osse -8 17,916,451 42,290 s 125260 124570 1778paq8o3 -8 17,916,450 43,745 s 134580 134530 1636paq8o4 v1 -8 17,916,450 43,876 s 126780 126560 1636paq8o6 -8 17,904,721 44,883 s 139530 139520 1712paq8o7 -8 17,904,756 45,979 s 139140 138530 1574paq8o8 -8 17,904,756 46,381 s 139370 139150 1574paq8o8-intel -1 22,260,679 46,381 s 24687 37 24paq8o8z-jun7 -1 22,260,679 49,085 s 25919 37 24 -1 22,260,680 29639 37 25paq8o10t -8 17,772,821 50,865 s 144250 143720 1591paq8p3 -7 18,044,229 150,709,834 57,288 s 150,767,122 72412 803 29paq8p3 v2 -7 17,990,788 86891 803 29 -8 17,759,875 87305 1574 29paq8px_v60_turbo -8 17,733,057 146,272,609 53,846 s 146,326,455 143846 1643 26paq8px_v69 -7 17,939,225 20170 878 26paq8pxd_v1 -7 17,596,170 144,773,408 83,547 s 144,856,955 63302 811 29paq8pxd_v2 -7 17,045,653 94280 853 29 -8 16,848,214 95350 1658 29paq8pxd_v3 -7 17,045,354 140,110,094 72,976 s 140,183,094 80069 853 29 -8 16,847,903 136,777,893 72,976 s 136,850,869 82822 1658 29paq8pxd_v4 -8 16,642,941 135,027,170 67,766 s 135,094,936 88409 1633 29paq8pxd_v5 -8 16,699,597 67,745 s 114960 116450 1633 26paq8pxd_v7 -8 16,606,773 134,791,909 70,210 s 134,862,119 93751 1633 29 paq8pxd_v8 -8 16,607,759 134,781,085 72,059 s 134,853,144 59387 54611 1521 48paq8pxd_v10fix -8 16,607,760 134,780,308 72,382 s 134,852,690 37177 54433 1633 48paq8pxd_v12 -8 16,577,460 134,452,453 81,196 s 134,533,649 54812 54506 1586 48paq8pxd_v12-skbuild -10 16,372,331 129,827,930 422,400 s 130,250,330 28313 6500 65paq8pxd_v13_x64 -15 16,595,606 131,598,576 83,499 s 131,682,075 29924 25955 65paq8pxd_v15 -s9 16,437,892 131,992,226 88,538 s 132,080,764 54993 55067 3243 48 -f9 17,838,013 11980 11760 1555 48paq8pxd_v12_bio -11 16,361,221 129,435,477 82,111 s 129,517,588 30537 13000 65paq8pxd_v18 -q8 27,789,833 237,862,503 100,521 s 237,963,024 738 144 80 -q9 27,674,156 235,259,956 100,521 s 235,360,477 794 288 80 -f8 17,896,675 146,238,833 100,521 s 146,339,354 8725 762 80 -f9 17,814,539 6696 1482 80 -f10 17,790,248 7401 2666 80 -f11 18,081,957 7082 5034 80 -f12 18,078,461 8755 5674 80 -s8 16,516,558 134,561,662 100,521 s 134,662,183 75267 2298 80 -s9 16,370,991 65814 4552 80 -s10 16,308,754 65233 7448 80 -s15 16,345,626 129,125,083 100,521 s 129,225,607 46698 46608 37878 79paq8px_v77 -8 17,629,076 145,454,919 62,154 s 145,517,073 86266 86192 1625 48drt|paq8px_v96 -8 16,704,802 137,170,609 167,886 s 137,338,495 63618 64113 1700 81paq8pxd_v32 -s15 16,254,271 128,209,407 144,756 s 128,354,163 41418 43518 27278 81paq8pxd_v47 -s15 16,080,717 127,404,715 139,841 s 127,544,556 75022 75611 27500 81paq8pxd_v48_bwt1 -s14 16,004,759 126,183,029 153,295 s 126,336,324 579894 51865 81paq8pxd_v61 -15 15,968,477 126,587,796 194,704 s 126,782,500 98571 98751 41200 81 .1277 durilca durilca and durilca’light 0.5 by Dmitry Shkarin (Apr. 1, 2006) are closed source, experimental command line file compressors based on ppmd/ppmonstr with filters for text, exe, and data with fixed length records (wav, bmp, etc). durilca’light is a faster version with less compression. Unfortunately both crash on enwik9. Decompression is verified on enwik8. The -m700 option selects 700 MB of memory. (It appears to use substantially more for enwik9 according to Windows task manager). -o12 selects PPM order 12 (optimal for enwik9 -t0). -t0 (default) turns off text modeling, which hurts compression but is necessary to compress enwik9 (although decompression still crashes). -t2(3) turns on text preprocessing (dictionary; thus the increased decompresser size). -t2 also supports 3 additive flags (4, 8, 16) which have no effect on this data, thus -t2(31) or -t2 (default is 31) give the same compression as -t(3). durilca 0.5(Hutter) was released 1457Z Aug. 16, 2006. It does not use external dictionaries. When run with 1 GB memory (-m700), -o13 is optimal. With 2 GB (-m1650), -o21 is optimal. The unzipped .exe file is 86,016 bytes. durilca4linux_1 (0825Z Aug 23 2006) is a Linux version of durilca 0.5(Hutter) which successfully compresses enwik9 and decompresses with UnDur (23,375 bytes zipped, 42,065 bytes uncompressed). All versions of durilca require memory specified by -m plus memory to read the input file into memory. In Windows, this exceeds the 2 GB process limit regardless of available RAM and swap. Thus, enwik9 compresses only under Linux with 2 GB real memory and 1 GB additional swap. The -o12 option is optimal for enwik9 (tested under 64 bit SuSE 10.0 by the author), -o24 for enwik8 (verified by me under 64 bit Ubuntu 2.6.15). durilca4linux_2 (Oct. 16, 2006) is a closed source Linux version specialized for this benchmark. It includes a warning that use on other files may cause data loss. It requires AMD64 Linux and 3 GB of memory (2 GB for enwik8). The decompresser files (EnWiki.dur and UnDur) are contained within a 241,322 byte zip file in the rar distribution. To compress: 12./DURILCA d EnWiki.dur./DURILCA e -m1800 -o10 -t2 enwik9 To decompress: 12./UnDur EnWiki.dur./UnDur enwik9.dur The first step extracts a compressed dictionary. It is organized in a similar manner to paq8hp2-paq8hp5 in that syntactically related words and words with the same suffix are grouped together. Results are reported by the author under Suse Linux 10.0. I verified enwik8 only (6480 ns/b to compress on a 2.2 GHz Athlon 64 with 2 GB memory under Ubuntu Linux). enwik9 caused disk thrashing. durilca4linux_3 (dictionary version v1) was released Feb. 21, 2008. Like version 2, it requires extraction of EnWiki.dur before compressing or decompressing, and may not work with files other than enwik8 and enwik9. As tested, requires 64-bit Linux, 4 GB RAM, and 5 GB RAM+swap. undur3 v2 contains an improved dictionary (version v2), released Apr. 22, 2008, for DURILCA4Linux_3. The compression and decompression programs are the same. The decompression program UnDur (Linux executable) is included. To compress, download durilca4linux_3 and replace the dictionary (EnWiki.dur) with this one. The options are -m3600 (3600 MB memory), -o14 (order 14 PPM), -t2 (text model 2). undur3 v3, released May 22, 2008, uses an improved dictionary but the same compressor and decompresser as v1 and v2. The dictionary contains 123,995 lowercase words separated by NUL bytes. Of these, 5579 words occur more than once (wasted space?) I tested options -m1500 under Ubuntu Linix with 2 GB memory. At -m1500 top reports 2157 MB virtual memory and 1894 MB real memory. -m1600 caused disk thrashing. durilca kingsize (July 21, 2009) runs under 64 bit Windows and requires 13 GB memory. It is designed to work only on this benchmark and not in general. The dictionary file EnWiki.fsd must be extracted first from EnWiki.dur before compression or decompression. Requires msvcr90.dll. enwik8 can be compressed with -m1200 (1.2 GB). durilca4_decoder is a new dictionary for durilca’kingsize (above), Nov. 12, 2009. It is reported as “durilca’kingsize_4” below. Decompression time is reported to be 1411.88 sec with “durilca d” and 1796.98 sec with “UnDur”. enwik8 compresses with 1200 MB (-m1200) in 157.38 sec. 12345678910111213141516171819202122232425262728293031323334 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Notes------- ------- ---------- ----------- ----------- ----------- ----- ----- ----- durilca'light 0.5 -m650 -o12 21,089,993 178,562,475 1,495,422 x 180,057,897 1227 (fails) durilca 0.5 -m700 -o12 -t0 19,227,202 162,117,578 74,292 x 162,191,870 4140 (fails) -m800 -o128 19,321,003 164,298,178 74,292 x 165,372,470 7718 (fails) -m700 -o12 -t2(3) 18,520,589 (fails) 1,507,312 x 3330 3940durilca 0.5(Hutter) -m700 -o13 -t2 18,128,339 (fails) 77,295 x 5905 -m1650 -o21 -t2 17,958,687 (fails) 77,295 x 6140 6140durilca4linux_1 -m700 -o13 -t2 18,128,334 23,375 xd 5950 5880 -m1750 -o12 -t2 18,027,888 146,521,559 23,375 xd 146,544,934 5500 7301 18 -m1750 -o24 -t2 17,949,422 23,375 xd 6190 6780durilca4linux_2 -m1800 -o10 '-t2(11)' 17,002,831 136,536,189 241,322 xd 136,777,511 4249 4827 18 -m1800 -o10 -t2 16,998,300 136,596,818 241,322 xd 136,838,140 4405 4894 18durilca4linux_3 v1 -m3600 -o14 -t2 16,356,063 129,933,145 345,957 xd 130,279,102 3649 3715 18 -m1200 -o32 -t2 16,348,796 4170 4178 18durilca4linux_3 v2 -m3600 -o14 -t2 16,323,581 129,670,441 344,525 xd 130,014,966 3628 3639 18 -m1200 -o32 -t2 16,316,255 4148 4157 18durilca4linux_3 v3 -m3600 -o14 -t2 16,292,414 129,469,384 339,990 xd 129,809,374 3624 3627 18 -m1200 -o32 -t2 16,285,285 4135 4138 18 -m1500 -o6 -t2 16,517,051 133,674,565 3852 -m1500 -o7 -t2 16,418,799 132,239 495 4006 -m1500 -o8 -t2 16,368,632 131,722,213 4149 -m1500 -o9 -t2 16,335,259 131,549,901 339,990 xd 131,889,891 4261 4344 -m1500 -o10 -t2 16,316,775 131,574,739 4405 -m1500 -o11 -t2 16,306,086 131,707,901 4544 -m1500 -o12 -t2 16,299,411 131,807,298 4554 -m1500 -o14 -t2 16,292,414 132,238,662 4763 -m1500 -o16 -t2 16,289,512 132,516,825 4879 -m1500 -o32 -t2 16,285,285 134,238,759 5440durilca'kingsize -m13000 -o40 -t2 16,258,380 127,695,666 333,790 xd 128,029,456 1413 1805 31 -m22500 -o40 -t2 127,695,666 1806 1814 34durilca'kingsize_4 -m13000 -o40 -t2 16,209,167 127,377,411 407,477 xd 127,784,888 1398 1797 31 16,209,167 127,377,411 1788 1802 34 .1301 cmve cmv 00.01.00 is a free, closed source, experimental file compressor for 32 bit Windows by Mauro Vezzosi, Sept. 6, 2015. It uses context mixing. Option “2,3,+” selects max compression (2), max memory (3), and a large set of models (+). A hex bitmap for this argument turns individual models on or off. Note 48 timings are for enwik8 only. cmv 00.01.01 was released Jan. 10, 2016. It is compatible with 00.01.00 and does not change the compression ratio. cmve 0.2.0 was released Nov. 28, 2017. 1234567Program Options enwik8 enwik9 zip size Total Comp Deco Cmem Dmem Alg Note-------- ----------- ---------- ----------- --------- ----------- ---- ---- ---- ---- ---- ----cmv 00.01.00 -m2,3,+ 18,218,283 150,226,739 77,404 x 150,304,143 285750 293090 2817 2817 CM 48,75 150,226,739 77,404 x 150,304,143 216000 2801 CM 75 -m2,3,0x03ededff 18,153,319 720000 ~3900 CM 75cmv 00.01.01 -m2,3,0x03ed7dfb 18,122,372 149,357,765 77,404 x 149,435,169 426162 394855 3335 3335 CM 75cmve 0.2.0 -m2,3,0x7fed7dfd 16,424,248 129,876,858 307,787 x 130,184,645 1140801 19963 CM 81 .1323 paq8hp12any paq8hp12any was developed as a fork of the PAQ series of open source context mixing compressors by Alexander Rhatushnyak. It was forked from the paq8 series developed largely by Matt Mahoney, and uses a dictionary preprocessor (xml-wrt) originally developed by Przemyslaw Skibinski as a separate program and later integrated. All versions are optimized for the Hutter prize. Thus, they are tuned for enwik8. The 12 versions are described below in chronological order. They originally were located here (link broken) and can now be found here (as a zpaq archive) (as of Sept. 16, 2009). All programs are free, GPL open source, command line archivers. Most take a single option controlling memory usage. Note: these programs are compressed with upack, which compresses better than upx. Some virus detectors give false alarms on all upack-compressed executables. The programs are not infected. paq8hp1 by Alexander Rhatushnyak, 1945Z Aug. 21, 2006. It is a modification of paq8h using a custom dictionary tuned to enwik8 for the Hutter prize. Because the Hutter prize requires no external dictionaries, the dictionary is spliced into the .exe file during the build process. When run, it creates the dictionary as a temporary file. The program must be run in the current directory (not in your PATH or with an explicit path), or else it can’t find this file. The unzipped paq8hp1.exe is 206,764 bytes. Decompression was verified for enwik8 (60730 ns/b for -8, 60660 ns/b for -7). enwik9 is pending. paq8hp2 (source code) by Alexander Rhatushnyak, 0233Z Aug. 28, 2006 is an improved version of paq8hp1 submitted for the Hutter prize. paq8hp2.exe size is 205,276 bytes. It differs from paq8hp1 mainly in that the 43K word dictionary for 2-3 byte codes is sorted alphabetically. The 80 most frequent words, coded as 1 byte before compression, are grouped by syntactic type (pronoun, preposition, etc). paq8hp3 (source code) by Alexander Rhatushnyak, released Aug. 29, 2006 is an improved version of paq8hp2 submitted for the Hutter prize on Sept. 3, 2006. The 80 dictionary words coded with 1 byte and 2560 words coded with 2 bytes are organized into semantically related groups or by common suffixes. The 40,960 words with 3 byte codes are sorted from the last character in reverse alphabetical order. paq8hp3.exe is 178,468 bytes unzipped. enwik9 decompression is not yet verified. For enwik8, decompression is verified with time 60300 ns/b compression, 60220 ns/b decompression. paq8hp4 (source code) by Alexander Rhatushnyak, released and submitted for the Hutter prize on Sept. 10, 2006, is an improved version of paq8hp3. The dictionary is further organized into semantically related groups among 3-byte codes. The unzipped size of paq8hp4.exe is 206,336 bytes. paq8hp5 (source code) by Alexander Rhatushnyak, released Sept. 20, 2006, is an improved version of paq8hp4, submitted for the Hutter prize on Sept. 25, 2006. The unzipped size of paq8hp5.exe is 174,616 bytes (in spite of a slightly larger dictionary). The dictionary size is optimized for enwik8; a larger dictionary would improve compression of enwik9. Decompression is verified for enwik8 only (-8 at 74640 ns/b). A Linux port of paq8hp5 is by Лъчезар Илиев Георгиев (Luchezar Georgiev), Oct 26, 2006 (mirror). paq8hp6 (source code) by Alexander Rhatushnyak, released Oct. 29, 2006, is an improved version of paq8hp5. It was submitted as a Hutter prize candidate on Nov. 6, 2006. Unzipped paq8hp6.exe size is 170,400 bytes. The -8 option was not tested on enwik9 due to disk thrashing on my 2 GB PC. Compression was about 25% finished after 9 hours. paq8hp7a by Alexander Rhatushnyak, Dec. 7, 2006, was intended to supercede paq8hp6 as a Hutter prize entry, then was withdrawn on Dec. 10, 2006 with the release of paq8hp7. Unzipped executable size is 151,664 bytes. -8 for enwik9 (but not enwik8) caused disk thrashing on my computer (2 GB, WinXP). paq8hp7 (source code) by Alexander Rhatushnyak, Dec. 10, 2006, as a Hutter prize entry. Unzipped paq8hp7.exe size is 152,556 bytes. paq8hp8 (source code) by Alexander Rasushnyak, Jan. 18, 2007, as a Hutter prize entry (replacing an incorrect version posted 2 days earlier). Unzipped size is 152,692 bytes. The dictionary is identical to paq8hp7. paq8hp9 (mirror) (source code) by Alexander Rhatushnyak, Feb. 20, 2007, is a Hutter prize entry. Only the -7 option works. The unzipped size of paq8hp9.exe is 112,628 bytes. paq8hp9any (Feb. 23, 2007) by Alexander Rhatushnyak is a paq8hp9 -7 compatible version with external dictionary where all options work. However the zipped program is larger and -8 was not tested due to disk thrashing, so results are unchanged. paq8hp10 (Mar. 26, 2007) by Alexander Rhatushnyak was derived from paq8hp9 as a Hutter prize entry. The unzipped size is 103,224 bytes. Only the -7 option works. paq8hp10any (source code), Mar. 31, 2007, by Alexander Rhatushnyak is archive compatible with paq8hp10 -7 but works with other memory options. When run, paq8hp10.exe and both dictionary files should be in the current directory. This program is not a Hutter prize entry. paq8hp11 (mirror) by Alexander Rhatushnyak, Apr. 30, 2007, is a Hutter prize entry. paq8hp11.exe is 99,816 bytes. Like paq8hp10, it works only with the -7 option. 12To compress: paq8hp11 -7 enwik8.paq8hp11 enwik8To decompress: paq8hp11 enwik8.paq8hp11 paq8hp11any (source code) by Alexander Rhatushnyak, May 2, 2007, is a paq8hp11 variant that accepts any memory option. It was optimized for speed rather than size. It includes two dictionary files which must be present in the current directory when run, unlike paq8hp11 where the dictionary is self extracted. -8 selects 1850 MB memory. -7 produces the same archive as paq8hp11. Run speeds for -8 enwik8 are 76770+76820 ns/B. paq8hp12 (mirror) by Alexander Rhatushnyak, May 14, 2007, is a Hutter prize entry. paq8hp12.exe size is 99,696 bytes. It works only with the -7 option like paq8hp11. paq8hp12any (source code) by Alexander Rhatushnyak, May 20, 2007, is a paq8hp12 variant that accepts any memory option (like paq8hp11any). The -7 option produces an archive identical to that of paq8hp12. paq8hp12any was updated on Jan. 9, 2009 to fix a compiler issue and add a 64 bit Linux version. Compressed file format was not changed. It was not retested. Options select memory usage as shown in the table. 123456789101112131415161718192021222324252627282930 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ----paq8hp1 -7 17,566,769 205,783 x 60170 60660 748 -8 17,397,023 142,477,977 205,783 x 142,683,760 63317 1595paq8hp2 -7 17,390,490 204,557 x 62000 62330 747 -8 17,223,661 141,145,684 204,557 x 141,350,241 65323 1584paq8hp3 -7 17,241,280 177,477 x 61360 59690 742 -8 17,085,021 139,905,045 177,477 x 140,082,522 63420 1586paq8hp4 -7 17,039,173 198,525 x ~65000 65110 755 -8 16,889,237 138,188,695 198,525 x 138,387,220 67956 68120 1598paq8hp5 -7 16,898,402 161,887 x 76300 77710 900 19 -8 16,761,044 137,017,311 161,887 x 137,179,198 ~85153 75162 1787paq8hp6 -7 16,731,800 138,828,889 166,715 x 138,995,604 74953 73707 941 -8 16,568,451 135,281,289 166,715 x 135,448,004 60865 1807 21paq8hp7a -7 16,592,672 137,441,743 150,678 x 137,592,421 79795 940 -8 16,431,239 150,678 x 76940 77600 1790paq8hp7 -7 16,579,500 151,633 x 79620 79660 940 -8 16,417,646 133,835,408 151,633 x 133,987,041 66074 1850 21paq8hp8 -7 16,528,353 151,711 x 79580 79970 940 -8 16,372,960 133,271,398 151,711 x 133,423,109 64639 1849 22paq8hp9 -7 16,516,789 136,676,674 111,653 x 136,788,327 84529 85957 940paq8hp10 -7 16,490,947 102,256 x 86720 88890 940paq8hp10any -8 16,335,197 132,979,531 333,925 x 133,313,456 55639 1849 22paq8hp11 -7 16,459,515 98,851 x 129540 128530 947paq8hp11any -8 16,304,862 132,757,799 327,608 s 133,085,407 57503 1850 22paq8hp12 -7 16,381,959 98,745 x 130820 131480 936paq8hp12any -7 16,381,959 330,700 x 78860 76190 941 -8 16,230,028 132,045,026 330,700 x 132,375,726 56993 1850 22 -8 16,230,028 132,045,026 330,700 x 132,375,726 37660 37584 1850 41 paq8hp1 through paq8hp12 can be used as a preprocessor to other compressors by compressing with option -0. In the following tests on ppmonstr, options were tuned for the best possible compression of enwik8 with 2 GB memory (1.65 GB available under WinXP). The xml-wrt 2.0 options are -l0 -w -s -c -b255 -m100 -e2300 (level 0, turn off word containers, turn off space modeling, turn off containers, 255 MB buffer for dictionary, 100 MB buffer, 2300 word dictionary). The xml-wrt 3.0 options are -l0 -b255 -m255 -3 -s -e7000 (-3 = optimize for PPM). xml-wrt prepends the dictionary to its output. To make the comparison fair, the compressed size of the dictionary must be added. This is done in two ways, first by compressing the preprocessed text and dictionary and adding the compressed sizes, and second by prepending the dictionary to the preprocessed text before compression. The first method compresses about 1-2 KB smaller. The uncompressed size of each dictionary for paq8hp1 through paq8hp4 is 398,210 bytes. They contain identical words, but in different order. The first two dictionaries are identical. They compress smaller because they are sorted alphabetically. The dictionary for paq8hp5 is 411,681 bytes. It contains all of the words in the first 4 dictionaries plus 1280 new words (44,880 total). 123456789101112Preprocessor Compressor enwik8 dict total dict+enwik8------------ ---------- ---------- ------- ---------- ---------paq8hp1 -0 | ppmonstr J -m1650 -o64 18,322,077 81,190 18,403,267 18,403,991paq8hp2 -0 | ppmonstr J -m1650 -o64 18,266,424 81,190 18,347,614 18,349,587paq8hp3 -0 | ppmonstr J -m1650 -o64 18,197,797 107,583 18,305,380 18,306,690paq8hp4 -0 | ppmonstr J -m1650 -o64 18,170,944 107,590 18,278,534 18,280,098paq8hp5 -0 | ppmonstr J -m1650 -o64 18,154,921 111,935 18,266,856 18,267,556xml-wrt 2.0 | ppmonstr J -m1650 -o64 18,625,624xml-wrt 3.0 | ppmonstr J -m1650 -o64 18,494,374 (none) ppmonstr J -m1650 -o16 19,062,555 ppmonstr J -m1650 -o32 19,084,964 ppmonstr J -m1650 -o64 19,098,634 The transform done by paq8hp1 through paq8hp5 is based on WRT by Przemyslaw Skibinski, which first appeared in PAsQDa and paqar, and later in paq8g and xml-wrt. The steps are as follows: The input is parsed into seqences of all uppercase letters or all lowercase letters, or one uppercase letter followed by lowercase letters, e.g. “THE”, “the”, or “The”. All uppercase words are prefixed by a special symbol (0E hex in paq8hp3, paq8hp4, paq8hp5). If a lowercase letter follows with no intervening characters (e.g. “THEre”, then a special symbol (0C hex) marks the end. (e.g. 0E “the” 0C “re”). Capitalized words are prefixed with 7F hex (paq8hp3) or 40 hex (paq8hp4, paq8hp5) (e.g. “The” -&gt; 40 “the”). All letters are converted to lower case. Words are looked up in the dictionary. The first 80 words in the dictionary are coded with 1 byte: 80, 81, … CF (hex). The next 2560 words (paq8hp1-4) or 3840 words (paq8hp5) are coded with 2 bytes: D080, D081, … EFCF (paq8hp1-4), or D080, … FFCF (paq8hp5). The last 40960 words are coded with 3 bytes: F0D080, F0D081, … FFEFCF. If a word does not match, then the longest matching prefix with length at least 6 is coded and the rest of the word is spelled. If there is no matching prefix, then the longest matching suffix with length at least 6 is coded after spelling the preceding letters. If no matching word, prefix, or suffix is found, the word is spelled. Capitalization coding occurs regardless. Any input bytes with special meaning are escaped by prefixing with 06: 06, 0C, 0E, 40 or 7F, 80-FF. WRT has additional capabilities depending on input, such as skipping encoding if little or no text is detected. The dictionary format is one word per line (linefeed only) with a 13 line header..1355 emma emma v0.1.3 is a free, closed source file compressor for 32 bit Windows by mpais, Mar. 8, 2016. It uses context mixing. It has a GUI-only interface to select compression options. For testing, all settings were for maximum compression as follows: Memory usage 512 Mb, maximum order 9, ring buffer 32 Mb, probability refinement level 3, mixing complexity insane, adaptive learning rate on, fast mode on long matches off, ludicrous complexity mode on, match model on, 32 Mb, high complexity; text model on, 128 Mb, high; sparse model on, 16 Mb, high; sparse model on, 16 Mb, high; indirect model on, 16 Mb, high; x86/64 model on, 64 Mb, insane; image models on, 80 Mb, high; audio models on, 32 Mb, high; record model on, 16 Mb, high; distance model on, 8 Mb; JPEG model on, 40 Mb, high; GIF model on, 32 Mb, high; executable code (x86/64) transform on; process conditional jumps on; colorspace (RGB) on; delta coding on; dictionaries: English on, Spanish off, Italian off, French off, Portugese off. emma v0.1.4 was released Mar. 13, 2016. For testing, the text model was increased to 256 MB. A DMC model (8 MB) was added. The non-text related models were turned off: x86, image, audio, JPEG, GIF. All transforms (x86, RGB, delta) were turned off. emma 0.1.6 ( discussion) was released Mar. 27, 2016. It was tested by splitting enwik9 into parts using hsplit to move the highly compressible middle part to the end. Then the reordered file was then processed using drt dictionary processing (see lpaq9m instead of emma’s built in dictionary and then compressed with emma with maximum compression and memory options (like below) except that dictionary processing was turned off. The decompressor size includes drt.exe, lpqdict0.dic, hsplit.exe and a BAT file to restore the original order, all compressed with emma, then those files plus emma.exe (without dictionaries) compressed into a zip archive. Specifically, enwik9 was prepared: 123456789101112fsplit32 enwik9 en1 586000000fsplit32 en1.1 en2 480000000fsplit32 en2.1 en3 424000000copy /b en3.1+en1.2+en3.2+en2.2 enwik9odel en1.1del en1.2del en2.1del en2.2del en3.1del en3.2drt enwik9o enwik9o.drtdel enwik9o before compression with emma, then restored after decompression: 123456789101112drt enwik9o.drt enwik9o dfsplit32 enwik9o en1o 894000000del enwik9ofsplit32 en1o.1 en2o 838000000fsplit32 en2o.1 en3o 424000000copy /b en3o.1+en2o.2+en1o.2+en3o.2 enwik9del en1o.1del en1o.2del en2o.1del en2o.2del en3o.1del en3o.2 The command hsplit input output N means produce output.1, output.2, etc. each of size N bytes. emma 0.1.12 was released July 10, 2016. There are 32 and 64 bit versions. The 64 bit version can use more memory. Settings were as follows: 123456789101112131415161718192021222324252627 x64 x86Memory 2048 MB 512 MBMax order 10 9Ring buffer size 128 MB 32 MBProbability refinement level 3 level 3Mixing complexity insane insaneAdaptive learning rate on offFast mode long matches off offLudicrous complexity on onMatch model 128 MB, high 32 MB, highText model 1024 MB, high 256 MB, highSparse model 64 MB, high 16 MB, highIndirect model 64 MB, high 16 MB, high86/x64 model off offImage models off offAudio models off offRecord model 64 MB, high 16 MB, highDistance model 32 MB 8 MBDMC model 32 MB 8 MBJPEG model off offGIF model off offXML model 16 MB 4 MBRAW models off offTransforms exec code off offColerspace RGB off offDelta coding off offDictionaries English English emma 0.1.22 was released Feb. 12, 2017. Settings: all settings = MAX, eceept: image and audio models = off, use fast mode on long matches = off, xml=on, x86model=off, x86 exe code = off, delta coding = off, dictionary = off, ppmd memory = 1024, ppmd order = 14 emma 1.23 was released Aug. 29, 2017. It uses ppmd_mod v3a by Shelwein and is preprocessed with DRT. EMMA 1.23 settings: all settings = MAX, eceept: image and audio models = off, use fast mode on long matches = off, xml=on, x86model=off, x86 exe code = off, delta coding = off, dictionary = off, ppmd memory = 1024, ppmd order = 14 123456789Program enwik8 enwik9 program size total Comp Decomp Mem Alg Note------- ---------- ---------- ------------ ----------- ----- ------ ---- --- ----emma 0.1.3 17,971,713 149,864,553 1,844,505 x 151,709,068 110458 113839 1336 CM 77emma 0.1.4 17,865,328 148,887,824 1,848,033 x 150,735,857 58141 980 CM 78drt|emma 0.1.16 x64 16,855,079 136,393,547 1,257,839 x 137,651,386 64341 62102 3800 CM 77emma 0.1.12 x86 17,824,974 148,403,034 1,878,971 x 150,282,005 62639 986 CM 78emma 0.1.12 x64 17,468,937 142,416,812 2,105,286 x 144,522,098 95997 3688 CM 78emma 0.1.22 16,679,420 135,169,967 1,302,363 xd 136,472,330 86187 3824 CM 81drt|emma 1.23 16,523,517 134,164,521 1,358,251 xd 135,522,772 73006 67097 3800 CM 81 .1422 zpaqzpaq 1.03 is a free, open source command line archiver by Matt Mahoney, Sept. 8, 2009. zpaq implements the proposed ZPAQ standard format for highly compressed data. The goal of the standard is to allow the development of new compression algorithms without breaking compatibility with older decompressers. ZPAQ is described by the level 1 specification and a reference decoder. The specification does not describe the encoding algorithm. It only requires that compressed files be readable by the reference decoder, which was first released with the standard on Mar. 12, 2009 (v1.00). The release followed a development period with 9 experimental and incompatible version (level 0, v0.01 through v0.09) released beginning Feb. 15, 2009. All level 1 versions from v1.00 onward are forward and backward compatible with each other. Higher levels may be introduced in the future with only a forward compatibility requirement: higher level decompressers must read archives produced by lower level compressors, back to level 1. A ZPAQ archive is organized into independently compressed blocks. Each block is divided into one or more segments which must be decompressed in sequence. Each segment represents a file or a part of a file. The standard supports both archivers and single file compressors. In the case of a compressor, no filenames are stored in the segment headers, and all the blocks and segments are concatenated to a single output file specified by the user. ZPAQ uses a streaming format that can be read or written in a single pass. The arithmetic coded data is designed so that the end of a segment can be found by scanning quickly without decoding. There is no central directory information to update when blocks are added, removed, or reordered. The ZPAQ standard requires that the decompression algorithm be described in the block headers. The header describes a collection of bitwise predictive models based loosely on PAQ components, a program to compute the bytewise contexts for each model, and a second program to perform arbitrary postprocessing on the output data. The two programs are written in an interpreted bytecode language called ZPAQL. A ZPAQ model specifies a list of 1 to 255 components. Each component outputs a prediction or probability that the next bit will be a 1. Each component may receive as input a computed 32-bit context and the output predictions of earlier components on the list. The last component’s prediction is fed to an arithmetic coder to encode or decode the next bit. The components are as follows: CONST - specifies a fixed, constant prediction. CM - context model. The context is mapped to a prediction by a table with a user specified size. Each table entry also has a count. The table is updated by adjusting the prediction to reduce the prediction error in proportion to 1/count. The count is incremented up to a user specified limit in the range 4 to 1020. ICM - indirect context model. The context is mapped to a bit history (an 8 bit state) by a hash table of user specified size. The history is mapped to a prediction by a CM with a fixed, high count limit. The history represents a count of recent 0 and 1 bits and also indicates whether the last bit was a 0 or 1. MATCH - has an output buffer and pointer table, both of user specified size. The context is mapped to a pointer into the buffer where the same context was last observed. The corresponding bit after the last match is predicted in proportion to the length of the match. AVG - Two predictions are combined by weighted averaging. The user specifies the weight. Weighted mixing is always in the logistic or “stretched” domain: stretch(p) = log(p/(1-p)). MIX2 - Two stretched predictions are combined by weighted averaging from a table of weights of a user specified size and selected by a context. After prediction, the selected weight is updated to favor the more accurate input prediction. The user specifies the adaptation rate. MIX - Like a MIX2 but over a user specified array of earlier predictions and one weight per input per context. SSE - secondary symbol estimation. A context and a stretched input prediction select an output prediction from two adjacent entries in a 2-D table by interpolation. The table is updated to reduce the prediction error of the nearer of the two entries as with a CM. The user specifies the table size in the context dimension (the probability dimension is fixed at 64), and the initial and maximum counts to determine adaptation rate. ISSE - indirect SSE. Receives a context and an earlier prediction. The context is mapped to a bit history as with an ICM. The history is mapped to the context of a MIX2 with one prediction from input and the other CONST. It has the effect of adjusting the input prediction based on the bit history of the current context. There are two ZPAQL virtual machines, one (HCOMP) to compute contexts, and one (PCOMP) to postprocess the decoded data. Each program is called once per decoded byte with that byte as input. A ZPAQL machine has the following state: An array H of 32 bit unsigned values of user specified size. In HCOMP, the elements at the beginning of the array are each assigned to a component to hold its context. An array M of 8 bit unsigned values of user specified size. 32 bit registers A, B, C, and D. A is the accumulator, the destination of most arithmetic and logical operations. It also contains the input byte when the program is executed. B and C can point into M. D can point into H. 256 registers, R0 through R255, holding 32 bit values. A flag register F holding the result of the last comparison (true or false). A 16 bit program counter. Most instructions are either 1 byte or 2 bytes with an 8 bit operand (0..255). There is one 3 byte instruction (16 bit jump). The possible instructions are assignment, swap, add, subtract, multiply, divide, mod, and, or, xor, not-and, left shift, right shift, less than, equals, greater than, increment, decrement, complement, jump, conditional jump, hash, output, and halt. The hash instruction is convenient for updating a context hash with an input byte by the formula hash := (hash + byte + 512) * 773. zpaq 1.03 takes as input a configuration file which describes the arrangement of components, their parameters, and the ZPAQL program HCOMP written one token per byte in a C-like syntax (e.g. “A=B” to assign B to A). PCOMP is not specified because in general the preprocessing step by the compressor is different (and usually more complex) than the postprocessing step. Instead, zpaq 1.03 provides the option of two built-in preprocessors, LZP and E8E9. If selected, the preprocessing is done in C++ by the compressor, and the compressor generates ZPAQL code to perform the inverse transform and insert it into the archive block header. (PCOMP is actually appended to the beginning of the input data and compressed with it. HCOMP is not compressed). E8E9 is used to improve compression of 32 bit x86 executable files. It replaces the 32 bit relative address after a CALL or JMP (0xE8 or 0xE9) x86 instruction by adding the offset from the beginning of the file. This improves compression because often there are several calls to the same target. PCOMP performs the inverse transform in ZPAQL by subtracting the offset. LZP encodes long string matches as an escape byte and length byte. The decompresser maintains a rolling context hash which indexes a pointer table (the H array) into the output buffer (the M array) pointing to the previous context match. If an escape is present, then the indicated number of bytes are copied from the previous context match. In zpaq 1.03, the user can specify the sizes of M and H, the hash multiplier (effectively choosing the context length), the value to use as the escape byte (preferably occurring rarely in the input), and minimum match length. Escape bytes in the input are encoded as an escaped 0 length. zpaq 1.03 is distributed with three configuration files, min.cfg (for speed), mid.cfg (the default), and max.cfg (for good compression). However, the user can also write their own config files. o0.cfg, o1.cfg, and o2.cfg are order 0, 1, and 2 models with a single CM and direct context lookup with no hashing. o0 is equivalent to fpaq0. In each of the models the asymptotic learning rate was tuned for maximum compression. Other values are given as comments in the sources. The CM uses 2KB, 512KB and 128MB respectively. min.cfg uses LZP preprocessing with a minimum match length of 3 and an order 4 context hash, followed by compression by single CM with an order 3 context and 512K entries. The LZP has a 1 MB output buffer and 256K index. It uses 4 MB memory. mid.cfg (the default) does no preprocessing. It has an order 0 ICM, a chain of ISSE with context orders 1 through 5, each taking the previous ISSE as input, a MATCH with an order 7 context, and a final MIX with an order 1 context taking input from all other models. It uses 111 MB memory. max.cfg does no preprocessing. It has 21 components: an order 0 ICM, a chain of order 1, 2, 3, 4, 5, 7 ISSE, an order 8 MATCH, a wordwise order 0-1 ICM-ISSE chain (for text), sparse order 1 ICM with gaps of 1, 2, and 3, a partially masked order 2 ICM with a gap of 216 for CCITT images (calgary/pic), order 0 and 1 mixers taking a CONST and all previous components as input and averaged together with a context free MIX2, followed by a chain of order 0 and 1 SSE each partially bypassed by a context free and order 0 MIX2, and a final context free MIX of all other components. The two wordwise contexts depend on the current and previous case insensitive sequences of letters in the range a-z. It uses 278 MB memory. max3.cfg is a variation of max.cfg by Jan Ondrus (Sept. 10, 2009) using 550 MB memory and without a CCITT model. max4.cfg is a variation of max3.cfg (Sept. 15, 2009) using 1465 MB memory. drt is the dictionary preprocessor from lpaq9m by Alexander Rasushnyak. The results include the dictionary file lpqdict0.dic compressed from 465,210 to 88,759 bytes in 8 seconds as a separate archive with max4.cfg and decompressed in 7 seconds, and drt.exe with a size of 15,548 bytes (whether uncompressed or as a zip file) with 38 seconds to encode enwik9 and 38 seconds to decode. max_enwik9.cfg is a variation of max.cfg by Mike Russell, Sept. 11, 2009. It adds 5 more models for higher order contexts using an ISSE chain after the first order 5 mixer. max_enwik9drt.cfg is a variation of max_enwik9.cfg, Sept. 18, 2009, modified to define word contexts for ASCII range 65-255 instead of A-Z,a-z because DRT encodes words using bytes in the range 128-255. The compressed size of lpqdict0.dic is 86810 bytes, 12+9 sec, compressed separately and added to the compressed sizes. zpipe 1.00 is a ZPAQ compatible streaming file compressor that compresses or decompresses from standard input to standard output. It takes no options. It compresses equivalently to mid.cfg without storing a filename or comment. The decompresser outputs the contents of archives to a single file by concatenation. bwt_j2.cfg implements an inverse BWT transform. It was writen by Jan Ondrus, Oct. 6, 2009. The forward transform is implemented by an external preprocessor, bwtpre (included above) by Matt Mahoney, Oct. 6, 2009. bwtpre is based on BBB fast mode compression but does not itself compress. The argument “,18” tells bwt_j2.cfg to use a block size of 210+18-256 bytes. Memory usage is 5x blocksize for both the preprocessor and postprocessor, plus 100 MB for the model. The ability of config files to call external preprocessors was added to zpaq v1.05 on Sept. 28, 2009. The ability to pass arguments was added to zpaq v1.07 on Oct. 2, 2009. zpaq v1.08 (Oct. 14, 2009) adds the capability to compile ZPAQL configuration files and corresponding archive headers to C++ and link to a copy of itself to speed up compression and decompression. The program first looks for an optimized version of the program, writes and compiles it if needed, then runs it to compress or decompress. Some tests are shown for speed comparison. max.cfg was modified to use less memory. The arguments to min.cfg, mid.cfg, and max.cfg have the effect of improving compression at the cost of doubling memory for each increment. bwt_slowmode1_1GB_block.cfg implements slow mode BWT transform using 1.25x blocksize memory based on BBB. The inverse transform was re-implemented in ZPAQL by Jan Ondrus, Oct. 15, 2009. zpaq v1.09 is mainly a Linux port of v1.08 with some cosmetic improvements. Times for obwt_j2.cfg,18 are shown for comparison to v1.07 without optimization. Memory usage is 1838 MB for compression (includes preprocessor) and 1443 MB for decompression. The c command followed by the name of a configuration file creates a new archive using that file. By default the archive header includes the file name (6 bytes), size (10 bytes), and SHA1 checksum (20 bytes). There are options to omit these and save 36 bytes. The “oc” command in zpaq v1.08 optimizes for speed. zp 1.00 is a ZPAQ compatible archiver by Matt Mahoney, May 7, 2010. It is designed to have fewer options so it is easier to use. It has 3 compression levels: 1=fast, 2=mid, 3=max. It uses compiled ZPAQL code (like zpaq oc/ox) but without requiring an external C++ compiler to be installed. It automatically detects when an archive is compressed with one of these three models and decompresses with compiled code. Otherwise, it will decompress all other ZPAQ compatible archives with slower, interpreted code. Levels 2 and 3 are the same as zpaq mid.cfg and max.cfg. Only level 1 (fast) was tested because it uses a new model, fast.cfg, an ICM chain of length 2 with order 2 and 4 contexts. It is equivalent to compressing with zpaq ocfast.cfg. 12345678910111213141516171819202122232425 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----zpaq 1.03 co0.cfg 61,217,687 620,040,242 14,317 xd 620,054,559 441 453 0.4 o0 26 co1.cfg 46,083,596 454,040,416 14,317 xd 454,054,733 459 480 0.6 o1 26 co2.cfg 36,694,483 346,551,263 14,317 xd 346,565,580 557 560 134 o2 26 cmin.cfg 33,460,947 294,281,789 14,317 xd 294,296,106 438 513 4 LZP 26 cmid.cfg 20,941,558 180,279,221 14,317 xd 180,293,538 3521 3652 111 CM 26 cmax.cfg 19,412,353 165,191,085 14,317 xd 165,205,402 12211 12204 278 CM 26 cmax3.cfg 19,179,311 161,604,379 14,317 xd 161,618,696 14108 13609 550 CM 26 cmax4.cfg 18,986,507 157,246,349 14,317 xd 157,260,666 14061 13077 1465 CM 26 cmax_enwik9.cfg 18,238,435 149,376,058 14,317 xd 149,390,375 11961 2002 CM 32drt|zpaq 1.03 cmax4.cfg 18,400,773 149,761,125 29,865 xd 149,790,990 8663 8547 1465 CM 26 cmax_enwik9drt.cfg 18,022,167 146,078,502 29,865 xd 146,108,367 11494 11614 1952 CM 26zpipe 1.00 20,941,543 180,279,205 13,421 x 180,292,626 3540 3480 111 CM 26zpaq 1.07 cbwt_j2.cfg,18 20,756,888 174,171,969 13,421 x 174,185,390 5593 4347 1838 BWT 26zpaq 1.08 ocbwt_slowmodel_1GB_block.cfg 20,756,996 163,565,006 29,153 x 163,594,159 7957 3875 1443 BWT 26 oco0.cfg 61,217,687 335 407 0.4 o0 26 ocmin.cfg 33,460,960 414 383 4 LZP 26 ocmid.cfg 20,941,558 2392 2456 111 CM 26 ocmax.cfg 19,448,650 6569 6641 246 CM 26 ocmax.cfg,3 18,977,961 6667 6640 1861 CM 26zpaq 1.09 ocbwt_j2.cfg,18 20,756,883 174,171,965 31,744 x 171,203,709 4529 1847 1838 BWT 26zp 1.00 c1 24,837,469 222,310,430 26,815 s 222,337,245 688 776 37 CM 26 587 688 44 pzpaq 0.01 (a predecessor to zp 1.02) is a free, open source file compressor and archiver by Matt Mahoney, Jan. 21, 2011. It uses a ZPAQ compatible format with speed optimizations for the 3 default compression levels supported by libzpaq, zpaq, and zpipe. It supports parallel compression and decompression by dividing the input into blocks which are compressed or decompressed at the same time in separate threads, writing the result to temporary files, and then comcatenating them when done. For compression with N threads, the input is divided into N blocks of equal size by default, although a different block size can be specified. Larger blocks make compression better but reduce the number of threads that can run at the same time. Using more threads also increases the memory required. pzpaq can also compress or decompress multiple files at once to separate archives or pack them into a solid archive or an archive with the packed files split across blocks within the archive. The version 0.01 distribution includes a 32 bit Windows executable and source code to compile for Windows or Linux. For Windows, the code must be linked with Pthreads-Win32 and pthreadGC2.dll is required at run time. The program size was calculated from the source code (including libzpaq) required for Linux, which has pthreads installed by default and is not included in the size. The test results shown below are for 2 machines, a 2.67 GHz Intel Core i7 M620 with 2 cores and 2 hyperthreads per core, running 64 bit Linux (note 48), and a 2.0 GHz Intel T3200 with 2 cores without hyperthreading running 32 bit Windows (note 26). The Linux version was compiled with g++ 4.4.4 -O3 -s -march=native -DNDEBUG. The Windows version used the distributed pzpaq.exe and pthreadGC2.dll. It was compiled with g++ 4.5.0 -O2 -s -march=pentiumpro -fomit-frame-pointer. Times shown are wall (real) times, not process times, in nanoseconds per byte. We observe the normal 3 way tradeoff between speed, memory, and compression. Compression levels -1, -2, and -3 require 38 MB, 112 MB, and 247 MB per thread respectively. The default is -2. -t selects the number of threads. The default is -t2. -b selects the block size. The default is the input size divided by the number of threads. The -m option limits memory usage in MB by reducing -t. The default is -m500. Selecting larger -m than required has no effect on compression, speed, or actual memory used. -m is only required with -3 -t3 or higher. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061 C/D time C/D timeLev Thr Block Memory enwik8 Note 48 Note 26------------------------- ---------- ----------- ------------1 -t2 -b1000000 -m76 28,176,221 471-1 -t2 -b2500000 -m76 26,915,416 443-1 -t2 -b5000000 -m76 26,236,689 436-1 -t2 -b10000000 -m76 25,728,498 429-1 -t4 -b25000000 -m152 25,253,629 210 220-1 -t3 -b33333334 -m114 25,144,587 220 240-1 -t2 -b50000000 -m76 25,009,236 240 290 410 430-1 -t1 -b100000000 -m38 24,837,482 420 470 750 800-2 -t2 -b1000000 -m224 24,582,373 1440-2 -t2 -b2500000 -m224 23,374,191 1396-2 -t2 -b5000000 -m224 22,644,738 1417-2 -t2 -b10000000 -m224 22,044,838 1430-2 -t2 -b25000000 -m224 21,438,679 1382-2 -t4 -b25000000 -m448 21,438,679 720 730-2 -t3 -b33333334 -m336 21,303,705 790 820-2 -t2 -b50000000 -m224 21,138,877 950 980 1300 1310-2 -t1 -b100000000 -m112 20,941,571 1510 1560 2350 2330-3 -t2 -b1000000 -m494 23,281,943 4142-3 -t2 -b2500000 -m494 22,105,128 3896-3 -t2 -b5000000 -m494 21,371,902 3866-3 -t2 -b10000000 -m494 20,745,064 3854-3 -t2 -b25000000 -m494 20,073,978 3816-3 -t4 -b25000000 -m988 20,073,978 1900 1950-3 -t3 -b33333334 -m741 19,914,412 2070 2120-3 -t2 -b50000000 -m494 19,710,450 2180 2250 3670 3990-3 -t1 -b100000000 -m247 19,448,663 3780 3910 6080 6200 C/D time C/D timeLev Thr Block Memory enwik9 Note 48 Note 26------------------------- ----------- ----------- ------------1 -t2 -b1000000 -m76 254,931,717 582-1 -t2 -b10000000 -m76 232,278,737 425-1 -t2 -b100000000 -m76 224,233,690 392-1 -t2 -b250000000 -m76 223,043,964 393-1 -t4 -b250000000 -m152 223,043,964 198 223-1 -t3 -b333333334 -m114 222,789,971 224 254-1 -t2 -b500000000 -m76 222,544,698 236 276 408 556-1 -t1 -b1000000000 -m38 222,310,443 410 470 758 800-2 -t2 -b1000000 -m224 216,322,292 1377-2 -t2 -b10000000 -m224 192,436,071 1286-2 -t2 -b100000000 -m224 182,293,069 1275-2 -t2 -b250000000 -m224 180,995,559 1278-2 -t4 -b250000000 -m448 180,995,559 710 742-2 -t3 -b333333334 -m336 180,716,954 768 811-2 -t2 -b500000000 -m224 180,516,414 854 881 1275-2 -t1 -b1000000000 -m112 180,279,234 1487 1532 2231-3 -t2 -b1000000 -m494 203,976,295 3824-3 -t2 -b10000000 -m494 180,499,077 3657-3 -t2 -b100000000 -m494 168,839,648 3611-3 -t2 -b250000000 -m494 167,036,071 3635-3 -t4 -b250000000 -m988 167,036,071 1881 1926-3 -t3 -b333333334 -m741 166,567,322 2025 2158-3 -t2 -b500000000 -m494 166,324,415 2172 2236 3599-3 -t1 -b1000000000 -m247 165,887,518 3708 3846 5989 zp 1.02 is a successor to pzpaq, which was considered experimental. It adds two new BWT compression modes which replace the “fast” (-1) model. Option -m1 selects the faster BWT mode (bwtrle1), which consists of right-context sorting (using libdivsufsoft by Yuta Mori), RLE encoding, and a single order 0 ICM with the RLE state (literal or count) as context. The BWT output is run length encoded by replacing runs of 2 to 257 identical bytes with 2 bytes and a count. The ICM maps the context to a bit history and then to a bit prediction, which is adjusted after coding to reduce the prediction error. Option -m2 selects the better BWT mode (bwt2), which drops the RLE step and uses an order 0-1 ISSE chain. The order-1 ISSE adjusts the order-0 ICM prediction by mixing it in the logistic domain with a constant, such that the pair of weights is selected by an 8-bit bit history, which is selected by an order 1 context of the BWT output. After coding, the mixing weights are adjusted to reduce the prediction error. Options -m3 and -m4 select the “mid” and “max” modes, the same as -4 and -5 respectively in pzpaq. The option -bN selects a block size of N*2^20 - 256 bytes. Memory usage per thread for the two BWT modes is 5 times the block size after rounding up to a power of 2. The default is -b32 which uses 160 MB per thread for -m1 and -m2. Memory usage for -m3 and -m4 is not affected by block size. Usage is 111 MB and 246 MB per thread for -m3 and -m4 respectively. Other changes: there is no longer an option to limit memory. The default number of threads (-t option) is the number of cores. There is no solid mode compression because BWT requires that each block contain only one whole or part of a file. There is a separate decompresser, unzp, which is optimized for fast, mid, max, bwtrle1, and bwt2 modes, and can be configured to optimize for other models by generating, compiling, linking, and running C++ code for an optimized version of itself. Compressed sizes are based on the unzp source code (37,967 bytes). zpaq 4.00 was released Nov. 13, 2011. It uses libzpaq v4.00, which internally translates ZPAQL into just-in-time (JIT) x86-32 or x86-64, which runs about as fast as the previous version that translated ZPAQL to C++ and compiled it. Unlike the earlier version, it correctly handles all legal ZPAQL, such as jumps into the middle of a 2 byte instruction, such as occurs in max_enwik9.cfg. Like zp 1.02, it uses multi-threading and the same build-in compression levels -m1 through -m4. Results are shown below for a 4 GB 2.66 GHz Core I7 M620 (note 40), which has 2 cores with 2 hyperthreads each. Run under Ubuntu 64 bit Linux. Compression and decompression times (wall times, ns/byte) are shown for 1 through 4 threads (-t1 through -t4) as the compression method (-m) and block size (-b) are varied. max_enwik9 runs in one thread in a single block. 1234567891011121314151617181920Compressor Options enwik8 enwik9 -t1 -t2 -t3 -t4 MB/thread---------- -------- ---------- ----------- --------- --------- --------- --------- ----------zp 1.02 -m1 -b32 24,091,153 210,224,876 264 313 144 184 131 170 120 165 160 -m1 -b128 22,823,452 197,571,474 264 335 163 208 137 187 136 179 640 -m1 -b256 22,823,452 191,741,553 167 218 1280 -m2 -b32 22,440,353 195,887,789 446 514 259 304 237 274 231 267 160 -m2 -b128 21,246,043 184,023,690 467 543 291 343 250 295 248 294 640 -m2 -b256 21,246,043 178,551,919 304 351 1280 -m3 -b32 21,301,940 185,584,854 1420 1478 805 856 760 790 713 745 111 -m3 -b128 20,941,571 181,908,375 1430 1491 851 897 772 823 723 758 111 -m3 -b1024 20,941,571 180,279,234 1446 1503 111 -m4 -b32 19,912,920 172,989,918 3567 3695 2075 2145 1966 2011 1868 1906 246 -m4 -b128 19,448,663 168,312,889 3578 3706 2156 2234 1984 2043 1875 1925 246 -m4 -b1024 19,448,663 165,887,518 3597 3732 246 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------------ ---------- ----------- ----------- ----------- ----- ----- --- --- ----zpaq 4.00 -mmax_enwik9 18,238,435 149,376,058 66,958 s 149,440,016 6327 6528 2002 CM 48 zpaq v6.12, Oct. 19, 2012, is a journaling, deduplicating, incremental archiver. These features were added in zpaq v6.00 on Sept. 26, 2012. It implements the level 2 ZPAQ standard introduced with libzpaq v5.00 on Feb. 1, 2012. The level 2 standard allows for uncompressed (but possibly pre/post-processsed) data. The format is described in the ZPAQ specification v2.01. zpaq v6.12 is designed for large backups. It will compress 100 GB to an external drive in a few hours, then perform daily incremental backups of files whose dates have changed in a few minutes. It recursively traverses directories, storing last-modified dates and attributes of added files. A journaling archive is append-only. When a journaling archive is updated, it keeps both the old and new versions of each file or directory. The old version can be extracted by specifying a dated version, and any later updates are ignored. Input is deduplicated before compression by dividing input files into fragments averaging 64 KB on content-dependent boundaries that move when data is inserted or removed. The archive stores fragment SHA-1 hashes and stores any fragment with a matching hash as a pointer to an existing fragment. Any remaining fragments are packed into 16 MB blocks in memory and compressed by multiple threads in parallel to memory buffers before being appended to the archive. After compression is completed, the fragment sizes and hashes are appended, and then a list of index updates in separately compressed blocks. Each update is either a deletion (filename only) or an update (filename, date, attributes, and list of fragment pointers). An update is performed as a transaction by first appending a temporary header, then the compressed data and index, and then finally going back and updating the header to store the compressed data size so that it can be skipped over when listing the archive contents or preparing a list of files to add or extract. If compression is interrupted or an error occurs, then the temporary header is not updated. If zpaq encounters a temporary header then it assumes that any data following it is corrupted and ignores it during extraction or listing, and overwrites it during the next update. zpaq also has features to summarize the contents of archives containing millions of files, show update history and version dates, and compare and extract individual files and directories and rename them. Archives can be encrypted. The deduplication algorithm uses a rolling hash of the input that depends on the last 32 bytes that are not predicted in an order-1 context. Missed predictions (from a 256 byte table) are counted as a heuristic to guess whether a block can be compressed. If not, then it is stored without compression as a speed optimization. There are 4 compression levels (-method 1 through 4). The threshold for compressing a block is 1/16, 1/32, 1/64, and 1/128 of bytes predicted by the order 1 model, respectively. Like earlier versions of zpaq, it also accepts configuration files and external preprocessors. These are always compressed. The journaling format is not compatible with zpaq versions prior to 6.00. Older versions would decompress a journaling archive to a set of jDC* files that could in theory reconstruct the data. To support older versions, there are three additional modes: streaming, solid, and tiny. In streaming mode, each file is compressed in parallel in a separate block, and large files are split into 16 MB blocks. In solid mode, all files are compressed to a single block in a single thread. Tiny mode is like solid mode except that comments (uncompressed sizes), checksums, and header locator tags (for error recovery) are not stored, saving a few bytes each. None of these modes support journaling, incremental backup, or deduplication, and do not save file attributes or empty directories. An update appends to an archive without checking whether the files have been added before. There are 4 built in methods. Method 1 is equivalent to “lazy” level 3. It is LZ77 using variable length codes to represent the lengths of literal byte strings or the length and offset of matches to earlier occurrences of the same string in a 16 MB output block. Matches are found by indexing a hash of the next 4 bytes in the input buffer into a table of size 4M which is grouped into 512K buckets of 8 pointers each. The longest match is coded, provided the length is at least 4, or 5 if the offset is greater than 64K and the last output was a literal. Ties are broken by favoring the smaller offset. Bucket elements are selected for replacement using the low 3 bits of the output count. Literal lengths are coded using “marked binary” Elias gamma codes, where the leading 1 bit of the number is dropped and a 1 bit is inserted in front of the remaining bits and a 0 marks the end. For example, 1100 is coded as 1,1,1,0,1,0,0. Matches are coded as a length and an offset. The length is at least 4. All but the last 2 bits are coded as a marked binary. The number of match bits is given in the first 5 bits of the code. If the code starts with 00, then a literal length and string of literal follow. Otherwise the 5 bits code a number from 0 to 23, and that number of bits, with an implied leading 1 give the offset. The codes are not compressed further. They are stored in the ZPAQ level 2 format, consisting of a sequence of sub-blocks each preceded by a 4 byte header giving the sub-block size. Method 2 is also LZ77, but the codes are byte aligned and context modeled rather than coded directly. It also searches 4 order-7 context hashes and 4 order-4 hashes, rather than 8 order-4 hashes like method 1. Method 2 first codes as follows, according to the high 2 bits of the first byte: 123400 = literal of length 1..64, followed by uncompressed bytes.01 = match of length 4..11 and offset 1..2048.10 = match of length 1..64 and offset of 1..65536.11 = match of length 1..64 and offset of 1..16777216. These codes are arithmetic coded using an indirect context model. The context depends on the parse state and in the case of literals, on the previous byte. An indirect context model maps a context into a bit history (represented as an 8 bit state) and then to a bit prediction. The model is updated by adjusting the prediction to reduce the error by 0.1%. A bit history represents a bounded pair of bit counts (n0,n1) and the value of the most recent bit. The bounds for (n0,n1) and (n1,n0) are (20,0), (48,1), (15,2), (8,3), (6,4), (5,5). Method 3 uses a Burrows-Wheeler transform (BWT) using libdivsufsort-lite v2.0. This is equivalent to -m2 in older zpaq versions. The input bytes are sorted by their right contexts and compressed using an order 0-1 ICM-ISSE chain. The order 0 ICM (indirect context model) works as in method 2, taking only the previous bits of the current byte (MSB first) as context. The prediction is adjusted by an order-1 indirect secondary symbol estimator (ISSE). An ISSE maps its context (the previous byte and the leading bits of the current byte) to a bit history, and the history selects a pair of mixing weights to compute the weighted average of the constant 1 and the ICM output in the logistic domain, log(p/(1-p)). The output is converted back to linear, and the two weights are updated to reduce the prediction error in favor of the better model. In other words, the output is: 1p' := 1/(1 + exp(-w1*1 - w2*log(p/(1-p)))) and after the bit is arithmetic coded, the weights w1 and w2 are updated: 12w1 := w1 + 1 * 0.001 * (bit - p')w2 := w2 + log(p/(1-p)) * 0.001 * (bit - p') Method 4 is equivalent to mid.cfg or -m3 in older zpaq versions. It directly models the data using an order 0-5 ICM-ISSE chain, an order 7 match model, and an order 1 mixer which produces the bit prediction by mixing the predictions of all other components. The 6 components in the chain each mix the next lower order prediction using a hash of the next higher order context to select a bit history for that context, which selects the mixing weights. A match model has a 16 MB history buffer and a 4M hash table of the previous occurrence of the current context. If a match is found, it predicts the bit that followed the match with probability 1 - 1/(length in bits). The outputs of all 7 models are then mixed as with an ISSE except with a vector of 7 weights selected by an order 1 (16 bit) context, and with a faster weight update rate of about 0.01. With method 4 you can give an argument like “-method 4 1” to double the memory allocated to the components to improve compression. The same extra memory is needed to decompress. The default is 111 MB per thread. An argument n multiplies memory usage by 2^n. n can be negative. Methods 1, 2, and 3 only work in journaling and streaming mode, since they have a 16 MB block size limit. Method 4 and configuration files work in all modes. The following tests are on a 2.0 GHz T3200 with 2 cores. zpaq will automatically detect the number of cores and use the same number of compression or decompression threads, although this can be overridden. 123456789101112131415 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------------ ---------- ----------- ----------- ----------- ----- ----- --- --- ----zpaq 6.12 -method 1 37,397,857 328,974,375 104,067 s 329,078,442 93 53 152 LZ77 26 -method 1 -streaming 37,359,931 328,618,875 104,067 s 328,722,942 85 28 151 LZ77 26 -method 2 31,765,035 281,184,939 104,067 s 281,289,006 196 108 153 LZ77 26 -method 2 -streaming 31,730,884 218 126 151 LZ77 26 -method 3 23,341,562 203,365,453 104,067 s 203,469,520 429 369 238 BWT 26 -method 3 -streaming 23,328,888 425 375 238 BWT 26 -method 4 21,768,810 1403 1371 299 CM 26 -method 4 -streaming 21,744,770 1403 1356 299 CM 26 -method 4 -solid 20,941,591 2036 2056 109 CM 26 -method 4 1 -solid 20,740,920 2338 2197 216 CM 26 -method 4 4 -solid 20,581,270 2356 2289 1482 CM 26 -method 4 4 -tiny 20,581,208 173,028,477 104,067 s 173,132,544 2107 2230 1654 CM 26 zpaq v6.19, Jan. 23, 2013, moves the -solid and -tiny modes into a separate program, zpaqd, and eliminates -streaming. It adds 5 more compression levels (0 through 9). -method 5 is max.cfg, a 22 component CM with some of the component sizes reduced to use about 225 MB per thread. -methods 6 through 9 each double the memory size (450 MB to 1.8 GB) and block size (32 MB to 256 MB). All levels except 0 (store uncompressed) have an E8E9 pre/post-processor. -methods 0 through 4 are unchanged. 1234567891011121314 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------------ ---------- ----------- ----------- ----------- ----- ----- --- --- ----zpaq 6.19 -method 0 -threads 2 100,050,464 37 42 169 copy 26 -method 1 -threads 2 37,398,697 143 61 225 LZ77 26 -method 2 -threads 2 31,766,023 294 185 225 LZ77 26 -method 3 -threads 2 23,342,327 635 548 322 BWT 26 -method 4 -threads 2 21,770,084 1319 1331 378 CM 26 -method 5 -threads 2 20,491,832 3778 3773 563 CM 26 -method 6 -threads 2 19,901,321 4446 4615 991 CM 26 -method 7 -threads 2 19,497,869 4625 4711 1845 CM 26 -method 8 -threads 1 19,038,853 164,475,887 95,914 s 164,571,801 6153 6296 1911 CM 26 -method 8 -threads 2 19,038,853 3553 3551 3800 CM 48 -method 9 -threads 1 19,004,217 161,001,056 95,914 s 161,096,970 3468 3521 3800 CM 48 zpaq v6.34 has 7 compression methods as follows: 0 = deduplicate only, store uncompressed. 1 = LZ77 with variable length codes in 16 MB blocks (default). 2 = like 1 with longer search for matches and 64 MB blocks. 3 = byte aligned LZ77 with context modeling of literals and parse state. 4 = 3 or BWT, whichever is smaller. 5 = 3, 4, or 8-9 component CM, whichever is smaller. 6 = CM with about 20 components. Methods 0 and 1 use 16 MB blocks by default. Methods 2..6 use 64 MB blocks. The size can be specified by a second digit N which specifies 2N MB blocks. Thus, the defaults are 04, 14, 26, 36, 46, 56, 66. Larger blocks compress better but require more memory per thread. Methods 1..6 use heuristics to detect already compressed data and either store it or compress it with a fast method like 1 depending on the degree of compressibility. The heuristic depends on the 256 byte order-1 prediction table that is used to compute the rolling hash used in the fragmentation algorithm. The table is initialized to all zeros at each fragment boundary, and contains the last byte seen in each of 256 possible 1 byte contexts. If the data is random, then at each fragment boundary (average size 64K), the following properties are expected: The fraction of correct predictions is 1/256. The number of nonzero entries in the table (if at least 4K) is 1/256. The frequency distribution, weighting successive occurrences of the same value by 1, 1/2, 1/3… is about 205. The probability of each value matching any of the previous 4 tables is 1/256. A compressibility statistic is calculated for each test, and the highest (least random) is used. When packing fragments into blocks, if the previous fragments are detected as random and a new file is started, then the block is passed to the compressor when it is 1/8, 1/4, or 1/2 full depending on the total compressibility. Otherwise the block must be at least 3/4 full and there is not room for the next file assuming no deduplication. In addition, the order 1 tables are used to detect text and x86 (.exe) data types. Text is detected if at least 5 letter, digit, period, or comma contexts predict a space, minus any predicted characters in the range 1..8, 11, 12, 14..31, which normally do not appear in text files. If at least 1/4 of the fragments are detected as text, then methods 5 and 6 add extra models for it. x86 is detected if at least 5 contexts predict a 139 (an x86 MOV reg, r/m instruction). If at least 1/8 of the fragments are detected as x86, then a E8E9 pre/post processor is used in methods 1..6. LZ77 and BWT removed the 16 MB block size limitation of the previous version. Variable length LZ77 adds an extra field of rb = 1..8 bits to represent the low bits of an offset up to 32 bits, where rb increases by 1 for each doubling of the block size over 16 MB. 2rb - 1 is added to the offset, so that it requires a rb..rb+23 bit code. Byte aligned LZ77 removed the limitation by eliminating the short code (3 bit length and 11 bit offset) and adding a code with 4 offset bytes. Lengths range from m..m+63 where m is the mininum match length, normally 8 when used with an order-1 context model. BWT removes the block size limitation by removing the IBWT optimization of packing pointers and the byte pointed to into a single 32 bit linked list element when the block size is over 16 MB. No changes were required for higher compression levels. zpaq versions since v6.22 support custom context models through the command line. When compressing enwik8 and enwik9 the following models are automatically generated: 123456789101112131415Option Equivalent------ ---------- -m 0 -m x4,0 -m 1 -m x4,1,4,0,3,24,16,18 -m 18 -m x8,1,4,0,3,27,16,18 -m 2 -m x6,1,4,8,4,26,16,18 -m 28 -m x8,1,4,8,4,27,16,18 -m 3 -m x6,2,8,0,4,26,16,24c0,0,511 -m 38 -m x8,2,8,0,4,26,16,24c0,0,511 -m 4 -m x6,3ci1 -m 48 -m x8,3ci1 -m 5 -m x6,0ci1,1,1,1,2awm -m 58 -m x8,0ci1,1,1,1,2awm -m 6 -m x6,0w2c0,1010,255i1c256ci1,1,1,1,1,1,2ac0,2,0,255i1c0,3,0,0,255i1c0,4,0,0,0,255i1mm16ts19t0 -m 68 -m x8,0w2c0,1010,255i1c256ci1,1,1,1,1,1,2ac0,2,0,255i1c0,3,0,0,255i1c0,4,0,0,0,255i1mm16ts19t0 The meaning is as follows. x (experimental) rather than a digit selects a specific method which is the same for every block. It can also be s to add in streaming mode with each file in a separate block and large files split into blocks with no deduplication. The first digit N1 after x selects a maximum block size of 2N1+20 - 4096 bytes. This is selected by the second digit of the method, if present, or else it defaults to 6 for methods 2..6 or 4 otherwise. The second digit N2 selects the pre/post processing step. 0 means none. 1 means LZ77 with variable length codes. 2 means LZ77 with byte aligned codes. 3 means BWT. 4..7 means 0..3 with E8E9 filtering. N3..N8 apply to the LZ77 modes only. N3 (4 or 8) is the minimum match length. N4 (8 or 0) if not 0 specifies a context order to search first. N5 (3 or 4) says to search 2N5 contexts of each order to look for matches. N6 (24..27) specifies 2N6 elements in the hash table for lookups. Each entry requires 4 bytes of memory. It defaults to the block size up to N1=26, then N1-1. N7 and N8 specify that the minimum match (N3) should be increased by 1 after a literal or match, respectively, when the match offset is greater than 2N7 or 2N8 respectively. The sequence of strings starting with letters followed by a comma-separated list of numbers specifies various context models used by methods 3 and higher. c0 specifies an ICM (indirect context model: context to bit history to prediction). c1…c256 (used in -m 6) specifies a CM (context to prediction) with an update rate of 1/count and maximum count of N1*4-4, e.g. c256 specifies 1020. The remaining arguments to c default to 0. N2 describes any special contexts. N2 in 1..255 (e.g. c0,2) means offset mod N2. N2 in 1000..1255 means the distance to the last occurrence of N2-1000 (e.g. c0,1010 means how far from the last linefeed). N3 and up specifies byte masks starting with the most recent context byte (e.g. c0,2,0,255 means offset mod 2 combined with the second context byte (sparse model)). A value of 256..511 includes the byte aligned LZ77 parse state if applicable (e.g. c0,0,511 means the order 1 context plus parse state hashed together). i followed by a list specifies a chain of ISSE components with each context order increasing by the specified amount by hashing it with the previous component, (e.g. ci1,1,1,1,2 specifies an order 0 ICM chained with order 1, 2, 3, 4, 6 ISSE). Each ISSE (indirect secondary symbol estimator) adjusts the prediction of the previous component in the bit history of the current context (hashed together with the previous component’s context). a specifies a match model, which predicts the bit which followed the most recent occurrence of the current (normally high order) context. It can take parameters specifying buffer size, hash table index size and context order. wN1 specifies a word model, an ICM-ISSE chain of increasing order from 0 to N1-1 in words rather than bytes. A word is defined as a sequence of letters converted to upper case, ignoring all other characters (e.g. w2 specifies an order 0 ICM and order 1 ISSE). It can take additional parameters specifying an alphabet range and a mask to convert case. m specifies a mixer, which adaptively averages the predictions of all prior components. It can take a parameter (default 8) which is the number of bits of context to select the mixing weights (e.g. m16 is a byte-wise order 1 context). It takes additional parameters specifying update rate. t is a MIX2 2-input mixer which averages just the last 2 components. s is a SSE which adjusts the prevous prediction like an ISSE but using a direct context instead of a bit history. It takes parameters specifying the number of context bits (e.g. s19 selects the current and previous bytes and the 3 high bits of the second byte), and additional parameters specifying initial and final update rates. -m is short for -method. -th 1 (-threads 1) selects 1 thread. The default on the test machine is 4 (2 cores + 2 hyperthreads). It is also used in decompression to reduce memory. 123456789101112131415 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------------ ---------- ----------- ----------- ----------- ----- ----- --- --- ----zpaq 6.34 -m 1 36,720,879 322,717,507 38 15 456 LZ77 48 -m 18 -th 1 36,174,283 316,439,766 85 25 1200 LZ77 48 -m 2 32,785,291 287,047,166 76 17 1500 LZ77 48 -m 28 -th 1 32,123,217 279,231,899 159 25 1200 LZ77 48 -m 3 30,759,444 270,317,562 89 56 1500 LZ77 48 -m 38 -th 1 30,216,795 264,333,006 198 106 1200 LZ77 48 -m 4 21,982,505 189,860,169 285 224 1800 BWT 48 -m 48 -th 1 21,293,686 179,016,475 596 512 1400 BWT 48 -m 5 20,742,462 179,365,293 937 658 2100 CM 48 -m 58 -th 1 20,214,879 172,645,399 1931 1430 2400 CM 48 -m 6 19,627,225 168,583,236 2348 2356 3300 CM 48 -m 68 -th 1 18,998,601 160,541,121 118,086 s 160,659,207 4300 4408 3200 CM 48 The following table shows compression with the config file max5.cfg (Oct. 14, 2013). This is the same model as max_enwik9.cfg except that it was modified to take an argument to double memory usage for most of the components for each increment. With argument 0, it is the same as max_enwik9. Compression was with zpaqd 6.33 (June 20, 2013), which is the developement tool that accompanies zpaq and produces streaming mode archives from a config file. Thus, the command “zpaqd c max5 3 archive enwik9” compresses to archive.zpaq with 3 passed to $1 in max5.cfg. This has the effect of using almost 8 times as much memory for both compression and decompression as max_enwik9. The archive was decompressed with both zpaq 6.42 (Sept. 26, 2013) and with tiny_unzpaq (Mar. 21, 2012, public domain) compiled with g++ 4.1.2 -O3 under Linux on the test machine, which has 20 GB of available memory. zpaq 6.42 is an archiver like zpaq 6.33 with a number of added features and bug fixes unrelated to compression. tiny_unzpaq is a stand-alone program that extracts only streaming mode archives and is designed so that the source code is as small as possible. It does not support JIT compilation of the ZPAQL code, or multithreading and has no error checking or help message. It takes an archive as an argument with no options and extracts to the saved names. max6.cfg (Oct. 15, 2013) modifies max5 by rewriting the word model and adding models that count brackets (“[“ minus “]” in range 0..2) and a column model (counts bytes after the last linefeed in range 0..64). It also changes the memory parameter from $1 to $3 so it can be passed to zpaq like “-m s10.0.5fmax6”. This means to choose streaming mode (s), a block size of 2^10 MB (10), no preprocessing (0), pass 5 as $3 selecting 14 GB (or 1 selecting 1.4 GB) using max6.cfg. For this test, tiny_unzpaq is used to extract when the decompresser is given as “sd” although either program could be used. 12345678910 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------------ ---------- ----------- ----------- ----------- ----- ----- --- --- ----zpaqd 6.33 max5 0 18,238,448 5960 2000 CM 61 max5 1 18,135,013 146,750,019 6309 3400 CM 61 max5 2 18,095,676 144,918,290 6521 6600 CM 61 max5 3 18,084,027 143,757,714 4,760 sd 143,762,474 5894 13173 13100 CM 61zpaq 6.42 143,757,714 125,670 s 143,883,384 5985 13500 CM 61zpaq 6.42 -m s10.0.1fmax6 18,167,158 150,622,666 125,670 s 150,748,336 6368 6475 1400 CM 61 -m s10.0.5fmax6 17,855,729 142,252,605 4,760 sd 142,257,365 6699 14739 14000 CM 61 zpaq 6.50, Mar. 21, 2014, uses 5 compression levels instead of 6. LZ77 when used in methods 2 and higher uses a suffix array to find matches. There are also other improvements in sorting files, grouping into blocks, detecting file type, detecting random data, and selecting compression algorithm based on type. Tests below used 4 threads. 12345678 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------------ ---------- ----------- ----------- ----------- ----- ----- --- --- ----zpaq 6.50 -method 1 35,691,734 314,117,968 137,993 s 314,255,964 35 23 512 LZ77 48 -method 2 31,184,422 271,626,606 137,993 s 271,764,602 150 24 1800 LZ77 48 -method 3 21,980,366 189,875,990 137,993 s 190,013,986 222 220 1600 BWT 48 -method 4 20,740,505 179,455,249 137,993 s 179,593,245 665 670 2200 CM 48 -method 5 19,625,015 168,590,741 137,993 s 168,728,730 2410 2419 3400 CM 48 .1440 drt|lpaq9m lpaq versions 1 through 8 may be downloaded here. lpaq9* can be downloaded here or as a zpaq archive. The decompr8 series of Hutter prize entries (decompresser and enwik8 archive) are also listed here because they followed a period of development of the lpaq series. Note: some of these programs are compressed with upack, which compresses better than upx. Some virus detectors give false alarms on all upack-compressed executables. The programs are not infected. lpaq1 is a free, open source (GPL) file compressor by Matt Mahoney, July 24, 2007. It uses context mixing. It is a “lite” version of paq8l, about 35 times faster at the cost of about 10% in compression. The “9” option selects maximum memory. The options range from 0 (6 MB) to 9 (1.5 GB). Memory usage is 3 + 3*2N MB, N = 0..9. The compressor mixes 7 contexts: orders 1, 2, 3, 4, 6, a unigram word context (consecutive letters, case insensitive), and a matched bit context. The contexts (except the matched bit) are mapped to nonstationary bit histories using nibble-aligned hash tables, then mapped to bit prediction probabilities using stationary adaptive tables with bit counts to control adaptation rate. The matched bit context maps the predicted bit (based on a context match), match length and order-1 context (or order 0 if no match) to a bit prediction. The probabilities are combined in the logistic domain (log(p/(1-p)) using a single layer neural network selected by a small context (3 high bits of last byte + context order), then passed through 2 SSE stages (orders 0 and 1) and arithmetic coded. Except for one model for ASCII text, there are no specialized models for binary data, .exe, .bmp, .jpeg, etc. lpaq2 by Alexander Rhatushnyak, Sept. 20, 2007, contains some speed optimizations. lprepaq 1.2 by Christian Schnaader, Sept. 29, 2007, is lpaq1 combined with precomp as a preprocessor. precomp compresses JPEG files and also expands data segments compressed with zlib, often making them more compressible. This preprocessing has no effect on text files. lpaq3 and elpaq3 by Alexander Rhatushnyak, Sept. 29, 2007, has two versions with the same source code. When compiled with -DWIKI, the result is elpaq3 which is tuned for large text files. The normal compile produces lpaq3. lpaq3a by Alexander Rhatushnyak, Sept. 30, 2007, improves compression on some files over lpaq3 (but not enwik8/9). The archive also contains lpaq3e.exe, which is an archive compatible (Intel compile) of elpaq3.exe. lpaq4 and lpaq4e (mirror) are by Alexander Rhatushnyak, Oct. 1, 2007. lpaq4e is tuned for large text files. lpaq5 and lpaq5e are by Alexander Rhatushnyak, Oct. 16, 2007. Option 9 selects 1542 MB memory. lpaq5e is tuned for large text files. It includes separate programs for compression only (lpaq5e-c.exe) and decompression only (lpaq5e-d.exe). Tests were done with these programs, rather than the version that does both (lpaq5e.exe). lpaq6 and lpaq6e are by Alexander Rhatushnyak, Oct. 22, 2007. Option 9 selects 1542 MB memory. lpaq6e is tuned for large text files. lpaq6 includes a E8E9 transform for compressing x86 executables. lpaq7 and lpaq7e (mirror) are by Alexander Rhatushnyak, Oct. 31, 2007. lpaq8 and lpaq8e are by Alexander Rhatushnyak, Dec. 10, 2007. The executables are packed with upack. zip -9 would make them larger. lpaq1a by Matt Mahoney, Dec. 21, 2007, uses the same model as lpaq1 but replaces the arithmetic coder with the asymmetric binary coder from fpaqb. lpq1 by Matt Mahoney, Dec. 23, 2007, is an archiver (not a file compressor) based on lpaq1 option 7. drt|lpaq9e is by Alexander Rhatushnyak, Feb. 20, 2008. It is specialized for English text. It includes a separate program drt.exe (without source code) which performs a dictionary transform prior to compression with lpaq9e. The option 9 is for lpaq9e which selects maximum memory. The program size is computed by adding lpaq9e.exe, drt.exe, and the compressed dictionary, which must be uncompressed with lpaq9e before running. The size is smaller without a zip archive. Decompression consists of uncompressing the dictionary with lpaq9e, uncompressing the transformed file with lpaq9e, and reversing the transform with drt. Run times are for the sum of all three operations (1+62+2943, 1+2929+45 sec). lpaq9f by Alexander Rasushnyak, Apr. 27, 2007, works like lpaq9e. Run times are (2+55+2801, 2+2819+38 sec). drt uses 8 MB for compression and 4 MB for decompression. lpaq9g by Alexander Rasushnyak, May 23, 2008, works like lpaq9e. Run times are (2+51+2691, 2+2682+38 sec). lpaq9h by Alexander Rasushnyak, June 3, 2008, works like lpaq9e. Run times are (2+53+2530, 2+2529+44 sec). lpaq9i by Alexander Rasushnyak, June 13, 2008, works like lpaq9e. Run times are (2+59+2425, 2+2453+46 sec). drt.exe and the dictionary file (tmpdict0.dic) are unchanged in all versions starting with lpaq9f. lpaq9j by Alexander Rhatushnyak, Aug. 17, 2008, has a new version of drt.exe and dictionary. Run times are (2+58+2365, 2+2358+48 sec). lpaq9k is by Alexander Rhatushnyak, Sept. 30, 2008. Run times are (2+59+2336, 2+2346+47 sec). decompresser size is as 3 files (not zipped). lpaq9l is by Alexander Rhatushnyak, Dec. 2, 2008. Run times are (2+41+2132, 2+2179+40 sec) on the computer described in note 26, and (2+58+2338, 2+2422+50) on the computer used to test all the earlier versions. decompresser size is as 3 files (not zipped). lpaq9m (zpaq archive) is by Alexander Rhatushnyak, Feb. 20, 2009. Run times are (2+38+2067, 2+2111+38). decompresser size is 3 files (not zipped). decomp8 is a Hutter Prize entry by Alexander Rhatushnyak, Mar. 23, 2009. It consists of a decompresser (Windows executable only) and an archive (archive8.bin) which decompresses to enwik8. There is no compressor. During decompression, the program creates a temporary file containing a dictionary similar to the one used in paq8hp12 and by drt. The command to decompress is “decomp8 archive8.bin enwik8”. The total size (not zipped) is 15,986,677 bytes. decomp8b is an update to the Hutter prize entry decomp8 by Alexander Rhatushnyak, Apr. 22, 2009. Total size (not zipped) is 15,958,674 bytes. decmprs8 is an update to the Hutter prize entry decomp8b by Alexander Ratushyak, May 23, 2009. Total size (not zipped) is 15,949,688 bytes. To decompress: decmprs8.exe archive8.dat enwik8 1234567891011121314151617181920212223242526272829303132333435Prog Opt enwik8 enwik9 prog Total Comp Deco Mem Alg Note---- --- ---------- ----------- ---- ----------- ---- ---- ---- --- ----lpaq1 9 19,755,948 164,508,919 6,676 x 164,515,595 3646 3594 1539 CMlpaq2 9 19,755,471 164,496,295 6,888 x 164,503,183 3260 3354 1539 CMlprepaq 1.2 9 19,755,989 164,509,300 189,891 x 164,699,191 8696 7888 1582 CMlpaq3 9 19,580,276 165,600,121 7,514 x 165,607,635 3695 3735 1542 CMelpaq3 9 19,392,604 160,081,507 7,377 x 160,088,884 3411 3454 1542 CMlpaq3a 9 19,585,951 165,661,890 12,004 s 165,673,894 4177 4163 1542 CMlpaq3e 9 19,392,604 160,081,507 12,004 s 160,093,511 3967 3932 1542 CMlpaq4 9 19,583,905 165,603,612 7,117 x 165,610,729 3693 3697 1542 CMlpaq4e 9 19,358,662 159,675,213 6,990 x 159,682,203 3383 3422 1542 CMlpaq5 9 19,455,395 161,410,276 8,382 x 161,418,658 3614 3630 1542 CMlpaq5e 9 19,078,767 156,194,860 7,841 xd 156,202,701 3428 3605 1542 CMlpaq6 9 19,562,861 165,224,012 8,848 x 165,232,860 3586 3624 1542 CMlpaq6e 9 19,054,076 155,943,020 8,866 x 155,951,886 3420 3478 1542 CMlpaq7 9 19,557,894 162,359,435 9,078 x 163,368,513 3922 3850 1542 CMlpaq7e 9 19,039,516 155,840,757 8,570 x 155,849,327 3477 3490 1542 CMlpaq8 9 19,523,803 161,987,713 9,676 x 161,997,389 3682 3718 1542 CMlpaq8e 9 18,982,007 155,232,477 8,888 x 155,241,365 3424 3475 1542 CMlpaq1a 9 19,759,778 164,547,926 8,558 x 164,556,484 3462 3423 1540 CMlpq1 19,888,399 168,467,267 9,151 x 168,476,408 3389 3402 387 CMdrt|lpaq9e 9 18,151,024 145,628,635 110,844 x 145,739,479 3006 2975 1542 CMdrt|lpaq9f 9 18,079,247 144,877,844 110,864 x 144,988,708 2858 2859 1542 CMdrt|lpaq9g 9 18,069,107 144,838,636 110,318 x 144,948,954 2744 2722 1542 CMdrt|lpaq9h 9 18,067,711 144,763,248 110,376 x 144,873,624 2585 2575 1542 CMdrt|lpaq9i 9 18,065,347 144,752,858 110,149 x 144,863,007 2486 2501 1542 CMdrt|lpaq9j 9 18,056,997 144,687,646 110,135 x 144,797,781 2425 2408 1542 CMdrt|lpaq9k 9 18,007,677 144,277,379 110,785 x 144,388,164 2397 2395 1542 CMdrt|lpaq9l 9 17,979,724 144,082,479 110,479 x 144,192,958 2398 2474 1542 CMdrt|lpaq9l 9 17,979,724 144,082,479 110,479 x 144,192,958 2175 2221 1542 CM 26drt|lpaq9m 9 17,964,751 143,943,759 110,579 x 144,054,338 2107 2151 1542 CM 26drt|lpaq9m 9 17,964,751 143,943,759 110,579 x 144,054,338 868 896 1542 CM 41decomp8 15,970,425 16,252 xd 78180 936 CM 26decomp8b 15,942,290 16,384 xd 74790 934 CM 26decmprs8 15,932,968 16,720 xd 76080 936 CM 26 drt may be combined with other compressors to improve compression. The following were obtained using drt and tmpdict0.dic (from lpaq9i) with ppmonstr J (PPM). Option -m1650 selects 1650 MB memory. -r1 partially rebuilds the model when memory is exhausted. -o select the PPM model order. Compression time is for ppmonstr only. Mem8 is actual memory used to compress enwik8.drt. enwik9.drt always uses 1650 MB. As a separate compressor, the compressor size would be 147,915 for a zip file containing drt.exe, ppmonstr.exe, and tmpdict0.pmm (tmpdict0.dic compressed with ppmonstr -m1650 -r1 -o64). Total size would be 148,047,289. For drt 9j, the decompresser size is 149,468 and total size is 147,196,757. 1234567891011 Compressors options enwik8 enwik9 Comp Mem8------------------- ---------------- ---------- ----------- ---- ----drt 9i | ppmonstr J -m1650 -r1 -o10 18,185,633 147,936,682 2509 825 -m1650 -r1 -o11 18,166,961 147,899,374 2634 895 -m1650 -r1 -o12 18,152,982 147,907,628 2661 953 -m1650 -r1 -o16 18,142,625 148,306,179 2888 1109 -m1650 -r1 -o32 18,124,722 149,857,650 3361 1371 -m1650 -r1 -o64 18,122,785 151,343,426 3870 1554 -m1650 -r1 -o128 18,130,333 1650drt 9j | ppmonstr J -m1650 -r1 -o11 18,165,440 147,859,151 2636 -m1650 -r1 -o64 18,120,770 2603 The following shows the effects of drt from lpaq9m on enwik8. The first numeric column is the compressed size of enwik8. The second is the compressed size of the uncompressed dictionary (lpqdict0.dic, 465,210 bytes) concatentated with enwik8.drt (61,289,634 bytes) using compressor versions that were current as of June 26, 2010 unless indicated. The ratio shows the improvement due to preprocessing. The dictionary contains 44880 lowercase words. DRT replaces word occurrences with codes of 1 to 3 bytes and uses codes to indicate capitalized words or letters. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253Compressor enwik8 dic+drt ratio Options (version)---------- ------- -------- ------ -----------------paq8px_v67 18293940 17342041 0.9480 -6paq8l 18518485 17560378 0.9483 -6nanozip 18826931 18633832 0.9897 -cc (v0.08a)lpaq9m 19072743 18077356 0.9478 8zpaq 19448650 18928856 0.9733 ocmax.cfgpmm 19701161 18650601 0.9467 (J)lpaq1 19796957 18905483 0.9550paq9a 20129573 19374291 0.9625paq6 20303336 19439547 0.9575 -6cmm4 20548514 19133313 0.9311 (v0.1e)zpaq 20941558 19447733 0.9287 ocmid.cfgnz 20948832 20588807 0.9828 (v0.08a)bwt.fpaq0f2 21798843 21406906 0.9820paq1 22156982 21437426 0.9675bwt.fpaq0p 23809591 22855730 0.9599grzip 23846878 22379326 0.9385 (0.2.4)bbb 24576921 22701384 0.9237zpaq 24837469 21559014 0.8680 ocfast.cfgtarsalzp 25134862 22773386 0.9060lzpxj 25251404 21877402 0.8664 8 (1.2h)p6 25377998 23078246 0.9094ctw 25453025 24454785 0.96087z 25895909 23487746 0.9070 (9.12b)szip 26120472 24045552 0.9206 -b41 -o16ppmd 26275353 23448205 0.8924 (J)ppms 26310248 23824677 0.9055 (J)dmc 28402672 25532850 0.8990 100000000cabarc 28465607 25963613 0.9121 -m lzx:21bzip2 29008758 25612712 0.8829 -9sr2 30432506 26328768 0.8652RAR 35107917 30132497 0.8583 -m5 (v2.50)HA 36379137 30633820 0.8421 (0.98)gzip 36445248 30902821 0.8479 -9 (1.3.5)zip 36445470 30903043 0.8479 -9 (2.32)lzop 41217688 33358696 0.8093 -9 (1.01)srank 43091439 38492535 0.8933 -C8fcm1 45402225 29581661 0.6515compress 45763941 37478724 0.8190lzrw3-a 48009194 38635335 0.8047bpe 53906667 41403271 0.7681 5000 4096 200 3fastlz 54658924 42337322 0.7746lzrw2 55360907 41854974 0.7560fpaq0f2 56916872 40415334 0.7101flzp 57366279 43944882 0.7660lzrw5 59375192 46019812 0.7751lzrw1-a 59471657 43184084 0.7261fpaq0p 61457810 44979267 0.7319ppp 61657971 44103741 0.7153fpaq0 63391013 47589951 0.7507 100000000 61289634 0.6129 (uncompressed)bwt 100000004 61289638 0.6129 (msufsort 3.1b) .1449 mcm mcm v0.0 is a free, experimental, closed source file compressor by Mathieu Chartier, June 4, 2013. It uses CM. Options -1 … -9 select 8 MB to about 1500 MB memory. mcm v0.2, June 11, 2013, has automatic detection of text and binary files with UTF modeling in text mode and sparse models in binary mode, an improved match model, and cache optimizations. mcm v0.3 was released June 17, 2013. mcm 0.4 was released as open source on July 17, 2013. To test, it was compiled with g++ 4.8.0 using the supplied make.bat file. mcm 0.8 (discussion), was released Feb. 5, 2015. It uses LZP preprocessing with fast and high modes. The high mode (default, as tested) uses 8 context models and the fast uses 6. It was compiled in Linux/g++ 4.8.2 using the supplied make.bat file. Option -10 uses 2.9 GB memory. Option -11 (5.5 GB) was not tested. mcm 0.82 was released Feb. 16, 2015. -max selects best compression (default is -high). mcm 0.83 was released Apr. 5, 2015. -x10 and -x11 select the memory used for max compression. To test -x10, I compiled from source using the supplied make.sh in Ubuntu, g++ 4.8.2. -x11 was tested using optimized source with comments removed. 12345678910111213 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----mcm v0.0 -9 19,842,740 166,276,589 116,198 x 166,392,787 1425 1449 1447 CM 26mcm v0.2 -9 19,768,502 165,480,329 137,308 x 165,617,637 1453 1468 1451 CM 26mcm v0.3 -9 19,707,487 164,464,527 122,205 x 164,586,732 1387 1435 1452 CM 26mcm v0.4 19,858,418 1718 1623 735 CM 26 -9 19,762,418 165,009,983 43,479 s 165,053,462 1552 1494 1457 CM 26mcm v0.8 -10 19,434,824 158,421,558 107,815 s 158,529,373 710 727 2901 CM 48mcm v0.82 -10 19,281,673 157,501,519 111,681 s 157,613,200 636 642 2854 CM 48 -10 -max 19,173,407 156,544,880 111,681 s 156,656,561 692 689 2855 CM 48mcm v0.83 -x10 18,286,400 146,525,446 127,052 s 146,652,498 706 569 3056 CM 48 -x11 18,233,295 144,854,575 79,574 s 144,934,149 394 281 5961 CM 72 .1493 nanozip nanozip 0.01a is a free, experimental, closed source GUI and command line archiver by Sami Runsas, July 14, 2008. For these tests, the command line version (smaller executable) was used. It compresses using several algorithms (fastest to best): LZP (options -cf and -cF), LZ77 (-cd, -cD), BWT (-co, -cO, uses 5N block size) and CM (-cc). The uppercase options (-cF, -cD, -cO) compress better but slower than the corresponding lowercase options and may use more memory. The default compression mode is -co (fast BWT). -m1500m selects 1500 MB memory, although the reported memory usage may differ and the actual memory usage (Cmem, Dmem, in MB) measured with Task Manager is usually lower than reported. The program will use less memory depending on available physical memory when run. -forcemem was used to override this. For all tests, -nm was used to turn off checksums and not store timestamps or file permissions. For -cO, the program uses a LZ77 variant (called LZT) instead of BWT for binary files. -txt is an optimization for text files with -co or -cO. nanozip 0.03a was released July 31, 2008. Only -cc was tested. nanozip 0.05a was released Oct. 20, 2008. Options are as in 0.01a and include -nm -forcemem. nanozip 0.06a was released Feb. 13, 2009. Options are as in 0.01a and include -nm -forcemem. w32c creates a self extracting archive (.exe file). nanozip 0.08a was released June 3, 2010. _64 refers to the Windows 64 bit version. w32c means to produce a self extracting archive. -nm means do not store metadata or redundancy information. -cc selects a context mixing model. -m2.6g means use 2.6 GB memory. enwik8 was tested with -m2g (uses 1670 MB). nanozip 0.09a was released Nov. 4, 2011. Option w32c selects a self extracting archive, so the decompresser size is 0. Option -p4 runs multithreaded compression on 4 processors. Tested under 64 bit Linux. 123456789101112131415161718192021222324252627282930313233343536Program Options enwik8 enwik9 zip size Total Comp Deco Cmem Dmem (reported) Alg Note-------- ----------- ---------- ----------- --------- ----------- ---- ---- ---- ---- ---- ---- --- ----nz 0.01a -cf 46,381,713 24 24 96 404 404 LZP -cf -m1500m 46,381,713 417,351,980 266,797 x 417,618,777 26 31 975 978 1476 1476 LZP -cF 40,733,125 62 43 155 404 404 LZP -cF -m1500m 40,733,125 359,192,720 359,459,517 63 40 1040 1045 1476 1476 LZP -cd 33,241,150 127 28 89 422 402 LZ77 -cd -m1500m 33,001,952 292,180,617 292,447,414 156 28 768 687 1546 1474 LZ77 -cD 29,384,997 288 27 282 466 258 LZ77 -cD -m1500m 29,253,158 258,513,190 258,779,987 323 31 1020 693 1314 994 LZ77 -co 21,838,721 391 186 333 431 336 BWT -co -m1500m 20,503,629 176,470,974 176,737,771 448 221 1667 1160 1810 1294 BWT -co -m1500m -txt 20,503,629 170,711,387 170,978,184 336 234 1074 1120 1471 1463 BWT -cO 21,623,801 465 247 333 431 266 BWT -cO -m1500m 20,306,489 174,770,662 175,037,459 511 269 1378 1135 1810 1294 BWT -cO -m1500m -txt 20,306,489 169,092,652 169,359,449 393 280 1074 1274 1471 1463 BWT -cO -m1670m -txt 20,306,489 167,509,921 167,776,718 403 284 1170 1325 1633 1625 BWT -cc 18,994,349 2975 2910 360 436 435 CM -cc -m1500m 18,723,413 152,654,332 152,921,129 3147 3091 1556 1556 1524 1523 CMnz 0.03a -cc -m1670m 18,679,094 151,668,563 263,953 x 151,932,516 3058 3003 1700 1700 1700 1699 CMnz 0.05a -cf -m1670m 46,381,713 18 22 100 LZP -cF -m1670m 40,608,638 66 41 164 LZP -cd -m1670m 31,555,257 96 29 289 LZ77 -cD -m1670m 27,811,031 182 35 170 LZ77 -co -m1670m 20,499,411 351 177 626 BWT -cO -m1670m 20,302,501 422 240 642 BWT -cc -m1670m 18,638,419 151,176,555 288,449 x 151,465,004 3032 2975 1668 CMnz 0.06a -co -m1670m 20,499,412 250 183 441 BWT 26 -cO -m1670m 20,302,502 300 243 457 BWT 26 -cc -m1670m 18,636,515 151,177,510 336,273 x 151,513,783 2143 2137 1670 CM 26 w32c -cc -m1670m 18,754,787 151,295,782 0 xd 151,295,782 2156 2173 1670 CM 26nz 0.08a_64 w32c -nm -cc -m2.6g 18,752,842 150,441,103 0 xd 150,441,103 1109 1086 2760 CM 40 -cc -m2g 18,623,317 150,375,385 459,607 x 150,834,992 1616 2088 CM 42nz 0.09a w32c -cc -m3g -nm 18,723,846 150,037,341 0 xd 150,037,341 1110 1084 2693 CM 40 w32c -cc -m3g -nm -p4 158,107,738 0 xd 158,107,738 299 3124 CM 40 -cc -m32g -p1 -t1 -nm 18,594,163 148,545,179 783,642 x 149,328,821 1149 1141 32000 13285 13282 CM 74 .1494 cmv cmv 00.01.00 is a free, closed source, experimental file compressor for 32 bit Windows by Mauro Vezzosi, Sept. 6, 2015. It uses context mixing. Option “2,3,+” selects max compression (2), max memory (3), and a large set of models (+). A hex bitmap for this argument turns individual models on or off. Note 48 timings are for enwik8 only. cmv 00.01.01 was released Jan. 10, 2016. It is compatible with 00.01.00 and does not change the compression ratio. cmve 0.2.0 was released Nov. 28, 2017. 1234567Program Options enwik8 enwik9 zip size Total Comp Deco Cmem Dmem Alg Note-------- ----------- ---------- ----------- --------- ----------- ---- ---- ---- ---- ---- ----cmv 00.01.00 -m2,3,+ 18,218,283 150,226,739 77,404 x 150,304,143 285750 293090 2817 2817 CM 48,75 150,226,739 77,404 x 150,304,143 216000 2801 CM 75 -m2,3,0x03ededff 18,153,319 720000 ~3900 CM 75cmv 00.01.01 -m2,3,0x03ed7dfb 18,122,372 149,357,765 77,404 x 149,435,169 426162 394855 3335 3335 CM 75cmve 0.2.0 -m2,3,0x7fed7dfd 16,424,248 129,876,858 307,787 x 130,301,106 1140801 19963 CM 81 .1512 xwrt xml-wrt 2.0 is a free command line file compressor with source available, by Przemyslaw Skibinski, June 19, 2006. It uses LZMA (LZ77 + arithmetic coding) with preprocessing for modeing text, XML tags, dates, and numbers. It may also be used as a preprocessor for input to other compressors. Version 1.0 was strictly a preprocessor without built-in compression. The -l6 option selects maximum LZMA compression. -b255 selects maximum buffer size of 255 MB for building a dynamic dictionary. -m255 selects maximum memory. -s turns off spaces modeling. -f8 sets the minimum word frequency for dictionary inclusion to 8 (default is 6). xml-wrt 3.0 (Sept. 14, 2006) includes a stripped-down version of PAQ8 (-l11 option) in addition to LZMA compression. xwrt 3.2 (Oct. 29, 2007) is a dictionary preprocessor frontend to LZMA, PPMVC and lpaq6 as well as a standalone preprocessor. Option -l14 selects lpaq6 option 9 (1542 MB). -b255 selects 255 MB memory (maximum) for building the dictionary. -m96 selects 96 MB buffer during compression. (Higher values cause out of memory error). -s turns of space modeling. -e40000 limits the dictionary size to 40000 words. -f200 limits the dictionary to words that occur at least 200 times. 123456 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----xml-wrt 2.0 -l6 -b255 -m255 -s -f8 23,199,202 196,914,328 25,354 s 196,939,682 905 70 525 LZ77xml-wrt 3.0 -l11 -b255 -m255 -f24 19,663,305 165,274,422 40,447 s 165,314,869 4398 4317 416 CMxwrt 3.2 -l14 -b255 -m96 -s -e40000 -f200 18,679,742 151,171,364 52,569 s 151,223,933 2537 2328 1691 CM xml-wrt 2.0 and higher and xwrt 3.2 can be used as either a standalone compressor or as a preprocessor to other compressors. The table below shows the best known settings for enwik9 and enwik8 for xml-wrt 3.0 and 2.0 as a preprocessor to ppmonstr var. J, the best known combination for which xml-wrt improves compression. xml-wrt 1.0 is a preprocessor only. See also xml-wrt and xwrt as a standalone compressor. 123456789 Compressed size Decompresser Total size Time (ns/byte)Program/options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------------------------------------------------------------------- ---------- ----------- ----------- ----------- ----- ----- --- ---xml-wrt 3.0 -l0 -b255 -m255 -3 -s -e20000 | ppmonstr J -m1650 -o10 18,592,499 150,004,636 82,466 sx 150,087,102 3067 2708 1650 PPMxml-wrt 3.0 -l0 -b255 -m255 -3 -s -e7000 | ppmonstr J -m1650 -o64 18,494,374 82,466 sx 3500 3340 1650 PPMxml-wrt 2.0 -l0 -w -s -c -b255 -m100 -e10000 | ppmonstr J -m1700 -o10 18,794,295 150,651,873 67,309 sx 150,719,182 2715 ~2650 1700 PPMxml-wrt 2.0 -l0 -w -s -c -b255 -m100 -e2300 | ppmonstr J -m1650 -o64 18,625,624 67,309 sx 3550 3360 1650 PPMxml-wrt 2.0 -l0 -w -s -c -b255 -m100 -e10000 | ppmonstr J -m800 -o8 18,863,790 154,223,582 67,309 sx 154,290,891 2820 800 PPMxml-wrt 1.0 -f800 | ppmonstr J -m800 -o8 19,043,178 154,749,585 56,837 sx 154,806,422 2702 ~2700 800 PPM xml-wrt 1.0 (XML Word Reducing Transform) is a free command line single file preprocessor with source code by Przemyslaw Skibinski, May 10, 2006. It is not intended to compress files by itself (although it does somewhat). Rather, it is intended to improve the compressibility of text and XML files by replacing common words and XML substrings with shorter symbols. (So it is actually LZW with a static dictionary prepended to the output). It improves compression for most programs except for those that already have English text models such as paq8h. Some additional results are shown below for combinations with some other compressors. 123456 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Notes------- ------- ---------- ----------- ----------- ----------- ----- ----- -----xml-wrt 1.0|ppmonstr J -f1800 | -m800 -o10 18,965,658 155,066,074 56,837 sx 155,122,911 2905 2809xml-wrt 1.0|slim23d -f1800 | -m700 -o12 19,163,987 156,734,571 69,453 x 156,804,024 4702 4717xml-wrt 1.0|ppmd J1 -f1800 | -m256 -o8 -r1 21,128,019 178,154,529 25,917 s 178,180,446 717 722 The following table shows the compressed size (without decompresser except SFX) of enwik8 before and after the XML-WRT transform with option -f180 for several compressors. A ratio less than 1 means that XML-WRT improves compression. 12345678910111213141516171819202122Program Options enwik8 enwik8.xwrt Ratio Alg------- ------- ----------- ---------- ------ ---paq8h -7 17,674,700 18,341,959 1.0378 CMppmonstr J -o10 -m800 19,338,065 18,886,224 0.9766 PPMslim23d -m700 -o10 19,264,094 18,938,602 0.9830 PPMWinUDA 2.91 mode 3 (194 MB) 20,332,366 20,859,165 1.0259 CMppmd J1 -o10 -m256 -r1 21,388,296 20,945,220 0.9793 PPMuhbc 1.0 -m3 -b100m 20,930,838 21,171,204 1.0115 BWTM03exp 32 MB 21,948,192 21,583,059 0.9834 BWTsbc -ad -m3 -b63 22,470,539 22,216,425 0.9887 BWTWinRAR 3.60b3 -mc7:128t+ -sfxWinCon.sfx 22,713,569 22,457,785 0.9887 PPMPX 1.0 24,971,871 22,818,070 0.9137 CMuharc 0.6b -mx -md32768 23,911,123 22,915,299 0.9583 PPMchile 0.3d-1 -b=40000 23,408,335 22,884,519 0.9776 BWTcabarc 1.00.0601 -m lzx:21 28,465,607 25,739,214 0.9042 LZ77WinACE -sfx -m5 30,919,182 27,112,651 0.8769bzip2 1.0.3 29,008,758 27,339,845 0.9425 BWTgzip 1.3.5 -9 36,445,248 30,403,738 0.8342 LZ77pkzip 2.0.4 36,934,712 30,729,525 0.8432 LZ77thor 0.9a ex 41,670,916 32,586,444 0.7820compress 4.3d 45,763,941 38,485,494 0.8409 LZWOriginal size 100,000,000 52,174,989 0.5217 The -f option (default -f6) selects the minimum word frequency required to have it added to the dictionary. The optimal setting depends on the input size. When used with ppmd or ppmonstr (the best compressors improved by XML-WRT), the optimal settings are about -f180 for enwik8 and -f1800 for enwik9, which results in a dictionary of 7697 words for enwik8 and 6657 words for enwik9. The following table shows the effect of the -f and -o options for ppmonstr -m800 enwik9. The best combination found is -f1800 -o8. 12345678910111213 -f -o7 -o8 -o9 -o10 -o11 -o12 -o16 -o32 --- ----------- ----------- ----------- ----------- ----------- ----------- ----------- ----------- 100 155,908,621 200 155,775,164 300 155,653,815 500 154,884,542 155,367,681 155,465,355 155,547,660 600 154,787,455 155,497,645 800 154,749,5851000 154,909,136 154,794,501 154,951,751 155,122,278 155,306,526 155,409,926 155,948,066 157,901,3201500 155,092,513 154,895,455 154,999,654 155,073,186 155,306,526 155,301,3221800 155,191,178 154,924,936 155,036,534 155,066,074 155,366,281 155,297,8282000 154,998,528 155,296,1123000 155,379,959 The following table shows that the optimal setting for -f is lower for smaller files (with ppmd): 12345678 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp ------- ------- ---------- ----------- ----------- ----------- ----- ----- xml-wrt 1.0 -f1800 (70,826,140)(532,089,443) (14,818 s)(532,104,261) (115) (103)+ ppmd J -m256 -o8 -r1 21,128,019 178,154,529 41,653 sx 178,196,182 712 723 xml-wrt 1.0 -f180 (52,174,989)(468,964,104) (14,818 s)(468,978,922) (113) (103)+ ppmd J -m256 -o8 -r1 20,910,527 178,215,315 41,653 sx 178,256,968 690 699ppmd J -m256 -o10 -r1 21,388,296 183,964,915 26,835 x 183,991,750 880 895 The default values of -s (disable spaces model) and -t (disable try smaller word) appear to work best on this data. 123456xml-wrt -f1800 enwik9 | ppmonstr -m800 -o12-------------------------------------------(default) 154,924,936-s 155,040,558-t 155,421,035-s -t 155,542,575 xml-wrt 2.0 released June 14, 2006 (updated June 19, 2006) has additional transform options, and also includes LZ77 (zlib) and LZMA (LZ with arithmetic coding) compression. When used as a preprocessor, this compression is turned off. enwik9 was compressed using the options: 12xml-wrt -l0 -w -s -c -b255 -m100 -e10000 enwik9ppmonstr e -o8 -m800 enwik9.xwrt The option -l0 turns off compression. -w turns off word containers. -s turns off space modeling (this hurts compression in version 1.0 but helps in 2.0). -c turns off word and number containers (independent of -w and -n. -n hurts compression). -b255 sets memory for the dictionary to 255 MB, the maximum. -m100 sets the memory buffer to 100 MB, which is not maximum (255 MB), but larger values hurt compression. -e10000 sets the dictionary size to 10000 words. (The dictionary size can also be controlled with -f as in version 1.0, but using -e is less dependent on input size so it helps with enwik8). Additional tests showing the effects of -e, -m, and -o: 123456789xml-wrt 2.0 options ppmonstr J enwik9-------------------------------- ---------- ------------l0 -w -s -c -b255 -m100 -e10000 | -m800 -o8 154,223,582-l0 -w -s -c -b255 -m100 -e8000 | -m800 -o8 154,234,621 (smaller -e)-l0 -w -s -c -b255 -m100 -e12000 | -m800 -o8 154,239,769 (larger -e)-l0 -w -s -c -b255 -m50 -e10000 | -m800 -o8 154,259,117 (smaller -m)-l0 -w -s -c -b255 -m100 -e10000 | -m800 -o7 154,322,272 (smaller -o)-l0 -w -s -c -b255 -m150 -e10000 | -m800 -o8 154,426,554 (larger -m)-l0 -w -s -c -b255 -m100 -e10000 | -m800 -o9 154,445,811 (larger -o) The optimal values of -w -c -s -n (turn off number containers) and -t (turn off try shorter words) was determined on enwik7 and enwik8 but not tested on enwik9. A bug fix for LZMA compression, released June 19, 2006, does not change any values for the June 14, 2006 version (using the -l0 option). However the compressed source code increases from 25,290 bytes to 25,354 bytes. The June 14 version is no longer published. The URL is unchanged. xml-wrt 3.0 (Sept. 14, 2006) option -3 means to optimize the default settings for PPM compressors. Version 3.0 also has a FastPAQ8 compressor for standalone compression which was tested separately. xwrt 3.2 (see below) with ppmonstr J has the following results. 1234xwrt 3.2 options ppmonstr J opt enwik8 enwik9 program size total Comp Decomp Mem---------------------- -------------- ---------- ----------- ----------------- ----------- -------- ------- -----2 -b255 -m255 -s -f64 -o10 -m1650 18,456,706 148,915,761 52,569s + 26,835x 148,995,165 475+2512 43+2503 1650-2 -b255 -m255 -s -f64 -o64 -m1650 18,397,126 210+2810 50+2884 1527 ppmonstr option -o64 is optimal for enwik8, but -o10 is optimal for enwik9. -m1650 selects 1650 MB memory. xwrt option -2 optimizes for PPM. -b255 selects buffer size 255 MB for building the dictionary. -m255 selects 255 MB memory buffer. -s turns off space modeling. -f64 sets minimum word frequency for the dictionary to 64. Program size and times are xwrt + ppmonstr. Memory usage is 512 MB for xwrt, 1650 MB for ppmonstr. .1532 fp8_v3fp8 v1 (fast paq) is a free, open source archiver by Jan Ondrus, May 2, 2010. It is derived from pax8px_v68. It has fewer models than paq8px for better speed but retains the models for wav, bmp, and jpg. The option -8 selects maximum memory. fp8 v2, Apr. 10, 2012, has some modeling improvements. fp8 v3, May 13, 2012, has some more compression improvements (at a slight cost in speed) and a JPEG bug fix. tangelo 1.0, June 17, 2013, is a single-file compressor based on fp8. It removes specialied models and preprocessors for exe, bmp, wav and jpeg types. It takes no options. It uses fixed memory of 567 MB, equivalent to fp8 -7. tangelo 2.0, July 6, 2013, removed some models and made other simplifications for better speed and less memory but worse compression. tangelo 2.1, July 20, 2013, faster with less compression. tangelo 2.3, July 22, 2013, re-added APM for better compression, and minor changes for better speed. 123456789Program options enwik8 enwik9 program size total Comp Decomp Mem Alg Note------- ------- ---------- ---------- ------------ ----------- ----- ------ ---- --- ----fp8 v1 -8 18,573,126 49,865 s 20010 1150 CM 26fp8 v2 -8 18,556,327 154,359,664 49,964 s 154,409,626 19059 21196 1192 CM 26fp8 v3 -8 18,438,169 153,188,176 50,068 s 153,238,244 20605 22593 1192 CM 26tangelo 1.0 18,593,738 156,355,536 8,365 s 156,363,901 19849 19977 567 CM 26tangelo 2.0 20,202,547 171,678,313 6,275 s 171,684,588 6028 6007 362 CM 26tangelo 2.1 21,021,150 179,879,607 11,320 s 179,890,927 2275 2262 361 CM 26tangelo 2.3 20,921,619 178,497,116 11,687 s 178,508,803 2172 2194 361 CM 26 .1563 WinRK WinRK 3.0.3 is a commercial GUI archiver by Malcolm Taylor (Mar. 6, 2006). It is top ranked on some benchmarks. Unfortunately it is not available for free download (as of May 16, 2006). The “free trial” expires as soon as you install it. (Update, Sept. 11, 2006: versions 3.0.2 and 3.0.3 are no longer available for download. They appear to have been withdrawn last month). WinRK in PWCM mode (Paq Weighted Context Modeling) is based on the paq7/8 algorithm with text dictionary preprocessing and specialized models for wav, bmp, and exe files. Version 3.0.2 was based on the earlier paq6 algorithm which uses adaptive linear model mixing rather than a neural network which mixes bitwise predictions from models in the logistic (log p/(1-p)) domain. The +td and -td options turns English dictionary preprocessing on or off respectively. 800MB selects the memory limit. When not specified, PWCM appears to allocate all available memory except leaving 8 MB. 1234567891011 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Notes------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- --- -----WinRK 3.03 PWCM (800MB +td) 18,612,453 156,291,924 3,017,362 x 159,309,286 68555 CM 10WinRK 3.03 PWCM 18,612,551 156,349,910 3,017,362 x 159,367,272 102973~90000 CM 9WinRK 3.03 FPW1 (800MB +td) 19,035,564 24950 10WinRK 3.03 PWCM (800MB -td) 19,060,620 88310 CM 10WinRK 3.03 Efficient 21,157,165 5380 PPM 10WinRK 3.03 Normal (PPMd) 22,322,981 620 PPM 10WinRK 3.03 PWCM (800MB +td) 18,612,453 156,291,924 99,665 xd 156,391,589 68555 800 CM 10WinRK 3.03 x64 PWCM (2047MB +td o28) 18,101,637 150,481,300 3053 CM 42 RK and RKC are predecessors of WinRK so I don’t plan to test them. .1570 ppmonstr, ppmd, ppmsppmonstr, ppmd, and ppms var. J are free command line file compressors by Dmitry Shkarin (model) and Dmitry Subbotin (range coder), Feb. 16, 2006. (ppms on Feb. 21, 2006). ppmonstr is a slower, experimental version of ppmd with better compression. Source code is available for ppms and ppmd but not ppmonstr. ppms is a small memory (1 MB) version of ppmd. They all use PPMII (PPM with information inheritance). The -m256 option selects 256 MB memory (maximum for ppmd). The -o10 option selects PPM order 10. (Higher orders use up memory faster which hurts compression). When ppmd runs out of memory, it discards the model and starts over. The -r1 option (default in ppmonstr) tells ppmd to back up and partially rebuild the model before resuming compression. The default options for ppmd are -m10 -o4 -r0 which are designed for reasonably good compression with high speed and low memory usage (see table below). ppms accepts only options -o2 through -o8. The default is -o5. This also gives the best compression on enwik8. Task Manager shows 1.8 MB memory used. 123456789101112131415 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Note------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- ppmonstr J -m1700 -o16 19,055,092 157,007,383 42,019 x 157,049,402 3574 ~3600ppmonstr J -m800 -o16 19,230,657 161,496,685 42,019 x 161,538,704 3783 ~3800ppmonstr J -m1863 -o16 19,040,451 156,578,769 42,019 x 156,620,788 42ppmd J -m256 -o10 -r1 21,388,296 183,964,915 11,099 s 183,976,014 880 895ppmd J -m10 -o4 -r0 26,275,353 236,509,791 11,099 s 236,520,890 194 206ppms J -o5 26,310,248 233,442,414 16,467 x 233,458,881 330 354 -o2 36,866,748 102 -o3 30,242,535 135 -o4 27,030,761 246 -o6 26,644,863 449 -o7 27,028,318 492 -o8 27,343,283 532 ppmd was updated to J1 on May 10, 2006 to fix a bug. Compression benchmarks are unchanged except the size of the compressor (11,099 bytes as zipped source code). ppmonstr is unchanged. .1593 zcmzcm v0.01 (discussion) is a free, experimental, closed source compressor for 32 bit Windows by Nania Francesco Antonio, Dec. 16, 2011. It uses context mixing. Commands c1 through c7 select memory usage for compression. Decompression uses the same memory. c7 uses the most memory and gets the best compression. zcm v0.02 was released Dec. 23, 2011. zcm v0.03 was released Dec. 28, 2011. zcm v0.04 was released Jan. 30, 2012. (Program banner says v0.03). zcm v0.11 was released Feb. 19, 2012. It is described as mixing 6 contexts. It detect file type and uses exe, delta, and LZP preprocessors. It has separate models for text and binary data. Speed and memory usage are the same for compression and decompression. Commands c0 through c7 select memory usage. Each increment doubles memory, resulting in better compression. Memory is used slowly as the program runs up to a maximum value which is not reached on enwik8 for c5 and higher. For enwik8, c7 uses 1286 MB rather than 1716 MB. zcm 0.20b was released Apr. 4, 2012. It is an archiver rather than a single file compressor. Option -m7 selects maximum memory usage (range 32 MB to 1.7 GB). zcm 0.30 was released May 2, 2012. zcm 0.40 was released May 16, 2012. It is described as using CM with 6 contexts, a mixer, and one re-mixer (APM or SSE) to adjust the mixer output. It uses LZP preprocessing. zcm 0.50a was released June 2, 2012. zcm 0.60d adds multithreading and other improvements. The -t option selects the number of tasks. -t0 auto-detects the number of cores, which is equivalent to -t2 on the dual core test machine (T3200, 3 GB). The default is -t1. The -m option selects memory usage from -m1 (46 MB per task) to -m7 (1.6 GB per task). The default is -m4. Parallel compression is performed by separate processes that can independently access 2 GB of memory each in 32 bit Windows. When run with -t2, there is also a third task using 5 MB of memory. All three tasks saturate one CPU core each. It was found that -t2 makes compression worse (probably by splitting the input in half and compressing each separately) and is not much faster than -t1. The -t option can also be given during extraction. If the archive was compressed with -t2 then extraction with -t2 doubles memory usage but only improves speed slightly. If compressed with -t1 then extraction with -t2 is 4 seconds slower for enwik8 than with -t1 because the extra task exits immediately and the third 5 MB task continues to run. zcm 0.70b was released Oct. 14, 2012. zcm 0.80 was released May 15, 2013. It was tested in Linux under Wine. When -t2 was used to compress in 2 threads, it was also used to extract. zcm 0.88 (discussion) was released June 21, 2013. It was tested both in Windows and in Linux under wine. zcm 0.90 was released May 3, 2014. zcm 0.92 was released May 16, 2014. A 64 bit Windows version was released July 3, 2014. It supports the undocumented -m8 option using up to 3 GB memory. zcm 0.93 was released May 12, 2015. 12345678910111213141516171819202122232425262728293031323334353637383940Program Option enwik8 enwik9 Prog Total Comp Deco Mem Note--------- ------ ---------- ----------- -------- --------- ---- ---- ---- ----zcm v0.01 c1 23,914,413 2260 2730 35 26 c7 20,093,284 169,397,795 47,975 x 169,445,770 2965 2883 1486 26zcm v0.02 c7 20,277,130 170,848,574 2419 2396 1470 26zcm v0.03 c7 20,159,212 169,368,119 27,589 x 169,395,708 2416 2369 1476 26zcm v0.04 c7 20,853,133 173,956,638 27,731 x 173,984,369 1462 1459 1520 26zcm v0.11 c0 23,963,073 1230 1210 22 26 c1 22,937,669 1280 35 26 c2 22,076,074 1290 62 26 c3 21,362,445 1330 115 26 c4 20,810,077 1370 222 26 c5 20,447,150 1390 401 26 c6 20,215,116 1400 697 26 c7 20,078,151 165,518,908 31,576 x 165,550,484 1275 1190 1716 26zcm 0.20b -m7 20,204,267 167,177,534 161,122 x 167,338,656 1199 1204 1657 26zcm 0.30 -m7 20,237,368 167,198,948 161,558 x 167,360,506 949 970 1720 26zcm 0.40 -m7 20,200,819 167,138,719 161,502 x 167,300,221 904 929 1511 26zcm 0.50a -m7 19,966,605 164,661,654 161,614 x 164,823,268 947 971 1579 26zcm 0.60d -m7 -t1 19,786,363 162,731,120 171,517 x 162,902,637 915 960 1662 26 -m1 -t1 23,374,636 890 920 46 26 -m1 -t2 23,440,140 830 910 97 26 -m4 -t1 20,698,415 950 1000 226 26 -m4 -t2 20,925,875 940 990 389 26 -m6 -t1 19,933,151 1030 1050 651 26 -m6 -t2 20,359,596 1070 990 1160 26 -m7 -t2 20,267,309 2080 1130 2450 26zcm 0.70b -m7 -t1 20,065,306 166,373,795 159,493 x 166,532,988 870 884 1412 26zcm 0.80 -m7 -t1 19,937,741 164,724,585 110,565 x 164,835,150 552 557 1700 48 -m7 -t2 20,554,326 166,468,556 110,565 x 166,579,121 414 415 1990 48zcm 0.88 -t1 21,383,928 940 930 196 26 -t2 25,767,005 800 820 120 26 -m7 -t2 20,418,171 1110 890 1400 26 -m7 -t1 19,970,859 164,702,310 162,136 x 164,864,446 910 891 1434 26 -m7 -t1 19,970,859 164,702,310 162,136 x 164,864,446 546 527 1434 48zcm 0.90 -m7 -t1 20,006,179 165,266,797 164,361 x 165,431,158 511 516 ~1700 48zcm 0.92 -m7 -t1 19,803,545 163,246,657 166,763 x 163,413,420 500 512 1546 48zcm_x64 0.92 -m7 -t1 19,803,545 163,246,657 225,205 x 163,471,862 488 471 1549 48 -m8 -t1 19,700,970 160,848,578 225,205 x 161,073,783 489 474 2400 48zcm 0.93 -m8 -t1 19,572,089 159,135,549 227,659 x 159,363,208 421 411 3100 48 .1598 slim slim 23d is a free, closed source command line archiver by Serge Voskoboynikov, Sept 21, 2004. It uses a PPMII core (ppmd/ppmonstr) by Dmitry Shkarin with filters for special file types including text. The -m700 option selects 700 MB of memory. (I found -m800 causes disk thrashing at 1 GB). The -o10 option selects order 10 PPM. (-o12 and -o16 caused slim to fail on enwik9, creating an empty archive and exiting after about 60% completion with 1 GB. Smaller files were OK. There was no error with 2 GB). As with other PPM compressors (ppmd, ppmonstr), using a higher order improves compression but consumes memory faster. For enwik8, -o32 is optimal with 700MB available, but lower orders are better for enwik9. 123456 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp ------- ------- ---------- ----------- ----------- ----------- ----- ----- slim23d -m1700 -o12 19,077,276 159,772,839 69,453 x 159,842,292 5232 ~5400slim23d -m700 -o32 19,226,339 (failed) 69,453 x 6530 6770slim23d -m700 -o10 19,264,094 162,529,098 69,453 x 162,598,551 5175 5360 .1605 bwmonstrbwmonstr 0.00 is a free, experimental, closed source file compressor by Sami Runsas, Mar. 10, 2009. It uses BWT. The program takes no options. It loads the input file into a single block and allocates 1.25 times the block size in memory for either compression or decompression. Thus, it is able to transform enwik9 in a single block. bwmonstr 0.01 was released Mar. 18, 2009. bwmonstr 0.02 was released July 8, 2009. It uses a compressed representation internally, thus memory usage is less than the 1 GB block size. It compresses the entire input file in a single block and requires enough memory to hold the file. The program is multi-threaded even on a single block. Times shown are for a single core processor, but would be faster on a multi-core processor. reorder2 is an alphabet reordering program by Eugene Shelwien. drt is the dictionary preprocessor from lpaq9m by Alexander Rhatushnyak 12345678 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- --- ---- bwmonstr 0.00 20,401,888 161,249,951 27,772 x 161,277,723 15638 13028 1224 BWT 26bwmonstr 0.01 20,379,365 161,026,258 32,163 x 161,058,420 15695 14135 1224 BWT 26bwmonstr 0.02 20,307,295 160,468,597 69,401 x 160,537,998 331801 156147 590 BWT 30reorder2|bwmonstr 0.02 20,229,555 590 BWT 30drt|bwmonstr 0.02 19,750,461 450 BWT 30 .1617 nanozipltcb nanozipltcb is a free file compressor by Sami Runsas, July 25, 2008. It uses BWT. It takes no options. It is a customized version of nanozip, similar to -cO -txt -m1700m, but tuned to this benchmark. Files compressed with nanozipltcb are not compatible with nanozip. nanozipltcb 0.08, Mar. 3, 2010. is multithreaded and has other optimizations. Size is based on a self extracting archive. Only a 64 bit Windows version exists. Tested by the author on a quad core Q6600 at 3.0 GHz. The older version is withdrawn. nanozipltcb 0.09, was relased May 10, 2010. It has only a 64 bit Linux executable version. 1234567 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ---------------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----nanozip 0.01 -cO -m1670m -txt 20,306,489 167,509,921 266,797 x 167,776,718 403 284 1325 BWTnanozipltcb 20,494,670 166,251,135 239,124 x 166,490,259 348 185 1729 BWTnanozipltcb 0.08 20,626,962 166,571,051 0 xd 166,571,051 93 53 1729 BWT 37nanozipltcb 0.09 20,537,902 161,581,290 133,784 x 161,715,074 64 30 3350 BWT 40 .1637 M03 M99 (mirror) is a free file compressor by Michael Maniscalco, originally written in 1999 and ported to Windows on Mar. 27, 2007. It uses BWT, based on MSufSort 3.1. M99 is a predecessor to M03. Command line is: 1234567M99.exe e|d -switches blocksize input output switches are:-r = post BWT run length encoding-a = arithmetic coding instead of M99 style bit packing-f = fast mode-m = max compression mode (implies -a). Blocksize can be specified in bytes (like 10000), kb, mb etc as 100m or 100k. Memory requirement for compression is 6 times the blocksize maximum, although in most cases only a little over 5 times blocksize is used. Blocksize 239m divides enwik9 into 4 approximately equal parts and requires about 1500 MB memory. Version 2.1 was released Apr. 19, 2007. M99 2.2.1, released July 18, 2008, has an optimization to compress the contents of TAR files separately. For other files, it increases the size by 1 byte. M03 v0.2a, Oct. 10, 2009, takes just one option, which is the block size in bytes. Memory usage is 6x block size for compression and 5x for decompression. M03 v1.1 beta was released Oct. 24, 2011 for 64 bit Windows. It includes some new, fully parallel suffix sorting and BWT construction algorithms. The option 1000000000 specifies a single block requiring 5 GB memory to compress or decompress. 12345678 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----M99 e -m 239m 21,431,211 180,477,144 67,697 x 180,544,841 674 496 1500 BWTM99 v2.1 e -m 239m 21,251,170 178,910,174 68,052 x 178,978,226 713 535 1500 BWTM99 v2.2.1 e -m 239m 21,251,171 178,910,175 72,245 x 178,982,420 704 520 1500 BWTM03 0.2a e 250000000 20,713,383 173,944,553 95,699 x 174,040,252 868 624 1470 BWT 26M03 1.1b e 1000000000 20,710,197 163,667,431 50,468 x 163,717,899 457 406 5735 BWT 52 .1638 glza tree 0.1 is a free, experimental, open source compressor by Kennon Conrad, Mar. 31, 2014. It is a general purpose compressor optimized to compress text. The compressor is 3 separate programs. The first, TreeCapEncode.c, converts upper case letters to lower case plus special symbols. It takes 4 minutes. The second, TreeCompress.c, uses a suffix tree to parse the input into tokens. It takes 3 days, 21 hours, 37 minutes and uses 1850 MB memory. The third, TreeBitEncode.c encodes the tokens using variable length codes. This takes 27 seconds. The decoder, TreeDecode.c, takes 22 seconds using 400 MB memory. Compressed size depends on available memory; thus results below are machine dependent. tree 0.3 was released Apr. 27, 2014. It uses a model that only parses whole words with a leading space. tree 0.4 was release May 21, 2014. tree 0.5 was released May 25, 2014. tree 0.9 was released July 5, 2014. It includes a multi-threaded decompression program for better speed. TreeCapEncode.c is now TreePreEncode.c and run in 11 seconds. tree 0.10 was released Aug. 15, 2014. Timings for each step are: TreePreEncode 20 s, TreeParagraphs 1485 s, TreeWords 393 s, TreeCompress 70732 s, TreeBitEncode 33 s, total 72663 s. tree 0.11 was released Sept. 2, 2014. It uses extra symbol tables to improve compression ratio and decompression speed. tree 0.12 was released Sept. 29, 2014 with a bug fix on Oct. 1, 2014. For note 48, the program was compiled with gcc 4.8.2 -O3. tree 0.13 was released on Oct. 12, 2014. There is a 32 bit version that uses 1700 MB memory and a 64 bit version of TreeCompress.exe that uses 6x the input size in memory. The option (P+W+C) means that the two preprocessing stages TreeParagraph.exe and TreeWords.exe (same for 32 and 64 bit) were run on the input prior to TreeCompress.exe or TreeCompress64.exe. Otherwise only the last stage is run. The preprocessing stages make compression worse but faster. tree 0.14 was released Oct. 29, 2014. The 64 bit version was tested. tree 0.15 was released Nov. 21, 2014. 0.15a, Nov. 22, 2014, has a faster decompressor. tree 0.16b was released Dec. 9, 2014. tree 0.17 was released Dec. 16, 2014. Compression times an memory usage are approximate (unchanged since last version). tree 0.18 was released Jan. 17, 2005 with improvements to the 64 bit version. The -r option controls memory usage. tree 0.19 was released Feb. 4, 2015. glza 0.1 is the new name of the tree program, released Apr. 27, 2015. It uses adaptive order 0 arithmetic coding of dictionary symbols and other changes. glza 0.2 was released May 24, 2015. glza 0.3 was released July 13, 2015. Decompression requires 330 MB memory. glza 0.3b was released Nov. 16, 2015. It contains the same files as v0.3a (a bug fix for v0.3) except that it also contains GLZAcompressFast (.c and .exe), which was tested below. glza 0.4 was released Mar. 11, 2016. glza 0.8 was released Sept. 27, 2016. The option -p3 selects a factor to favor longer strings over more compressive. glza 0.10.1 was released Jan. 6, 2018. 123456789101112131415161718192021222324252627282930313233343536373839404142 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----tree 0.1 187,985,256 6,656 sd 187,985,256 337287 22 1850 Dict 64 23,660,364 187,933,399 6,656 sd 187,940,055 174589 12 1850 Dict 65tree 0.2 23,250,856 185,311,980 337287 22 1850 Dict 64tree 0.3 23,233,932 184,838,711 6,591 sd 184,845,302 105728 23 1850 Dict 64tree 0.4 23,178,500 184,312,072 7,216 sd 184,319,288 68866 22 1850 Dict 64tree 0.5 23,084,884 181,375,076 8,271 sd 181,383,347 68869 22 1850 Dict 64tree 0.9 22,366,748 181,324,992 7,104 sd 181,332,096 70723 15 1850 Dict 64tree 0.10 22,072,432 178,949,848 12,174 sd 178,962,022 72663 18 1850 Dict 64tree 0.11 22,076,556 178,773,808 9,645 sd 178,783,453 72659 13 1850 Dict 64 22,076,556 178,782,844 9,645 sd 178,792,489 36765 8 1750 Dict 67tree 0.12 21,974,704 177,542,704 10,121 sd 177,552,493 226279 17 1800 Dict 48 177,321,380 7 Dict 65tree 0.13 21,976,316 177,340,072 10,525 sd 177,350,597 116473 7.5 1700 Dict 67 (P+W+C) 22,075,700 178,774,864 10,525 sd 178,785,389 36652 7.3 1700 Dict 67tree64 0.13 22,196,288 180,516,660 10,525 sd 180,516,660 39417 7.4 6000 Dict 67 (P+W+C) 22,304,524 180,941,504 10,525 sd 180,952,029 20834 7.4 6000 Dict 67tree64 0.14 22,124,900 178,839,408 10,525 sd 178,849,933 9364 7.5 5100 Dict 67 (P+W+C) 22,229,468 179,806,072 10,525 sd 179,816,597 6899 7.4 3800 Dict 67tree 0.15a 21,922,356 176,896,672 11,203 sd 176,907,875 114733 6.9 1800 Dict 67 (P+W+C) 22,023,144 178,321,588 11,203 sd 178,332,791 36828 6.6 1800 Dict 67tree64 0.15a 22,140,724 177,974,208 11,203 sd 177,985,411 9542 7.0 5200 Dict 67 (P+W+C) 22,155,772 178,874,272 11,203 sd 178,885,475 7269 6.8 3900 Dict 67tree 0.16b 21,602,648 173,848,464 13,395 sd 173,861,859 114739 8.1 1693 Dict 67tree64 174,825,152 13,395 sd 174,838,547 9362 8.2 5002 Dict 67tree 0.17 21,564,704 173,461,100 13,563 sd 173,474,663 115000 7.1 1700 Dict 67tree64 21,772,096 174,399,062 13,563 sd 174,412,625 9400 7.2 5000 Dict 67tree64 0.18 21,639,204 174,357,336 13,463 sd 174,370,799 4901 7.2 6009 Dict 67 -r100 173,856,720 13,463 sd 173,870,183 14965 7.2 15370 Dict 67tree 0.19 21,497,672 173,210,648 14,625 sd 173,225,273 119742 7.1 1692 Dict 67tree64 0.19 21,547,924 173,803,292 14,625 sd 173,817,917 4702 7.2 6023 Dict 67glza 0.1 21,225,310 171,131,068 14,391 sd 171,145,459 4716 12.5 6027 Dict 67glza 0.2 20,806,740 167,274,338 15,218 sd 167,289,556 4713 16.4 6027 Dict 67glza 0.3 20,541,988 165,419,346 18,982 sd 165,438,328 4156 14.9 6026 Dict 67glza 0.3b GLZAcompressFast 22,021,734 180,243,710 18,982 sd 180,262,692 786 15 11395 Dict 67glza 0.4 20,497,514 165,117,094 20,056 sd 165,137,150 5971 14.9 6024 Dict 67glza 0.8 20,472,828 164,943,294 64,327 sd 165,007,621 9328 15.8 12673 Dict 67 -p3 20,442,490 164,634,038 64,327 sd 164,698,365 10106 15.8 12369 Dict 67glza 0.10.1 20,753,713 167,832,309 69,935 s 167,902,244 594 11.9 7452 Dict 67 -x -p3 20,356,097 163,768,203 69,935 s 163,838,138 8184 11.9 8205 Dict 67 .1639 bcm bcm 0.03 (discussion) is a free command line compressor by Ilia Muraviev, Feb. 9, 2009. It uses BWT with a fixed block size of 32 MB and an order 0 CM back end. It takes no command line options. bcm 0.04 (discusion) was released Feb. 11, 2009. It increases the block size to 64 MB and has modeling improvements including interpolated SSE. bcm 0.05 (discussion) was released Mar. 5, 2009. The option -b327680 selects 327680 KB block size. It uses 5x block size memory. bcm 0.07 (discussion) was released Mar. 15, 2009. bcm 0.08 (discussion) was released May 31, 2009. The command e370 means to use a block size of 370 MB. Memory usage is 5 times block size. Larger values gave an “out of memory” error under 32 bit Windows Vista with 3 GB memory. reorder v2 (discussion) is an alphabet reordering preprocessor for BWT compressors by Eugene Shelwien, May 26, 2009. xlt is a pair of 256 byte files that defines the alphabet permutation used by reorder, released June 4, 2009 by Eugene Shelwien. bcm 0.09 (discussion) was released Aug. 19, 2009. Option -b328 selects a block size of 328 MB. Memory usage is 5 times block size for both compression and decompression. bcm 0.10 x64 x86 was released Dec. 11, 2009. Discussion The x64 version is for 64 bit Windows. The x86 version is for 32 bit Windows. The -b option gives the block size in MB. Memory usage is 5x block size. bcm 0.11 (discussion) was released June 22, 2010. It is described as a complete rewrite. bcm 0.12 (discussion) was released Oct. 31, 2010. A 64 bit version was tested by the author with -b1000 on June 1, 2011. bcm 0.14 (discussion) was released June 22, 2013. Only a 64 bit Windows version was released. Command c1000 means to compress in 1000 MB blocks. bcm 1.00 (discussion) was released as open source (public domain), Mar. 2, 2015. It was tested by compiling with g++ 4.8.2 -O3 in Linux. 123456789101112131415161718192021222324 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----bcm 0.03 22,007,655 192,194,478 67,988 x 192,262,466 517 437 164 BWT 26bcm 0.04 21,450,604 185,368,446 69,553 x 185,455,999 578 486 329 BWT 26bcm 0.05 -b327680 20,770,671 172,180,796 69,040 x 172,249,836 684 535 1642 BWT 26 -b406991 171,857,720 69,040 x 171,926,760 2030 BWT 27bcm 0.07 -b327680 20,770,673 172,180,037 60,990 x 172,241,027 818 578 1642 BWT 26 -b488282 169,396,680 60,990 x 169,457,670 472 341 2440 BWT 28bcm 0.08 e370 20,744,613 171,891,509 61,666 x 171,953,175 948 709 1900 BWT 26 e477 20,744,613 169,179,098 61,666 x 169,232,764 545 418 2385 BWT 28reorder_v2|bcm 0.08 e477 20,677,205 168,694,909 80,149 x 168,775,058 548 422 2385 BWT 28reorder_V2|bcm 0.08 e477 xlt 20,665,536 168,598,121 80,661 x 168,678,782 552 420 2385 BWT 28bcm 0.09 -b328 20,625,697 170,913,486 63,704 x 170,977,190 1342 1053 1652 BWT 26bcm 0.10 x86 -b370 20,811,710 172,570,245 63,788 x 172,634,033 758 483 1899 BWT 26bcm 0.10 x64 -b512 169,871,532 72,366 x 169,943,898 362 2560 BWT 35bcm 0.10 x64 -b477 169,843,006 72,366 x 169,915,372 522 373 2500 BWT 36bcm 0.11 -b328 20,773,468 172,267,889 70,936 x 172,338,825 798 548 1552 BWT 26 -b477 20,773,468 169,466,640 70,936 x 169,537,576 611 423 2500 BWT 43bcm 0.12 -b328 20,825,972 172,665,135 61,874 x 172,727,009 637 414 1683 BWT 26 -b1000 20,825,972 164,654,285 61,974 x 164,716,259 281 214 5000 BWT 50bcm 0.14 c1000 20,736,614 163,885,873 74,569 x 163,960,442 162 153 5000 BWT 60bcm 1.00 -b500 20,792,796 169,489,509 15,187 s 169,504,696 251 250 2500 BWT 48 -b1000 20,792,796 164,251,284 15,187 s 164,266,471 147 142 5000 BWT 60 .1640 bsc bsc 1.00 x86 x64 is a free, experimental file compressor by Ilya Grebnov, Apr. 7, 2010. It uses BWT with LZP preprocessing. The option -b1000t selects a block size of 1000 MB and turns off multithreading (parallel compression on multiple cores). Memory requirements is 6x block size times number of threads. Multithreading was turned off (-t) for both compression and decompression in order to maximize compression. Nevertheless, compression shows CPU utilization of 109% on 2 cores even with -t set. -p turns off LZP preprocessing. -m2 selects a sort (Schindler) transform of order 5. Other options select LZP table size (default 218 bytes, range 10..28), LZP match length (default 128, range 4..255), block sorting algorithm (default BWT, possible order 4 or 5 sort (Schindler) transform), and preceding or following context for sorting (default following). Only the defaults were tested, which may not be optimal. There are two versions: x86 for 32 bit Windows with a 2 GB memory limit, and x64 for 64 bit Windows with no memory limit. Notes apply to enwik9. enwik8 size is tested as in note 26. bsc 1.03 x86 and x64 (discussion), Apr. 11, 2010, are bug fixes that do not change results except for the size of the program. The x64 version is 276,292 bytes. bsc 2.00, May 3, 2010, is available with source code licensed under LGPL. bsc 2.20, June 15, 2010, has speed improvements for multi-core support. -b1000p means use 1000 MB block size (-b1000, requires 5 GB memory) with no preprocessing (-p). -b80p uses 80 MB block size with no preprocessing. -m2f means use sort transform order 5 (-m2) and fast compression (-f). enwik8 was tested as in note 26 on bsc-x32 replacing -b1000p with -b100p. bsc 2.26, July 26, 2010, has some speed improvements but retains compatibility with version 2.25. -b328 selects a block size of 328 MB, which divides enwik9 into 3 blocks. This is the fewest number of blocks supported by the x86 version because of a 2 GB process limit. The x64 version does not have this limit but requires 64 bit Windows. -t disables parallel block processing, which would double the memory requirement. -T disables all multicore processing. This gives a smaller compressed size but is slower than -t. -T or -t must be specified during decompression to prevent an out of memory error. With -t, CPU usage is 156% for compression and 129% for decompression on a dual core T3200 (2 GHz, 3 GB, Vista 32 bit). bsc 2.4.5, Jan. 3, 2011, improves the speed of decompression. It remains compatible with the previous version. bsc 2.5.0, Mar. 20, 2011, had no significant changes for the tests performed. Minor performance enhancements. CRC32 is replaced with Adler32. bsc 3.0.0, Aug. 27, 2011 adds experimental NVIDEA (CUDA) GPU acceleration for forward sort transforms ST5 through ST8. ST7 and ST8 are GPU only. There are 32 and 64 bit versions. For the test shown, the 64 bit version was used. -b32 means to select 32 MB block size, -p disables preprocessing, -m8 selects order 8 sort transform, and -f selects fast compression. The test machine is a Core-i7 2600K (4 cores, 8 threads, 8 MB cache) overclocked from 3.4 GHz to 4.6 GHz, with a 384 CUDA processor GeForce 560Ti GPU, overclocked from 822 MHz to 900 MHZ, with 2000 MHz memory speed. Compression takes 8.705 seconds using 1129 MB CPU memory and about 1 GB GPU memory. Decompression uses only the CPU, taking 18.595 seconds using 1395 MB memory. bsc 3.1.0 was released July 8, 2012. 12345678910111213141516171819 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- --- ----bsc-x64 1.00 -b1024 20,769,550 163,820,253 274,197 x 164,094,450 311 212 6000 BWT 34bsc-x64 1.00 -b1000 -p 20,787,437 163,882,152 274,197 x 164,156,349 271 209 6000 BWT 38bsc-x86 1.00 -b250 -t 20,769,550 174,337,692 258,824 x 174,596,616 473 276 1504 BWT 28bsc-x64 1.00 -b79 -p -m2 22,864,952 200,607,811 274,197 x 200,882,008 36 71 1896 ST5 39bsc-x86 1.03 -b250 -t 20,769,550 174,337,692 261,058 x 174,598,750 470 280 1504 BWT 28bsc-x64 2.00 -b1000p 20,789,147 163,888,465 122,581 s 164,011,046 237 199 5095 BWT 39bsc-x64 2.20 -b1000p 20,789,228 163,888,858 149,153 s 164,038,011 238 93 5095 BWT 39 -b80p -m2f 23,031,164 201,321,919 149,153 s 201,471,072 27 68 1624 ST5 39bsc-x86 2.26 -b328 -t 20,774,446 171,826,969 138,293 s 171,965,262 386 183 1667 BWT 28 -b328 -T 20,772,543 171,820,075 138,293 s 171,958,368 438 274 1663 BWT 28bsc-x86 2.45 -b328 -t 20,774,446 171,826,969 130,327 s 171,957,296 382 141 1667 BWT 28 -b328 -T 20,772,543 171,820,075 130,327 s 171,950,402 443 195 1667 BWT 28bsc-x86 2.50 -b328 -t 20,774,446 171,826,969 129,593 s 171,956,562 398 139 1670 BWT 28 -b328 -T 20,772,543 171,820,075 129,593 s 171,949,668 444 195 1670 BWT 28bsc-x64 3.00 -b32p -m8f 22,461,680 196,398,933 934,176 x 197,333,109 8 18 3129 ST8 51bsc-x86 3.10 -b328 -T 20,920,018 173,026,090 241,476 s 173,267,566 390 149 1712 BWT 28 .1640 bbbbbb ver. 1 is a free, open source (GPL) command line file compressor by Matt Mahoney, Aug. 31, 2006. It uses a memory efficient BWT allowing blocks up to 80% of available memory. The transformed data is compressed with an order 0 PAQ like model: the previous bits of the current byte are mapped first to a bit history, then through a 6 level probability correcting adaptive chain before bitwise arithmetic coding. The m1000 command selects 1000 MB block size. Thus, enwik9 is suffix sorted in one block. This is accomplished by sorting 16 smaller blocks, writing the pointers to 4 GB of temporary files, and merging them. The inverse transform is done in memory without building a linked list. Rather, the next position is found by looking up the approximate location in an index of size n/16 and finding the exact location by linear search. bbb.exe Win32 executable compiled with MinGW g++ 3.4.2 and UPX 1.24w. 12g++ -Wall -O2 -Os -march=pentiumpro -fomit-frame-pointer -s -o bbb.exeupx bbb.exe bbb Linux executable, supplied by Phil Carmody (Aug. 31, 2006). Compiled with g++-4.1 -Wall -O2 -o bbb bbb.cpp; strip bbb bbb has a faster mode for both compression and decompression that does a “normal” BWT using 5x blocksize in memory. Output format is the same for fast and slow mode for both compression and decompression. A file compressed in fast mode can be decompressed in slow mode on another computer with less memory, and vice versa. The mode has no effect on the compressed file contents. Recommended usage for best compression: For files smaller than 20% of available memory, use fast mode and one block. For example, if you have 1 GB memory (800 MB available under Windows) and foo is 100 MB: 12bbb cfm100 foo foo.bbb (c = compress, f = fast, m100 = 100 MB blocks)bbb df foo.bbb foo.out (d = decompress, f = fast) If the file is 20% to 80% of available memory, use one block in slow mode. If foo is 500 MB: 12bbb cm500 foo foo.bbbbbb d foo.bbb foo.out If the file is over 80% of memory, use 80% of memory as the block size in slow mode. If foo is 1 GB: 12bbb cm640 foo foo.bbbbbb d foo.bbb foo.out The model requires about an additional 6 MB that should be subtracted from available memory. bbb results by block size are shown below. Gain is the compression improvement obtained by using a larger block size. Gain(blocksize) is defined as C(blocksize/10)/C(blocksize) - 1 where C(x) means the compressed size of enwik9 with block size x. Compression times are fast modes for block sizes 10 through 108 and slow mode for 109 on a 2.2 GHz Athlon-64 with 2 GB memory under WinXP Home SP2. 1234567891011Block enwik8 enwik9 Gain Comp ns/b---- ---------- ----------- ---- ----101 66,414,034 646,449,572 4359102 56,241,619 542,912,447 .191 2169103 45,500,201 435,597,745 .246 1907104 37,006,646 343,663,203 .267 1802105 30,946,413 275,172,983 .249 1838106 26,661,555 233,555,297 .178 2095107 23,460,457 204,355,672 .142 2499108 20,847,290 182,162,626 .122 3106109 20,847,290 164,032,650 .110 4524 .1647 pcompress pcompress 3.1 is a free, open source (LGPLv3 and MPLv2) deduplicating archiver and file compressor by Moinak Ghosh. A Ubuntu build released Feb. 2, 2015 and updated Feb 6, 2015 was tested. The option “-c libbsc” means to compress a single file using libbsc (BWT). -l14 selects maximum compression (default -l6). -s1000m selects 1000 MB block size (default -s60m). The compression algorithm is deduplication followed by dictionary preprocessing and BWT. 1234 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----pcompress 3.1 -c libbsc -l14 -s1000m 20,769,968 163,391,884 1,370,611 x 164,762,495 359 74 3300 BWT 48 .1652 paq9apaq9a is a free, open source, command line archiver by Matt Mahoney, Dec. 31, 2007. It is a context mixing compressor with an LZP preprocessor to improve speed for highly redundant files. Matches to a context length of 12 or more are coded as 1 bit, and literals as 9 bits. Context mixing differs from paq8 in that it uses a chain of 2-input mixers rather than one mixer with many inputs. It mixes sparse order-1 contexts with gaps of 3, 2, 1, 0, then orders 2 through 6, then text word orders 0 and 1. Option -9 selects maximum memory. 1234 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ---paq9a -9 19,974,112 165,193,368 13,749 s 165,207,117 3997 4021 1585 CM .1662 uda uda 0.300 is a free, experimental file compressor by dwing, July 16, 2006. It is a modification of PAQ8H with optimizations for speed. It takes no options. The decompresser size is for uda.exe, since this is smaller than the corresponding zip file. .1678 BWTmixBWTmix v1 (from here) is a free, open source, experimental file compressor by Eugene Shelwien, June 28, 2009. It uses BWT (implemented using quicksort) followed by an 8 model CM mixed using a tree of 2-input mixers. The option c10000 selects a block size of 10000 * 100KB. The default block size is 100 MiB. Memory usage is 5x block size. 1234Program Option enwik8 enwik9 Comp Deco Mem Note--------- ------ ---------- ----------- ---- ---- ---- ----bwtmix v1 c3334 20,608,793 170,596,616 3413 1253 1670 26 c10000 20,608,793 167,978,527 1793 690 5000 49 .1694 lrziplrzip 0.40 is a free, open source file compressor by Con Kolivas, Nov. 26, 2009. It uses a range dictionary preprocessor to remove long range redundancies (based on rzip), followed by lzma (7zip) compression. It also has options to compress with lzo (lzop) or bzip2 after preprocessing, or to output the preprocessed data for compression with other programs. It runs under Linux. lrzip 0.42 adds zpipe (zpaq cmid.cfg) as a back end compressor using option -z. It was tested in this mode. lrzip 0.612 (discussion), Mar. 17, 2012, uses the current version of libzpaq (v5.01) for faster execution. The options select built in level 3 (max.cfg) compression. 12345Program Options enwik8 enwik9 prog total Comp Deco Mem alg note---------- ------------ ---------- ----------- -------- ----------- ---- ---- ---- ---- ----lrzip 0.40 25,190,577 214,903,304 38,173 x 214,941,477 843 31 1700 LZ77 33lrzip 0.42 -z 21,327,441 183,609,156 49,881 x 183,659,037 2173 2230 1800 CM 33lrzip 0.612 -z -L 9 -p 1 19,847,690 169,318,794 99,363 x 169,418,157 2987 2929 2700 CM 33 .1707 cm4_extcm0, cm0_ext, cm1 (discussion), and bwcm (discussion) are a series of free file compressors for Windows by Nauful. cm0 is a context mixing compressor released Dec. 4, 2013. cm0_ext is a slower version of the same program with better compression released Dec. 4, 2013. cm1 uses ROLZ and was released Dec. 5, 2013. bwcm used BWT and was released Dec. 6, 2013. Only bwcm takes any options. The command c128 uses a 128 MB block size. The default is c16. It requires 12x block size in memory for compression and 5x for decompression. All programs are single-threaded. cm4_ext was released Jan. 21, 2014. It is an order 10 CM with a match model and SSE. 123456789 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----cm0 23,276,242 206,929,764 201,213 x 207,130,977 1731 1791 68 CM 26cm0_ext 21,156,055 181,772,665 201,303 x 181,973,968 4206 4250 516 CM 26cm1 28,092,863 243,631,412 202,038 x 243,833,450 391 226 211 CM 26bwcm 23,265,333 204,416,216 202,803 x 204,619,019 1142 335 184 CM 26bwcm c128 21,278,364 185,473,048 202,803 x 185,675,851 1525 407 1469 CM 26cm4_ext 20,188,048 170,566,799 204,782 x 170,771,581 4123 4130 1906 CM 26 .1722 M1x2 M1 0.2a is a free, open source (GPL) file compressor by Christopher Mattern, released Oct. 3, 2008. It uses context mixing with only two contexts. The contexts are 64 bits with some bits masked out. The masks and several other parameters were selected by a combination of a genetic and hill climbing algorithms running for several hours to 3 days to optimize compression on this benchmark as discussed here. M1 0.3 was released Jan. 2, 2009. M1 0.3b was released Apr. 12, 2009. This version takes a configuration file created by an optimization version of the program. The configuration file is required by the decompresser (and is included in the program size). e8-m103b1-mh is a parameter file for M1 0.3b obtained by mhajicek after about 3 days of CPU time running M1’s genetic optimization program on enwik8. M1x2 v0.5-1 was released Dec. 8, 2009. The option 6 means to use 48 x 26 MB memory. The option enwik7.txt is an optimization file which resulted from tuning parameters on the first 10 MB of the benchmark by a separate optimization process. It must be specified during decompression. The file size (242 bytes) is included in the decompresser size. The program includes source code and compiled Windows and Linux versions. The Windows version was tested. The program is described as follows by the author: M1x2 mixes two ordinary M1 models in the logistic domain (thus four models in total). Data is processed bitwise with a flat decomposition. Contexts are mapped to states, which represent bit histories encountered under the corresponding context. In this implementation contexts are restricted to byte masks with some tweaks for text; the context mapping is implemented using hash tables. Two bit history states s1, s2 are quantised Q(.,.) and mapped to a linear counter to produce a prediction p = P(y=1|Q(s1, s2)), where y is the next bit. Afterwards two predictions are transformed into the logistic domain and mixed linearily. The final prediction is: p = Sq[ (St(p2)-St(p1))*w + St(p1) ]; St(.) and Sq(.) name stretch and squash (see PAQ) There is just a single weight w in [0, 1]. The Predictions and the weight are updated to minimize coding cost. As in previous versions a genetic optimzier can tune all degrees of freedom to a training data set. Parameters include: contexts, state machine structure, counter and mixer settings. m1x2 v0.6 (discussion), Feb. 8, 2010, preprocesses the input by pre-compressing it with an order-1 12 bit length limited Huffman code prior to compression with the context mixing model of v0.5-1. This improves speed by reducing the size of the input and improves compression because the context hash tables are not filled as quickly. The 7 option says to use 8 x 27 MB memory. The decompresser size includes the 242 byte configuration file enwik7.txt. The length limited Huffman codes are generated using an algorithm described by A. Turpin and A. Moffat in Practical Length-Limited Coding for Large Alphabets, The Computer Journal, 38, (5), 339-347, 1995. Updated link. 12345678910 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Notes------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- -----M1 0.2a 24,656,008 219,115,069 25,336 s 219,140,405 452 447 33 CM 26M1 0.3 24,004,989 215,101,056 24,596 s 215,125,652 395 404 33 CM 26M1 0.3b text2.txt 23,506,215 209,057,165 23,150 s 209,080,315 377 403 33 CM 26M1 0.3b text.txt 23,558,990 360 390 33 CM 26M1 0.3b e8-m103b1-mh 23,456,037 207,931,967 23,150 s 207,955,117 383 412 33 CM 26M1x2 v0.5-1 6 enwik7.txt 20,812,625 172,771,031 47,608 x 172,818,639 1019 1091 1576 CM 26M1x2 v0.6 7 enwik7.txt 20,723,056 172,212,773 38,467 s 172,251,240 711 715 1051 CM 26 .1727 cmm4 cmm1 is a free, open source (GPL) file compressor by Christopher Mattern, Sept. 18, 2007. It uses context mixing with LZP preprocessing. cmm2 was released Dec. 10, 2007 without source code. cmm2 080113 was released Jan. 13, 2008 without source code. cmm3 080207 (test release) was released Feb. 7, 2008 without source code. cmm4 v0.0 (test release) was released Mar. 14, 2008 without source code. cmm4 v0.1e was released Apr. 20, 2008 without source code. It takes a 2 digit option “wm” (e.g. 96 meaning w=9, m=6). Memory usage is 2w MB for a sliding window, and 12*2m MB for a context mixing model (order 1,2,3,4,6). On my machine m=7 caused disk thrashing. Description by the author: CMM4 0.1e Is a variable order context mixing coder, it predicts using the four “highest” (ranking: 643210) models in each bit coding step and, in addition, the match model input. Orders 0 and 1 are implemented using a table lookup, all higher orders use nibble based hashing. Matches are found using order 4 and 6 LZP, the pointers and a quick exclusion hash are stored within the model’s hashing tables. The mixer joins the 4 (or 5 in presence of a match model) predictions and outputs them to a SSE stage. A mixer (similar to (L)PAQ) is selected based on the last byte’s 4 MSBs and on the coding order. The SSE context is made of an order 0 context and qunatized combination of the previous symbol rank, the match length and partially matched symbol. This results in a notable compression increase on redundant data. The model’s counters are quantized using the PAQ’s state machine since CMM4 (will be replaced). Despite the use of hashing most data structures are tuned to never cross a cache line per nibble (the models) or octet (the mixer) (only SSE does). The core compression performance is equivalent to LPAQ1/2, while being faster. In addition there’s a filter framework, which currently implements an x86 transform and will be extended. 12345678910Compression Compressed size Decompresser Total size Time (ns/byte)Program Opt enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- --- ---------- ----------- ----------- ----------- ----- ----- --- ---cmm1 23,495,627 207,266,867 18,785 x 207,285,652 1165 1198 50 CMcmm2 23,477,008 208,268,161 17,901 x 208,286,062 1756 1849 32 CMcmm2 080113 22,303,128 191,477,052 18,263 x 191,495,315 2180 2127 329 CMcmm3 080207 21,212,766 179,633,451 18,700 x 179,652,151 2328 ~2609 395 CMcmm4 v0.0 21,459,665 186,395,591 18,042 x 186,413,633 1807 1849 116 CMcmm4 v0.1e 96 20,569,034 172,669,955 31,314 x 172,701,269 2052 2056 1321 CMcmm4 v0.2b 87 20,550,129 171,969,035 1803 CM 42 .1740 lstm-compress lstm-compress is a free, experimental open source file compressor by Byron Knoll, June 15, 2017. It takes no options. It uses the LSTM neural network model and dictionary preprocessor from CMIX but omits the other models. A new version v2 of lstm-compress was released Dec. 12, 2017. v3 was released Mar. 30, 2019. 123456 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----lstm-compress v1 20,488,816 175,708,405 154,379 s 175,862,784 433968 433783 10 LSTM 66 lstm-compress v2 20,494,577 174,868,709 157,238 s 175,025,947 114764 114908 9 LSTM 83lstm-compress v3 20,318,653 173,874,407 144,567 s 174,018,974 92342 91876 9 LSTM 83 .1741 ccmccm 1.03a is one of 3 versions of a free file compressor by Christian Martelock, Feb. 11, 2007. It uses context mixing. The 3 versions are ccm (fastest, uses 17 MB memory), ccm_high (slower but better compression), and ccm_extra (best compression, uses 100 MB memory). The programs take no options. ccm 1.1.1a (Feb. 23, 2007) has only one version. ccm 1.1.2a (Mar. 2, 2007) includes a ccm_low version using less memory, which was not tested. ccm 1.20a (Mar. 21, 2007) has only one version. ccm 1.20d (Apr. 8, 2007) has two versions: ccm using 99MB memory and ccmx using 210 MB for better compression. Only ccmx was tested. ccm 1.21 (mirror) (Apr. 22, 2007) includes an option to select memory usage. 7 selects maximum memory, 1300 MB. Only the high compression version (ccmx) was tested. ccm 1.30 (mirror) was released Jan. 7, 2008. Only ccmx 7 (high compression version, maximum memory) was tested. 123456789101112Compression Compressed size Decompresser Total size Time (ns/byte)Program enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- ---------- ----------- ----------- ----------- ----- ----- --- ---ccm 1.0.3a 27,667,346 240,296,736 7,217 x 240,303,953 676 679 17 CMccm_high 1.0.3a 25,412,726 221,177,776 7,229 x 221,185,005 1119 1171 17 CMccm_extra 1.0.3a 24,027,805 207,273,926 7,230 x 207,281,156 1341 1353 100 CMccm 1.1.1a 22,824,629 197,271,467 9,019 x 197,280,486 1247 1252 82 CMccm 1.1.2a 22,675,768 195,965,427 8,502 x 195,973,929 1161 1183 83 CMccm 1.20a 21,350,295 182,784,655 13,346 x 182,798,001 1794 1801 210 CMccmx 1.20d 21,310,303 182,379,461 13,468 x 182,392,929 1383 1485 210 CMccmx 7 1.21 20,819,656 174,161,536 21,139 x 174,182,675 1521 1493 1324 CMccmx 7 1.30 20,857,925 174,142,092 15,014 x 174,157,106 1313 1338 1332 CM .1744 bit bit 0.1is a free, closed source file compressor by Osman Turan, Dec. 19, 2007. It uses ROLZ optimized for binary files. It takes no options. bit 0.2b is an archiver, released June 14, 2008. Option -m lwcm selects the compression type (lightweight context mixint). This is the only type supported. Option -mem 9 selects maximum memory. This option ranges from 0 to 9 and uses 3 + 2opt MB memory. The program uses order 1, 2, 3, 4, and 6 context mixing with 2 SSE stages as discussed here. Comments by author: LWCX (Light-Weight Context Mixing) is a codec of BIT Archiver. It’s designed for getting high compression ratio with acceptable speed (Not enough fast currently). LWCX is a bit-wise context mixing schema which tries to mix order-n models (order 012346). The statistics are gathered by the counters which predict next bit by semi-stationary update rule. After gathering the predictions from all models, a neural network (similar to PAQ’s neural network) tries to output a new mixed prediction. The mixed prediction is processed by a 2D SSE stage which have 32 vertices. Finally, a carryless arithmetic coder codes the given bit with final prediction. Most of data structures are designed for avoiding cache misses. Order-0 and order-1 models’ statistics stored in a direct lookup table. Higher orders (order 2346) models’ statistics stored in a large hash table. Hash table size can be selected by “-mem N” option (memory usage is 3+2^(N+1) MB, N ranges 0 to 9). The codec locates a hash entry per only coding nibble. bit 0.7 has options -p=1 through -p=5 to select memory usage of 10 + 20*2p MB. 12345Compressor Opt enwik8 enwik9 Prog Total Comp Decomp Mem Alg Note--------- --- --------- ----------- ------- ----------- ---- ---- --- ---- ----bit 0.1 31,186,930 271,705,328 35,400 x 271,740,728 535 83 35 ROLZbit 0.2b -m lwcm -mem 9 21,971,587 189,881,180 63,665 x 189,944,845 2708 2747 1052 CMbit 0.7 -p=5 20,823,204 174,425,039 62,493 x 174,487,532 2050 2100 663 CM 26 .1745 mcomp mcomp x32 v2.00 is a free, closed source, command line file compressor by Malcolm Taylor (author of WinRK), released Aug. 23, 2008. It uses a large number of algorithms, although not the same ones as WinRK. There is a 32 bit version (mcomp_x32.exe) and a 64 bit version (mcomp_x64.exe) for Windows. Only the 32 bit version was tested (in 32-bit Vista). It displays the following help message: 123456789101112131415161718192021LibMComp Demo Compressor (v2.00).Copyright (c) 2008 M Software Ltd.mcomp [options] pofile(s)Options: -m[..] Compression method: b - BZIP2. c - Experimental DMC codec. d - Optimised deflate (df - fast, dx - max) d64 - Optimised deflate64 (d64f - fast, d64x - max) lz - Optimised LZ (lzf - fast, lzx - max) f - Optimised ROLZ (ff - fast, fx - max) f3 - Optimised ROLZ3 (f3f - fast, f3x - max) p - PPMd var.J. sl - Bitstream (LSB first). sm - Bitstream (MSB first). w - Experimental BWT codec. -MNN[k,m] Model size (in kb (default) or Mb, default 64M). -oNN Order (for Bitstream and PPMd). -np Display no progress information. pofile(s) means input file and output file. When run with no compression options, the program decompresses. Test results are as follows on a dual core 2 GHz Pentium T3200 with 3 GB as in note 26. 1234567891011121314151617181920212223Compressor Opt enwik8 enwik9 Prog Total Comp Decomp Mem Alg Note--------- --- --------- ----------- ------- ----------- ---- ---- --- ---- ----mcomp_x32 -mb 29,997,076 2070 970 4 BWT -M has no effect -mc 23,546,185 1350 1410 50 DMC -mc -M512m 22,561,089 1520 322 DMC max memory -mdf fails -md 35,436,114 2140 1421 4 LZ77 fails -mdx 35,383,881 2240 1420 4 LZ77 fails -md64f fails -md64x 32,983,178 28930 1310 4 LZ77 fails -mlz 24,648,445 3090 50 595 LZ77 -mf 24,331,132 2240 78 149 ROLZ -mf -M1800m 23,187,091 3320 77 414 ROLZ -mfx -M1800m 23,182,541 3410 81 414 ROLZ -mf3x -M1800m 23,098,116 3850 112 415 ROLZ -mp -M1800m -o10 21,039,213 177,948,781 172,531 x 178,121,312 4580 12180 1847 PPM -mp -M1800m -o12 20,917,657 179,193,238 172,531 x 179,365,769 5180 1847 PPM -mp -M1800m -o16 20,868,127 181,150,814 172,531 x 181,323,345 5750 1847 PPM -msl -M1800m -o12 54,428,147 6510 6480 1 CM? -M has no effect -msm 59,731,673 5880 5810 1 CM? -M has no effect -mw 21,805,857 188,095,082 172,531 x 188,267,613 356 232 660 BWT 2 cores -mw -M180m 21,103,670 179,838,392 172,531 x 180,010,923 329 284 1850 BWT 2 cores -mw -M320m 21,103,670 174,388,351 172,531 x 174,560,882 473 399 1643 BWT 1 core -mb produces bzip2 compatible format. -M has no effect. Memory usage is fixed at 4 MB. -mc uses DMC. If memory is greater than -M512, then the program aborts with an assertion failed. -md and -md64 are supposed to generate deflate and deflate64 formats (zip or gzip). However -mdf and -md64f (fast modes) crash immediately during compression. The other modes decompress to files that are the correct size but not identical to the original. Run times are very slow due to most of the CPU time spent in the kernel (up to 90%) as reported by timer 3.01. -mp used PPMD var. J, but allows more memory (up to about 1800 MB). The original program was limited to 256 MB. The optimal orders are different for enwik8 and enwik9. Higher orders help compression, but lower orders save memory on larger files. The maximum order is -o16. Higher values have no effect. Decompression is slow due to 55% of the CPU time spent in the kernel. Normally this is around 1% and decompression speed would be the same as compression. -msl and -msm ignore the -M option and use 1 MB memory, resulting in poor compression. -mw (experimental BWT) is the only option that uses both cores. All others result in 50% CPU usage on a 2 core processor. The -M option actually selects the block size, not total memory usage. Memory usage is 5x block size if one core is used, or 10x if both are used. Both are used only if enough memory is available. The default is to split the file in half and compress the two halves in parallel. However, better but slower compression can be obtained by using -M to select one block for the whole file. Maximum memory is 2 GB, even if more is available. For enwik9, -M320 selects 3 blocks, which are compressed in series on one core. For two cores, time reported is wall time. Process time for -mw -M320m is 187% of wall time for compression and 139% for decompression. .1749 epmopt | epmepmopt + epm r9 is an experimental, closed source command line optimizer and file compressor by Serge Osnach, Oct. 16, 2003. It was intended for enc r16, but development on that project has stopped at enc r15, according to the web page (in Russian). The program has two parts: epm, a PPM compressor with text preprocessing, and epmopt, which attempts to optimize the parameters to epm by compressing repeatedly and varying the options one at a time until there is no more improvement. The input to epmopt may be different than epm, and supports optimization on sets of files matching patterns in specified sets of directories. The options to epm are memory limit, PPM order, and 20 undocumented options each specified by a single digit. The exact same options must be passed to the decompresser. In the results, I added 27 bytes to the compressed file sizes to account for this information. enwik9 was compressed and decompressed as follows: 123epmopt -m800 -n20 --fixedorder:12 enwik6 .epm c01286014321245957352513 enwik9 enwik9.epm -m800epm d01286014321245957352513 enwik9.epm enwik9.tmp -m800 The optimization data was enwik6, the first 106 bytes of the input file. epmopt compressed this about 100 times in 368 seconds with different options, making 35 passes through the list of 20 undocumented parameters, adjusting each one up or down one at a time. The fixed parameters were -m800 (800 MB memory limit) and PPM order 12 (–fixedorder:12, also the first 3 digits of the parameter string. Allowing epmopt to set the PPM order on a smaller training file will cause it to choose too large a value, hurting compression. I only tested orders 10, 12, and 20 on enwik8 and 12 gave the best compression). The -n20 option tells epm to tune all 20 parameters. The parameter string is written to the file enc.ini. The -m800 option need not be the same for epmopt and epm but must be the same for epm during compression and decompression. Warning: epm failed to decompress correctly on enwik7 (first 107 bytes). In the output, some linefeeds were changed to spaces. This happened with all parameter combinations I tested including defaults: epm c enwik7 enwik7.epm. Decompression was bit-exact for enwik5, enwik6, enwik8 and enwik9. .1749 WinUDAWinUDA 0.291 is a free, closed source GUI archiver by dwing, July 4, 2005. It uses context mixing and is derived from paq6. Mode 3 is the slowest (about 3x slower than mode 0) and uses the most memory, 194 MB. .1755 darkdark v0.51 is a free, closed source archiver by Malyshev Dmitry Alexandrovich, Jan. 2, 2007. It uses BWT + distance coding without preprocessors. The -b333m option selects 333 MB blocks. -f (-f0 in 0.40 and 0.46, not supported in 0.32) forces no segmentation. Memory usage is 5 times the block size for compression (6x prior to v0.46). opendark ver. A is an open source version of dark. The supplied Windows dark.exe crashed when decompressing enwik9 (size is 177,675,818). Decompression works up to -b127m. opendark does not support the -f option. 12345678910 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----dark 0.32b July 9, 2006 -b128m 21,414,479 185,844,554 31,076 x 185,875,590 481 407 790 BWTdark 0.40b Aug. 14, 2006 -b128mf0 21,243,259 184,271,115 34,688 x 184,305,803 471 316 790 BWTdark 0.46 Aug. 23, 2006 -b160mf0 21,231,325 181,904,374 40,780 x 181,945,154 488 404 813 BWT -b333mf0 21,231,325 175,955,412 40,780 x 175,996,192 432 425 1692 BWTopendark A Nov. 14, 2006 -b333m 21,432,727 (fails) 10,089 s 450 390 1692 BWT -b127m 21,432,727 185,985,101 10,089 s 185,995,190 389 331 652 BWT 26dark 0.51 Jan. 2, 2007 -b333mf 21,169,819 175,471,417 34,797 x 175,506,214 533 453 1692 BWT .1760 FreeArc FreeArc 0.36 is a free, open source archiver by Bulat Ziganshin, Feb. 21, 2007. It incorporates 7 compression libraries - PPMd, GRZipII, LZMA (7zip), plus BCJ (7zip), REP (rzip-like), dynamic dictionary and LZP preprocessors. The option -m9 selects maximum compression (dict + LZP + PPMd for text files, REP+LZMA for binary). -lc1600000000 limits memory to 1.6 GB (same as -lc1600m). There is an option to use ppmonstr as an external compressor, which was not included in the test. FreeArc 4.0 pre-4 is a free, open source archiver by Bulat Ziganshin, Dec. 16, 2007. It compresses using ppmd, GRZipII, and LZMA along with multimedia filters, a dictionary preprocessor and a REP preprocessor for removing repeating strings. It has Windows and Linux versions and an optional GUI. ppmd generally gives the best compression for text. It will also call ppmonstr as an external program, but this mode was not tested, even though it compresses better. For this test, the Windows command line version was tested. The option -mppmd:1012m:o13:r1 is equivalent to ppmd -m1012 -o13 -r1, selecting 1012 MB memory, order 13, and partial reinitialization of the model when memory is exhausted. Note that ppmd normally allows only up to -m256. This program was tested with 2 GB memory but values higher than -m1012 caused the program to crash during compression. FreeArc 0.666 was released May 19, 2010. The 32 bit Windows console version was tested. -m9 selects maximum compression. There are many other compression options but these were not tested. freearc 0.67a was released Mar. 15, 2014. Options -m1 to -m9 select the compression level from fastest to best. -m1x to -m9x select levels with fast decompression. Decompression was tested with the separate unarc.exe program. 123456789101112131415161718192021222324 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----FreeArc 0.36 -m9 -lc1600000000 21,153,231 184,498,111 372,457 s 184,870,568 665 517 1600 PPMFreeArc 0.40 pre-4 -mppmd:1012m:o13:r1 20,931,605 175,254,732 748,202 x 176,002,934 1175 1216 1046 PPMFreeArc 0.666 -m9 21,659,587 189,696,374 1,214,530 x 190,910,004 524 416 785 PPM 26FreeArc 0.67a -m1 39,485,049 25 27 191 26 -m2 26,831,928 59 121 117 26 -m3 25,221,359 147 100 157 26 -m4 24,285,483 174 132 155 26 -m5 23,020,671 410 443 311 26 -m6 21,659,587 570 471 463 26 -m7 21,659,587 592 477 463 26 -m8 21,659,587 604 495 448 26 -m9 21,659,587 189,696,374 148,665 xd 189,845,039 519 420 813 26 -m1x 39,485,049 27 25 194 26 -m2x 34,307,417 73 28 170 26 -m3x 27,336,122 269 32 186 26 -m4x 25,652,947 357 45 189 26 -m5x 24,897,495 564 43 204 26 -m6x 23,870,179 522 41 453 26 -m7x 23,788,636 546 41 599 26 -m8x 23,788,633 565 41 584 26 -m9x 23,788,633 567 41 584 26 .1766 hookhook v0.2 is a free, open source (GPL) command line file compressor by Nania Francesco Antonio, Jan. 8, 2007. It uses DMC: a state machine in which each state represents a bitwise context. Each state has 2 outgoing transitions corresponding to next bits 0 and 1, and a count n0 or n1 associated with each transition. Bit y (0 or 1) is compressed by arithmetic coding with probability ny/(n0+n1) (where ny is n0 or n1 according to y), and then ny is incremented. After each input bit, the next state represents a context obtained by appending that bit on the right and possibly dropping bits on the left. States are cloned (copied) whenever the incoming and outgoing counts exceed certain limits. This has the effect of creating a new context in which no bits are dropped. In the example below, the state representing context 110 (dropping 2 bits from the previous context) is cloned by creating a new state 11110 because the incoming 0 transition count (ny for y=0) from state 1111 exceeded a limit. The new context is longer because it does not drop any bits. This transition is moved to point to the new state. Other incoming transitions (not shown) remain pointing to the original state. The outgoing transitions are copied. The counts of the original state are distributed to the new state in proportion to the moved transition’s contribution to those counts, which is w = ny/(n0+n1). 12345678910111213 n0 ----&gt; 1100 n0*(1-w) ----&gt; 1100 ny / / /1111 -----&gt; 110 1111 110 / (y=0) \\ | \\ / n1 ----&gt; 1101 | n1*(1-w) ----&gt; 1101 | / / | n0*w / / | ny / / +----&gt; 11110 / \\ / n1*w -- Before cloning After cloning 110 to 11110 Normally, the initial set of contexts begin on byte boundaries. The cloning mechanism ensures that new contexts also have this property. In hook v0.2, the counts are 32 bit floating point numbers initialized to 0.1. The initial state machine has 256*255 states representing bytewise order 1 contexts with uniform statistics. When memory is exhausted, the model is discarded and the state machine is reinitialized. A new state is cloned when ny &gt; limit and n0+n1-ny &gt; length, where limit and length are parameters. The optimal parameters for enwik8 and enwik9 are “c 7 2 6”, c means compress, 7 selects the maximum of 1 GB memory (64M states at 16 bytes each, minimum is 8 MB memory), 2 is the limit (range 1 to 7), and 6 selects a length of 32 (possible values are 1, 2, 3, 4, 8, 16, 32, 64). Larger lengths are better for large files because they conserve memory at the expense of compression. hook v0.3 (Jan. 11, 2007) allows up to 1.8 GB memory (first option = 9) and uses double precision predictions in the 32 bit arithmetic coder. hook v0.3a (Jan. 12, 2007) initializes the counts to 0.125 (instead of 0.1) and uses 24 bit precision in the arithmetic coder (instead of 32 bit). hook v0.4 (Jan. 15, 2007) initializes counts to 0.1. Argument 2 selects length 3 (not 2). hook v0.5b (Jan. 22, 2007) adds an LZP preprocessor. If the next byte to be coded is the same as the byte that occurred in the last matching 3 byte context, then this is indicated by coding a flag bit in an order 3 model (32 MB memory), and a match length coded by DMC with a fixed size of 128 MB. If there is no match, then the literal byte is coded by another variable sized DMC model. The parameters “c 1600000000 2 64 1 6” select compression (c), 1.6 GB for the DMC literal model (1600000000), a limit of 2 (minimum count for the cloned state), length of 64 (minimum remaining count for the state to be cloned), LZP selected (1), and a minimum match length of 6. hook v0.6 (Feb. 7, 2007) removes the “length” parameter (effectively infinite). The arguments “c 1600 4 1 6” mean to compress (c), use 1600 MB memory, set the “limit” parameter to 4, turn on LZP preprocessing (1) with a minimum match length of 6. The “limit” parameter is the minimum count for an outbound DMC state transition to clone the state. Limit was tuned on enwik8. hook v0.6b (Feb. 8, 2007) includes support for files up to 264 bytes (compiled by Ilia Muraviev. Earlier versions were compiled with MinGW g++ 3.4.5 by Matt Mahoney.) “limit” was tuned on both enwik8 and enwik9. Higher values conserve memory at the expense of compression on smaller files. hook v0.6c (Feb. 14, 2007) stores the input filename in the compressed file and uses it during decompression. hook v0.7 (Mar. 10, 2007) uses 325 MB more memory than advertised so it was tested with a lower option. hook v0.7b (Mar. 12, 2007) reduces the excess memory to 94 MB. hook v0.8 was released Mar. 17, 2007. Some additional results on enwik9 decreasing the rate at which the state machine fills up and is flushed: 12345678910hook08 params enwik9------------ -----------c 1700 1 1 6 183,175,857c 1700 2 1 6 181,578,888c 1700 3 1 6 181,220,553c 1700 4 1 6 181,268,867c 1700 5 1 6 181,197,310c 1700 6 1 6 181,567,697c 1700 7 1 6 181,813,763c 1700 8 1 6 182,360,391 hook v0.8b (Mar. 18, 2007) has some LZP improvements. hook v0.8c (Mar. 19, 2007) is a minor bug fix. Compressed sizes are 1 byte larger than v0.8b. hook v0.8d was released Mar. 21, 2007. hook v0.8e was released Mar. 27, 2007. hook v0.9 (Apr. 6, 2007) is closed source. It requires a processor that supports SSE instructions. It has some speed improvements and a E8/E9 filter for improved compression of .exe files. Memory usage is the second argument + 60MB. freehook 0.2 is an open source port of hook v0.8e from C++ to C by Eugene Ortmann, Apr. 7, 2007. The supplied .exe file requires SSE instructions (Pentium 3 or higher), but the source can be recompiled for other processors. hook v0.9b (Apr 10, 2007) replaces floating point arithmetic with integer arithmetic, so that archives are compatible across different processors. Note: I reduced the memory setting from 1800 to 1700 to prevent disk thrashing, which was a problem in earlier tests. I will do this from now on. This hurts enwik9 compression (but not enwik8) slightly, from 180,444,546 to 180,582,601. Actual memory usage is 60 MB over. freehook 0.3 (Apr 10, 2007) has only very minor changes from 0.2 but is slightly faster due to different g++ compiler options. Compression is the same as 0.2. Memory usage is about 160 MB over. hook v0.9c (May 8, 2007) has some speed improvements in the arithmetic coder. It compresses the same size as v0.9b. hook v1.0 (Sept. 20, 2007) is closed source. The only option is memory size in MB. The zip file linked above contains all versions (C++ source and Win32 .exe). hook 1.1 (Nov. 13, 2007) improves BMP and WAV compression. hook 1.3 was released Dec. 14, 2007, modified Dec. 15, 2007. hook 1.4 was released Apr. 29, 2009. 1234567891011121314151617181920212223242526272829Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ---hook v0.2 c 7 2 6 23,628,061 208,211,084 2,556 s 208,213,640 772 779 1052 DMChook v0.3 c 9 2 6 23,548,017 202,024,740 3,567 s 202,028,307 849 864 1764 DMChook v0.3a c 9 2 6 23,499,700 201,934,976 3,555 s 201,938,531 862 832 1764 DMChook v0.4 c 9 2 6 23,349,695 199,829,234 4,112 s 199,833,346 934 959 1764 DMChook v0.5b c 1600000000 2 64 1 6 22,806,402 193,227,085 5,113 s 193,232,198 1084 1029 1764 LZP+DMChook v0.6 c 1600 4 1 6 22,472,884 191,733,561 5,112 s 191,738,673 1146 1034 1600 LZP+DMChook v0.6b c 1600 4 1 6 22,535,069 189,932,778 5,174 s 189,937,952 1040 1600 LZP+DMC c 1600 6 1 6 22,776,927 188,384,238 5,174 s 188,389,412 1090 1026 1600hook v0.6c c 1600 6 1 6 22,561,621 188,081,694 5,878 s 188,087,572 1131 1092 1600 LZP+DMChook v0.7 c 1000 6 1 6 22,410,669 191,516,313 6,195 s 191,522,508 1360 1353 1375 LZP+DMChook v0.7b c 1700 6 1 6 22,404,817 184,765,030 6,195 s 184,771,225 1516 1655 1794 LZP+DMChook v0.8 c 1700 5 1 6 22,290,033 181,197,310 6,686 s 181,203,996 1110 1118 1700 LZP+DMChook v0.8b c 1700 5 1 6 22,399,354 180,335,788 6,944 s 180,342,732 988 1033 1700 LZP+DMChook v0.8c c 1700 5 1 6 22,399,355 180,335,789 7,071 s 180,342,860 1043 1005 1700 LZP+DMChook v0.8d c 1700 5 1 6 22,399,027 180,319,203 7,037 s 180,326,240 928 915 1700 LZP+DMChook v0.8e c 1700 3 1 6 22,039,935 178,140,788 7,263 s 178,148,051 952 1009 1700 LZP+DMChook v0.9 c 1800 2 1 6 21,969,342 178,932,435 10,069 x 178,942,435 869 1860 LZP+DMC c 1800 3 1 6 22,077,883 178,599,478 10,069 x 178,609,547 833 916 1860 LZP+DMCfreehook 0.2 c 1700 3 1 6 22,039,914 178,141,036 7,386 s 178,148,422 813 855 1860 LZP+DMChook v0.9b c 1700 3 1 6 22,496,910 180,582,601 9,278 x 180,591,879 810 810 1721 LZP+DMCfreehook 0.3 c 1600 3 1 6 22,039,914 178,619,149 7,352 s 178,626,501 789 818 1713 LZP+DMChook v0.9c c 1700 3 1 6 22,496,910 180,582,601 8,506 x 180,591,107 774 791 1721 LZP+DMChook v1.0 c 1700 22,122,484 177,843,658 11,163 x 177,854,821 865 879 1739 LZP+DMChook v1.1 c 1700 22,122,484 177,843,658 25,854 x 177,869,512 877 872 1739 LZP+DMChook v1.3 c 1700 22,030,108 178,216,980 13,870 x 178,230,850 825 835 1736 LZP+DMChook v1.4 c 1700 21,990,502 176,648,663 37,004 x 176,685,667 741 695 1777 LZP+DMC .1789 7zip 7zip 4.42 is an open source GUI and command line archiver by Igor Pavlov, May 14, 2006. It compresses to 7z, zip, gzip, ppmd.H and tar format, optionally encrypts with AES, and will uncompress several other formats. 7z is the default format. It uses LZMA compression, a variation of LZ77. The option -mx=9 selects ultra (maximum) compression in this mode. The option -sfx7zCon.sfx creates a console-based self extracting executable by prepending a 131,584 byte decompresser. This is slightly smaller than the Windows GUI version (132,096 bytes) and much smaller than the decompression program itself as a zipped self extracting download (817,795 bytes). The best compression is with ppmd. The options are -m0=ppmd:mem=768m:o=10 equivalent to ppmd var H (with minor changes) order 10 with 768 MB memory. 7zip 4.46a was announced May 21, 2007. (The improved compression is due to testing with more memory). 7zip 9.04a was released Dec. 3, 2009. It gave an out of memory error with mem=1630. 7zip 9.20 was released Nov. 18, 2010. Default (LZMA) mode was tested. It uses 196 MB for compression using 75% of 2 cores, and 18 MB for decompression on a 2.0 GHz T3200 under Windows. The following include the best known option combinations for 7zip on enwik8 in ppmd (PPM), 7z (LZMA), bzip2 (BWT) and zip (LZ77) formats. 123456789101112131415 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Alg Notes------- ------- ---------- ----------- ----------- ----------- ----- ----- --- -----7zip 4.42 -m0=ppmd:mem=768:o=10 -sfx7xCon.sfx 21,375,060 185,043,783 0 xd 185,043,783 505 ~500 PPM7zip 4.42 -m0=ppmd:mem=293m:o=7 21,791,628 647 655 PPM 67zip 4.42 -mx=9 -sfx7zCon.sfx 24,996,113 213,490,979 0 xd 213,490,979 2286 63 LZMA7zip 4.42 -tbzip2 -mpass=2 29,003,844 1974 176 BWT 67zip 4.42 -tzip -mm=deflate64 -mfb=153 -mpass=8 33,727,442 2803 28 LZ77 67zip 4.42 -tzip -mm=deflate -mfb=171 -mpass=8 35,056,389 2672 27 LZ77 67zip 4.42 -tzip -mm=deflate -mfb=258 -mpass=8 35,057,040 2664 29 LZ77 67zip 4.42 Zip/Ultra (in GUI) 35,057,347 4307 LZ77 17zip 4.46a -m0=ppmd:mem=1630m:o=10 -sfx7xCon.sfx 21,197,559 178,965,454 0 xd 178,965,454 503 546 PPM7zip 9.04a -m0=ppmd:mem=1500m:o=10 -sfx7zCon.sfx 21,211,895 179,209,403 0 xd 179,209,403 506 520 PPM 267zip 9.12b -m0=ppmd:mem=2048m:o=10 21,060,863 177,187,967 PPM 427zip 9.20 25,895,909 227,905,645 518,536 x 228,424,181 1031 42 LZMA 26 .1789 rings rings 0.1 is a free, closed source, experimental file compressor by Nania Francesco Antonio, Sept. 21, 2007. It uses LZP with order-2 coding of literals and arithmetic coding. It takes no command line options. rings 0.2 (Nov. 16, 2007) includes improved BMP, WAV, TIFF, and PGM filters. rings 0.3 was released Dec. 21, 2007. rings 1.0 was released Feb. 8, 2008. It uses 50 MB for compression and 43 MB for decompression. rings 1.1 was released Feb. 13, 2008 with same memory usage. It uses CM with LZP preprocessing for faster compression. rings 1.2 was released Mar. 4, 2008 with the same memory usage. rings 1.3 was released Apr. 2, 2008. It uses 54 MB for compression and 47 MB for decompression. rings 1.4c was released Apr. 14, 2008. It has an option (1-9) which selects memory usage. Each increment doubles usage. Memory usage and run time are greater for decompression than compression. For option 9, compression uses 526 MB and decompression uses 789 MB. The program uses BWT. The transformed data is encoded using MTF (move to front), pre-Huffman coding followed by arithmetic coding. rings 1.5 was released Apr. 21, 2008. It improves compression and is symmetric with regard to memory usage. Options are like 1.4c. The table below compares timing results on my old and new computers. rings 1.6 was released Aug. 16, 2009. The option ranges from 1 to 10, where 10 uses the most memory. It includes a Linux version (18,348 bytes zipped) which was not tested. rings 2.0 (discussion) is a multi-threaded archiver rather than a file compressor. It uses BWT. It has an interface similar to zcm. Option -m7 selects maximum block size of 100 MB using 500 MB memory per thread. Option -t1 or -t2 selects 1 or 2 threads. On a 2 core machine, selecting 2 threads shows 3 processes in Windows Task Manager, two of which use 500 MB memory and I/O dividing the input and output files, and one process using 7 MB with several GB of input and a lot of kernel CPU time. These 3 processes must share 2 cores. As a result, it runs slower than 1 thread. rings 2.1 (discussion) was released May 23, 2015. rings 2.2 was released May 28, 2015. -o option enables multi-threaded compression. rings 2.5 was released June 6, 2015. Option -o was removed. The 64 bit version was tested. 12345678910111213141516171819 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----rings 0.1 35,693,969 314,161,660 11,271 x 314,172,931 187 179 16 LZPrings 0.2 35,693,969 314,161,660 25,832 x 314,187,492 192 167 16 LZPrings 0.3 35,151,555 309,179,126 32,132 x 309,211,258 188 154 16 LZPrings 1.0 26,384,013 235,897,616 25,585 x 235,923,201 221 321 50 CMrings 1.1 26,793,247 238,353,988 27,513 x 238,381,501 151 255 50 CMrings 1.2 25,873,235 229,695,548 30,484 x 229,726,032 120 175 50 CMrings 1.3 25,873,235 229,695,548 43,329 x 229,738,877 104 163 54 CMrings 1.4c 9 24,591,826 217,427,384 39,149 x 217,466,533 103 287 789 BWTrings 1.5 9 21,848,093 191,067,972 44,565 x 191,112,537 172 189 426 BWTrings 1.5 9 21,848,093 191,067,972 44,565 x 191,112,537 144 188 425 BWT 26rings 1.6 10 21,918,217 189,242,552 47,618 x 189,290,170 165 192 795 BWT 26rings 2.0 -m7 -t2 21,195,013 185,258,194 164,995 x 185,423,189 398 223 986 BWT 26rings 2.0 -m7 -t1 21,194,965 185,256,848 164,995 x 185,421,843 375 206 493 BWT 26rings 2.1 -m7 -t1 20,967,373 183,891,457 230,702 x 184,122,159 195 188 1859 BWT 48rings 2.2 -m7 -o 20,938,029 183,531,002 341,445 x 183,872,447 202 179 1859 BWT 48rings 2.5 -m8 -t1 20,873,959 178,747,360 240,523 x 178,987,883 280 163 2518 BWT 48 .1803 pimple2 pimple 1.43 beta is a free, closed source GUI archiver by Ilia Muraviev, Apr. 24, 2006. It uses context mixing. pimple2 is a command line file compressor, June 11, 2007. 12345 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----pimple 1.43 beta 512MB, order 8, match 32 20,992,830 181,998,817 353,472 x 182,352,259 9638 10112 512 CM 3pimple2 (none) 20,871,457 180,251,530 78,642 x 180,330,172 18474 17992 128 CM .1807 ash ash 04a is a free, experimental command line file compressor by Eugene D. Shelwien, Dec. 5, 2003. The /m700 option selects 700 MB memory limit. (/m800 causes disk thrashing with 1 GB). /o10 selects model order 9. This gives good results on smaller files when memory is constrained, but I did not try to optimize it. There is a /s option to select SSE depth that gives good results for the default value of /s5 so I did not try to optimize it either. Other results: 1234ash04a options enwik9 Comp (ns/byte)---------- ----------- ----/m700 /o8 (order 7) 180,830,523 5883/m700 /o10 (order 9) 180,735,542 6011 Note: the acutal memory usage (commit charge) for enwik9 /m700 /o8 was 1910 MB at the end of compression, minus 257 MB for other programs, according to Windows task manager. This is generally not a problem if your swap file is large enough. It appears to be a slow memory leak (recovered when program exits) and does not cause thrashing. ash /m1700 /o10 and /o12 failed to compress enwik9 with 2 GB memory (error: could not allocate a block). enwik8 compressed to 19,713,239 using /o10 and 19,446,859 using /o12. .1807 bce3bce3 is a free, open source (Apache), experimental file compressor by Christoph Diegelmann, Mar. 16, 2015. It uses an order-n bitwise context model where the model is computed using BWT and encoded and transmitted to the decoder. Memory usage is 5 times the file size. The program takes no options. I tested by compiling with g++ 4.8.3 in Ubuntu Linux. 12345 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----bce3 22,729,148 180,732,702 19,889 s 180,752,591 1151 2444 5000 CM 71 22,729,148 1230 2020 500 CM 48 .1823 ocamydocamyd 1.65.final is a free, open source command line file compressor by Frank Schwellinger, May 25, 2006. It uses DMC. The -s0 selects slowest (maximum) compression. The -m8 option selects 800 MB memory (maximum is -m9 = 900 MB). ocamyd LTCB 1.0 is a modification by Mauro Vezzosi on June 20, 2006 of Frank Schwellinger’s ocamyd-1.65-final. The option -s0 selects maximum compression. -m3 selects 300 MB memory (the maximum for the test machine), but it supports up to -m8. ocamyd 1.66.final, by Frank Schwellinger, Feb. 1, 2007, includes the -f option to prevent flushing and rebuilding the DMC model when memory is exhausted. 123456 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----ocamyd 1.65.final -s0 -m8 21,456,536 185,727,437 20,618 x 185,748,055 50782 50935 800 DMCocamyd LTCB 1.0 -s0 -m3 21,285,121 182,359,986 21,030 x 182,381,016 108960~110000 300 DMC 6ocamyd 1.66.final -s0 -m3 -f 21,123,280 182,410,035 20,636 x 182,430,561 59130 59637 300 DMC 6 The following table shows the effect of the -s and -m options on ocamyd 1.65.final on enwik8. Times are in ns/byte, process (kernel+user) time by timer 3.01, ~ indicates global (wall) time. 12345678910111213141516171819202122232425262728Options enwik8 Comp Decomp Notes------- ---------- ----- ----- ------s0 -m8 21,456,536 42030 42010-s0 -m4 22,073,527 70482 70538 6 (400 MB) (~101015 ~92921 global time)-s1 -m4 23,944,647 ~33535 6-s2 -m4 26,345,297 ~1940 6-s3 -m4 28,060,900 ~1826 6-s0 -m3 22,296,826 ~70960 6 (300 MB)-s1 -m3 24,114,574 ~33818 6-s2 -m3 26,911,154 ~1603 6-s3 -m3 28,278,662 ~1514 6-s0 -m2 22,688,950 ~70172 6 (200 MB)-s1 -m2 24,511,065 ~33771 6-s2 -m2 27,614,083 ~1562 6-s3 -m2 28,928,850 ~1448 6-s0 -m1 23,487,047 ~68522 6 (100 MB)-s1 -m1 25,280,406 ~33277 6-s2 -m1 29,045,902 ~1509 6-s3 -m1 30,080,719 ~1408 6-s0 -m0 24,210,216 ~66463 6 (64 MB)-s1 -m0 25,882,226 ~33121 6-s2 -m0 30,591,255 ~1481 6-s3 -m0 31,276,535 ~1377 6 .1824 bee bee 0.78 build 0154 is an open source (Delphi Object Pascal) command line archiver (with optional GUI) by Andrew Filinsky and Melchiorre Caruso, Sept. 23, 2005. It uses PPM. The -m3 option select maximum compression (default is -m1). The -d8 option selects 512 MB memory, the maximum that does not cause disk thrashing (default is -d2 = 10 MB). bee includes beeopt, a parameter optimizer similar to epmopt. This was not tested. bee comes preconfigured with parameters trained on .txt and .xml files (and other types) in file bee.ini. This was tested by renaming enwik7 (first 107 bytes) to enwik7.txt and enwik7.xml but compression was worse. The executable size is a zip archive containing bee.exe and bee.ini. This is much smaller than the zipped source code download. .1829 uhbcuhbc 1.0 is an experimental, closed source command line file compressor by Uwe Herklotz, June 30, 2003. It uses BWT. The -b100m option selects 100 MB block size, which requires 800 MB for compression and 500 MB for decompression. -m3 selects maximum compression for the entropy coding stage, which consists of run length coding (RLE) + DWFC (double weighted frequency counting) + entropy coding. WFC is described in Deorowicz, S., Improvements to Burrows–Wheeler compression algorithm, Software–Practice and Experience, 2000; 30(13):1465–1483. Additional results on enwik8: 12345678Options enwik8 size Comp Decomp (ns/byte)----------------------------------------- ----------- ---- -------m3 -b100m (one 100 MB block) 20,930,838 1145 858-m3 (default block size is 5 MB) 24,296,345 914 733-m2 (RLE + WFC + entropy coding, default) 24,411,843 806 644-m2 -cp (prefix sort, default is suffix) 24,589,110 813 578-m1 (RLE + MTF (move to front) + entropy) 25,021,683 680 547-m0 (RLE + direct entropy coding) 25,341,274 603 500 .1831 smac smac v1.8 (discussion) is a free, experimental file compressor for Windows by Jean-Marie Barone, Jan. 22, 2013. It uses an order-4 bitwise context model and arithmetic coding. It takes no options. Source code is in x86 assembler. smac v1.9, Jan. 31, 2013, uses an order 4 and order 6 context model and chooses at each bit the model whose prediction is further away from 1/2. smac v1.10, Feb. 7, 2013, uses a nonstationary model like PAQ6. When a bit count is incremented, half of the count over 2 of the other bit value is discarded. smac v1.11, Feb. 18, 2013, switches between order 6, 4, and 3 context models depending on which prediction is furthest away from 1/2. For files smaller than 5 MB, it switches between lower order contexts. smac v1.12a, Mar. 11, 2013, uses indirect context models. The context is mapped to a 16 bit state representing the number of 0 and 1 bits as 7 bit counters, plus the last 2 bits. When the counters reach the maximum value of 127, they are both halved and incremented. v1.12a is a speed improvement over v1.12 (released the day before) using prefetch instructions. smac v1.13, Mar. 22, 2013, mixes the order 6, 4, and 3 indirect context models in the logistic domain, log(p(1)/p(0)). Each prediction has a fixed weight of 1/3. smac v1.14, Apr. 20, 2013, uses adaptive mixer weight update with a learning rate of 0.002. smac v1.15, May 19, 2013, uses an order 6-4-3-2-1 context mixing algorithm. smac v1.16, July 30, 2013, has improvements to the context bit history model and match model. smac 1.17 (discussion), Nov. 1, 2013, has some speed optimizations and small changes in the bit history counter rounding and use of floating point lookup tables. smac 1.17a (discussion), Nov. 17, 2013, has some speed improvements with no change in compression. smac 1.18 (discussion), Dec. 8, 2013, uses a polynomial function to compute squash() to improve speed. smac 1.19 (discussion), Dec. 17, 2013, has a speed optimization of the squash function. smac 1.20, Jan. 16, 2014, improves modeling of 0 frequency counts using a Laplace estimator, p=(n0+1)/(n0+n1+2). 1234567891011121314151617Compression Compressed size Decompresser Total size Time (ns/byte) Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----smac 1.8 29,143,755 265,303,304 2,713 x 265,306,017 1917 1935 1691 o4 26smac 1.9 26,888,498 242,014,586 2,832 x 242,017,418 3168 3266 1690 CM 26smac 1.10 26,398,662 230,781,496 2,791 x 230,784,287 2917 3085 1649 CM 26smac 1.11 25,633,348 223,294,431 2,831 x 223,297,262 3930 4331 1616 CM 26smac 1.12a 24,948,001 216,016,106 2,833 x 216,018,939 4463 4568 1565 CM 26smac 1.13 23,322,767 202,011,435 2,818 x 202,014,253 6801 6502 1613 CM 26smac 1.14 22,675,896 193,797,222 2,965 x 193,800,187 5943 6148 1577 CM 26smac 1.15 22,303,381 191,064,676 3,074 x 191,067,750 6518 7313 1658 CM 26smac 1.16 21,831,822 183,551,384 3,465 x 183,554,849 6949 7285 1542 CM 26smac 1.17 21,816,272 183,459,153 3,429 x 183,462,582 5672 5867 1542 CM 26smac 1.17a 21,816,272 183,459,153 3,429 x 183,462,582 5335 5613 1542 CM 26smac 1.18 21,816,285 183,459,860 4,522 x 183,464,382 4901 5137 1544 CM 26smac 1.19 21,816,323 183,459,942 4,361 x 183,464,303 4211 4257 1542 CM 26smac 1.20 21,781,544 183,190,888 4,356 x 183,195,244 4249 4399 1542 CM 26 .1839 ppmdSee ppmonstr (above)..1849 tc TC 5.2 dev 2 is an experimental command line file compressor, currently under development by Ilia Muraviev. It takes no options. 12345678910111213141516 Compressed size Decompresser Total size Time (ns/byte)Program enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----tc 5.0 dev 1 (May 26 2006) 33,774,535 295,836,604 23,681 x 295,860,285 236 204 LZP 3tc 5.0 dev 2 (June 10 2006) 32,417,139 283,039,249 22,659 x 283,061,908 270 244 LZP 3tc 5.0 dev 4 (June 21 2006) 32,417,139 283,039,249 22,496 x 283,061,745 224 206 LZP 3tc 5.0 dev 6 (July 6 2006) 29,544,971 257,416,397 28,528 x 257,444,925 279 279 PPM 3tc 5.0 dev 7 (July 9 2006) 28,111,955 250,077,573 30,058 x 250,107,631 285 325 20 PPM 3tc 5.0 dev 9 (July 18 2006) 27,801,253 246,923,158 30,106 x 246,953,264 363 385 24 PPM 3tc 5.0 dev 11 (July 24 2006) 27,293,396 242,199,762 31,074 x 242,230,836 446 393 56 PPM 3tc 5.1 dev 1 (Oct. 1 2006) 31,708,176 280,007,538 26,578 x 280,034,116 289 154 25 LZtc 5.1 dev 2 (Oct. 2 2006) 31,155,963 274,831,393 24,620 x 274,856,013 344 147 25 LZtc 5.1 dev 5 (Oct. 13 2006) 28,567,681 247,853,181 26,659 x 247,879,840 951 439 148 CMtc 5.1 dev 7 (Dec. 18 2006) 27,934,960 241,898,216 40,104 x 241,938,320 1864 639 148 CMtc 5.1 dev 7x (Jan. 13 2007) 27,888,899 241,088,655 41,265 x 241,129,920 1974 638 609 CMtc 5.2 dev 2 (Feb. 7 2007) 21,481,399 184,939,711 41,112 x 184,980,823 3637 3655 230 CM 5.0 Dev 1 uses LZP. Dev 4 includes an improved hash table to conserve memory and a faster range coder compared to dev. 2, but compression is the same. Starting with 5.0 dev 6, LZP literals and match lengths are encoded using PPMC (PPM with fixed escape probabilities to lower orders). Dev 7 and 9 use order 3-1-0 PPMC. tc 5.0 dev 11 (July 24, 2006) is the last of this series. tc 5.1 dev 1 uses ROLZ (reduced offset LZ) with PPM order 1-0 for literals, offset set reduced with order 2 context, and a 16 MB dictionary. tc 5.1 dev 2 has improved parsing and is archive compatible with dev 1. tc 5.1 dev 5 uses ROLZ plus context mixing (instead of PPM) for order 2 literals. tc 5.1 dev 7 uses improved parsing (flexible parsing) and adds SSE. tc 5.1 dev 7x uses a larger dictionary. tc 5.2 dev 2 uses FPW (fast PAQ weighting). .1857 bwtsdcbwtsdc v1 (discussion) is a free, experimental file compressor with source code by David A. Scott and Yuta Mori. It takes no options. Memory usage is 5 times the file size. The program is bijective, meaning that any file is valid input to the decompresser, and no two inputs will decompress to the same file. In other words, there is an exact 1 to 1 mapping between uncompressed files and compressed files. The compressor uses multiple stages, each of which is bijective. The first stage is a BWT variant called BWTS (BWT Scottified) developed by Scott. In this variation, it is not necessary to store the starting point for the inverse BWT. This is achieved by dividing the input into a lexicographically nonincreasing sequence of Lyndon words. A Lyndon word is any subsequence that lexicographically precedes any of its rotations. The block is then sorted using contexts that wrap within Lyndon words rather than the whole block. The BWTS is followed by distance coding (DC, developed in part by Mori), and Fibonacci coding, where each stage is also bijective. The compressor is implemented as 3 programs called from a .bat file. .1859 fbcfbc v1.0 is a free, experimental file compressor for Windows by David Catt, Feb. 29, 2012. It is described as using BWT (divsufsort) with a fast adapting (rate 1/16) 14 bit context model consisting of an 11 bit history and 3 bits to encode the position in the current byte. The input is preprocessed using Eugene Shelwein’s alphabet reordering preprocessor, BWT_reorder_v2. The argument 250000000 selects the block size in bytes. Memory usage if 5 x block size. fbc v1.1, Mar. 2, 2012, fixes a memory allocation bug that caused decompression to fail for a block size of 333 MB. It automatically selects between 32 and 64 bit versions of divsufsort. Results are shown for the 64 bit version. 12345 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----fbc v1.0 250000000 22,554,133 188,976,445 21,244 x 188,997,689 541 480 1225 BWT 26fbc v1.1 333333334 22,554,133 185,975,548 23,576 x 185,999,124 451 415 1647 BWT 55 .1862 ppmvc ppmvc v1.1 is a free, command line file compressor by Przemysław Skibiński, May 12, 2006, based on PPMd var. J by Dmitry Shkarin. It uses variable length contexts as described in the paper, P. Skibinski and Sz. Grabowski. Variable-length contexts for PPM. Proceedings of the IEEE Data Compression Conference (DCC04), pp. 409-418, 2004. Long matching strings are encoded as in high order ROLZ, encoded as an index to a matching context and a length. The command line options are the same as in PPMd: -o8 selects order 8, -m256 selects 256 MB memory, -r1 partially rebuilds the model when memory is exhausted. I tuned the compressor to -o8 on enwik8. There are additional options related to VC compression (which must be specified during decompression), but I used the defaults since there is no guidance on how to set them in the program documentation. The paper suggests that the best values (and defaults) are to encode matches of context length order+1 with a minimum match length of 2*order, searching the last 8 to 16 contexts for the longest match. The effect is usually greatest for low order PPM. .1869 chilechile 0.3d-1 is a free, command line file compressor as C source code by Alexandru Mosoi, May 29, 2006. It uses BWT. The option -b40000 selects a block size of 40000 KB, which requires about 785 MB of memory for compression and 240 MB for decompression. Version 0.3d1 is identical to version 0.3d except that the maximum block size was increased from 2048 KB to 99999 KB. For this test the program was compiled for Windows using MinGW 3.4.2 as specified in the Makefile. chile 0.4 (Jan. 27, 2007) introduces a faster algorithm for building suffix arrays that uses less memory (7N). The option -b=244141 selects the block size in Kb (to split enwik9 in 4 equal parts). It was compiled using MinGW gcc 3.4.5 with options -W -Wall -fomit-frame-pointer -g -O3 and tested in WinXP Home with 2 GB memory. 12345 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ---chile 0.3d-1 -b40000 23,408,335 203,451,387 11,298 s 203,462,685 4957 435 785 BWTchile 0.4 -b=244141 22,218,917 186,979,614 11,530 s 186,991,144 2513 512 1426 BWT .1901 bwtdiskbwtdisk 0.9.0, is a free, experimental, open source (GPL v3) file compressor by Giovanni Manzini, July 7, 2010. It uses BWT. Its purpose is to test the techniques for low memory BWT described in the paper Lightweight Data Indexing and Compression in External Memory by Ferrangina, Gagie, and Manzini, Proc. LATIN 2010. The forward BWT computes the suffix array in small segments, then makes multiple passes over the BWT output to merge the result. The external disk usage can be further reduced by compressing the input first with zlib or lzma and decompressing the input on each pass. The program is single threaded. The program is supplied as source code only. It was compiled with g++ 4.6.3 using the supplied Makefile in Ubuntu on a Core i7 M620, 4 GB. There are two programs, the compressor “bwte” and decompresser “unbwti”. The compressor computes a low memory BWT using at most the memory specified by the -m option (in MB). The -b option specifies how the BWT transformed input is to be compressed. -b 1 specifies zlib, -b 4 specifies lzma, and -b 2 specifies run length coding and range coding. There is no block size parameter. The input is compressed in a single block. Decompression requires 4 times the file size in memory, which used all of the test machine for enwik9 so was tested for enwik8 only. Compression of enwik9 with -b 4 failed (cannot create pipe). 12345678 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----bwtdisk 0.9.0 -b 1 -m 3500 27,173,252 245 234 500 BWT 48 -b 1 -m 3500 27,173,252 214,137,751 169,579 s 214,342,831 1124 3500 BWT 48 -b 2 -m 3500 24,725,277 186 255 500 BWT 48 -b 2 -m 3500 24,725,277 190,004,306 169,579 s 190,173,885 1124 3500 BWT 48 -b 4 -m 3500 26,975,980 270 247 500 BWT 48 .1910 CTXf CTXf 0.75 pre-beta 1 is a free, closed source command line archiver by Nikita Lesnikov, Sept. 20, 2003. It uses PPM with preprocessing for text, exe and multimedia files. The option -me selects extreme (best) compression. It uses about 78 MB memory in Windows task manager. .1912 M03expm03exp-2005-01-27 is an experimental, closed source GUI file compressor by mij4x, Jan. 27, 2005. It uses BWT implementing the M03 algorithm by Michael A Maniscalco. with a maximum block size of 8MB. (Note on the GUI: to compress or decompress, drop a file on the program window. Right click to select options). m03exp-2005-02-15 (Feb. 15, 2005) supports blocks up to 32MB but is otherwise identical. 1234Block size enwik8 Comp Decomp (ns/byte approx)---------- ---------- ---- ------8 MB 23,461,984 3860 184032 MB 21,948,192 4800 2100 .1930 Stuffit Stuffit 9.0 is a commercial GUI archiver by Allume Systems, now Smith Micro. This was the current version as of May, 2006. Note: their free 30 day trial required registration and a credit card number which was charged if you forgot to cancel. The options tested were: Stuffit X: Method 4 - Best Text Compression, Level 16, Memory 25 (36.1MB), Optimizers On, Block mode On, Redundancy Off, Text Encoding None, Encrypt archive disabled, Segment archive disabled. Stuffit X: Method 6 - Auto-picks the best method, Level 25, Memory 25 (68.6MB), Optimizers On, Block mode On, Redundancy Off, Text Encoding None, Encrypt archive disabled, Segment archive disabled. Stuffit 12.0.0.17 (compression technology version 12.0.0.21) was released Jan. 31, 2008. It includes lossless compression of JPEG and MP3 files and lossy recompression of zip archives, GIF, TIFF, PNG, and PDF files. It supports a native SITX format as well as zip, gzip, rar, bzip2, compress, tar, cab, and some more obscure formats. It is multithreaded for multicore support, although I tested it on a single core processor. I only tested the native general-purpose formats. For these tests, I used the command line programs console_stuff.exe and console_unstuff.exe to reduce the executable size and measure run time more accurately. The options are -m=1 (LZ77-Huffman), -m=2 (LZ77-arithmetic), -m=4 (PPM), -m=8 (BWT), -l (level 2-16, higher is slower but better), -x (memory extents, max 30, higher uses more memory). The best compression for text is -m=4 (PPM) with maximum memory -x=30. (In the GUI but not the command line, above 29 causes an out of memory error with 2 GB RAM). The -l option apparently has no effect on PPM. The decompresser size is based on console_unstuff.exe and the minumum set of 5 .dll files needed to run it (4 common plus Plugins/sitx.dll). The full GUI installer (without Office plugins) zips to 17,051,856 bytes. The tested version was a complimentary copy provided by the company. Stuffit 2009 13.0.0.19 (compression technology 13.0.0.24) was released Dec. 19, 2008. I tested as with Stuffit 12, however the technique of finding the minimal set of .dll files that I used in Stuffit 12 did not work (internal error) so I had to include the zipped distribution size (StuffIt2009.exe), which includes many other compression formats and a GUI. The tested version was a complimentary copy provided by the company. 123456789101112 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Notes------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- -----Stuffit 9.0.0.21 Method 4 (best text) 24,310,583 210,801,103 1,015,808 x 211,816,911 542 503 36 12 Method 6 (auto-pick best) 24,419,299 212,392,465 1,015,808 x 213,408,273 2149 68 12Stuffit 12.0.0.17 -m=1 -l=16 -x=30 25,926,107 2540 420 298 LZ77 -m=2 -l=16 -x=27 24,874,987 3080 90 881 LZ77 -m=8 -l=16 -x=30 25,574,676 560 230 229 BWT -m=4 -l=16 -x=28 23,482,855 730 694 274 PPM -m=4 -l=16 -x=29 22,744,155 770 720 537 PPM -m=4 -l=16 -x=30 22,105,654 190,372,707 2,658,122 xd 193,030,829 628 658 1062 PPMStuffit 13.0.0.19 -m=4 -l=16 -x=30 22,105,658 190,372,711 21,611,401 x 211,984,112 567 604 1060 PPM 26 .1933 plzma plzma_v3b ( discussion) is a free, closed source, experimental file compressor for Windows (32 and 64 bit versions) by Eugene Shelwien, Oct. 8, 2011. It uses LZMA (7zip equivalent) with a modified entropy encoder. plzma_v3c was released Mar. 19, 2012. Options are as follows: e or c0 - compress using LZMA back end. c or c1 - compress using back end optimized for maximumcompression.com SFC. c2 - compress using back end optimized for enwik8. 1000000000 - LZ window size or log size (default 25 or 33554432). Uses 11.5x memory. 999999999 - matchFinder iteration limit, default 9999, max 232 - 1. 273 - match length threshold for greedy parsing (default). 8 - prefix bits in literal context (default 2). 0 - position bits in literal context (default). 0 - position bits in id/len contexts (default). 6000 - kNumOpts (default 4096). 1 - matchStep (default 128). 1 - alignStep (default 16). 1 - lenStep (default 272). 7 - f_lenloop (default 0). 12345678 Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp CMem Dmem Alg Notes------- --------------- ---------- ----------- ----------- ----------- ----- ----- --- ---- --- -----plzma_v3b c2 1000000000 999999999 273 8 0 0 6000 1 1 1 7 24,206,571 193,240,160 101,221 x 193,341,381 8889 55 10110 975 LZMA 58 c2 24,778,033 2110 167 394 54 LZMA 26plzma_v3c e 25,182,314 2050 39 394 54 LZMA 26 c 24,866,192 2060 164 394 54 LZMA 26 c2 24,778,037 213,154,428 55,974 x 213,210,402 2086 149 394 54 LZMA 26 .1933 crook crook v0.1 (discussion) is a free, open source file compressor by Jüri Valdmann, Mar. 5, 2012. It uses bit-level PPM. Because it predicts bits rather than bytes, there is no escape modeling. This is like DMC in that each bit-level context is mapped to a next-bit prediction and a count (equvalent to two counts of zeros and ones). But unlike DMC, it avoids the problem of duplicate states representing the same contexts, which would dilute the statistics and waste memory. Bits are modeled MSB first. Contexts are stored in a binary tree where the two child nodes represent the current context extended by one bit on the right. Each node also has a pointer to a suffix node, representing the current context shortened by one byte on the left. Contexts always begin on byte boundaries. Each context maps to a 22 bit prediction for the next bit (initialized to 0.5) and a count. When a bit is coded, the current node and all of its suffix nodes are updated by adjusting the prediction to reduce the error by 1/count and the count is incremented by 1 up to a limit of 32. The initial tree is bytewise order 0 (255 contexts) with initial counts of 12. Subsequent nodes are added with a count of 1.5 and a prediction inherited from its suffix node whenever there is no node to represent the 1 bit extension, and the new node becomes the current context. The option -m1600 limits memory usage to 1600 MiB. When memory is exhausted, no new nodes are added to the tree, but predictions and counts of existing nodes continue to be updated. The current context then becomes the suffix node if needed. The option -O8 limits the tree depth to bytewise order 8 (found to be optimal for both enwik8 and enwik9). When the current node reaches this depth, no child nodes are added, but existing nodes and their suffixes continue to be updated, just as if the memory limit were reached. Increasing the model order improves compression but also causes the tree to grow faster, which sometimes makes compression worse if the memory limit is reached sooner. The defaults are -m128 -O4. Compression and decompression require the same time and memory. Also, the same compression options must be given again during decompression. (I added 10 bytes to the decompresser size to account for this). The compressed file is arithmetic coded with the original file size saved in the first 4 bytes. File sizes are limited to less than 2 GiB. The program is distributed as source code only. To test, I compiled with g++ 4.6.1 in 32 bit Windows using the options recommended in the source comments. 123456789101112 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ----crook v0.1 -m1600 -O4 25,693,515 229,770,948 379 393 781 26 -m1600 -O5 23,664,987 207,093,726 423 442 1641 26 -m1600 -O6 22,793,009 197,202,156 446 475 1641 26 -m1600 -O7 22,505,951 193,896,089 462 496 1641 26 -m1600 -O8 22,503,627 193,333,159 8,539 s 193,341,698 483 513 1641 26 -m1600 -O9 22,620,471 193,912,162 479 519 1641 26 -m1600 -O10 22,752,285 194,794,021 488 511 1641 26 -m1600 -O12 22,957,581 196,397,188 492 505 1641 26 -m1600 -O16 23,105,056 197,631,364 477 503 1641 26 .1936 ppmx ppmx 0.01 is a free, experimental, closed source file compressor by Ilia Muraviev, released Nov. 25, 2008. It uses PPM with no filters. It takes no options. ppmx 0.02 was released Dec. 2, 2008. It uses order 9 PPM with hashed context tables, as discussed here. There is also a core 2 duo version which is faster, although it runs on only one core, and has a slightly larger executable. Note that the table below is misleading because on enwik8 the regular version compressed at 976 ns/byte (12% longer) and decompressed at 992 ns/byte (4.5% longer) than the core 2 duo version. ppmx 0.03 (discussed here) was released Dec. 22, 2008. ppmx 0.04 (discussed here) was released Jan. 5, 2008. It uses order 12-5-3-2-1-0 PPM and 280 MB. ppmx 0.05 (discussion), Jan 19, 2010, adds SEE (secondary escape estimation), more memory, and some optimizations. ppmx 0.06, released July 27, 2010, is designed for improved speed and less memory usage rather than compression ratio. It removes SEE and uses only a fixed order 4-2-1-0 model with hash tables. It has a P4 version for Pentium-4 and higher that is about 12% faster. This is the version tested. It has a larger executable (54,496 vs. 45,216). ppmx 0.07, Feb. 20, 2011, uses order 5-3-2-1-0-(-1) PPM with hash tables. Memory usage is increased to 302 MB. ppmx v0.08 (discussion), Jan. 1, 2012, uses order 6-4-2-1-0-(-1) PPM with hash tables and SEE improvements. ppmx 0.09 (discussion) was released Mar. 24, 2014. 123456789101112131415 Compressed size Decompresser Total size Time (ns/byte)Program enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----ppmx 0.01 24,369,312 213,206,926 51,454 x 213,258,380 557 515 550 PPM 26ppmx 0.02 22,580,291 194,298,469 53,511 x 194,351,980 874 888 609 PPM 26ppmxcore2duo 0.02 22,580,291 55,824 x 871 949 609 PPM 26ppmx 0.03 22,572,808 193,643,464 54,964 x 193,698,428 777 784 609 PPM 26ppmx 0.04 23,150,510 201,384,355 52,406 x 201,436,761 791 801 280 PPM 26ppmx 0.05 22,905,422 196,548,444 53,476 x 196,601,920 863 882 576 PPM 26ppmx 0.06 26,131,726 235,257,572 54,596 x 235,312,168 276 317 71 PPM 26ppmx 0.07 23,941,730 211,671,802 44,104 x 211,715,906 314 352 302 PPM 26ppmx 0.08 23,204,040 202,868,559 54,098 x 202,922,657 397 420 355 PPM 26 23,204,040 202,868,559 54,098 x 202,922,657 107 127 355 PPM 53ppmx 0.09 25,952,954 232,581,333 50,873 x 232,632,206 122 150 279 PPM 48 25,952,954 232,581,333 50,873 x 232,632,206 57 69 279 PPM 63 .1947 lzturbolzturbo 0.01 is a free, experimental, closed source file compressor by Hamid Bouzidi, Aug. 15, 2007. There is some controversy over the origin of the source code. Discussion. Discussion. It uses LZ77 with arithmetic coding. The option -49 selects method 4 (1, 2, 4) and level 9 (1..9) for best compression. Other combinations were not tested. There is also a Linux version which was not tested. Memory usage fluxuates but peaks at 654 MB for compression and 90 MB for decompression. The Windows version produces read-only output files that must be set with “attrib -r” before they can be modified or deleted. lzturbo 0.1 (Oct. 5, 2007) is threaded for parallel execution on multicore machines. The maximum comprssion level is -59 where it uses 248 MB for compression and a peak of 72 MB for decompression. Other modes compress much faster. The read-only bug was fixed. lzturbo 0.9 was released Feb. 25, 2008. Decompression memory peaks at 79 MB. lzturbo 0.94 was released Apr. 11, 2009. The option -b59 selects method 5, compression level 9 for maximum compression. -b100 selects a block size of 100 MB for independent compression in separate threads. The default is 32 MB. -p0 forces the compressor to run on one core. By default the program runs on on all cores, but this causes the program to run out of memory with -59 because each thread uses 1450 MB. Decompression ran on 2 cores with a process time of 20 seconds per core and wall time of 28 seconds using about 300 MB memory. Faster modes tested below are run on 2 cores with average process time per core shown. 12345678910Prog Opt enwik8 enwik9 prog Total Comp Deco Mem Alg Note------------ --- ---------- ----------- ------ ----------- ---- ---- --- ---- ----lzturbo 0.01 -49 26,678,709 233,322,999 68,561 x 233,391,560 1412 50 654 LZ77lzturbo 0.1 -59 26,616,816 232,708,136 129,344 x 232,837,480 1385 49 248 LZ77lzturbo 0.9 -59 26,616,278 232,701,587 116,508 x 232,818,095 1420 52 248 LZ77lzturbo 0.94 -59 -b100 -p0 24,763,542 217,342,694 152,254 x 217,494,948 5196 20 1450 LZ77 26 -10 51,426,368 10 8 78 LZ77 26 -14 38,325,178 74 10 171 LZ77 26 -39 -b50 26,123,933 1290 16 1450 LZ77 26 -41 36,615,397 325,577,604 152,254 x 325,729,858 29 23 203 LZ77 26 lzturbo 1.1, Apr. 29, 2013, runs only on 64 bit Windows and 64 bit Linux. The Linux version was tested under Ubuntu (note 48) using the non-static (smaller) executable. The 2 digit options -11…-49 select the compression method and level. The first digit can be 1..4 with higher numbers compressing better. The second digit can be 0, 1, 2, or 9 with higher numbers compressing slower without affecting decompression speed. The program gave an error during compression with -40, -41, -42. Option -b1000 selects a block size of 1000 MB. The default is -b24. Separate blocks can be compressed and decompressed in parallel. The test machine automatically selects 4 threads. Larger blocks improve compression but use more memory and allow fewer threads to be allocated. -b1000 causes it to use 1 thread since there is a single block. At level 9 (-19, -29, -39, -49), it is not possible to compress enwik9 with -b1000 on the 4 GB test machine because it will use over 6 GB memory and start disk thrashing. -p1 selects 1 thread. -p0 disables multi-threading. lzturbo 1.2 was released Aug. 7, 2014 with updates on Aug. 10 and 11, 2014, with compression ratio and decompression speed improvements. Methods -30, -31, -32, -39 use ANS (Asymmetric numeric system) encoding instead of arithmetic coding with SSE/AVX code selected at run tim. The updates fixed an “illegal instruction” error during compression in these modes on the test machine and some other processors. The other modes were tested on the Aug. 7 release. Options are like v1.1. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Note------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- ----lzturbo 1.1 -10 -b24 53,199,932 3 2 48 -10 -b1000 53,194,540 6 2 48 -11 -b24 47,619,485 6 2 48 -11 -b1000 47,611,974 12 2 48 -12 -b24 44,421,925 18 2 48 -12 -b1000 44,413,087 36 2 48 -19 -b24 41,929,879 493 2 48 -19 -b1000 41,920,122 1610 2 48 -20 -b24 49,736,192 3 2 48 -20 -b1000 49,725,239 6 3 48 -21 -b24 42,628,330 6 2 48 -21 -b1000 42,538,087 12 3 48 -22 -b24 39,541,490 18 2 48 -22 -b1000 39,210,560 35 3 48 -29 -b24 32,919,788 543 2 48 -29 -b1000 31,370,930 1760 4 48 -30 -b24 39,036,288 5 3 48 -30 -b1000 39,023,229 10 6 48 -31 -b24 35,632,652 7 3 48 -31 -b1000 35,572,973 13 6 48 -32 -b24 31,266,016 18 3 48 -32 -b1000 30,753,365 38 6 48 -39 -b24 26,892,107 573 3 48 -39 -b1000 25,298,784 1838 6 48 -49 -b24 25,870,196 225,397,956 110,565 x 225,508,521 792 13 1702 48 -p1 -49 -b200 24,416,777 207,335,845 110,565 x 207,446,410 2566 17 3200 48 -49 -b1000 24,416,777 2110 20 48 -p0 -49 -b1000 24,416,777 194,681,713 110,670 x 194,792,383 1920 9 14700 59lzturbo 1.2 -10 -b24 52,703,759 3.2 1.6 48 -10 -b1000 52,698,226 7.0 2.2 48 -11 -b24 47,619,370 6.0 1.5 48 -11 -b1000 47,611,859 11 1.9 48 -12 -b24 44,421,812 17 1.4 48 -12 -b1000 44,412,974 31 1.8 48 -19 -b24 41,933,864 515 1.4 48 -19 -b1000 41,924,186 1577 1.9 48 -20 -b24 48,387,089 3.2 1.8 48 -20 -b1000 48,374,729 6.8 5.8 48 -21 -b24 42,628,216 5.9 1.7 48 -21 -b1000 42,537,971 11 2.9 48 -22 -b24 39,394,820 18 2.0 48 -22 -b1000 39,022,094 30 7.1 48 -29 -b24 32,922,201 545 2.4 48 -29 -b1000 31,372,980 1755 4.7 48 -30 -b24 39,147,401 5.3 2.5 48 -30 -b1000 39,138,118 11 5.1 48 -31 -b24 35,618,016 7.3 2.3 48 -31 -b1000 35,563,249 17 4.2 48 -32 -b24 30,979,376 19 2.7 48 -32 -b1000 30,258,461 41 5.3 48 -39 -b24 26,915,461 582 2.8 48 -39 -b1000 25,330,833 1873 5.1 48 -49 -b24 25,812,200 656 8 48 -p1 -49 -b200 24,416,777 206,359,193 125,174 x 206,484,367 2319 14 3200 48 .1956 encenc 0.15 is an experimental, closed source command line archiver by Serge Osnach, Feb. 14, 2003. It uses PPM and CM (in PaQ mode). It tries up to 5 different compression methods (depending on options) and chooses the best one. The methods are (“a” means “add to archive”): ae = PPMEnch, default is order 7, -o4 to -o64 overrides, -d selects dictionary size in MB to -d256 (uses 344 MB). Choosing higher than -d127 causes decompresser to either output garbage or crash. ai = PPMd var. I, -o selects PPM order, above -o18 crashes compressor, -d has no effect, uses 18 MB. aq = PaQ, -o and -d have no effect, uses 50 MB. ab = PPMBin, default order 15, -o overrides, -d selects dictionary size and crashes decompresser as with method ae. ao = PPMEnch with fixed settings. -o and -d have no effect but using -d crashes decompresser. Uses 31 MB. ag = try all 5 methods and select the best compression. Subsets (e.g. “aeqo” = ae, aq, ao) are allowed. Methods ae and ab with options -o8 -d256 were found to give the best compression on enwik7 (first 107 bytes). These methods discard the model when the memory limit is reached, and this was observed to happen (in task manager), so these options should hold for larger files. However with -d127 (necessary to decompress), method aq gives the best compression..1966 comprolz comprolz 0.1.0 (discussion) is a free, open source, experimental file compressor by Zhang Li, Oct. 7, 2012. It uses ROLZ. The option -b256 selects the maximum block size. During compression it uses 60-65% of two cores. Decompression uses one core. Only source code was provided. It was compiled for 32 bit Windows Vista using MinGW 4.6.1 using “gcc -O3 *.c”. comprolz 0.2.0 was released Oct. 16, 2012. It includes the -f option to select flexible parsing. It is slower but compresses better. comprolz 0.10.0 (discussion) was released Nov. 25, 2012. It includes a dictionary derived from the first 10 MB of enwik8. To test, it was compiled as suggested in the documents using gcc 4.7.0 with options “-O3 -fomit-frame-pointer -mno-ms-bitfields”. Source code is shared with comprox 0.10.0. The executable, packed with UPX, is smaller. comprolz 0.11.0 was released Dec. 17, 2012. The program builds a dictionary from the input instead of using a static dictionary. 32 bit executables are included for Windows and Linux. The Windows version was tested. comprolz 0.11.0-bugfix1, Dec. 18, 2012, fixes a bug that caused poor compression. 1234567Compressor Opt enwik8 enwik9 Prog Total Comp Decomp Mem Alg Note--------- --- --------- ----------- ------- ----------- ---- ---- --- ---- ----comprolz 0.1.0 -b256 24,835,082 215,770,703 41,170 s 215,811,873 595 262 602 ROLZ 26comprolz 0.2.0 -b250 -f 24,280,609 210,255,761 43,899 s 210,299,660 1415 319 666 ROLZ 26comprolz 0.10.0 -b250 -f 23,050,103 198,635,448 82,824 x 198,718,272 1086 333 595 ROLZ 26comprolz 0.11.0 -b250 -f 23,687,477 213,585,466 29,509 x 213,614,975 1608 324 866 ROLZ 26comprolz 0.11.0b1 -b250 -f 22,813,215 196,651,379 29,453 x 196,680,832 984 308 688 ROLZ 26 .1971 sbc sbc 0.970r2 is a free, closed source command line archiver and file encryptor by Sami, June 27 2005. Compression options suggest it uses BWT. The -m3 option selects maximum compression, requiring 32 MB memory (-m1 is minimum). The -b63 option selects maximum block size (32 MB, requiring 192 MB additional memory). -ad disables adaptive block size reduction for homogeneous data. SBC runs faster with smaller block sizes and minimum compression as shown: 123456 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp ------- ------- ---------- ----------- ----------- ----------- ----- ----- sbc 0.970r2 -ad -m3 -b63 22,470,539 197,066,203 99,094 xd 197,165,297 1733 313sbc 0.970r2 -ad -m1 -b31 23,288,217 99,094 xd 620 230sbc 0.970r2 -ad -m1 -b1 27,087,118 99,094 xd 300 180 .1973 xz xz 5.0.1 is a free, open source file compressor, Jan. 29, 2011. xz specifies a container format written by Lasse Collin. It uses the public domain LZMA2 compressed format from 7zip by Igor Pavlov. There are versions for most operating systems including Windows and Linux. The Windows version was tested. The option -9 specifies maximum compression and memory. The default is -6. The option -e (extreme) specifies better compression at a cost in compression (but not decompression) time. Program size is based on xz.exe. There is a separate decompressor (xzdec.exe) which is smaller and decompresses to standard output, but the Windows version does not work because it outputs in text mode. Additional results are shown below for enwik8 for compression and decompression time (ns/byte) and compression and decompression memory (in MB). xz 5.2.1 was released Feb. 26, 2015. 123456Version Options enwik8 enwik9 size (zip) enwik9+prog Ctime Dtime Cmem Dmem Note-------- ------- ---------- ----------- --------- ----------- ----- ---- ---- ---- ----xz 5.0.1 -9 -e 24,831,648 2310 40 690 66 26 -9 24,865,244 2600 40 690 66 26 26,375,764 2020 45 95 8 26xz 5.2.1 --lzma2=preset=9e,dict=1GiB,lc=4,pb=0 24,703,772 197,331,816 36,752 xd 197,368,568 5876 20 6000 1025 73 .1984 WinRARWinRAR 3.60 beta 3 is a commercial (free trial) Windows GUI and command line archiver by Eugene Roshal, May 8, 2006. It produces rar and zip archives and decompresses many other formats. It also encrypts and performs other functions. The best compression mode uses PPM (actually ppmd var. I, an earlier version of ppmd J) with optimizations for text and other formats (exe, wav, bmp). The -mc7:128t+ option says to use PPM order 7, 128 MB memory (maximum) and force text preprocessing. The -sfxWinCon.sfx option says to produce a self extracting console executable (adding 79,360 bytes). The model order was tuned on enwik8. Additional results are shown for order 10, for -m5 (maximum compression), and for normal compression as a .exe and .rar file. The decompresser in the last case is zipped unrar.exe. WinRAR 4.20 was released June 9, 2012. It costs $29 with a 40 day free trial as of Feb. 1, 2013. Options are the same. -m1 through -m5 select compression level. The default is -m3. The algorithm is LZ77 with a 4 MB window. -mc7:128t+ selects PPM, order 7, with maximum 128 MB memory. Time and memory to decompress with PPM is about the same as compression. WinRAR 5.00b2 was released Apr. 29, 2013. It includes a larger dictionary, up to 1 GB for the 64 bit version and 256 MB for the 32 bit version. Option -ma5 selects the new archive format, which is not compatible with v4.20 or earlier. The default is the older format. In the newer format, option -mc is silently ignored. Option -m3 is the default compression level. 12345678910111213141516171819202122232425 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- -------------------------- ---------- ----------- ----------- ----------- ----- ----- ---- ---- ----WinRAR 3.60b3 -mc7:128t+ -sfxWinCon.sfx 22,713,569 198,454,545 0 xd 198,454,545 506 415 -mc10:128t+ -sfxWinCon.sfx 23,233,523 0 xd 770 -m5 -sfxWinCon.sfx 24,832,649 0 xd 680 520 -sfxWinCon.sfx 29,828,890 0 xd 780 40 29,749,530 98,888 xd 780 40WinRAR 4.20 -m1 40,234,511 36 32 99 LZ77 26 -m2 30,564,700 180 29 99 LZ77 26 -m3 (default) 29,671,175 325 30 99 LZ77 26 -m4 29,329,237 484 30 99 LZ77 26 -m5 29,225,016 590 30 99 LZ77 26 -mc5:128t+ 23,440,773 358 229 PPM 26 -mc6:128t+ 22,701,033 418 229 PPM 26 -mc7:128t+ 22,635,718 198,372,701 141,019 xd 198,513,720 440 373 229 PPM 26 -mc8:128t+ 22,769,557 518 456 229 PPM 26 -mc10:128t+ 23,153,065 582 229 PPM 26 -mc12:128t+ 23,401,290 609 229 PPM 26WinRAR 5.00b2 -mc7:128t+ 22,635,718 198,372,701 153,763 x 198,526,464 433 368 226 PPM 26 -ma5 -m1 40,565,268 54 31 406 LZ77 26 -ma5 -m2 29,758,785 228 30 435 LZ77 26 -ma5 -m3 28,662,794 439 32 435 LZ77 26 -ma5 -m4 28,072,832 751 31 435 LZ77 26 -ma5 -m5 27,835,431 1004 31 435 LZ77 26 .1986 quarkquark v0.95r beta is a free, closed source command line file compressor by Frederic Bautista, Mar. 10, 2006. It uses LZ. It is characterized by high compression and fast decompression. The -m1 option selects relative mode compression, which is normally best, but slowest. The -d25 option selects a dictionary size of 225 which is the largest that will run without thrashing with 1 GB RAM. The -l8 option selects the search depth. Higher values normally improve compression (up to -l13, default -l4), but -l8 was the highest practical value for reasonable compression speed (7.5 hours). Also, larger values were found to hurt compression on enwik5. Compression time increases approximately exponentially with the -l value. The compression speed with -l13 is 6,100,000 ns/byte..1994 lzip plzip is a free, open source file compressor by Antonio Diaz Diaz, Feb. 16, 2010. It is “parallel lzip”, compatible with lzip, but multi-threaded for parallel execution. It uses LZMA (LZ77 with arithmetic coding). The -9 option selects maximum compression. It has a command line interface similar to gzip. When it compresses, it removes the original file and adds a .lz extension. lzip and plzip are written for Linux. A Windows port by Christian Schnaader on May 2, 2010 was tested. On my test computer (2 core T3200, 2 GHz), compression showed 180% CPU and decompression showed 117%. lzip 1.14-rc3 was released Jan. 15, 2013. plzip 1.5 was released June 2, 2016. I tested the 64 bit Windows compile in Linux. 12345Compressor Opt enwik8 enwik9 Prog Total Comp Decomp Mem Alg Note--------- --- --------- ----------- ------- ----------- ---- ---- --- ---- ----plzip -9 25,578,352 221,845,216 56,614 x 221,901,830 1308 37 1028 LZ77 26lzip 1.14-rc3 -9 -s512MiB 24,756,063 199,410,543 21,682 s 199,432,225 2409 21 5632 LZ77 57plzip 1.5 -9 25,518,871 221,179,984 336,294 x 221,213,608 425 13 2048 LZ77 48 .1995 comprox comprox_sa 20110927 (discussion) is a free, experimental, open source file compressor by Zhang Li, Sept. 27, 2011. It uses LZSS (in 4 MB blocks) followed by arithmetic coding. The program takes no arguments. It uses 60 MB memory for compression and 6 MB for decompression. It runs in both Windows and Linux. Only the Windows version was tested. Version 20110928 was released Sept. 28, 2011. Compression runs in 2 threads. Both the Windows and Linux versions were tested (on different computers). Version 20110929 was released Sept. 29, 2011. Decompression also runs in 2 threads. Compression is slightly improved. comprox version 0.1.1, Oct. 10, 2011, replaces comprox_sa. It is a rewrite using LZ77 (instead of LZSS) and arithmetic coding. It takes a compression level 0 (fastest) to 9 (best) with a default of 5. All levels use the same memory, 218 MB for compression and 44 MB for decompression. The Linux version reports the same resident memory as Windows but higher virtual memory: 236 MB to compress and 284 MB to decompress. Both compression and decompression run in 2 threads. Reported times are real times. comprox 0.6.0 was released Aug. 24, 2012. It uses static 4K dictionary encoding followed by LZ77 and arithmetic coding. It was released as open source (3 clause BSD) C code only. For testing, it was compiled using g++ 4.6.1 as “gcc -O3 *.c” under 32 bit Windows. The option e200 means to use a 200 MiB block size. The default is e16. Larger blocks improve compression but use more memory. The program crashed with e250 or larger. comprox 0.7.0 (discussion) was released Sept. 10, 2012. It includes multi-threaded compression and other improvements. It includes a static English dictionary with about 3000 common words. It was tested in 64 bit Linux compiled with “gcc -O3 *.c -lpthread” and in 32 bit Windows compiled with “gcc -O3 *.c -lpthread -Wl,–stack,8000000”. comprox v0.8.0 was released Sept. 26, 2012 with better compression. The Linux version was compiled with “gcc -O3 -march=native *.c -lpthread”. The Windows version was compiled as before. comprox 0.8.0-bugfix1, Sept. 27, 2012, fixed a bug that caused compression to crash on some input files. It was compiled with MinGW 4.6.1 with “gcc -O3 -msse2 -s -Wl,–stack,8000000 *.c -lpthread”. comprox 0.9.0 was released Oct. 16, 2012. The -b option sets the block size in MB. Default is -b16. -m sets number of matches to check. Default is -m40. -f selects flexible parsing. To test, the program was compiled “gcc -O3 -march=native -s *.c” as above. comprox 0.10.0 (discussion) was released Nov. 25, 2012. It includes a dictionary derived from the first 10 MB of enwik8. To test, it was compiled as suggested in the documents using gcc 4.7.0 with options “-O3 -fomit-frame-pointer -mno-ms-bitfields”. Source code is shared with comprolz 0.10.0. The executable, packed with UPX, is smaller. comprox 0.11.0 was released Dec. 17, 2012. It builds a dictionary from the input rather than use a static dictionary. Executables are included for 32 bit Windows and Linux. These compressed smaller than the source code. The compressor crashed with -b250 (250 MB block size) on enwik9, but -b200 worked. -m100 selects the match search limit (default -m40). -f selects flexible parsing. Using large -m makes compression time nonlinear, i.e. increasing from 75s to 2115s from enwik8 to enwik9. comprox 0.11.0-bugfix1, Dec. 18, 2012, fixes a bug that caused poor compression. 123456789101112131415161718192021222324252627282930Compression Compressed size Decompresser Total size Time (ns/byte)Program Version Opt enwik8 enwik9 size (zip) enwik9+prog Comp Decomp CMem Dmem Alg Note------- -------- --- ---------- ----------- ----------- ----------- ----- ----- ---- ---- --- ----comprox_sa 20110927 (Win32) 32,654,393 287,588,097 3,791 s 287,591,888 398 101 60 6 LZSS 26comprox_sa 20110928 (Win32) 32,654,718 287,590,343 3,790 s 287,594,133 205 101 122 10 LZSS 26comprox_sa 20110928 (Linux) 32,654,718 287,590,343 3,790 s 287,594,133 126 59 141 10 LZSS 48comprox_sa 20110929 (Win32) 32,652,597 287,575,768 3,774 s 287,579,542 209 71 122 12 LZSS 48comprox_sa 20110929 (Linux) 32,652,597 287,575,768 3,774 s 287,579,542 116 37 145 36 LZSS 48comprox 0.1.1 (Win32) 0 29,463,135 146 65 219 44 LZ77 26 (Win32) 5 28,836,139 290 65 218 43 LZ77 26 (Win32) 9 28,586,545 250,565,797 5,430 s 250,571,227 768 57 218 43 LZ77 26 (Linux) 9 28,586,545 250,565,797 5,430 s 250,571,227 496 29 218 44 LZ77 48comprox 0.6.0 (Win32) e200 25,504,328 221,405,873 23,367 s 221,429,240 484 92 1567 590 LZ77 26 e16 26,816,904 395 132 169 68 LZ77 26comprox 0.7.0 (Linux) e200 25,068,368 217,403,007 36,702 s 217,439,709 225 52 1000 410 LZ77 48 (Win32) e200 25,068,368 217,403,007 36,702 s 217,439,709 390 126 1107 472 LZ77 26 (Linux) e500 25,068,368 212,824,614 36,702 s 212,861,316 260 57 2500 1100 LZ77 48 (Linux) e700 25,068,368 212,348,904 36,702 s 212,385,606 309 49 3400 1500 LZ77 48comprox 0.8.0 (Win32) e200 24,537,383 212,651,678 42,764 s 212,694,442 460 128 1143 279 LZ77 26 (Linux) e500 24,537,383 208,328,173 42,764 s 208,370,937 296 49 2500 558 LZ77 48comprox 0.8.0-bugfix1 (Win) e200 24,537,453 212,652,159 42,804 s 212,694,963 480 145 1108 281 LZ77 26comprox 0.9.0 (Win32) -b250 -f -m100 24,243,078 208,369,181 46,387 s 208,415,568 1657 130 1405 326 LZ77 26 -b250 -f 24,281,529 748 161 733 164 LZ77 26 -b250 24,486,987 398 160 733 164 LZ77 26 25,494,243 317 167 151 86 LZ77 26comprox 0.10.0 (Win32) -b250 -f -m100 23,332,113 201,288,183 86,687 x 201,374,870 1209 151 1271 LZ77 26comprox 0.11.0 (Win32) -b200 -f -m100 23,990,134 217,340,709 34,176 x 217,374,885 2115 144 1211 LZ77 26 (Win32) 25,003,709 234,265,741 34,176 x 234,299,917 436 145 269 LZ77 26comprox 0.11.0-bugfix1(Win) -b250 -f -m100 23,064,386 199,515,912 34,176 x 199,550,088 917 153 688 LZ77 26 23,861,257 209,481,309 34,176 x 209,515,485 307 162 196 LZ77 26 .2018 bsscbssc 0.95a is a free command line file compressor by Sergeo Sizikov, 2005. It uses BWT. The -m16383 option selects the maximum block size of 16383 KB (uses 140 MB memory)..2024 lzham lzham alpha 2 is a free, open source (MIT license) file compressor and library by Richard Geldreich Jr., Aug. 21, 2010. LZHAM is short for LZMA-Huffman-Arithmetic-Markov. It is based on LZMA (7zip) but instead of using arithmetic coding throughout, it uses them only for binary decisions and uses Huffman or Polar codes for literal and match codes. A Polar code is similar to a Huffman code but is simpler to calculate at a cost of 0.1% in compression. Polar codes are calculated as follows: Symbols are sorted from highest to lowest frequency. The total frequency is rounded up to a power of 2. Individual frequencies are rounded down to a power of 2. Individual frequencies are doubled in descending order until the sum is equal. Step 4 is repeated as needed. At this point all codes have frequencies that are a power of 1/2 and codes are assigned. For example, if the symbols and their frequencies are A=3, B=2, C=1, then the sum (6) is rounded up to 8 and the individual frequencies are rounded down to A=2, B=2, C=1, which sums to 5. We then double A=4, which sums to 7. We cannot double B=4 because the sum would exceed 8, so we continue to C. At this point we have A=4, B=2, C=2, which sums to 8, and we may assign codes of appropriate lengths such as A=0, B=10, C=11. For this test, lzhamtest_x86 was used. There is a _x64 version for 64 bit machines which is faster. The library supports different speeds and dictionary sizes, but the test program does not have any options to select them, so none were used. Decompression uses 67 MB memory vs. 609 MB for compression. Compression uses both cores on the test machine but decompression uses only one. Version alpha 3, Aug. 30, 2010, supports all of the options suppored by the library. Option -d26 selects 64M dictionay, the largest supported by the x86 version. (The x64 version supports up to -d29 = 512M). -m4 selects “uber” compression mode. There are 5 compression levels from -m0 through -m4. The highest two levels use Huffman codes rather than Polar codes. -t2 says to use 2 helper threads (to match the number of cores on the test machine). The default is to use 1 less than the number of cores, up to 16 threads. Decompression is not multi-threaded. The x64 version was tested by the author. I guessed at memory usage. Each increment of the -d option approximately doubles memory usage. lzhamtest v1.0 (discussion) is the test code for the source code release on Jan. 25, 2015. To test on note 48, it was compiled using “cmake . ; make” in Ubuntu. Option -d29 selects a 512 MB dictionary. -d26 selects 64 MB. Default is -d28 (256 MB). Option -x selects extreme parsing. 123456789101112 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----lzham alpha 2 x86 25,907,665 224,554,163 95,922 x 224,650,085 2485 21 609 LZ77 26lzham alpha 3 x86 -m4 -d26 -t2 24,991,681 213,868,601 139,694 x 214,008,295 2970 22 611 LZ77 26lzham alpha 3 x64 -m4 -d29 24,954,329 206,393,809 155,282 x 206,549,091 595 9 4800 LZ77 45 lzhamtest v1.0 25,064,179 207,094,787 191,600 s 207,286,387 553 9 2392 LZ77 48 -d26 25,091,033 279 7.3 LZ77 70 -d26 -x 24,990,739 722 7.2 LZ77 70 -d29 204,325,043 191,600 s 204,516,643 339 6.6 LZ77 70 -d29 -x 202,237,199 191,600 s 202,428,799 1096 6.6 LZ77 70 -d29 -x 25,002,070 1761 9.5 911 LZ77 48 .2024 flashzipflashzip 0.1 is a free, closed source file compressor by Nania Francesco Antonio, Jan. 10, 2008. It uses LZP and arithmetic coding. flashzip 0.2 was released Jan. 11, 2008. It is compatible with version 0.1 but faster. Note: in both versions, CPU utilization during compression is about 28% to 35%. Times shown are process times. flashzip 0.3 was released Feb. 4, 2008. It uses ROLZ plus arithmetic coding. It takes an option x for better compression (slower) and 1 through 5, where 5 is the slowest (best compression). flashzip 0.9 was released June 28, 2008. Option -m2 selects method 2 (default is -m1). -b1 through -b5 select buffer size, which affects memory usage. Default is -b3. -s1 through -s7 selects match length and speed. Default is -s1 (fastest, worst compression). flashzip 0.91 was released Aug. 17, 2008. Options are like version 0.9. Memory usage was increased to 198 MB for compression and 138 MB for decompression using settings for best compression. Minimum requirement is 10 MB and 6 MB. flashzip 0.93a was released Mar. 9, 2009. flashzip 0.94 was released Mar. 25, 2009. flashzip 0.99 was released July 23, 2009. flashzip 0.99b4 (Aug. 25, 2009) is an archiver rather than a compressor. The -s option was renamed to -c and the -b option was increased to -b8 to allow more memory usage. For enwik8, memory usage for both -m1 and -m2 is 182 MB for compression and 162 MB for decompression. For enwik9, memory usage for -m2 is 609 MB for compression and 592 MB for decompression. flashzip 0.99b8 (Feb. 28, 2010) has 4 compression levels from -m0 (fastest) to -m3 (best). The buffer size option was increased to -b9 (1 GB). Memory usage depends on the input size. For -m0 -c7 -b7 enwik8, compression takes 214 MB and decompression takes 195 MB. For -m1 through -m3 -c7 -b8, enwik8 compression takes 231 MB and decompression takes 195 MB. For -m3 -c7 -b8, enwik9 compression takes 658 MB and decompression takes 625 MB. Changing -b8 to -b9 has no effect on size, speed, or memory usage for enwik8, but for enwik9 it improves compression and increases memory usage to 1111 MB for compression and 1078 MB for decompression. The -s1 option enables the -b9 option. Otherwise -b9 will cause a “no memory” error. flashzip 0.99c1 (June 1, 2011) improves compression and speed. The option ranges are -m0…-m3, -c1…-c7 and -b1…-b7. Only the maximum compression options were tested. flashzip 0.99c3 (Oct. 10, 2011) is multi-threaded for compression in modes -m1, -m2, -m3. Decompression runs in a single thread. The archive is compatible with the previous version. In the tested mode (maximum compression), memory usage depends on the file size and climbs steadily during compression or decompression. It is the same for either, and same as the previous single threaded version. flashzip 0.99d1 was released Oct. 31, 2011. It has only two options, -m0…-m9 (default -m4) for compression method (fastest…best) and -b1…-b7 (default -b1) for buffer size. Memory usage ranges from 30 MB at -b1 to 1100 MB at -b7. flashzip 1.0.0 was released Oct. 3, 2012. Options -m1 to -m7 select compression -mx7 compresses best. Higher levels compress slower and use more memory but have little effect on decompression speed, which is generally faster. Decompression uses the same memory as compression, up to 1.1 GB depending on the file size. Options -b1 to -b7 select buffer size. Larger values use more memory but don’t affect speed. The default is -b4. The program can use up to 8 threads and auto-detects the number of available cores. In the high compression modes tested, only 1 of 2 available cores was used. -e creates a self extracting archive. It extracts to the saved name using both cores. flashzip 1.1.2 was released Dec. 12, 2012. It includes a GUI that calls the command line version. The command line version was tested. The compression options were changed to -m0..-m3 and -mx0..-mx3, with -mx3 selecting maximum compression. Option -k0..-k7 select ROLZ dictionary size with -k7 using 256 MB for best compression using the most memory. -b1024 selects a buffer size of 1024 MB for best compression but using the most memory. There is a -t option for multi-threaading which defaults to -t1 to select a single thread. Using more threads makes compression worse. The -e option creates a self extracting archive by appending the compressed file to a copy of flashzip.exe, and therefore does not compress any smaller when the decompresser is included. 1234567891011121314151617181920212223242526272829303132333435363738394041 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----flashzip 0.1 34,053,198 299,443,551 25,734 x 299,469,285 67 51 47 LZPflashzip 0.2 34,053,198 299,443,551 25,257 x 299,468,808 62 52 47 LZPflashzip 0.3 5 28,541,292 248,094,851 26,738 x 248,121,589 297 73 86 ROLZ x 5 27,845,033 241,997,412 26,738 x 242,024,150 673 72 86 ROLZflashzip 0.9 (-m1 -s1 -b3) 31,856,012 141 124 83 ROLZ -b1 32,088,940 148 125 70 ROLZ -b5 31,764,213 143 119 132 ROLZ -s4 29,235,064 269 99 83 ROLZ -s7 28,370,670 928 87 83 ROLZ -m2 31,641,305 188 121 83 ROLZ -m2 -s7 27,665,526 2081 97 83 ROLZ -m2 -s7 -b5 26,737,801 230,987,395 30,052 x 231,017,447 2476 75 132 ROLZflashzip 0.91 -m2 -s7 -b5 26,068,507 227,945,252 34,222 x 227,979,474 3560 112 198 ROLZ -m1 -s7 -b5 26,851,582 1305 127 198 ROLZflashzip 0.93a -m2 -s7 -b5 26,243,745 227,048,196 36,367 x 227,084,563 1458 95 132 ROLZ -m1 -s7 -b5 27,004,639 1030 140 198 ROLZ 26flashzip 0.94 -m2 -s7 -b5 26,236,095 226,981,882 35,996 x 227,017,878 2451 87 132 ROLZ 26 -m1 -s7 -b5 26,662,405 230,985,291 35,996 x 231,021,287 1275 84 198 ROLZ 26flashzip 0.99 -m2 -s7 -b5 26,027,791 224,648,225 37,361 x 224,685,586 2399 110 198 ROLZ 26 -m1 -s7 -b5 26,305,210 1230 160 132 ROLZ 26flashzip 0.99b4 -m2 -c7 -b8 25,804,706 218,328,751 141,207 x 218,469,958 3037 86 609 ROLZ 26 -m1 -c7 -b8 26,255,893 1580 97 182 ROLZ 26flazhzip 0.99b8 -m0 -c7 -b8 29,191,973 200 110 214 ROLZ 26 -m1 -c7 -b8 27,752,588 510 110 231 ROLZ 26 -m2 -c7 -b8 26,351,718 1420 110 231 ROLZ 26 -m3 -c7 -b8 26,008,189 220,193,756 119,185 x 220,312,941 3281 84 658 ROLZ 26 -s1 -m3 -c7 -b9 26,008,189 218,405,144 119,185 x 218,524,329 3531 89 1111 ROLZ 26flashzip 0.99c1 -m3 -c7 -b7 24,840,311 206,005,639 131,128 x 206,136,767 2139 117 1050 ROLZ 26flashzip 0.99c3 -m3 -c7 -b7 24,840,025 205,992,947 246,816 x 206,239,763 1925 112 1050 ROLZ 26flashzip 0.99d1 28,022,537 253 92 46 ROLZ 26 -b7 28,088,756 542 102 127 ROLZ 26 -m9 -b7 24,363,049 207,354,714 170,353 x 207,525,067 1180 94 1100 ROLZ 26flashzip 1.00 26,788,895 168 127 37 ROLZ 26 -b7 26,761,559 174 123 91 ROLZ 26 -m7 -b7 26,761,559 762 130 136 ROLZ 26 -mx7 -b7 23,869,034 202,363,445 123,053 x 202,486,498 1296 122 802 ROLZ 26 -mx7 -e -b7 23,995,498 202,489,909 0 x 202,489,909 1123 123 840 ROLZ 26flashzip 1.12 -mx3 -k7 -b1024 24,726,693 211,104,283 151,961 x 211,256,255 581 94 1152 ROLZ 26 .2081 uharcuharc 0.6b is a free (for noncommercial use) closed source command line archiver by Uwe Herklotz, Oct. 1, 2005. In maximum compression mode (-mx) it uses PPM. In modes -m1 (fastest) to -m3 (best) it uses ALZ: LZ77 with arithmetic coding. -mz uses LZP. -md32768 selects maximum dictionary size (uses 50 MB memory, default is -m4096). Additional results for enwik8: 12345678Options enwik8 Comp Decomp (ns/byte)------- ---------- ---- -------mx -md32768 23,911,123 1830 1510-mx 23,952,039 1832 1546-m3 27,957,245 1840 110-m2 28,459,084 1726 110-m1 29,660,279 1242 121-mz 30,429,795 191 236 .2040 csarc csc2 is a free, experimental, closed source file compressor by Fu Siyuan, Apr. 18, 2009. It uses LZP with order 1 modeling of literals and range coding over a 270 size alphabet. The program takes no options. It recognizes whether the input file is compressed, and if so, decompresses it. csc3 v.2009.08.12 is a free file compressor with source code in C by Fu Siyuan, Aug. 11, 2009. It uses LZ77. The option -m3 selects best and slowest compression (range -m1 to -m3, default -m2). -d7 selects the maximum dictionary size (range -d1 to -d7, default -d4). -fo turns off EXE and delta filtering (default unless detected by file name extension). The decompresser size is based on csc3.exe, which is smaller than csc3compile2.exe, but does not work on some machines. It is smaller than the zipped source code (17,247 bytes). Timing is similar for both versions and a version compiled with gcc 4.4 with -O2 -s -march=pentium4 -fomit-frame-pointer. csc31 was released Sept. 23, 2009 without source code. Discussion. csc32 a2 (discussion), May 9, 2010, is a rewrite of csc31. The option -m3 selects maximum compression. -d9 selects maximum dictionary size. Memory usage is 528 MB for compression and 330 MB for decompression. csc32 final, Mar. 1, 2011, has 3 compression settings from -m1 (fastest) to -m3 (best) and dictionary sizes up to -d512 (512 MB) which get the best compression but use the most memory. Compression requires memory in addition to the dictionary, but decompression does not. Source code is now available. csarc 3.3 (discussion) is a free, open source (public domain) archiver with a LZMA like algorithm with dedupe and dictionary preprocessing of text. It was released Mar. 21, 2015. Option are compression level -m1 to -m5, dictionary size up to -d1024m (1 GB), -t1 to -t8 (number of threads, default 1) and -p1 to -p4 to split large files into 1 to 4 parts to compress in parallel (default 1). To test, I compiled from source with g++ 4.8.2. 12345678910111213141516171819 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ---- ----csc2 34,119,354 298,385,256 9,092 x 298,394,348 141 201 49 LZP 26csc3 2009.08.12 -m1 -d1 33,920,768 150 59 15 LZ77 26 -m1 -d7 33,510,724 320 59 511 LZ77 26 -m2 -d4 31,627,835 660 56 93 LZ77 26 -m2 -d7 31,460,838 730 55 511 LZ77 26 -m3 -d7 30,430,159 263,485,695 14,027 x 263,499,722 1514 43 675 LZ77 26csc31 -m3 -d7 28,984,849 250,172,831 64,214 x 250,237,045 1045 33 791 LZ77 26csc32 a2 -m3 -d9 30,304,020 262,999,383 111,571 x 263,110,954 340 35 528 LZ77 26csc32 final -m1 -d128 28,973,600 178 49 166 LZ77 26 -m2 -d128 28,624,802 283 52 166 LZ77 26 -m3 -d4 27,776,206 416 52 24 LZ77 26 -m3 -d128 26,842,072 232,326,926 53,665 s 232,380,591 420 46 201 LZ77 26 -m3 -d512 26,842,072 229,929,654 53,665 s 229,983,319 423 47 660 LZ77 26csarc 3.3 -m1 -p4 -t4 -d256m 29,160,344 250,618,458 69,848 s 250,688,306 32 12 1340 LZ77 48 -m3 -p4 -t4 -d256m 27,130,418 232,020,894 69,848 s 232,090,742 95 12 1581 LZ77 48 -m5 -d1024m 24,516,202 203,995,005 69,848 s 204,064,853 621 22 2463 LZ77 48 .2044 packet packet 0.01 is a free, experimental file compressor by Nania Francesco Antonio, May 11, 2008. It uses LZP. It takes no options. packet 0.02, May 16, 2008, improves compression for .wav files and supports files over 2 GB. packet 0.03b, May 20, 2008, uses LZ77, 3 MB for compression, and 1 MB for decompression. It takes an optional argument ‘x’ meaning better but slower compression, and a level 1 through 6, where 6 is slowest with best compression. packet 0.90b, June 18, 2008, has options -m1 to -m4 (method) and -s0 to -s9 (intensity). All options use 10 MB for compression and 2 MB for decompression. packet 0.91b, Aug. 6, 2009 has methods -m1 through -m6, where -m6 is maximum compression. Decompression requires 1.5 MB. packet 1.0 (discussion) was released Aug. 4, 2013. Options -m0..-mx9 select compression level (default -m4). Option -t2 selects 2 threads (default -t1). packet 1.1 (discussion) was released Dec. 7, 2013 for 64 bit Windows. It was tested in Ubuntu under wine. Option -m9 (or -mx) selects maximum compression. Default if -m4. -b512 selects maximum buffer size of 512 MB. Default is -b64. -h4 selects maximum number of buffers. Default is -h2. packet 1.2 was released July 19, 2015. packet 1.9 (discussion) was released Aug. 19, 2016. Option -mx selects maximum compression time. -h8 selects 2 GB hash table memory for compression (max is -h7 = 1 GB in 32 bit .exe and -h9 = 4 GB in 64 bit .exe). -b5 selects maximum buffer size 512 MB for both compression and decompression. -r (recursive) and -s (solid) have no effect for single file compression. The 64 bit version was tested under Ubuntu/Wine. 1234567891011121314151617181920212223242526272829 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- ---- ----packet 0.01 37,637,275 334,473,465 30,508 x 334,503,973 50 43 4 LZPpacket 0.02 37,637,276 334,473,466 27,900 x 334,501,366 58 42 4 LZPpacket 0.03b 1 35,576,495 140 20 3 LZ77 x 1 34,792,199 170 20 3 LZ77 6 34,563,297 450 20 3 LZ77 x 6 33,752,502 297,266,174 26,435 x 297,292,609 594 18 3 LZ77packet 0.90b -m1 -s0 35,426,140 199 28 10 LZ77 -m1 -s9 32,780,039 2887 26 10 LZ77 -m2 -s0 34,281,503 274 24 10 LZ77 -m2 -s9 31,968,711 4527 25 10 LZ77 -m3 -s0 34,966,621 236 56 10 LZ77 -m3 -s9 32,199,212 2965 51 10 LZ77 -m4 -s0 33,612,046 307 61 10 LZ77 -m4 -s3 32,033,412 861 57 10 LZ77 -m4 -s6 31,367,386 2411 57 10 LZ77 -m4 -s9 31,208,752 273,176,127 32,305 x 273,208,432 3871 48 10 LZ77packet 0.91b -m6 -s9 31,306,703 274,033,491 45,358 x 274,078,849 3669 36 10 LZ77 26packet 1.0 -m4 28,349,717 487 37 416 LZ77 26 -m4 -t2 28,789,607 385 53 500 LZ77 26 -m9 27,439,216 4530 37 425 LZ77 26 -mx9 26,895,256 232,428,377 114,566 x 232,542,943 19749 34 429 LZ77 26packet 1.1 26,848,041 233,803,751 265,102 x 234,068,853 295 26 335 LZ77 48 -m9 -b512 -h4 25,624,659 216,849,389 265,102 x 217,114,491 647 26 1500 LZ77 48 -mx -b512 -h4 25,348,872 213,722,850 265,102 x 213,987,952 767 26 1500 LZ77 48packetx64 1.2 -mx -b512 -h4 24,664,592 204,646,570 314,885 x 204,961,455 601 21 1619 LZ77 48 packet_x64 1.9 -mx -b512 -h8 24,968,492 204,195,438 261,967 x 204,457,405 974 14 2824 LZ77 48 .2088 TarsaLZP TarsaLZP Aug 8 2007 is a free, experimental file compressor with public domain source code (FASM) by Piotr Tarsa. Older versions used order 3 LZP to code the last 16 matches at order 3, followed by order 2 PPM encoding of literals. It takes no command line options but compression/decompression settings may be specified in an initialization file. For this test, default settings were used and others were not tried. The Jul 30 2007 version uses 2 LZP models, one with a 4 byte context and one 8 byte. The program selects the one that gives a higher probability of a match. There is no initialization file. The Aug 8 2007 version uses 341 MB memory for compression and 333 MB for decompression. The interim Aug 10 2007 version runs at high priority. (CAUTION, this will make your computer unusable while running). TarsaLZP 29 Jan 2012 is distributed as Java source and class files. It has a GUI interface. TarsaLZP 18 Nov 2012 takes several options, but defaults were used for testing. It is available as source code in Python, Java, Javascript, and C. The C version was tested by compiling with MinGW gcc 4.7.0 with options “-O3 -std=c99” in 32 bit Vista. 1234567891011121314 Compressed size Decompresser Total size Time (ns/byte)Program enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----TarsaLZP Jul 4 2006 35,745,297 334,661,013 2,255 sd 334,663,268 149 163 54 LZPTarsaLZP Jul 30 2006 34,321,697 320,160,237 1,455 xd 320,161,692 110 117 54 LZPTarsaLZP Aug 5 2006 32,270,002 295,312,202 1,579 xd 295,313,781 110 127 70 LZPTarsaLZP May 6 2007 32,461,606 297,130,840 1,580 xd 297,132,420 97 121 71 LZPTarsaLZP Jun 17 2007 31,233,381 283,895,945 1,604 xd 283,897,549 100 122 71 LZPTarsaLZP Jul 18 2007 31,363,533 285,248,058 2,365 xd 285,250,423 88 105 71 LZPTarsaLZP Jul 30 2007 26,664,933 233,613,937 2,472 xd 233,616,409 247 255 42 LZPTarsaLZP Aug 8 2007 25,134,862 215,301,412 2,843 xd 215,304,255 249 287 341 LZPTarsaLZP Aug 10 2007 25,135,357 215,301,079 3,546 xd 215,304,626 269 322 341 LZPTarsaLZP Jan 29 2012 24,751,389 208,867,187 13,081 s 208,880,268 203 ~2000 LZP 54TarsaLZP Nov 18 2012 24,860,676 211,990,481 20,303 s 212,010,784 244 277 330 LZP 26 .2090 GRZipIIGRZipII 0.2.4 is a free, open source (LGPL) command line file compressor by Grebnov Ilya, Feb. 12, 2004. It uses BWT. The -b8m option selects the maximum block size of 8 MB..2091 4x44x4 0.2a is a free, open source file compressor by Bulat Ziganshin, June 2, 2008. It is a wrapper around GRZipII, tornado, and LZMA (7zip), and a subset of the FreeARC archiver. Source code is included in the FreeARC distribution. The program allows arguments to be passed to each compressor, plus 16 preset options. Only the fastest and slowest preset option for each compressor was tested. Options 1-7 are tornado, 8-12 are LZMA, and 1t-4t are GRZipII. 123456789 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- -------------------------- ---------- ----------- ----------- ----------- ----- ----- --- ---4x4 0.2a 1 (tor:1:4m) 59,711,544 17 13 54 LZ77 7 (tor:7:64m) 32,433,532 197 24 230 LZ77 8 (lzma:fast:128m:ht4:mc8) 32,698,603 292 43 230 LZ77 12 (lzma:128m:ht4:mc128) 27,307,504 4354 43 230 LZ77 1t (grzip:m4) 26,576,294 167 232 128 BWT 4t (grzip:m1:h18) 23,833,244 208,787,642 317,097 x 209,104,739 386 240 269 BWT .2101 rzmrzm 0.06c (mirror) is a free file compressor by Christian Martelock, Mar. 4, 2008. It uses order-1 ROLZ as discussed here. It takes no options. Memory usage is advertised as 258 MB for compression and 130 MB for decompression. Measured values (shown) are 180 MB for compression and 104 MB for decompression. rzm 0.07h was released Apr. 24, 2008. Advertised memory usage is unchanged. 12345 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ---rzm 0.06c 24,429,597 210,719,085 12,903 x 210,731,988 2216 92 180 ROLZrzm 0.07h 24,361,070 210,126,103 17,667 x 210,143,770 2336 81 160 ROLZ .2104 pim pim 2.01 is a free GUI archiver by Ilia Muraviev, based on PPMd by Dmitry Shkarin, using PPM. Version 2.01 was released June 14, 2007. It has options to model color images and .exe files. These make no difference on text and were turned off. It was timed with a watch. pim 2.04 beta was released July 21, 2007. It has PPMd as its only option. pim 2.10 was released July 31, 2007. Older versions are no longer supported. pim 2.50 was released July 22, 2008. It supports 3 compression modes: store, normal, and best. Only best was tested. It compresses in PPMd, bzip2 and DCL formats and extracts BALZ, QUAD, ZIP, JAR, PK3, PK4 and QUAKE PAK archives. 1234567 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ---pim 2.01 PPMd, no exe, no color 24,303,638 210,124,895 340,951 x 210,465,846 ~600 639 92 PPMpim 2.04b PPMd 24,303,638 210,124,895 335,004 x 210,459,899 900 780 84 PPMpim 2.10 PPMd 24,303,638 210,124,895 335,374 x 210,460,269 895 ~900 84 PPMpim 2.50 best 24,303,638 210,124,895 330,901 x 210,455,796 764 ~764 88 PPM .2120 CTW CTW 0.1 is a free, command line file compressor with source code by Erik Franken and Marcel Peeters, Nov. 13, 2002. It uses CTW (context tree weighting), a type of context-mixing algorithm (with single bit prediction and arithmetic coding) combining the predictions of different order contexts. Statistics are stored in a suffix tree. The -d6 option selects order 6 (depth of context tree). -n16M selects the maximum of 16M nodes for the tree (using 128 MB memory). -f16M selects the maximum 16 MB file buffer (for rebuilding pruned contexts). The default values of all other options were tested on enwik6 and found optimal. For -d, there is a tradeoff between compression and memory usage as with PPM compressors. -d6 was found optimal on both enwik7 and enwik8. 1234567Option enwik7 enwik8 enwik9 Comp (ns/byte)------ --------- ---------- ----------- ------d5 2,490,460 24,174,511 11340-d6 2,438,708 23,670,293 211,995,206 19221-d7 2,455,765 23,689,423 24680-d9 2,494,767-d12 2,531,284 .2139 boa boa 0.58b is a free, closed source command line archiver by Ian Sutton, Apr. 2, 1998. It uses PPM. The -m15 option selects maximum memory, 15 MB. .2144 yzxyzx 0.01 (discussion) is a free, experimental command line archiver by Nania Francesco Antonio, May 3, 2010. It uses “LZKS” decribed as an LZ type algorithm. Option -b5 selects maximum memory. Option -m2 selects method 2 (default is -m1). -c8 selects number of match keys (range -c1 to -c8, default -c3). Memory usage is 732 MB for compression and 137 MB for decompression. yzx 0.02, May 7, 2010, corrects a bug in compression. yzx 0.03 was released May 21, 2010. The range of options is -m1..m2, -c1..c5, -b1..b6. Memory usage with -m2 -c5 -b6 is 404 MB for compression and 268 MB for decompression. yzx 0.04 was released May 27, 2010. Decompression memory remains at 268 MB. yzx 0.11 was released Jan. 4, 2012. Options -m0..-m9 select compression method (fast..slow). Options -b1..-b8 select ring buffer size (small..large). Options -h1..-h6 select search buffer size (small..large). Default is -m2 -b2 -h4. There was not enough memory to test maximum compression (-m9 -b8 -h6) without reducing either -b or -h. 123456789Compressor Opt enwik8 enwik9 Prog Total Comp Decomp Mem Alg Note--------- --- --------- ----------- ------- ----------- ---- ---- --- ---- ----yzx 0.01 -b5 28,984,962 249,903,552 116,793 x 250,020,345 395 73 732 LZ 26yzx 0.02 -m2 -c8 -b5 27,293,259 229,890,264 116,795 x 230,007,059 10927 67 732 LZ 26yzx 0.03 -m2 -c5 -b6 28,132,853 241,790,934 116,141 x 241,907,075 911 71 404 LZ 26yzx 0.04 -m2 -c5 -b6 27,670,096 235,198,449 116,507 x 235,314,956 833 69 535 LZ 26yzx 0.11 27,694,742 258 85 293 LZ 26 -m9 -b8 -h5 25,768,724 518 81 636 LZ 26 -m9 -b7 -h6 25,754,856 214,317,684 131,062 x 214,448,746 642 77 1590 LZ 26 .2157 zstdzstd is a free, open source (BSD) file compressor by Yann Collet, Jan. 25, 2015. It uses LZ77 and finite state entropy encoding. It takes no compression options. To test, it was compiled using the supplied Makefile with gcc 4.8.2 in Linux (note 48) and “make -CC=gcc” 4.8.1 in Windows (note 26). zstd 0.4.0 was released Nov. 29, 2015. It features a high compression mode. -f means overwrite output. 20 is the compression level (only -1 to -9 are documented). zstd 0.4.2 was released Dec. 2, 2015. zstd 0.4.2_no_legacy (NL) was released Dec. 6, 2015. It is the same program with reduced source code size by dropping legacy support. zstd 0.5.1 was released Feb. 17, 2016. The decompressor size is the source for zstd_little-0.5.1.tar.gz converted to a zip -9 archive. zstd 0.6.0 was released Apr. 12, 2016. It adds level -22 option and adds –ultra to allow more memory usage. 123456789101112131415 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----zstd 40,024,854 354,602,693 91,253 s 354,693,946 7.7 3.8 1.6 LZ77 48zstd 40,024,854 354,602,694 91,253 s 354,693,947 23.3 13.9 1.1 LZ77 26zstd 0.4.0 -f20 27,195,437 233,505,508 301,514 s 233,807,022 432 1.6 LZ77 76zstd 0.4.2 -1 40,799,603 358,186,203 289,735 s 358,475,938 7.1 3.6 2 LZ77 48 -9 31,789,761 278,571,002 289,735 s 278,860,737 79 3.7 11 LZ77 48 -20 27,195,437 233,505,508 289,735 s 233,795,243 699 6.5 721 LZ77 48 -20 27,195,437 233,505,508 289,735 s 233,795,243 423 1.7 722 LZ77 76zstd NL 0.4.2 -20 27,195,437 233,505,508 59,431 s 233,564,939 423 1.7 722 LZ77 76zstd 0.5.1 -21 25,571,637 219,432,125 67,144 s 219,499,269 608 1.8 LZ77 76 -21 25,571,637 998 6.5 722 LZ77 48zstd 0.6.0 -22 236,376,273 69,687 s 236,445,960 473 1.6 LZ77 76 -22 --ultra 25,405,601 215,674,670 69,687 s 215,744,357 701 2.2 792 LZ77 76 .2178 tornado tornado 0.1 is a free, open source file compressor by Bulat Ziganshin, Apr. 16, 2007. It uses LZ77 with arithmetic coding. The -9 option selects a predefined compression profile for maximum compression. There are custom options for hash table size, hash chain length, block size, type of coder, and an option to force or prohibit cache matching. Some of these options might give better compression, but were not tested. tornado 0.3 has options -1 through -12. Each increment approximately doubles compression time and memory usage. Decompression time is fast in all cases, but memory usage is approximately 2/3 that of compression (for the LZ77 buffer). -12 caused disk thrashing and was not tested for enwik9. There are several other options that were not tested. tornado 0.4a was released June 1, 2008. It includes Windows and Linux versions. There is a small version (tor-small.exe) which does not include some of the advanced options. The advanced options were not tested. Option -12 caused disk thrashing (2 GB memory) when enwik9 reached 80% compression, so -11 was used instead. tornado 0.6, Mar. 8, 2014, adds optimal parsing. It has 16 compression levels. The default is -5. For testing (note 48) it was compiled from source in Linux with g++ 4.8.1 using the provided build.sh script. Windows and Linux 32 and 64 bit executables are also provided. 1234567891011121314151617181920212223242526272829303132333435 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ---- ----tornado 0.1 -9 34,491,218 303,034,530 20,336 s 303,054,866 204 25 210 LZ77tornado 0.3 -1 59,790,826 18 LZ77 -2 44,570,662 22 LZ77 -3 40,173,986 28 LZ77 -4 37,849,654 60 LZ77 -5 34,206,892 81 LZ77 -6 33,319,753 130 LZ77 -7 32,346,652 195 96 LZ77 -8 31,659,225 304 192 LZ77 -9 30,967,871 506 384 LZ77 -10 30,614,648 802 768 LZ77 -11 30,274,896 259,412,590 45,833 s 259,458,423 1646 25 1510 LZ77 -12 30,057,549 3700 28 1768 LZ77tornado 0.4a -11 30,157,610 258,761,459 42,516 s 258,803,975 783 25 1513 LZ77 -12 30,026,843 3200 29 &gt;1800 LZ77tornado 0.6 -1 59,790,838 531,349,003 8 5 2 LZ77 48 -2 49,093,116 8 6 3 LZ77 48 -3 39,510,585 14 9 5 LZ77 48 -4 38,018,770 18 9 11 LZ77 48 -5 34,175,257 300,482,758 41 9 25 LZ77 48 34,175,257 300,482,758 93 24 29 LZ77 26 -6 32,921,124 57 10 97 LZ77 48 -7 30,131,376 134 10 229 LZ77 48 -8 29,507,281 290 11 613 LZ77 48 -9 29,327,427 392 11 613 LZ77 48 -10 29,048,467 371 11 628 LZ77 48 -11 30,108,427 270 10 356 LZ77 48 -12 28,596,548 397 9 356 LZ77 48 -13 28,042,448 503 9 484 LZ77 48 -14 27,129,826 672 9 614 LZ77 48 -15 26,762,749 985 10 614 LZ77 48 -16 25,768,105 217,749,028 83,694 s 217,832,722 1482 9 1290 LZ77 48 .2178 LZPXjLZPXj 1.1d is an experimental open source (GPL) command line file compressor by Ilia Muraviev and Jan Ondrus, May 21, 2006. The -m3 option selects maximum compression. The -e0 option turns off the exe filter (has no effect on text). The -r3 and -a0 options were tuned experimentally on enwik7. -r sets the rescale rate (range 1-5, default 3). -a0 turns off the alternate one byte matcher (default -a1 = on). LZPXj 1.2h, Mar. 6, 2007, uses LZP + PPM with a preprocessor for x86 executables. It has just one option (1-9) which select memory usage. The default is 6. The maximum is 9. Each increment doubles usage. 1234567 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Notes------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- -----LZPXj 1.1b -s (best, = -r4 in 1.1d) 28,387,611 674 LZPLZPXj 1.1b (default) 28,440,958 677 LZPLZPXj 1.1d -m3 -r4 -a0 -e0 28,386,512 246,468,866 6,534 s 246,475,400 362 402 216 LZPLZPXj 1.2h 9 25,205,783 217,880,584 4,853 s 217,885,437 783 717 1316 PPM .2179 scmppm scmppm 0.93.3 is a GPL open source command line compressor for XML files by James Cheney and Joaquín Adiego, Oct. 3, 2005, and using PPMd var. I code by Dmitry Shkarin. It works by grouping XML data by tag, then compressing with ppmd (similar to XMill). scmppm is distributed as UNIX source code only. For this test it was compiled and run under WinXP using the latest version of Cygwin, g++, flex, and make as of May 24, 2006. To compile I had to add the line extern &quot;C&quot; int fileno(FILE*); to lex.yy.c. The -l 9 option selects maximum compression. .2185 acbacb (discussion) is a shareware archiver for DOS by George Buyanovsky. It achieved some popularity in Russia in 1997 after being described in a popular magazine there. acb uses a complex variant of LZ77 called “associative coding”. (ACB means “associative coding by Buyanovsky”). History is collected in a context sorted ring (like BWT) called a “funnel of analogies”. A string match is coded by the position of the longest (nearest) match in this data structure. The length is coded dependent on the length of neighboring matches. The result is arithmetic coded. There are 4 versions: acb 1.02c, Apr. 12, 1995, does simple archiving and multi-volume archiving where the archive is split into equal sized files. It requires 7.6 MB of memory. Source code is included for this version only. acb 1.17a, Feb. 15, 1996, has 3 compression modes: “B” fast, “b” default, and “u” maximum or slowest. It also adds error correction and detection and password protection. It uses 15 MB memory. It also has a “taught channel” mode used to patch files. In this mode a separate file is used to train the compressor and must be present during decompression. acb 1.23c was released June 23, 1996. acb 2.00a was released Apr. 25, 1997. This is the version tested with option “u” for maximum compression. All versions limit file size to 64 MB but do not limit archive size. To test enwik8, it was divided into 2 equal parts of 50 MB and compressed into one archive. Archives are compressed in “solid” mode. enwik9 was divided into 16 equal parts of 62.5 MB each (named 01 through 16) and compressed to 16 separate archives. The compressor crashed (after 12 hours and producing 1474 MB output in 3 files) with an illegal interrupt when attempting to compress enwik9 into a single archive..2186 crushm crushm is a free file compressor for Windows by Abhilash, July 12, 2013. It uses CM. It takes no options. .2190 PXPX v1.0 is a free command line file compressor by Ilia Muraviev, Feb. 17, 2006. It is a context mixing compressor based on PAQ1 with fixed weight models..2196 DGCADGCA v1.10 is a free, closed source GUI archiver, Aug. 8, 2006. The installer is in Japanese but the program runs in several languages including English. It was tested with default settings except for producting a self extracting archive. This adds 189,936 bytes to enwik8..2200 SqueezSqueez 5.20.4600 is a commercial (60 day trial) GUI archiver by SpeedProject, Apr. 11, 2006. It supports 13 different formats, but only the native .sqx (possibly LZ77) format was tested. The options used were 2.0 format (newest), 32 MB dictionary (largest, actually uses 365 MB memory), Ultra compression (best), and all checkboxes off (including no exe or multimedia compression). There is a SFX option but using UnSqueez to decompress instead gives a smaller size..2212 fpaq2fpaq0s2 is a free, open source (GPL) file compressor by Nania Francesco Antonio, Sept, 29, 2006. It is an order 2 model based on the order 0 compressor fpaq0s by David A. Scott, which is based on fpaq0 by Matt Mahoney by modifying the arithmetic coder. fpaq0x is the same order 2 model based directly on fpaq0.fpaq0x1a is an order 3 model (hashed context) using fpaq0’s arithmetic coder. fpaq0s2b is a similar model based on fpaq0s. Both were released Oct. 1, 2006.fpaq0x1b (Oct. 6, 2006) switches between different models up to order 3.fpaq0s3 (Oct. 8, 2006) uses a simple order 0 model on groups of 3 bytes.fpaq0s4 (Oct. 12, 2006) uses a combined order 0-1-2, PPM and LZ model.fpaq0s5 (Oct. 15, 2006) improves on fpaq0s4. Memory usage is 200 MB when run at normal priority and 160 MB when run at below normal priority (WinXP Home).fpaq2 (Oct. 21, 2006) uses a combination context mixing and PPM algorithm.fpaq0s6 (Oct. 30, 2006) improves on fpaq0s5.fastari (Nov. 7, 2006) is an order 2 compressor with an all new arithmetic coder and greater speed.fpaq3 (Nov. 20, 2006) is an order 3 compressor.fpaq3b (Dec. 2, 2006) is a bitwise order 28 compressor.fpaq3c (Dec. 21, 2006) is an improved bitwise order 28 compressor.fpaq3d (Dec. 28, 2006) adds an option to fpaq3c to select memory usage from 16 MB to 2 GB. Option 6 selects 1 GB memory (the highest tested). All programs are here. 1234567891011121314151617Program Opt enwik8 enwik9 prog (zip) enwik9+prog Comp Decomp Mem Alg------- --- ---------- ----------- ----------- ----------- ----- ----- --- --fpaq2 25,287,775 221,242,386 3,429 s 221,245,815 20183 20186 131 CMfpaq3d 6 26,656,082 233,750,402 3,309 s 233,753,711 1922 1938 1050 o28bfpaq3c 27,978,995 248,253,886 2,535 s 248,256,421 1446 1456 268 o28bfpaq0s6 30,012,650 263,438,012 4,150 s 263,442,162 547 505 174 PPMfpaq0s5 30,374,122 266,244,843 4,027 s 266,248,870 480 419 200 PPMfpaq3b 29,992,583 270,804,549 2,926 s 270,807,475 1526 1517 256 o28bfpaq3 31,176,104 282,922,749 8,820 x 282,931,569 1770 1807 250 o3fpaq0x1b 30,860,828 283,001,299 2,727 s 283,004,026 1178 1180 1094 PPMfpaq0s4 33,327,611 311,104,858 3,528 s 311,108,386 477 473 147 PPMfpaq0x1a 36,186,433 339,131,763 2,561 s 339,134,324 621 623 1052 o3fpaq0s2b 35,934,548 343,603,459 3,029 s 343,606,488 599 605 1052 o3fastari 39,392,220 371,909,475 2,287 s 371,911,762 224 261 133 o2fpaq0s2 38,812,873 375,050,952 2,982 s 375,053,934 591 595 131 o2fpaq0x 38,845,305 375,276,899 2,482 s 375,279,381 631 631 263 o2fpaq0s3 49,728,923 490,781,136 3,000 s 490,784,136 525 475 32 o2 .2217 TinyCM TinyCM 0.1 is a free, open source (GPL v3) file compressor by David Werecat, Oct. 12, 2012. It uses an order 1-2-3-6 context mixing model. It takes one option, a single digit “level” which apparently has no effect except to store the value in the first byte of the archive. (I used “9”). Memory is the same for compression and decompression. The supplied executables require MSVCR110.dll, which I did not have, so I recompiled the source code with g++ 4.6.1 using “gcc -O3 -march=native -s *.c -I.” on a 2.0 GHz T3200 under 32 bit Vista. 123Compressor Opt enwik8 enwik9 Prog Total Comp Decomp Mem Note--------- --- --------- ----------- ------- ----------- ---- ---- --- ----TinyCM 0.1 9 25,913,605 221,773,542 12,553 x 221,786,095 1342 1330 1083 26 .2226 dmcdmc is the original DMC compressor written by Gordon V. Cormack in 1987 and described in “Data Compression using Dynamic Markov Modelling”, by Gordon Cormack and Nigel Horspool in Computer Journal 30:6 (December 1987). The algorithm is the same as described in hook with the last 2 arguments fixed at “2 2”. The dmc argument “c 1800000000” means to compress with 1.8 GB memory. The memory size must also be given for decompression. Thus, 10 bytes (the size of the argument) was added to the decompresser size (source zipped with Info-Zip 2.31 -9). Because dmc compresses and decompresses from stdin to stdout, it was tested in Linux (Ubuntu 2.6.15.27-amd64-generic), compiled in gcc 4.0.3 x86-64 as follows: 1gcc -O -s -Dexp=expand dmc.c and tested on a 2.2 GHz Athlon-64 with 2 GB memory. The compiler argument “-Dexp=expand” removes a compiler error due to a K&amp;R style redefinition of exp()..2230 lzalza 0.01 is a free archiver for 32 bit Windows by Nania Francesco Antonio, May 29, 2014. It uses LZ77 (based apparently on zcm). Option -t selects number of threads. Default is -t1. Using a greater number of threads makes compression worse by splitting the input among threads. -h0..-h7 selects hash buffer memory 8 MB to 1 GB. Default is -h2 (32 MB). -b0..-b7 selects LZ buffer memory 8 MB to 1 GB. Default is -b3 (64 MB). Option combinations -b6 -h7 or -b7 -h6 or higher run out of memory. -m1..-m5 selects compression level (faster..better). Default is -m3. lza 0.10 was released June 29, 2014. It improves compression and speed and adds compression levels -mx1..-mx5 for higher compression. A 64 bit version was released July 3, 2014 to support larger memory options. lza 0.51 was released Sept. 8, 2014. A 64 bit Windows version was released Sept. 9, 2014. The 64 bit version allows the hash table option up to -h9 using 4 GB memory. It was tested using -h8 (2 GB) and -b7 (1 GB buffer). -t1 selects 1 thread (default). -mx5 selects maximum compression. lza 0.61 was released Oct. 18, 2014. It is an update to store file dates and empty directories. The -t option is removed so it is single threaded only. -h and -b have a documented max value of 7 (1 GB memory each). lza 0.62 is a bug fix release, Oct. 20, 2014. Additional options -r (recurse directories), -s (solid mode), -v (verbose) used in testing have no effect on compression. lza 0.70b (discussion) was released Nov. 19, 2014. It uses ANS coding rather than arithmetic coding, based on the public domain ryg_rans coder by Fabian Giesen. ANS extends ABC (asymmetric binary coding) to larger alphabets. ANS coding theory was developed by Jarek Duda. Max compression level is increased to -mx9. LZAwin080test was released Jan. 10, 2015. lza 0.82b (discussion) was released Mar. 9, 2015. It is not compatible with v0.80. The 64 bit version was tested in Wine. 123456789101112131415 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----lza 0.01 39,644,188 302,602,114 142 9 111 LZ77 48 -m5 -b6 -h6 -t1 32,766,063 275,376,918 159,693 x 275,536,611 345 11 1024 LZ77 48 -m5 -b6 -h6 -t2 33,496,841 277,860,891 237 20 2048 LZ77 48lza 0.10 -mx5 -b6 -h6 29,052,976 250,653,981 159,953 x 250,813,934 238 11 1012 LZ77 48lza_x64 0.10 -mx5 -b7 -h7 28,835,165 246,671,312 259,425 x 246,930,737 265 12 1800 LZ77 48lza 0.51 -mx5 -b6 -h6 -t1 28,365,587 242,852,984 179,415 x 243,032,399 243 10 1065 LZ77 48lza_x64 0.51 -mx5 -b7 -h8 -t1 27,992,585 234,652,984 218,944 x 234,871,928 261 14 2998 LZ77 48lza_x64 0.61 -mx5 -b7 -h7 28,019,802 236,604,708 218,090 x 236,822,798 279 10 1999 LZ77 48lza_x64 0.62 -mx5 -b7 -h9 27,870,452 231,801,036 219,447 x 232,020,483 409 9.5 5000 LZ77 69lza_x64 0.70b -mx9 -b7 -h7 27,111,239 229,073,644 260,686 x 229,334,330 378 10 2000 LZ77 48lza 0.80 -mx9 -b7 -h7 27,148,092 229,483,126 284,285 x 229,764,411 456 12 2152 LZ77 48lza 0.82b -mx9 -b7 -h7 26,396,613 222,808,457 285,766 x 223,094,223 449 9.7 2000 LZ77 48 .2241 brotli brotli is a free, open source (Apache license) file compressor by Google. It uses LZ77. It was tested by compiling from the Sept. 21, 2015 GitHub commit in the tools subdirectory using the supplied Makefile in Ubuntu Linux with g++ 4.8.4. The -q option selects the compression level. The default is -q 11. The test was repeated on the release as of Feb. 18, 2016. -w 24 selects the window size. Default is -w 22. 123456789101112Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp CMem Dmem Alg Note------- -------- ---------- ----------- ----------- ----------- ----- ----- ---- ---- --- ----bro 21 Sep 2015 -q 1 36,893,038 326,282,447 514,344 s 326,796,791 18 5.2 10 5 LZ77 48 -q 5 33,414,623 292,394,323 514,344 s 292,908,667 57 4.8 23 5 LZ77 48 -q 9 30,227,230 264,047,624 514,344 s 264,561,968 361 5.0 77 6 LZ77 48 -q 11 27,721,194 240,891,082 514,344 s 241,405,426 4386 5.0 294 6 LZ77 48bro 18 Feb 2016 -q 1 38,802,994 343,293,825 542,345 s 343,836,170 12.4 6.3 8 5 LZ77 48 -q 5 33,414,209 59 4.5 38 6 LZ77 48 -q 9 30,227,246 407 4.7 68 6 LZ77 48 -q 11 27,076,871 235,560,131 542,345 s 236,102,476 3171 5.1 292 6 LZ77 48 -q 11 -w 24 25,764,698 223,597,884 542,385 s 224,140,269 3400 5.9 437 18 LZ77 48 .2276 szip szip 1.12a is a free, open source file compressor by Michael Schindler, Mar. 3, 2000. It uses a modified BWT (a Schindler transform) which sorts using a truncated string comparison to speed the transform on highly redundant data. The algorithm is protected by patent 6,199,064 in the U.S. until Nov. 19, 2017. The first version of szip was released on June 2, 1997. The option -b41o16 selects a block size of 4.1 MB (the maximum) and order 16, the maximum length of string comparisons. Memory usage is 17 MB (4x block size) for compression and 21 MB (5x block size) for decompression. o0 means unbounded order, which is the same as a normal BWT. The default is -b16o6. 12345678910Compressor Opt enwik8 enwik9 Prog Total Comp Decomp Mem Note--------- --- --------- ----------- ------- ----------- ---- ---- --- ----szip 1.12a -b41o16 26,120,472 227,586,463 31,708 x 227,618,171 1191 289 21 26 -b41o4 27,561,829 70 210 21 26 -b16o6 27,666,448 270 220 8 26 -b41o6 26,365,058 360 240 21 26 -b41o8 26,185,222 530 250 21 26 -b41o32 26,128,020 2550 400 21 26 -b41o64 26,130,850 5210 600 21 26 -b41o0 26,130,985 750 200 21 26 .2282 balzbalz 1.02 is a free, closed source file compressor by Ilia Muraviev, Mar. 8, 2008. It uses LZ77 with arithmetic coding, a 512K buffer with Storer and Symanski parsing. It takes no options. Memory usage is 346 MB for compression and 18 MB for decompression. balz 1.06, May 9, 2008, has two compression options, e for normal and ex for better but slower compression. Both options use 67 MB for compression and 48 MB for decompression. balz 1.07 was released May 14, 2008. It uses 132 MB for compression and 95 MB for decompression. balz 1.08 was released May 20, 2008. It uses 200 MB for compression and 126 MB for decompression. Only mode ex was tested. balz 1.09 was released May 21, 2008. It uses 128 MB for decompression. Only mode ex was tested. balz 1.12 was released June 3, 2008. It uses 123 MB for decompression. balz 1.13 was released June 11, 2008. It uses 127 MB for decompression. balz 1.15 was released as open source on July 8, 2008. It uses 67 MB for compression and 49 MB for decompression. balz 1.20 (discussion) was released Mar. 5, 2015. It is compatible with 1.15 but faster with less compression. 12345678910111213141516Compressor Opt enwik8 enwik9 Prog Total Comp Decomp Mem Alg Note--------- --- --------- ----------- ------- ----------- ---- ---- --- ---- ----balz 1.02 30,634,726 268,552,062 48,030 x 268,600,092 21804 58 346 LZ77balz 1.06 e 28,674,640 1580 79 67 ROLZbalz 1.06 ex 28,234,913 245,288,229 48,937 x 245,337,166 2440 75 67 ROLZbalz 1.07 e 28,271,200 1060 96 132 ROLZbalz 1.07 ex 27,416,245 237,492,151 49,082 x 237,541,233 2106 77 132 ROLZbalz 1.08 ex 26,534,890 229,477,116 49,351 x 229,526,467 4431 126 200 ROLZbalz 1.09 ex 26,534,257 229,476,459 49,928 x 229,526,387 4049 128 201 ROLZbalz 1.12 e 27,522,348 1800 177 201 ROLZbalz 1.12 ex 26,522,258 229,347,434 48,400 x 229,395,834 3989 148 201 ROLZbalz 1.13 e 27,405,650 1670 221 206 ROLZbalz 1.13 ex 26,421,416 228,337,644 49,024 x 228,286,668 3700 190 206 ROLZbalz 1.15 ex 28,232,824 245,218,274 4,045 s 245,222,319 1064 95 67 ROLZbalz 1.20 c 30,056,097 261,416,611 3,499 s 261,420,110 53 ROLZ 68balz 1.20 cx 28,232,824 245,218,274 3,499 s 245,221,773 193 22 ROLZ 68 .2291 lzpm lzpm 0.02 is a free, closed source file compressor by Ilia Muraviev, Apr. 19, 2007. It uses LZ77. It takes no options. lzpm 0.03, Apr. 28, 2007, uses more memory for compression (181 MB), but still uses 20 MB for decompression. lzpm 0.04, May 4, 2007, uses ROLZ. Memory usage is 83 MB for compression and 20 MB for decompression. The new design uses circular hash chains for better speed on binary files, but a little slower for text. lzpm 0.06, May 19, 2007, improves compression over 0.04 with the same memory usage. lzpm 0.07, Aug. 6, 2007, and later versions use 280 MB for compression and 20 MB for decompression. lzpm 0.08, Aug. 8, 2007. lzpm 0.09, Aug. 15, 2007. lzpm 0.10, Aug. 23, 2007. lzpm 0.11, Sept. 5, 2007, takes the command 1..9 to choose the compression level (fastest…maximum). 1 uses greedy parsing. 2..8 use 1..7 byte lookahead. 9 uses unbounded lookahead. All modes use 723 MB for compression and 77 MB for decompression. lzpmlite 0.11, Sept. 13, 2007, is a “lite” version of lzpm, using about half as much memory and twice as fast. Options range from 1..9 with 1 being fastest and 9 for best compression. (3 is a good compromise). All modes use 362 MB for compression and 39 MB for decompression. lzpm 0.13 was released Dec. 1, 2007. lzpm 0.14 was released Jan. 1, 2008. It uses 40 MB for decompression. lzpm 0.15 was released Jan. 16, 2008. It uses 40 MB for decompression. 123456789101112131415161718192021222324252627Compression Compressed size Decompresser Total size Time (ns/byte)Program Opt enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- --- ---------- ----------- ----------- ----------- ----- ----- --- ----lzpm 0.02 29,274,461 254,596,796 26,078 x 254,622,874 612 59 83 LZ77lzpm 0.03 29,248,641 254,378,973 26,089 x 254,405,062 749 59 181 LZ77lzpm 0.04 29,297,905 254,793,933 25,333 x 254,819,266 665 60 83 ROLZlzpm 0.06 28,896,680 251,111,835 25,369 x 251,137,204 852 58 83 ROLZlzpm 0.07 28,385,939 246,426,198 46,692 x 246,472,890 2185 56 280 ROLZlzpm 0.08 28,259,984 245,221,254 48,122 x 245,269,376 2754 59 280 ROLZlzpm 0.09 27,986,111 242,929,442 46,933 x 242,976,375 2451 56 280 ROLZlzpm 0.10 27,849,915 241,719,857 46,871 x 241,766,728 2598 57 280 ROLZlzpm 0.11 1 29,728,112 1162 76 723 ROLZ 2 27,967,747 3746 66 723 ROLZ 3 27,424,937 5204 68 723 ROLZ 4 27,239,304 6488 66 723 ROLZ 5 27,134,495 7446 63 723 ROLZ 6 27,038,405 8143 64 723 ROLZ 7 26,962,337 8761 63 723 ROLZ 8 26,890,422 9330 62 723 ROLZlzpm 0.11 9 26,501,542 229,083,971 46,824 x 229,130,795 15395 57 723 ROLZlzpmlite 0.11 1 30,136,214 627 69 362 ROLZ 3 27,918,695 2620 64 362 ROLZlzpmlite 0.11 9 27,096,516 235,135,224 48,144 x 235,183,368 6235 59 362 ROLZlzpm 0.12 9 27,391,197 237,915,048 47,030 x 237,962,078 4501 57 280 ROLZlzpm 0.13 9 27,318,013 237,241,658 47,129 x 237,288,787 4543 59 280 ROLZlzpm 0.14 9 27,091,358 235,074,141 48,790 x 235,122,931 6467 73 428 ROLZlzpm 0.15 9 27,145,224 235,567,823 48,401 x 235,616,224 6557 62 427 ROLZ .2299 qazarqazar 0.0pre5 is a free, closed source command line file compressor by Denis Kyznetsov, Jan. 31, 2006. It uses LZP, an LZ77 variant where the decompresser dynamically computes the same sequence of context matches as the compressor. The compressor uses a single bit flag to indicate if the pointer computed by the decompresser should be followed. In qazar, the output symbols are arithmetic coded. The -d9 option selects maximum dictionary size. -x7 selects maximum hash level (most memory). -l7 selects maximim search level (slowest). .2317 KuaiZipKuaiZip 2.3.2 is a free GUI archiver for Windows, Sept. 9, 2011. It uses a proprietary compression algorithm, probably LZMA. It takes no compression options. On the test machine (dual core T3200), compression uses 1.5 threads (75% CPU). Decompression uses one thread. Times are reported by the application. 1234Compression Compressed size Decompresser Total size Time (ns/byte)Program Version enwik8 enwik9 size (zip) enwik9+prog Comp Decomp CMem Dmem Alg Note------- -------- ---------- ----------- ----------- ----------- ----- ----- ---- ---- --- ----KuaiZip 2.3.2 x86 25,895,915 227,905,650 3,857,649 x 231,763,299 1061 47 197 19 LZMA 26 .2328 qcqc 0.050 is a free, closed source, command line file compressor by Denis Kyznetsov, Sept. 17, 2006. The -8 option selects maximum compression (slowest and most memory). .2334 ppmsSee ppmonstr above. .2356 dzodzo is a commercial GUI deduplicator and archiver for Windows by Essenso Labs. A beta version (32 day free trial) dated Sept. 15, 2011 was tested. The trial version will compress either a single file or a folder. It first finds duplicate files or regions within files and produces an intermediate temporary file (file.dp) that removes the duplicates. Then it compresses the temporary file using LZMA (7zip) to file.dzo and removes it. The original files are not removed. Decompression restores a single file to (dzo)file or folder(dzo), again through a temporary .dp file. Both commands are activated by right-clicking on the file or folder to compress or the .dzo file to decompress and selecting the command from the context menu. Times are as reported by the appliation. LZMA compression is multi-threaded. .2428 comprox_bacomprox_ba 20110927 (discussion) is a free, experimental, open source file compressor by Zhang Li, Sept. 27, 2011. It uses BWTS (BWT Scottified) with 4 MB blocks, followed by MTF (move to front), RLEZ (run length encoding of zeros) and arithmetic coding. BWTS is a bijective variant of BWT developed by David A. Scott in which the starting index is not stored. In BWTS, the input is factored into a sequence of lexicographically non-decreasing Lyndon words, which are then context-sorted separately. The starting indexes for the inverse BWTS are the beginnings of each word. The program takes no arguments. It uses 103 MB (24x block size) for compression and 25 MB (6x block size) for decompression. There is a Windows and a Linux version. Only the Windows version was tested. comprox_ba 20110928 was released Sept. 28, 2011. Compression runs in 2 threads. Both the Windows and Linux versions were tested (on different computers). comprox_ba 20110929 was released Sept. 29, 2011. Compression is slightly improved. Both compression and decompression are now multi-threaded. 12345678Compression Compressed size Decompresser Total size Time (ns/byte)Program Version enwik8 enwik9 size (zip) enwik9+prog Comp Decomp CMem Dmem Alg Note------- -------- ---------- ----------- ----------- ----------- ----- ----- ---- ---- --- ----comprox_ba 20110927 27,831,722 242,858,769 4,165 s 242,862,934 1500 227 103 25 BWTS 26comprox_ba 20110928 (Win32) 27,831,722 242,858,769 4,151 s 242,862,920 957 227 206 25 BWTS 26comprox_ba 20110928 (Linux) 27,831,722 242,858,769 4,151 s 242,862,920 363 168 226 30 BWTS 48comprox_ba 20110929 (Win32) 27,828,189 242,846,243 4,134 s 242,850,377 984 152 206 50 BWTS 26comprox_ba 20110929 (Linux) 27,828,189 242,846,243 4,134 s 242,850,377 397 101 226 76 BWTS 48 .2453 turtle turtle 0.01 is a free, experimental, closed source file compressor by Nania Francesco Antonio, June 1, 2007. It uses PPM. It takes no options. turtle 0.02 was released June 2, 2007. Compression is identical. turtle 0.03 was released June 5, 2007. It is faster and improves compression slightly. The file name is stored in the compressed file. turtle 0.04 was released June 8, 2007. It recognizes several different file types. turtle 0.05 was released June 12, 2007. It improves compression at the cost of time and memory. turtle 0.07 was released June 23, 2007. It includes a model for audio files. WinTurtle 1.2 is a Windows GUI version of turtle, released Aug. 16, 2007. It uses PPM with LZP preprocessing. It detects .tar, .iso, .nrg, .wav, .aiff, .bmp, .exe, .pdf, .log and text files. Compression times are wall times. Note: the user interface is not fully functional. To compress a file, click “Drive”, click on “Buffer” until it is set to 512 MB (it does not work until you click “Drive” first, also 1 GB caused program to crash on enwik8), select “File/compress single file” from the upper menu, then select the input file and output archive from the two file dialogs. The program adds a .tur extention to the output archive. To decompress, select File/open archive, click on the file name, click Select, click Extract, and select an output folder from the file dialog. WinTurtle 1.21, Aug. 16, 2007, fixes an unrelated bug but is otherwise the same as 1.2. WinTurtle 1.30 was released Aug. 30, 2007. WinTurtle 1.60 was released Jan. 1, 2008. 12345678910111213Compressor Opt enwik8 enwik9 Prog Total Comp Decomp Mem Alg--------- --- --------- ----------- ------- ----------- ---- ---- --- ----turtle v0.01 31,314,961 274,696,820 5,079 x 274,701,899 187 178 122 PPMturtle v0.02 31,314,961 274,696,820 4,637 x 274,701,457 196 175 122 PPMturtle v0.03 31,287,161 274,649,069 7,111 x 274,656,180 142 129 122 PPMturtle v0.04 31,137,531 273,100,225 7,808 x 273,108,033 141 128 122 PPMturtle v0.05 28,860,689 251,626,176 9,779 x 251,635,955 242 203 174 PPMturtle v0.07 28,669,320 250,600,644 10,625 x 250,611,269 217 175 206 PPMWinTurtle 1.2 8MB 29,601,717 258,927,402 238,080 x 259,164,482 248 242 31 PPM 512MB 28,814,475 250,364,644 238,080 x 250,598,724 264 240 548 PPMWinTurtle 1.21 512MB 28,814,475 250,364,644 225,123 x 250,589,767 255 219 548 PPMWinTurtle 1.30 512MB 28,814,478 250,364,647 239,247 x 250,603,594 243 240 597 PPMWinTurtle 1.60 512MB 28,379,612 245,217,944 160,090 x 245,378,034 273 237 583 PPM .2466 diz diz is a free, experimental, open source (GPL) file compressor by Roger Flores, Aug. 3, 2012. It is a PPMC based compressor written in Python. It is distributed as source code only. The program was tested as recommended by running in pypy version 1.9. .2508 cabarccabarc 1.00.0601 is a command line archiver available for free download by Microsoft, Mar. 18, 1997 (SDK released Jan. 8, 2002). It produces .cab files, which are often used to distribute Microsoft software. It is designed for very fast decompression. It uses LZX, a variant of LZ77 with fixed Huffman coding, but with shorter symbols reserved for the three most recent matches. The option -m lzx:21 selects a window size of 221 (2 MB) for maximum compression. There is a separate extraction program, “extract”. The actual (global) decompression time of 32 sec. includes 15 sec. of CPU (process) time and the rest for disk I/O..2530 sr3sr2 is a free, open source (GPL) file compressor by Matt Mahoney, Aug. 3, 2007. It uses symbol ranking. It takes no options. There are separate programs for compression and decompression. Compression is as follows. A 20-bit hashed order-4 context is mapped into the last 3 bytes seen in that context in a move-to-front queue, plus a consecutive hit count. Queue positions (hits) or literals (misses) are arithmetic coded using the count and an an order-1 context (order-0 if the count is more than 3) as secondary context. After a byte is coded, it is moved to the front of the queue. The hit count is updated as follows: incremented (max 63) if the first byte is matched, set to 1 if any other byte is matched, or set to 0 in case of a miss. sr3 (mirror) is a modification by Nania Francesco Antonio, Oct. 28, 2007. The context table size is increased from 4 MB to 64 MB, which effectively increases the context from order-4 to order-5. This helps compression on larger files, but makes it worse for some smaller files. The program also detects file type. For .bmp files, the order is decreased. For .wav files, the input is split into separate 1 byte wide streams for each audio sample. There is no separate compressor and decompresser program. sr3.exe was recompiled on July 23, 2009 without upack to remove antivirus false alarms, resulting in a larger executable. The new size is shown using source code. 12345Program enwik8 enwik9 prog Total Comp Deco Mem Alg------- ---------- ----------- ---- ------------ ---- ---- --- --- sr2 30,432,506 273,906,319 2,831 sd 273,909,150 99 111 6 SRsr3 28,926,691 253,031,980 5,611 x 253,037,591 130 146 68 SRsr3 28,926,691 253,031,980 9,399 s 253,054,625 148 160 68 SR 26 .2540 bzip2 bzip2 1.0.2 is an open source command line single file compressor by Julian Seward, released Dec. 30, 2001. It uses BWT. The -9 option selects maximum compression. bzip2 1.0.3 (May 22, 2005) compresses very slightly larger but is faster, as shown by the following table. The decompresser size is based on zipped bunzip2.exe. This is smaller than the source (724,919 bytes as a zip download). 12345 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp------- ------- ---------- ----------- ----------- ----------- ----- -----bzip2 1.0.2 -9 29,008,736 253,977,839 30,036 x 254,007,875 379 129bzip2 1.0.3 -9 29,008,758 253,977,891 56,082 xd 254,033,973 334 120 .2542 RH5 RH is a free, experimental file compressor by Nauful, Feb. 17, 2014. There are two versions, RH and RH2. RH uses order 3 ROLZ and Huffman coding, using 8 MB memory. RH2 has 3 compression levels using 64 MB memory. Level c1 uses LZP. c2 uses order 1 ROLZ with limited search. c3 uses full search. A literal is coded with 1 bit plus the value. A match is coded with 1 bit to signal a match, 8 bits for the length, and 12 bits for the index into the ROLZ table. The 32 and 64 bit Windows .exe versions produce incompatible archives. The 32 bit version was tested in Windows. The 64 bit version was tested in Ubuntu under Wine 1.6. RH2 20Feb2014, released Feb. 27, 2014, has 5 compression levels c1..c5. RH4_x64, Mar. 22, 2014 is an archiver with file-level deduplication and compression improvements. It has 6 compression levels. There are several earlier versions without version numbers that were not tested. RH4 Apr 24 2014 version. RH5 was released Nov. 11, 2014. The 64 bit Windows version was tested in Ubuntu/Wine. It has options c1..c6 to select the compression level (default c2), default -window:23 to select 2^23 byte window size. Larger windows compress better with more memory up to 27, but above that has no effect. Options -hash:13 and -table:12 select the default hash table sizes and index table sizes. Higher or lower values compress worse. -skip-checksums is not used because it has no effect on compression. However it skips a check for duplicate files when creating an archive from a directory. It would make compression worse in that case. 123456789101112131415161718192021222324 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- ---- ----RH_x86 35,675,086 91,772 x 78 47 8 ROLZ 26RH2_x86 c1 34,857,781 67 27 64 LZP 26 c2 31,957,388 149 28 64 ROLZ 26 c3 31,937,059 279,524,710 93,364 x 279,618,074 152 28 64 ROLZ 26RH2_x64 c3 31,937,063 279,524,714 97,016 x 279,621,730 72 20 64 ROLZ 48RH2_x64 20Feb2014 c1 34,816,471 306,646,293 32 15 64 LZP 48 c2 32,215,361 282,209,254 48 14 64 ROLZ 48 c3 30,960,001 271,181,799 67 17 64 ROLZ 48 c4 30,787,281 269,670,002 76 15 64 ROLZ 48 c5 30,543,306 267,344,532 53,408 x 267,397,940 447 18 64 ROLZ 48RH4_x64 22Mar2014 c1 32,664,118 44 13 c2 31,309,650 47 12 c3 30,906,206 61 12 c4 30,872,697 64 12 c5 30,030,867 128 11 c6 29,553,289 258,411,625 79,155 x 258,490,780 301 12 27 ROLZ 48RH4_x64 24Apr2014 c2 31,309,670 274,101,406 90,071 x 274,191,477 44 9 31 ROLZ 48 c6 29,553,309 258,411,645 90,071 x 258,501,716 287 9 31 ROLZ 48RH5_x64 c2 31,798,141 278,822,435 36,744 x 278,859,179 28 11 22 ROLZ 48 c6 29,878,256 261,791,548 36,744 x 261,828,292 153 11 22 ROLZ 48 -window:27 c6 29,078,552 254,220,469 36,744 x 254,257,213 196 9.4 145 ROLZ 48 .2545 RangeCoderCRangeCoderC v1.2 (discussion) is a free, experimental open source file compressor by David Catt, Nov. 23, 2011. The option 26 selects a simple bitwise order 26 model. An order n model requires 16*2n bytes of memory. RangeCoderC v1.3, Nov. 25, 2011, has 3 versions. The standard version is compatible with v1.2 but uses half as much memory. The “double” version uses a main model to select among several sub-models to improve compression at a cost in speed and memory. There is also an “indirect” version that was not tested because there was no 32 bit Windows version. RangeCoderC v1.4 was released Nov. 28, 2011. It has 4 versions: standard, double, indirect, and a new version, hashed, which computes a hashed context and gives the best compression. RangeCoderC v1.5 was released Nov. 29, 2011. It combines the 4 models from v1.4 into one program and includes the model type in the archive header. Option c3 selects the hashed model. It gives the same size as v1.4. The other models were not tested. RangeCoderC v1.6 was released Dec. 1, 2011. It has 6 compression modes selected by options c0 through c5 as follows: 1234560 - Simple Bitwise Model (default)1 - Indirect Bitwise Model2 - Indexed Bitwise Model Array3 - Hashed Bitwise Model4 - Bitwise Linear CM5 - Bitwise Linear CM With SSE c1 failed on enwik8. It produced a “compressed” file about 2.5 GB which decompressed incorrectly. The other modes were tested at the highest order allowed by the 2 GB memory space available in the 32 bit version. RangeCoderC v1.7 alpha, Dec. 5, 2011, fixes the bug in c1 mode in v1.6. The other 5 modes are presumably the same and were not tested. It is a pre-release of version 1.7, released without source code. RangeCoderC v1.7, Dec. 9, 2011, adds two new compression modes: 126 - Bytewise Hashed Model7 - Combined Model The Bytewise Hashed model uses the hash and cache structure from ZPAQ to achieve high speeds, even at higher orders. The Combined Model uses the same structure as the Double Model but has a hashed context and outputs its predictions into a SSE model for better compression. RangeCoderC v1.8, Dec. 13, 2011, removes two obsolete modes and adds one mode: “The Bitwise Adaptive Model uses probabilities instead of counts, which are adjusted nonlinearly for better compression on changing data. The learning speed of the model is derived from the model order.” The modes are: 1234560 - Bytewise Hashed Model1 - Simple Bitwise Model (default)2 - Adaptive Bitwise Model3 - Indexed Bitwise Model Array4 - Hashed Bitwise Model5 - Combined Model Only the new mode (c2) was tested. 12345678910111213141516171819202122232425262728293031323334353637383940 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ----RangeCoderC v1.2 0 99,801,301 1 99,660,153 2 97,987,717 3 96,963,829 4 95,670,157 5 94,154,825 6 87,831,925 7 80,009,581 8 73,016,189 16 46,805,877 24 35,625,897 25 34,635,889 26 33,761,533 320,897,805 4,120 x 320,901,925 1324 1348 1050 26RangeCoderC v1.3 27 33,225,249 314,021,089 3,977 x 314,025,066 1210 1234 1050 26 26 (Double) 30,934,993 285,258,957 4,052 x 285,263,009 1501 1488 1100 26RangeCoderC v1.4 27 (Hashed) 30,371,685 271,371,793 4,407 x 271,376,200 1809 1658 1050 26 26 (Double) 30,934,989 4,359 x 1560 1650 1116 26 27 (Indirect) 36,108,281 4,773 x 2700 3090 1182 26 27 (Standard) 33,225,245 4,288 x 1210 1270 1050 26RangeCoderC v1.5 c3 27 30,371,685 5,747 x 1740 1810 1050 26RangeCoderC v1.6 c0 26 33,761,529 7,028 x 1200 1230 525 26 c0 27 33,225,245 1280 1330 1050 26 c2 26 30,934,989 1610 1680 1116 26 c3 26 30,832,497 1610 1720 525 26 c3 27 30,371,685 1740 1790 1050 26 c4 26 29,269,185 5320 5880 1642 26 c5 26 28,461,477 260,009,661 7,028 x 260,016,689 5752 5833 1642 26RangeCoderC v1.7a c1 27 36,108,281 7,060 x 2570 3000 1182 26RangeCoderC v1.7 c0 27 33,225,245 1300 1330 1050 26 c1 27 36,108,281 2490 2420 1182 26 c2 26 30,934,989 1590 1660 1116 26 c3 27 30,371,685 1710 1980 1050 26 c4 26 29,269,185 5120 5130 1641 27 c5 26 28,461,477 260,009,661 7,858 x 260,017,519 5832 5779 1642 26 c6 27 35,265,593 990 1020 1050 26 c7 26 28,788,013 254,527,369 7,858 x 254,535,227 2460 2436 1116 26RangeCoderC v1.8 c2 28 32,432,825 285,488,437 6,537 x 285,494,974 1338 1363 1050 26 .2561 quad quad is a free file compressor by Ilia Muraviev. Only the latest version (now open source) is supported, so only that version appears in the main table. As described by the author: QUAD uses ROLZ compression (Reduced Offset LZ). It makes use of an order-2 context to reduce the offset set that is matched to. This can be regarded as a fast large dictionary LZ. Literals and Match Lengths fits in a single alphabet which is coded using an order-2-0 PPM with Full Exclusion. Match indexes are coded using an order-0 model. QUAD uses a 16 MB dictionary. For selectable compression speed and ratio, QUAD uses different parsing schemes: with Normal mode (Default) QUAD uses a Lazy Matching; with Max mode (-x option) QUAD uses a variant of Flexible Parsing. In addition, QUAD has an E8/E9 transformer for better executable compression which is always enabled. quad 1.01a (Dec. 24, 2006) used LZ77. It was closed source and took no options. quad 1.04a (Feb. 8, 2007) used LZP. Memory was expanded for this version only, however it is no longer supported. quad 1.07beta (Feb. 22, 2007) included the “x” option for better compression. quad 1.08 was released Mar. 12, 2007. Quad became open source. quad 1.10 was released Mar. 19, 2007. -x selects maximum compression. quad 1.11 (Apr. 4, 2007) uses ROLZ. quad 1.11HASH2 (Apr. 5, 2007, experimental, no source code) produces the same size archives, but uses a hash table for faster compression. quad 1.12 was released Apr. 7, 2007. 1234567891011Compression Compressed size Decompresser Total size Time (ns/byte)Program enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- ---------- ----------- ----------- ----------- ----- ----- --- ----quad v1.01a 29,930,547 263,137,995 26,927 x 263,164,922 1281 168 33 LZ77quad v1.04a 27,712,832 239,596,416 38,552 x 239,634,968 933 748 165 LZPquad v1.07b x 29,360,404 258,361,092 61,067 x 258,422,159 1282 146 33 LZPquad v1.08 x 29,171,593 256,664,803 13,042 s 256,677,845 1206 164 33 LZPquad v1.10 -x 29,152,166 256,486,470 13,288 s 256,499,758 1007 117 34 LZPquad v1.11 -x 29,110,579 256,145,858 13,387 s 256,159,245 956 116 34 ROLZquad v1.11HASH2 -x 29,110,519 256,145,858 30,129 x 256,175,987 705 117 42 ROLZquad v1.12 -x 29,110,519 256,145,858 13,516 s 256,159,334 527 120 34 ROLZ .2572 WinACE WinACE 2.61 is a shareware GUI/command line archiver, Mar. 8, 2006. It compresses in ACE and ZIP formats and decompresses many others. ACE decompresses much faster than it compresses, suggesting it is based on LZ77. The option -m5 selects maximum compression. -d4096 select maximum dictionary size of 4MB (default is -1024 = 1MB). -sfx creates a self extracting archive, which adds less space than the program itself. 123456Compression Compressed size Decompresser Total size Time (ns/byte) Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp ------- ---------- ----------- ----------- ----------- ----- ------sfx -m5 -d4096 29,481,470 257,237,710 0 xd 257,237,710 1080 77-sfx -m5 30,919,182 270,578,538 0 xd 270,578,538 738 79-sfx 30,937,342 ~770 ~40 .2589 lzsr lzsr 0.01 is a free file compressor for Windows by Nania Francesco Antonio, Oct. 1, 2011. It is described as using a “fusion of LZ77-LZP and SR” and arithmetic coding. It takes no options. .2595 zlingzling (discussion) is a free, open source (BSD license) file compressor by Zhang Li, Nov. 1, 2013. It uses order 1 ROLZ, based on the order 3 ROLZ compressor zlite. It takes no options. The compressor is C source code only. To test, it was compiled with gcc 4.8.0 -O3 for 32 bit Windows. zling (discussion) was updated Dec. 25, 2013. It was tested in Ubuntu with gcc 4.8.1 and Boost_1_55_0 using the supplied Makefile. zling 20140121 (discussion), Jan. 21, 2014, has some optimizations, and removes Boost. It was tested by compiling with g++ 4.8.1 -O3 in Windows and with the supplied Makefile in Linux. libzling 20140219, Feb. 19, 2014, separates the program into compression API and a simple demo program. It was tested by building the demo using cmake under Linux as recommended in the readme file. libzling 20140324 was released Mar. 24, 2014. The demo program has 5 compression levels. libzling 20140414 was released Apr. 14, 2014. It is faster with better compression. libzling 20140430-bugfix (discussion) was released May 4, 2014. libzling 20160107 was released Jan. 5, 2016 and updated Jan. 7, 2016. 12345678910111213141516171819202122232425 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----zling Nov-01-2013 33,297,650 292,746,596 5,468 s 292,752,064 80 21 37 ROLZ 26zling Dec-25-2013 32,222,737 282,435,374 12,807 s 282,448,181 33 8 27 ROLZ 48zling Jan-21-2014 32,189,336 281,869,136 14,886 s 281,884,022 78 21 29 ROLZ 26zling Jan-21-2014 32,189,336 281,869,136 14,886 s 281,884,022 29 7 29 ROLZ 48zling_demo Feb-19-2014 31,310,257 274,180,830 32,046 s 274,212,876 56 14 27 ROLZ 48zling_demo Mar-24-2014 e0 33,391,083 24 9 27 ROLZ 48 e1 32,613,829 29 9 27 ROLZ 48 e2 31,732,466 33 9 27 ROLZ 48 e3 31,310,257 40 9 27 ROLZ 48 e4 30,861,848 270,258,636 32,421 s 270,291,057 51 9 27 ROLZ 48zling_demo 201401414 e0 32,456,306 284,804,449 23 9 27 ROLZ 48 e1 31,800,497 278,703,086 28 9 27 ROLZ 48 e2 31,419,861 275,231,487 32 9 27 ROLZ 48 e3 31,064,418 271,969,050 36 9 27 ROLZ 48 e4 30,782,340 269,496,300 31,644 s 269,527,944 42 9 27 ROLZ 48zling_demo 20140430-bugfix e0 32,378,187 29 11 27 ROLZ 48 e1 31,720,214 30 11 27 ROLZ 48 e2 31,340,822 34 11 27 ROLZ 48 e3 30,979,872 39 11 27 ROLZ 48 e4 30,707,022 268,793,105 32,148 s 268,825,253 40 10 27 ROLZ 48zling_demo 20160107 e0 31,455,205 93 29 22 ROLZ 48 e4 29,721,114 259,475,639 35,582 s 259,511,221 83 27 28 ROLZ 48 .2625 xpv5 xpv5 is a free Windows command line file compressor by Abhilash Anand, Oct. 20, 2011. It is described as using ROLZ with an order 1 back end. It has 3 compression levels: c0, c1, c2. All levels use 9 MB memory for compression or decompression. It is single threaded. 123456Compression Compressed size Decompresser Total size Time (ns/byte) Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----xpv5 c0 31,675,180 277,174,541 14,371 x 277,188,912 908 534 9 ROLZ 26 c1 30,297,863 265,643,665 14,371 x 265,658,036 1236 515 9 ROLZ 26 c2 29,963,217 262,525,246 14,371 x 262,539,617 2359 516 9 ROLZ 26 .2660 sr3csr3c 1.0 is a free, open source (MIT license) file compressor and library by Kenneth Oksanen, released Nov. 27, 2008. It uses symbol ranking, based on ideas from SR3, but completely rewritten in C. The distribution contains a portable compression engine and source code for drivers for UNIX/Linux. To test, I wrote a simple driver for Windows (sr3cw) and compiled it using gcc 3.4.5 -O3 -fomit-frame-pointer -march=pentiumpro -s and included sr3cw.exe in the distribution. The driver takes no options..2665 lzclzc v0.01 is a free, closed source file comprssor by Nania Francesco Antonio, May 8, 2007. It uses an LZ77 like algorithm. The option 4 selects the maximum memory mode, 1 GB + 100 MB for compression and 16 + 100 MB for decompression. The actual memory usage indicated by Windows Task Manager in this mode was 360 MB for compression and 107 MB for decompression. lzc 0.03 was released May 11, 2007. lzc 0.04 was released May 16, 2007. All versions up to 0.04 use 107 MB memory for decompression. lzc 0.05b was released May 26, 2007. It has options from 1 (fastest) to 16 (best compression). It uses 771 MB to compress and 390 MB to decompress. All versions through 0.05b are linked in the above archive. lzc 0.06b was released Aug. 27, 2007. It uses 790 MB (peak) for compression and 409 MB (peak) for decompression. lzc 0.07 was released Oct. 24, 2007. Options range from 1 (fastest) to 10 (slowest). lzc 0.08 was released Nov. 15, 2007. It improves BMP and WAV compression. 1234567891011Compressor Opt enwik8 enwik9 Prog Total Comp Decomp Mem Alg--------- --- --------- ----------- ------- ----------- ---- ---- --- ----lzc v0.01 4 40,312,925 363,504,638 7,656 x 363,512,294 238 61 360 LZ77lzc v0.03 4 37,908,748 341,811,895 8,268 x 341,820,163 182 61 515 LZ77lzc v0.04 4 37,779,426 340,628,765 8,869 x 340,637,634 142 59 540 LZ77lzc v0.05b 1 44,893,624 117 54 LZ77lzc v0.05b 16 30,611,315 267,784,591 9,158 x 267,793,749 365 82 771 LZ77lzc v0.06b 16 30,611,315 267,784,590 12,170 x 267,796,760 347 68 790 LZ77lzc v0.07 1 40,554,444 110 60 70 LZ77lzc v0.07 10 30,611,315 266,565,255 28,997 x 266,594,252 309 67 584 LZ77lzc v0.08 10 30,611,315 266,565,255 11,364 x 266,576,619 302 63 550 LZ77 .2774 nakamichi Nakamichi 2019-Jul-01 is a free, open source file compressor by Georgi Marinov, July 1, 2019. It uses LZSS. On the test machine it takes 95 days and 302 GB of memory to compress and 1.3 seconds and 2 GB to decompress (memory to memory). 123Compressor Opt enwik8 enwik9 Prog Total Comp Decomp Mem Alg Note--------- --- --------- ----------- ------- ----------- ---- ---- --- ---- ----nakamichi 2019-Jul-01 32,917,888 277,293,058 112,899 s 277,405,957 8200000 1.3 302000 LZSS 85 .2794 crushcrush 0.01 is a free, experimental file compressor by Ilia Muraviev, May 17, 2011. It uses LZ77. It has 3 compression modes: cf (fast), c (medium), and cx (best). Compression in all modes use 143 MB memory, and decompression uses 65 MB. Source code (public domain) was released on June 26, 2013. The file format consists of 64 MiB blocks with a 4 byte header in machine dependent (LSB first for x86) order giving the block size. Literal and match codes are packed LSB first and padded with trailing 0 bits in the last byte. Codes are as follows: 12345670,xxxxxxxx - literal byte x1,1,xx - match length x+3 (3..6)1,0,1,xx - match length x+7 (7..10)1,0,0,1,xx - match length x+11 (11..14)1,0,0,0,1,xxx - match length x+15 (15..22)1,0,0,0,0,1,xxxxx - match length x+23 (23..54)1,0,0,0,0,0,xxxxxxxxx - match length x+55 (55..566) A match code is followed by 2 fields (call them L and P) giving the offset. L is 4 bits, and gives the length of P. If L is 0000, then P is 5 bits and the offset is P + 1 (1..32). If L is in 1..15, then P is L + 4 bits long and the offset is 2L+4 + P + 1 (33..220). A match is decoded by going back offset bytes in the output and copying the specified length to the output. The compressor maintains an index for finding matches consisting of two hash tables of size 221 for strings of length 3 and 224 for strings of length 4. The second table is maintained as a linked list. The two rolling context hashes are computed by shifting the current hash 7 or 6 bits left, respectively, adding the next byte, and chopping off the high bits. It tests the length 3 hash first, then follows the linked list of length 4 hashes to find the best match for up to 4, 256, or 4096 locations in the input buffer for compression options cf, c, and cx respectively. In addition for option cx, the compressor looks ahead one byte and codes the current byte as a literal if starting at the next byte produces a better match. A match is better if it is longer with a penalty of log16 offset plus one for the literal in case of looking ahead. The minimum match length is 3 for offsets less than 64 KiB, otherwise 4. To save memory, only the last 220 linked list pointers are saved in a rotating queue. As a speed optimization for testing matches, the first and last byte at the current best match length are tested first, then the rest of the string. crush 1.00 (discussion) was released July 1, 2013. It increases the window size from 220 to 221, thus increasing the minimum and maximum length of an offset code by 1 bit, i.e. if L is 0 the P is 6 bits (1..64) and if L is in 1..15 then P is L + 5 bits (65..221). Also, the penalty for coding a match offset is changed to log8(offset/16). 123456789101112131415 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- ---- ----crush 0.01 cf 37,401,090 330,975,986 46,879 x 331,022,865 94 17.2 143 LZ77 26crush 0.01 cf 37,401,090 330,975,986 46,879 x 331,022,865 21 4.2 143 LZ77 50crush 0.01 c 33,618,865 1040 13 143 LZ77 26crush 0.01 c 33,618,865 297,103,092 46,879 x 297,721,957 129 3.9 143 LZ77 50crush 0.01 cx 32,577,338 4490 13 143 LZ77 26crush 0.01 cx 32,577,338 287,333,602 46,879 x 287,380,481 532 3.8 143 LZ77 50crush 0.01 cx 32,577,338 287,333,602 2,469 s 287,336,071 532 3.8 143 LZ77 50crush 1.00 cf 37,308,893 132 15 148 LZ77 26crush 1.00 c 32,878,537 1541 15 148 LZ77 26crush 1.00 cx 31,731,537 7916 15 148 LZ77 26crush 1.00 cx 31,731,711 279,491,430 2,489 s 279,493,919 948 2.9 148 LZ77 60 .2836 xeloz xeloz 0.3.5.3 is a free, open source (MIT license) file compressor by xezz, Sept. 7, 2014. It uses LZ77 with the following possible code lengths: 9 = literal, one byte uncompressed. 18 = match: 12 bit offset (0..4095), 4 bit length. 19 = match: 12 bit offset (4096..7935), 4 bit length. 27 = match: 13-20 bit offset, 4-11 bit length (depends on window size). 35 = match: 24 bit offset, 4 bit length. Option c889 selects maximum compression. c indicates a sliding window. The first digit 8 selects 216+8 bytes = 16 MB block size (default is 4 = 1 MB). The second digit 8 selects the parsing method where 0..2 is greedy, 3..5 is lazy, and 6..8 is optimal and uses a suffix array (libdivsufsort) to find matches, and higher number compress slower but better. Default is 6. The third digit 0..9 (default 2) selects encoding level, where 9 is slowest with best compression. xeloz 0.3.5.3a, Sept. 12, 2014, fixed a bug that caused version 0.3.5.3 to crash when decompressing files compressed with uppercase option C. The option selects a fixed rather than a sliding window for faster compression. 123456 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- ---- ----xeloz 0.3.5.3 c 35,504,888 312,908,049 18,771 s 312,926,820 238 6 8 LZ77 48 c889 32,441,272 283,621,211 18,771 s 283,639,982 1079 8 230 LZ77 48xeloz 0.3.5.3a C 37,343,227 329,469,433 18,849 s 329,488,282 134 7 24 LZ77 48 .2839 bzpbzp 0.2 is a free file archiver by Nania Francesco Antonio, Sept. 16, 2008. It uses LZP and arithmetic coding. It takes no options. Earlier versions (0.0, 0.1) were not tested..2857 haha 0.98 is a free command line archiver by Harry Hirvola, Jan. 7, 1993. A later version, 0.999b, is available for UNIX with source code and ports to DOS. It uses order-5 PPMC (PPM with fixed escape probabilities for dropping to a lower order context. Newer PPM compressors (PPMZ, PPMII) use adaptive escape probabilities given a small context.) The command a2 selects compression method HSC (default is a1 = ASC). a21 automatically chooses the best method. Time is ns/byte. 123456789Version Options enwik8 Comp Decomp Notes-------- ----- ---------- ---- ---- -----ha 0.98 a1 36,379,137 873 257 ns/byteha 0.98 a2 31,250,524 2080 1850ha 0.999b a21 31,250,523 2447 16 DOS compile, 1995ha 0.9991a a21 31,250,524 1551 16 DOS (.com) compile, 1995ha 0.999b a21 31,250,524 1290 16 Compiled for NT by Michael Markowsky at Apr 30 1997lgha v1.1 a21 31,250,524 1110 16 ha v.0999c DOS compile by Lyapko George, 1999lgha v1.1 31,250,524 1068 1114 16 .2910 ulz ulz 0.01 (discussion) is a free, experimental file compressor by Ilia Muraviev, Feb. 1, 2010. It uses LZ77 with bytewise encoding. The options c1 through c5 select the compression level from fastest to best. The option does not affect memory usage. All levels use 43 MB for compression and 33 MB for decompression. ulz 0.02 adds a new faster mode (c1). Options c2 through c6 are the same as c1 through c5 in ulz 0.01. ulz 0.03 was released June 26, 2016. It is byte aligned LZ77 similar to LZ4 but with 16 MB blocks and 256 KB window. It has 3 compression levels: cf, c, cu (fast, normal, ultra). Level cu uses optimal parsing. ulz 0.06 was released July 13, 2017. It has 9 compression levels, c1 to c9. 1234567891011121314151617181920Program Options enwik8 enwik9 prog size Total Comp Decomp Mem Alg Note------- ------- ---------- ----------- ---------- ----------- ---- ----- --- ---- ----ulz 0.01 c1 45,751,335 411,826,108 47,809 x 411,873,917 50 11 43 LZ77 26 c2 41,677,764 77 10 43 LZ77 26 c3 39,368,127 145 9 43 LZ77 26 c4 37,861,566 581 9 43 LZ77 26 c5 37,652,826 332,626,591 332,674,400 1077 9 43 LZ77 26ulz 0.02 c1 50,382,083 37 10 43 LZ77 26 c2 45,751,335 52 10 43 LZ77 26 c3 41,677,764 74 9 43 LZ77 26 c4 39,368,127 139 8 43 LZ77 26 c5 37,861,566 576 8 43 LZ77 26 c6 37,652,826 332,626,591 47,833 x 332,674,424 1056 8 43 LZ77 26ulz 0.03 cf 45,613,380 402,610,627 48,583 x 402,659,210 13 3.2 29 LZ77 48 c 39,946,599 353,878,403 48,583 x 353,926,986 54 3.3 29 LZ77 48 cu 37,199,413 329,119,609 48,583 x 329,168,192 192 3.2 228 LZ77 48 cu 37,199,413 329,119,609 48,583 x 329,168,192 115 1.4 228 LZ77 68ulz 0.06 c1 47,674,405 421,011,442 49,450 x 421,060,892 7.4 1.0 94 LZ77 82 c 41,660,387 365,851,618 49,450 x 365,901,068 30 1.1 94 LZ77 82 c9 32,945,292 291,028,084 49,450 x 291,077,534 325 1.1 490 LZ77 82 .2924 irolzirolz source code is a free, open source (GPL), experimental file compressor by Andrew Polar, Sept. 26, 2010. It uses ROLZ. The algorithm is like LZ77 except that match offsets are coded by counting previous occurrences of the current context in the history buffer rather than as pointers. In irolz, the context is order 2. Previous occurrences are stored in a linked list with a maximum length of 31 (5 bit offset). Matches less than 4 bytes are coded as literals. Symbols (match flags, 5 bit offsets, 8 bit lengths, and 8 bit literals) are binary arithmetic coded. Lengths and literals are coded in an order 2 context model. Match flags and offset counts are modeled without context. Each symbol and context to be predicted is mapped to 2 16-bit predictions, one fast adapting (learning rate 1/8) and one slow adapting (rate 1/64). The prediction is the average of the two. Only source code is available. For this test, the program irolz.cpp was compiled using g++ 4.5.0 on a 2 GHz T3200 under 32 bit Vista with options -O2 -march=pentiumpro -fomit-frame-pointer -s. .2961 lcssrsymbra 0.2 is a free, open source (GPL) (mirror with .exe) file compressor by Frank Schwellinger, Nov. 29, 2007. It uses symbol ranking. Only source code (C++) is provided. For the test, the program was compiled as indicated in the source comments and tested in Windows XP (32 bit). The option -c4 or -c5 selects order 4 or 5 context. -m5 turns on suffix matching with maximum buffer size, which greatly slows compression. -p2 selects 2 passes, which reorders the alphabet by descending frequency. The defaults are -c4 -m0 -p1. lcssr 0.2 (Dec. 3, 2007, same website) (mirror with .exe) is derived from symbra. It drops the secondary symbol queue and instead uses a variable length context based on the length of the longest match as with LZ77/LZP. The option -b7 selects a 1152 MB buffer for finding context matches. 1234567 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----symbra 0.2 -c4 -m0 -p1 38,308,164 352,524,859 11,299 s 352,536,158 245 282 68 SR 26symbra 0.2 -c4 -m5 -p2 34,644,072 302,948,753 11,299 s 302,960,062 4669 4633 112 SR 26symbra 0.2 -c5 -m5 -p2 34,683,661 302,656,095 11,299 s 302,667,394 4700 4622 112 SR 26lcssr 0.2 -b7 -l9 34,549,048 296,160,661 8,802 x 296,169,463 8186 8281 1184 SR 26 .2984 zlite zlite is an open source file compressor by Zhang Li, Aug. 20, 2013. It uses ROLZ. It was released as C source code only. To test, it was compiled with MinGW gcc 4.8.0. with option -O3. zlite takes no options. .3062 lazylazy v1.00 is a free, open source file compressor by Matt Mahoney, Oct. 10, 2012. It uses LZ77. It has 5 compression levels from 1 to 5. Higher levels are slower and use more memory to compress. However decompression speed does not change and always uses 16 MB. The LZ77 format codes literals uncompressed after a length code. Matches can have an offset in the range 1 to 224-1 and length 4 to 224-1. Literals are coded as 00,N,L[N], where N is the number of literals to follow coded in marked binary. A marked binary number discards the leading 1, then precedes each bit by a 1 and marks the end with a 0 bit. For example, 5=101 would be coded as 1,0,1,1,0. Matches are coded as 5 bits to indicate the number of offset bits (where the first 2 bits are not 00) in the range 0..23, then the match length as a marked binary number except for the last 2 bits, then the low 2 bits of the match length are coded directly, and then 0 to 23 bits of the offset without the leading 1 bit. Compression is achieved in a 16 MB sliding window implemented as a pair of buffers. A hash table of 219 buckets of 2level (2..32) pointers each, indexed by an order 4 context hash, maintains pointers for finding matches. The longest match of length at least 4 is coded, except that if the offset is over 64K and the last symbol is a match, then the minimum length is 5. 12345678 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ---lazy 1.00 1 40,518,222 359,237,695 5,986 s 359,243,681 57 25 36 LZ77 2 38,580,043 340,152,648 5,986 s 340,158,634 75 25 40 LZ77 3 37,074,105 325,609,617 5,986 s 325,615,603 104 29 48 LZ77 4 35,908,430 314,545,955 5,986 s 314,551,941 166 25 64 LZ77 5 35,024,082 306,245,949 5,986 s 306,251,935 273 24 96 LZ77 .3085 zhuffzhuff 0.1 is a free file compressor for Windows by Yann Collet, Dec. 13, 2009. It is described as a combination of LZ4 and Huff0, a fast Huffman coder. LZ4 uses LZSS, an LZ77 variant using flags to identify matches and literals. It requires the Microsoft runtime libraries, which are not included in the program size shown. zhuff 0.7, Mar. 15, 2011, is multithreaded. It automatically detects the number of cores and compressses or decompresses in parallel, or the number can be changed with -t. However, since the program is already faster than disk I/O with one thread, using more threads makes no difference in practice. Speeds shown below are total process times. Actual times are 17 seconds to compress and 44 to decompress with either -t1 or -t2. Compressed size is the same either way and the archives are compatible but not identical. zhuff 0.8 (discussion) has 3 compression levels, from -c0 (fastest) to -c2 (best). All are multithreaded, but decompression at all levels and compression with -c0 is I/O bounded (about 40 seconds). Times are process times for these cases, and real times for -c1 and -c2 compression. zhuff 0.95b was released Jan. 27, 2014. zhuff 0.97 beta was released Feb. 2, 2014. Both programs were tested using the 64 bit Windows version under Ubuntu Wine. There are also 32 bit Windows versions that produces identical compressed files. 123456789101112131415 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ---- ----zhuff 0.1 43,299,291 384,578,436 9,626 x 384,588,062 16 10 1.4 LZ77 26zhuff 0.7 -t1 40,974,542 365,122,888 45,522 x 365,168,410 17 10 12 LZ77 26 -t2 40,974,542 365,122,888 45,522 x 365,168,410 17 10 19 LZ77 26zhuff 0.8 -c0 40,990,942 365,277,964 50,939 x 365,328,903 18 13 19 LZ77 26 -c1 36,235,017 320,629,066 50,939 x 320,680,005 73 12 19 LZ77 26 -c2 35,078,148 309,881,876 50,939 x 309,932,815 111 11 19 LZ77 26zhuff 0.95b -c0 40,615,710 362,653,616 61,684 x 362,715,300 6.5 4.2 32 LZ77 48 -c1 35,973,813 319,010,291 61,684 x 319,071,975 15 3.6 32 LZ77 48 -c2 35,022,597 309,639,139 61,684 x 309,700,823 24 3.6 32 LZ77 48zhuff 0.97 beta -c0 37,076,873 328,438,763 63,209 x 328,501,972 10 4.0 32 LZ77 48 -c1 35,864,003 317,929,499 63,209 x 317,992,708 16 3.7 32 LZ77 48 -c2 34,907,478 308,530,122 63,209 x 308,593,331 24 3.5 32 LZ77 48 .3092 slugslug v1.1b (mirror) is a free, closed source file compressor by Christian Martelock, Apr. 26, 2007. It uses an LZ type algorithm with a 128K non-sliding window and Huffman coding. It is designed for high speed and low memory usage. System (wall) times for enwik9: 18 (51) seconds for compression, 14 (30) for decompression. slug 1.27, May 7, 2007, uses a ROLZ variant with a 8MB non-sliding window and semi-dynamic Huffman coding trees rebuilt every 4KB (more frequently near the beginning of a file). 12345 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ---slug 1.1b 45,274,048 404,250,979 5,836 x 404,256,815 18 14 1 LZ77slug 1.27 35,093,954 309,201,454 6,809 x 309,208,263 32 28 14 ROLZ .3098 pigz pigz 2.2.3 is a free command-line file compressor for Linux, Jan. 15, 2012. It uses the deflate (LZ77) format for compatibility with gzip, but is multi-threaded for better speed at a small cost in compression ratio. -9 selects best compression. Decompression is single-threaded and I/O bound. pigz is distributed as source code only. It requires linking with zlib version 1.2.3 or higher. For this test, pigz was compiled using the supplied Makefile under Ubuntu Linux with g++ 4.6.1 and linked to zlib 1.2.5. Decompression was tested with unpigz, compiled similarly. It was tested on a 2.66 GHz Core i7 M620 (2 cores x 2 hyperthreads per core) as in note 48. Virtual memory usage was measured with top at 115 MB for compression and 33 MB for decompression. Resident memory usage was 2 MB. Compression time is real time at about 350% CPU usage. Decompression is I/O bound (less than 100% CPU), so CPU time is reported. gzip is shown for comparison. pigz 2.3, Mar. 4, 2013, adds option -11 implelemting Google’s zopfli algorithm, a very highly optimized and slow implementation of deflate. Decompression speed is not affected and is compatible with gzip. The test program was built from source code in Ubuntu using the supplied Makefile with g++ 4.6.3. 12345678 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Notes------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- ---- --gzip 1.3.5 -9 36,445,248 322,591,995 34,408 x 322,626,403 55 22 4.5 LZ77 48pigz 2.2.3 -9 36,490,716 322,926,625 36,521 xd 322,963,146 31 10 115 LZ77 48pigz 2.3 36,565,142 324,081,152 52,717 s 324,133,869 25 12 3 LZ77 48 -9 36,490,716 322,926,625 52,717 s 322,979,342 29 13 3 LZ77 48 -11 35,002,893 309,812,953 52,717 s 309,865,670 2237 13 25 LZ77 48 .3102 kzipkzip is a free, closed source command line compressor by Ken Silverman, compiled May 13, 2006, released May 18, 2006. It is an optimizing compressor producing zip-compatible archives but with better compression. The option /b512 sets the block splitting threshold. The default is /b256, but /b512 was found optimal on enwik8. /s0 (default) selects maximum compression and ranges from /s0 to /s3. No decompresser is included, but archives can be read with any program that reads zip files (pkzip, unzip, 7zip, WinRAR, WinACE, etc). 12345678910Options enwik8 Comp (ns/B) enwik9------- ---------- ----------- ----------/s0 /b0 35,029,924 2490 (one large block)/s0 /b256 35,025,767 5220 310,281,906 (default, s0 = extreme mode)/s0 /b512 35,012,219 5410 310,248,404 (best enwik8)/s0 /b1024 35,016,649 4440 310,188,783 (best enwik9)/s1 35,028,473 5240 (s1 = intense mode)/s2 42,370,689 860 (s2 = longest run)/s3 63,191,700 820 (s3 = Huffman code only)pkzip 204 36,934,712 123 (for comparison) .3128 uc2 uc2 (UltraCompressor II revision 3 pro) is a commercial (free for noncommercial use) command line and GUI archiver for DOS by Nico de Vries, June 1, 1995. It uses LZ77 and Huffman coding. The -tst option selects maximum compression. uc2 includes a program for converting archives to self extracting programs (uc2sea) which produced smaller files (enwik8.exe = 35,397,343 bytes, enwik9.exe = 312,759,499 bytes), but in this mode decompression failed for enwik9, truncating the last 21 bytes of output. uc2sea works by first extracting the archive and then recompressing it using a slightly different algorithm. .3141 thorthor 0.9a is an experimental, closed source, command line file compressor by Oscar Garcia, Mar. 19, 2006. It is the fastest compressor on the maximumcompression benchmark. It has 3 modes: ef (fastest), e (normal) and ex (best). However in this test it appears speed may be limited by disk I/O. thor 0.94 alpha (mirror) (mirror) was relesed Apr. 22, 2007. exx is a new mode to select maximum compression. Times shown are process times excluding disk I/O. Actual times are 96 sec. to compress, 75 sec. to decompress). thor 0.95 (mirror), May 8, 2007, has 5 compression options: e1 through e4 are LZP in order of increasing compression; e5 is LZ77. Note that e5 is best on enwik8 but e4 on enwik9. thor 0.96a, Aug. 23, 2007, works like 0.95. 1234567891011121314151617181920 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem------- ------- ---------- ----------- ----------- ----------- ----- ----- ---thor 0.9a ex 41,670,916 368,669,696 61,556 x 368,731,252 54 51 5.5thor 0.9a e 45,842,692 412,096,696 61,556 x 412,157,852 44 50thor 0.9a ef 55,063,944 490,400,720 61,556 x 490,461,876 45 53thor 0.94a exx 35,696,028 315,611,168 68,922 x 315,680,090 82 32 2thor 0.95 e1 55,138,792 21 27thor 0.95 e2 45,714,740 21 23thor 0.95 e3 41,528,948 29 29thor 0.95 e4 35,795,184 314,092,324 49,925 x 314,142,249 64 34 16thor 0.95 e5 35,696,032 315,611,172 49,925 x 315,661,097 80 22 2thor 0.96a e1 54,915,456 488,397,982 50,071 x 488,448,053 17 20 1.6thor 0.96a e2 45,714,724 411,416,252 50,071 x 411,466,323 23 19 1.5thor 0.96a e3 41,531,628 367,671,220 50,071 x 367,721,291 27 24 6thor 0.96a e4 35,795,184 314,092,324 50,071 x 314,142,395 62 30 16thor 0.96a e5 35,696,032 315,611,172 50,071 x 315,661,243 80 18 2 .3148 etincelle etincelle alpha 3 is a free file compressor by Yann Collet, Mar. 26, 2010. It uses ROLZ with an order 1 context to reduce the offest length, followed by Huffman coding. .3196 lz5lz5 1.3.3 is a free, open source file compressor by Przemyslaw Skibinski, Jan. 5, 2016. It is a modification of lz4 by Yann Collett. It uses byte-aligned LZ77 codes as follows: 12341_OO_LL_MMM OOOOOOOO = 10 bit offset00_LLL_MMM OOOOOOOO OOOOOOOO = 16 bit offset010_LL_MMM OOOOOOOO OOOOOOOO OOOOOOOO = 24 bit offset011_LL_MMM = repeat previous offset MMM codes the match length from 3 to 9. If MMM = 111, then an additional byte is used to code match lengths of 10 to 265. LL or LLL is the 2 or 3 bit literal length (0..3 or 0..7) following the match. lz5 was compiled using gcc 4.8.4 with the supplied Makefile for Ubuntu. Option -0 through -18 selects the compression level (fastest..best). Default is -0. 12345 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- --- ----lz5 1.3.3 -0 49,358,209 433,092,957 138,210 s 433,231,167 8.7 3.9 9 LZ77 48 -18 36,514,408 319,510,433 138,210 s 319,648,643 10578 3.7 1139 LZ77 48 .3211 gzip124hackgzip124hack (mirror) (discussion) is a modified version of gzip 1.2.4 by Ilia Muraviev, Aug. 13, 2007. It uses LZ77. It is a file compressor like gzip, except that it does not delete the input file. It improves compression by using LZ77 lazy matching with 2 byte lookahead. The compressed format is compatible with gzip. -9 selects maximum compression..3224 dobozdoboz 0.1 is a free, open source file compressor by Attila T. Áfra, Mar. 18, 2011. It uses LZ77. It is both a compression library and a simple single-threaded file compressor which takes no options. To test, the supplied compressor for 32 and 64 bit Windows was tested. The 32 bit version crashed while compressing enwik9, possibly due to reading the whole file into memory. The 64 bit version succeeded under Ubuntu/wine..3226 gzip gzip 1.3.5 is an open source single file command line compressor by Jean-loup Gailly and Mark Adler, Sept. 30, 2002. It uses LZ77 (flate, but not compatible with zip). The -9 option selects maximum compression although its effect is small (see below). 1234567891011 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Note------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- gzip 1.3.5 -9 36,445,248 322,591,995 34,408 x 322,626,403 55 22 48 (Linux)gzip 1.3.5 -9 36,445,248 322,591,995 38,801 x 322,630,796 101 17 (Windows)gzip 1.3.5 36,518,329 323,742,882 38,801 x 323,781,683 85 19 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Note------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- ---- doboz 0.1 36,367,430 fail 76,471 x 940 10 26 36,367,430 322,415,409 83,591 x 322,499,000 533 3.4 1200 48 .3226 Info-ZIP Info-ZIP 2.3.1 (Mar. 8, 2005) is a free, open source archiver for many operating systems. It uses the standard LZ77 “flate” format, like gzip and many zip-compatible programs. (The sizes are exactly 125 bytes larger than gzip). This test was under Linux (Ubuntu 2.6.15.27-amd64-generic) on a 2.2 GHz Athlon-64. Uncompression was with UnZip 5.52 (Feb. 28, 2005), both part of the normal Ubuntu distribution. The -9 option selects maximum compression. The Windows version 2.32 is dated June 19, 2006. Info-ZIP 3.00 was released July 7, 2008. Decompression was tested with UnZip 6.00, released Apr. 29, 2009. 123456789 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Notes------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- ---- --Info-ZIP 2.31 (Linux) -9 36,445,373 322,592,120 57,583 x 322,649,703 104 35 0.1 LZ77Info-ZIP 2.32 (DOS) -9 (unset TZ) 36,445,333 178 101 LZ77 16Info-ZIP 2.32 (DOS) -9 36,445,351 179 LZ77 16Info-ZIP 2.32 (Win32) -9 36,445,474 183 LZ77 16Info-ZIP 2.32 (Win32) -9 36,445,443 322,592,190 75,806 xd 322,667,996 96 13 1.2 LZ77Info-ZIP 3.00 (Win32) -9 36,445,475 322,592,222 101,079 xd 322,693,301 114 18 1.3 LZ77 26 .3234 pkzip pkzip 2.04e is a commercial (free trial) command line archiver by PKWARE Inc. written Jan 25, 1993. It uses LZ77 (flate format). The option -ex selects maximum compression. The decompresser is pkunzip 2.04e. Times are wall times. (Timer doesn’t show process times for DOS programs). There are many programs that produce zip files. I don’t plan to test them all. 12345 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- ----pkzip 2.0.4 36,934,712 327,607,376 29,184 xd 327,636,560 123 44 1.7 LZ77pkzip 2.0.4 -ex 36,556,552 323,403,526 29,184 xd 323,432,710 171 50 2.5 LZ77 .3237 jar jar 0.98-gcc is an open source command line archiver by Bryan Burns, 2002. It uses LZ77 (zip). It is included with Java (1.5.0_06) and is normally used to create .jar files for compiled Java applications and applets, but it can also be used as an archiver. It has no compression options. The cvf options creates an archive. The M option says to not add a manifest file. Note: this is not the jar compressor from Arjsoft. .3244 PeaZipPeaZip 1.0 by Giorgio Tani (Nov. 6, 2006) is a GPL open source GUI archiver supporting several common formats. The format tested is the native format which uses zlib (gzip algorithm). The “better” option chooses best compression (equivalent to gzip -9). Integrity check (checksum) and encryption are turned off. .3286 arjarj 3.10 is a free, open source (GPL v2) archiver by ARJ Software Russia, June 23, 2005. It is compatible with the original ARJ by Robert K. Jung, which was patented (U.S. patent 5140321 A) filed Sept. 4, 1991 and presumably expired. According to the patent, it uses LZ77 with flags to indicate a repeat of the last match (like LZX used in cabarc). Matches are found from a hash table of FIFO queues. The options -m0 through -m4 select compression level. The default, -m1, gives maximum compression. -m0 stores with no compression. -m1 through -m4 compress progressively larger but faster, with slower decompression. 1234567Program Options enwik8 enwik9 prog size Total Comp Decomp Mem Alg Note------- ------- ---------- ----------- ---------- ----------- ---- ----- --- ---- ----arj 3.10 -m0 100,000,127 12 10 3 store 26 -m1 37,091,317 328,553,982 143,956 x 328,697,938 262 67 3 LZ77 26 -m2 37,381,391 224 68 3 LZ77 26 -m3 39,413,127 185 72 3 LZ77 26 -m4 44,157,478 116 91 3 LZ77 26 .3344 lzgt3a lzgt1 (click on lzgt3a.zip) is one of a group of free, open source, experimental file compressors by Gerald R. Tamayo, released July 17, 2008. It uses LZT (Lempel-Ziv-Tamayo) compression, a LZ77 variant in which the decompresser rebuilds a list of matches sorted by context match length and the match length is implied or partially implied by the position in the list. lzgt implements LZT using a 4K sliding window, 32 byte look-ahead buffer and 3 bit code length. lzgt1 is like lzgt but uses a 16K sliding window and 128 byte look-ahead buffer. lzgt2 eliminates the code length entirely. lzgt3 is an improved version of lzgt2. All programs have separate decompressers (lzgtd1, etc) and are compiled for DOS (and Windows). lzgt3a was added Oct. 25, 2008. It uses a 128K window size, 64K lookahead buffer, and improved coding. 1234567Program enwik8 enwik9 prog size Total Comp Decomp Mem Alg------- ---------- ----------- ---------- ----------- ---- ----- --- ----lzgt 47,560,234 1,989 sd 634 234 2 LZ77lzgt1 43,928,072 403,385,292 2,025 sd 403,387,317 3390 865 2 LZ77lzgt2 57,268,099 1,935 sd 982 274 1 LZ77lzgt3 54,253,334 1,963 sd 889 280 1 LZ77lzgt3a 37,444,440 334,405,713 4,387 xd 334,410,100 1581 2886 2 LZ77 .3388 lzuf lzuf is a free, experimental open source file compressor by Gerald R. Tamayo, Apr. 15, 2009. It uses LZ77 with folded unary encoding of match lengths. It takes no arguments. It has a separate decompression program, lzufd.exe. .3502 pucrunchpucrunch is a free, open source file compressor by Pasi Ojala, last updated Mar. 8, 2002. It uses a combination of run length encoding (RLE) and LZ77 with Elias Gamma coding of the offsets and run lengths. The original version was written on Mar. 14, 1997 for the Commodore series (Vic 20, Commodore 64, Commodore 128 and Commodore Plus 4/C16) in 6510 assembly language, with updates on Dec. 17, 1997 and Oct. 14, 1998. The 6510 is a 1 MHz, 8 bit microprocessor with 3 registers, 16 bit (64K) address space, no cache, no pipelining, 8 bit ALU, no multiply or floating point instructions, and no support for multitasking or virtual memory. The decompresser was designed to execute quickly in this environment with only a few hundred bytes of memory. The most recent version was written in Visual C and ported to Windows as a cross compressor intended to produce self extracting archives for the Commodore. By default, pucrunch appends a 276 byte header containing 6510 code to extract the file. There are also standalone decompressers written in 6510 assembler and in Z80 assembler. I could not test in these environments, so I used the -d -c0 options to turn off the self extracting feature, which requires the (larger) Win32 external compressor/decompresser. There are two additional limitations. First, the decompresser appends a 2 byte header to indicate the load address, which is required by the Commodore. To make the decompressed file bitwise identical, this must be stripped off. Second, the input file size is limited to 64,936 bytes. The author tested a modified version without a file size limit on the Calgary corpus, but this modified version was not posted, so I did not use it. To overcome these limitations I wrote the following Perl scripts to compress and decompress. The first script compresses by splitting the input into blocks of 64,936 bytes, compressing them separately, and appending the compressed files each with a 2 byte header to indicate the block size. The second script decompresses each block one at a time, strips off the 2 byte Commodore header, and appends them. Each script takes the input and output files as command line arguments. The second script is included in the decompresser size. 123456789101112131415161718192021222324252627282930313233343536373839404142434445#!/usr/bin/perl# compress with pucrunch: perl p input outputopen(IN,&quot;$ARGV[0]&quot;)||die &quot;$!: $ARGV[0]&quot;;open(OUT,&quot;&gt;$ARGV[1]&quot;)||die &quot;$!: $ARGV[1]&quot;;binmode(IN);binmode(OUT);while ($n=read(IN, $s, 64936)) { open(TMP1,&quot;&gt;tmp1&quot;)||die &quot;$!: tmp1&quot;; binmode(TMP1); syswrite(TMP1, $s, $n); close(TMP1); `pucrunch -d -c0 tmp1 tmp2`; open(TMP2,&quot;tmp2&quot;)||die &quot;$!: tmp2&quot;; binmode(TMP2); $size=(stat(TMP2))[7]; print(&quot;$n -&gt; $size\\n&quot;); $n=read(TMP2,$s,$size); printf(OUT &quot;%c%c%s&quot;, $size/256, $size%256, $s); close(TMP2);}#!/usr/bin/perl# unpack with pucrunch: perl up input outputopen(IN,&quot;$ARGV[0]&quot;)||die &quot;$!: $ARGV[0]&quot;;open(OUT,&quot;&gt;$ARGV[1]&quot;)||die &quot;$!: $ARGV[1]&quot;;binmode(IN);binmode(OUT);while (($c1=getc(IN)) ne &quot;&quot;) { $c2=getc(IN); $size=unpack(&quot;C&quot;,$c1)*256+unpack(&quot;C&quot;,$c2); $n=read(IN, $s, $size); if ($size!=$n) {die &quot;size=$size n=$n\\n&quot;;} open(TMP1,&quot;&gt;tmp1&quot;)||die &quot;$!: tmp1&quot;; binmode(TMP1); syswrite(TMP1, $s, $n); close(TMP1); `pucrunch -u tmp1 tmp2`; open(TMP2,&quot;tmp2&quot;)||die &quot;$!: tmp2&quot;; binmode(TMP2); read(TMP2,$s,2); read(TMP2,$s,64936); printf(OUT &quot;%s&quot;, $s); close(TMP2);} pucrunch suggests using -p1 and -m6 options to improve compression but these do not help. Run times are wall times. Using scripts, Timer 3.01 does not provide useful process times, since it times Perl rather than pucrunch. The decompression time (463 sec) is probably high because Windows Task Manager shows that pucrunch is running only a small fraction of the time, perhaps 10%. Most of the time is probably the overhead of file I/O and running pucrunch 15,400 times. .3619 packARC[packARC v0.7RC11](https://www.dropbox.com/s/uq0nwgvr12ylut4/packARC v0.7RC11 (beta!) (GPL).zip) (discussion) is a free, open source (GPL v3) archiver by Matthias Stirner, Dec. 7, 2013. It incorporates packJPG (JPEG compressor), packMP3 (MP3 compressor) and packPNM (BMP, PPM, PGM, PBM image compressor). Other file times are compressed with a simple context model and arithmetic coder. Option -sfx creates a self extracting archive. Option -np tells the program not to pause when done. For this test, the source was compiled with MinGW g++ 4.8.0 using the supplied buil_packarc.bat for 32 bit Windows..3626 urbanurban is an open source file compressor for Unix by Urban Koistinen, Apr. 30, 1991. The program is an order-2 indirect context model with bitwise arithmetic coding. A hash of the last two whole bytes plus the previously coded bits of the current byte (MSB first) are mapped to a hash table of size 710123. Each table element contains a count of 0s and 1s in the range 0 through 8, and a hash verification consisting of a second hash. When a collision is detected, the counts are reset to 0. Otherwise, the appropriate count is incremented and both are halved if either exceeds 8. The pair of bit counts and the character count mod 3 (probably unnecessary) are mapped to a second table of counts to compute the next-bit probability. That table is updated by incrementing the appropriate count and halving both if the sum exceeds 60000. The initial mapping of this second table is (n0,n1) to (n0,n1) except if either of the input counts is 0, in which case the mapping is (0,n1) to (1,1+2^n1) or (n0,0) to (1+2^n0,1). The final bit prediction is n1/(n0+n1). The program was a submission to a data compresssion context for Dr. Dobbs Journal. To test, the source code was compiled using make and tested in Linux. It compresses and decompresses from standard input to standard output. It takes no options. .3663 lzoplzop v1.01 is a free, open source (GPL) command line file compressor by Markus F.X.J. Oberhumer, Apr. 27, 2003. A newer version, 1.02 rc1 was released July 25, 2005, but no Win32 executable was available for download as of May 29, 2006. lzop uses LZ77. It is designed for high speed. -9 selects maximum compression. lzop is I/O bound. timer 3.01 reports the decompression process time as 12 seconds. The remaining 38 seconds is due to disk access. .3676 lzwlzw v0.1 is a free, experimental file compressor by Ilia Muraviev, Jan. 30, 2008. It uses LZW with 16 bit code words. It takes no options. lzw v0.2 was released with public domain source code for the decompresser, which zips to 671 bytes. The file format is as follows. There is no header or trailer. Each 16 bit code word is in machine dependent order (LSB first on x86). Codes 0-255 represent single bytes of the same value. Codes 256-65535 are assigned in ascending order by concatenating the decoded values of the previous two codes. After assigning code 65535, new codes are assigned by replacing the oldest codes first, starting with 256. Data is decoded into a rotating buffer of size 16 MiB (224 bytes) by copying a string from elsewhere in the buffer. Neither the original nor copied string crosses the buffer boundary, and they do not overlap each other. No new symbol is added after decoding the first byte of the buffer. 12345 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ---lzw 0.1 42,554,530 380,782,976 42,215 x 380,825,191 1917 27 17 LZWlzw 0.2 41,960,994 367,633,910 671 s 367,634,581 3597 31 18 LZW .3701 MTCompressor MTCompressor v1.0 (discussion) is a free, experimental command line compressor for Windows by David Catt, Jan. 20, 2012. It uses an LZ77 variant similar to deflate. It is multi-threaded. Reported time is real time running on 2 cores (note 26). Memory usage fluctuates during use. The peak is reported. .3721 lz4xlz4opt v1.00 is a free, closed source file compressor for 32 bit Windows by Ilia Muraviev, Feb. 9, 2016. It is compatible with LZ4, an LZ77 compressor. Options cf, c, cb compress fast, normal, and best respectively. lz4x v1.02 was released Apr. 6, 2016. The options c1..c4 compress faster..better with LZ4 compatibility. 12345678910Compresor Opt enwik8 enwik9 prog Total Comp Deco Mem ALg Note--------- --- ---------- ----------- ------- ----------- ---- ---- --- --- ----lz4opt 1.00 cf 50,052,286 444,844,266 48,445 x 444,892,711 5.6 18 LZ77 68 c 44,815,112 397,492,322 48,445 x 397,540,767 11.4 22 LZ77 68 cb 41,950,671 372,074,748 48,445 x 372,123,193 206 1.5 122 LZ77 68lz4x 1.02 c1 52,653,040 472,784,650 48,609 x 472,833,259 8.6 3.5 19 LZ77 48 c2 44,182,671 392,104,176 48,609 x 392,152,785 30 3.2 19 LZ77 48 c3 42,833,452 379,633,926 48,609 x 379,682,535 47 3.2 19 LZ77 48 c4 41,950,112 372,068,437 48,609 x 372,117,046 136 3.3 114 LZ77 48 c4 41,950,112 372,068,437 48,609 x 372,117,046 79 1.4 LZ77 68 .3790 arbc2z arbc2z is a free, experimental command line file compressor with source code by David A. Scott, June 23, 2006. It is a bijective order-2 (PPM) arithmetic coder. A bijective coder has the property that all inputs to the decompresser are valid and produce distinct outputs. The above archive also contains arbc2, which uses a different method of handling of the zero frequency problem, arbc1 (order 1), and arbc0 (order 0), all of which are bijective. 1234567 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg------- ------- ---------- ----------- ----------- ----------- ----- ----- --- ---arbc2z 38,756,037 379,054,068 6,255 sd 379,060,323 2659 2674 68 PPM2arbc2 38,780,256 379,093,120 6,070 sd 379,099,190 2528 2646 67 PPM2arbc1 48,586,591 486,892,000 6,047 sd 486,898,047 2439 2611 1.8 PPM1arbc0 63,501,994 644,561,590 5,988 sd 644,567,578 2459 2606 1.5 o0 .3800 lz4 lz4 v0.2 (website) is a free file compressor by Yann Collet, Oct. 16, 2009. It uses LZSS (an LZ77 variant with flags to mark literals and matches). It takes no options. Run times are dominated by disk access. lz4 0.6 was released Dec. 12, 2010. lz4hc 0.9 (Dec. 13, 2010, same link) is a compatible version with better compression. In both cases, run times are dominated by disk access. Times shown are process times. Actual times were 80+37 sec. for lz4 and 137+39 sec. for lz4hc. The programs take no compression options. lz4 v1.2 was released Oct. 10, 2011. It has 3 compression levels (c0…c2). The program automatically detects the number of cores (2, note 26) and uses the same number of threads. However compression in mode c0 and all decompression modes are I/O bound, using about 20% of available CPU. For these modes, process time is reported. Compression modes c1 and c2 are real times with both cores fully utilized. 123456789 Compressed size Decompresser Total size Time (ns/byte)Program Opt enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- --- ---------- ----------- ----------- ----------- ----- ----- --- --- ----lz4 0.2 55,092,932 488,028,718 9,556 x 488,038,274 13 7 13 LZ77 26lz4 0.6 55,062,753 487,772,940 42,139 x 487,815,079 14 7 13 LZ77 26lz4hc 0.9 44,182,558 392,102,544 43,617 x 392,146,161 65 7 14 LZ77 26lz4 1.2 -c0 54,303,743 481,142,522 49,128 x 481,191,650 15 6 20 LZ77 26 -c1 44,218,551 392,460,229 49,128 x 392,509,357 69 6 21 LZ77 26 -c2 42,870,164 379,999,522 49,128 x 380,048,650 91 6 20 LZ77 26 .3802 lzss lzss 0.01 (withdrawn) is a free, experimental file compressor by Ilia Muravyov, Aug. 1, 2008. It uses LZSS, a byte aligned LZ77 variant with matches encoded with an 18 bit pointer and 6 bit length field, and 1 bit flags to distinguish matches from literals. It is discussed here. Compression options are e (fast) or ex (smaller). The program is designed for fast decompression. The program uses 625 MB for compression and 33 MB for decompression. lzss 0.02 (discussion) was released Feb. 7, 2014. Options cf, c, cx select fast, medium, and best compression. 1234567891011 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ------- ---------- ----------- ----------- ----------- ----- ----- ---- ---- ----lzss 0.01 e 48,615,051 426,009,994 44,555 x 426,054,549 193 15 625 LZSS ex 38,254,303 337,565,308 44,555 x 337,609,863 9708 14 625 LZSSlzss 0.02 cf 50,110,565 448,712,956 48,114 x 448,761,070 22 12 17 LZSS 26 cf 448,712,956 48,114 x 448,761,070 6.0 17 LZSS 63 c 45,093,733 399,850,630 48,114 x 399,898,744 40 11 17 LZSS 26 c 399,850,630 48,114 x 399,898,744 12.5 17 LZSS 63 cx 42,874,387 380,192,378 48,114 x 380,240,492 265 10 145 LZSS 26 cx 42,874,387 380,192,378 48,114 x 380,240,492 107 2.3 145 LZSS 63 .3894 xdeltaxdelta 3.0u is a free, open source command line file compressor by Joshua McDonald, Oct. 12, 2008. It uses LZ77. The program is a delta coder, meaning it will output the compressed difference between two files, and then decompress the second file when given the first file uncompressed. It allows the first file to be omitted, in which case it simply compresses. This is how the test was done. -9 specifies maximum compression..3901 BriefLZ BriefLZ 1.05 is a free, open source (C and MASM) file compressor by Joergen Ibsen, Jan. 15, 2005. It uses LZ77. It takes no options. It uses about 2 MB memory for compression and about 900 KB for decompression. brieflz 1.1.0 was last updated Sept. 23, 2015. To test, was compiled using the supplied Makefile (as blzpack) in the example subdirectory of the GitHub distribution using gcc 4.8.1 in Windows (note 26) and gcc 4.8.4 in Linux (note 48). 12345Version enwik8 enwik9 prog size Total Comp Decomp Mem Alg Note------- ---------- ----------- ---------- ----------- ---- ----- --- ---- ----BriefLZ 1.05 46,638,341 425,384,313 5,298 x 425,389,611 66 18 2 LZ77blzpack 1.1.0 43,300,800 390,122,722 14,907 s 390,137,629 29 15 4 LZ77 26blzpack 1.1.0 43,300,800 390,122,722 14,907 s 390,137,629 21 7.5 3 LZ77 48 .3972 mtarimtari 0.2 is a free, open source (GPL v3) file compressor by David Werecat, Dec. 10, 2013. It is a multi-threaded bitwise order 17 context model with arithmetic coding. To test, it was compiled with MinGW gcc 4.8.0 with options -O2 -fopenmp..4068 lzflzf v1.00 (discussion) is a free, experimental file compressor by Ilya Muravyov, Oct. 29, 2013. It uses byte aligned LZ77 with a 8 KB window. Commands c and cx give faster or better compression, respectively. lzf 1.01, Oct. 29, 2013, is a performance optimization with no change in compresion. lzf 1.02 (discussion) was released Oct. 2, 2014. 1234567891011121314Version enwik8 enwik9 prog size Total Comp Decomp Mem Alg Note------- ---------- ----------- ---------- ----------- ---- ----- --- ---- ----lzf 1.00 c 48,947,532 440,862,551 47,737 x 440,910,288 39 12 18 LZ77 26 c 48,947,532 440,862,551 47,737 x 440,910,288 8 LZ77 60 cx 46,318,130 416,377,741 47,737 x 416,425,478 53 11 18 LZ77 26 cx 46,318,130 416,377,741 47,737 x 416,425,478 14 2.3 LZ77 60lzf 1.01 c 48,947,532 440,862,551 47,728 x 440,910,279 39 12 18 LZ77 26 c 48,947,532 440,862,551 47,728 x 440,910,279 8 LZ77 60 cx 46,318,130 416,377,741 47,728 x 416,425,469 49 11 18 LZ77 26 cx 46,318,130 416,377,741 47,728 x 416,425,469 12 2.3 LZ77 60lzf 1.02 c 47,827,133 430,634,000 48,359 x 430,682,359 16 3.9 22 LZ77 48 c 47,827,133 430,634,000 48,359 x 430,682,359 7 LZ77 68 cx 45,198,298 406,805,983 48,359 x 406,854,342 110 3.7 151 LZ77 48 cx 45,198,298 406,805,983 48,359 x 406,854,342 68 2.2 LZ77 68 .4092 sranksrank 1.1 is a free, open source file compressor by P. M. Fenwick, originally written Sept. 5, 1996 and last updated Apr. 10, 1997. It uses symbol ranking, like MTF (move to front) in BWT, but in order 3 contexts without a BWT transform. When a symbol is encountered it is encoded with 1, 3, or 4 bits according to its position in a queue of length 3, then moved to the front. Long runs of first place symbols are run length encoded using 12 bits to encode the length of the length of the run. A miss is coded using pseudo-MTF in an order-0 context using 7 bits for the first 32 symbols and 12 bits for the rest. It is pseudo-MTF because after a symbol is found it is swapped with another symbol about half way to the front, with some dithering. The algorithm is designed for speed rather than good compression. The -C8 option selects the maximum number of contexts, 218. For this test, the C source code was compiled with MinGW 3.4.5: 1gcc -O2 -march=pentium4 -fomit-frame-pointer -s srank.c -o srank.exe .4106 QuickLZQuickLZ v0.1 is an open source (GPL) compression library designed for high speed by Lasse Mikkel Reinhold, Sept. 24, 2006. Tests were performed with demo.exe. Speed is I/O bound. Times shown are process times, but wall times can be 2-4 times greater. On enwik9 compression, the program reports “file too big”. Version 0.9 (Oct. 22, 2006) is a faster version (quick.exe) which handles large (64 bit) files. Version 1.20 (Mar. 15, 2007) is an archiver rather than a file compressor. Version 1.30 beta (Apr. 16, 2007) has 4 modes (0-3) with 4 separate executables. Only version 3 (quick3.exe, max compression) was tested. Version 1.30 (Aug. 14, 2007) modes 0, 1, and 2 are compatible with version 1.20, but mode 3 (best compression) is new. Version 1.40 (Nov. 13, 2007) is an experimental version designed for better speed. It has only one mode. 1234567891011Version enwik8 enwik9 prog size Total Comp Decomp Mem Alg------- ---------- ----------- ---------- ----------- ---- ----- --- ----QuickLZ 0.1 57,331,969 (fails) 45,361 x 19 21 154 LZ77QuickLZ 0.9 56,900,177 507,806,141 45,086 x 507,851,227 11 11 10 LZ77QuickLZ 1.20 57,147,067 510,018,447 43,501 x 510,061,948 17 12 2 LZ77quick3 1.30b 46,378,438 410,633,262 44,202 x 410,677,464 48 12 3 LZ77QuickLZ 1.30 -3 46,445,704 411,493,051 47,304 x 411,540,355 49 12 2 LZ77 -2 51,941,357 23 11 -1 57,153,015 12 11 -0 52,803,919 20 16quickLZ 1.40 47,728,849 417,653,684 43,922 x 417,697,606 28 13 13 LZ77 .4165 stzstz 0.7.2 is a free, experimental file compressor by Bruno Wyttenbach, Feb. 15, 2011. It uses LZ77. It has 4 compression modes as shown in the table below. Times are process times. Real times are closer to 40-45 seconds. Memory is 3.3. MB for all compression modes and the same for decompression. Most of the memory is for I/O buffers (2MB each). The actual algorithm uses 48 KB. Modes -c and -c3 compress to the same size but the archives differ by 1 byte in the header. stz.exe zip size is 40,425. stz 0.8, Mar. 4, 2011, improves compression and adds two new experimental modes. Compression and decompression process times in ns/byte are given below for both enwik8 and enwik9. Wall times are slower due to disk I/O. Modes -c, -c1, and -c2 select best compression speed, best uncompression speed, and best size respectively, but this appears only to hold for enwik8, probably because of disk I/O interference. Modes -c3, -c4, and -c5 produce identical archives. Additional changes are a Drag’n’drop interface, a CRC check (adds 2% to time), and more flexible command line interface. 5313_stz.zip size is 41,941. 123456789101112Version Option enwik8 C/D Time enwik9 C/D Time Mem Note------- ------------------------------------ ---------- ------- ----------- --------- --- ----stz 0.7.2 -c (LZBW2 best compression speed) 50,575,825 447,732,354 15 13 3 26 -c1 (LZBW3 best uncompression speed) 56,100,810 510,600,276 16 10 3 26 -c2 (LZBW2A best compression) 47,681,682 420,391,400 16 12 3 26 -c3 (LZBW3A experimental) 50,575,825 447,732,354 15 11 3 26stz 0.8 -c (LZBW2 best compression speed) 50,143,263 11 11 444,061,128 16 13 3 26 -c1 (LZBW3 best uncompression speed) 55,670,417 16 9 506,622,114 18 12 3 26 -c2 (LZBW2A best compression) 47,192,312 16 11 416,524,596 14 13 3 26 -c3 (LZBW3A) 54,080,795 15 11 480,696,931 18 12 3 26 -c4 (LZBW2B experimental) 54,080,795 13 9 480,696,931 20 13 3 26 -c5 (LZBW3B experimental) 54,080,795 16 12 480,696,931 19 14 3 26 .4246 compress compress 4.3d is is the Windows version of the UNIX compress command, released Jan 18, 1990. It uses LZW and has no compression options. .4382 lzrw3-alzrw3-a is one of a series of public domain (open source) memory to memory compressors by Ross Williams in 1991. The programs were implemented as file compressors by Matt Mahoney on Feb. 14, 2008. The programs are as follows: lzrw1 (Mar. 31, 1991) is byte-aligned LZ77 with a 12 bit offset and 4 bit length field allowing lengths 3-16. Each group of 16 phrases (pointers or literals) is preceded by 2 flag bytes to distinguish pointers from literals. Matches are found using a 4K hash table without confirmation which is updated after each phrase. It uses 16K of memory plus the input and output buffers. lzrw1-a (June 25, 1991) is lzrw1 except that the length field represents values 3-18. lzrw2 (June 29, 1991) replaces the offset with a 12 bit index into a rotating table of offsets, allowing the last 4K phrases (rather than 4K bytes) to be reached. The decompresser must reconstruct the phrase table (but not the hash table). It uses 24K memory plus buffers. lzrw3 (June 30, 1991) replaces the 12 bit length field with a 12 bit index into the hash table. The decompresser must reconstruct the hash table. It uses 16K memory plus buffers. lzrw3-a (July 15, 1991) uses a deep hash table (8 offsets per hash) with LRU replacement. It uses 16K memory plus buffers. lzrw5 (July 17, 1991) uses LZW. The dictionary is implemented as a tree. It uses up to 384K memory plus buffers. There is an experimental lzrw4, but it was never fully implemented. All of the compression algorithms were originally implemented as memory to memory compression functions in C, not as complete programs. I wrote a driver program which divides the input into 1 MB blocks (except lzrw5), compresses them independently by calling the provided functions, and writing the compressed size as a 4 byte number followed by the compressed data. However, compression could be improved by using larger blocks at the cost of more memory. For lzrw5 the block size is 64K because the program is not guaranteed to work correctly for larger blocks. It did work on this benchmark for a 192K block size, but not for 256K. The distribution linked above uses a 64K block size. 123456789Compressor enwik8 enwik9 prog Total Comp Deco Mem ALg------- ---------- ----------- ------- ----------- ---- ---- --- ---lzrw1 59,692,493 564,053,011 3,142 s 564,056,153 24 17 2 LZ77lzrw1-a 59,471,657 560,457,545 4,328 x 560,461,873 23 15 2 LZ77lzrw2 55,360,907 511,142,568 4,420 x 511,146,988 22 16 2 LZ77lzrw3 52,616,827 483,918,830 4,622 x 483,923,452 21 17 2 LZ77lzrw3-a 48,009,194 438,253,704 4,750 x 438,258,454 38 17 2 LZ77lzrw5 (64K) 59,375,192 570,387,858 4,544 x 570,392,402 146 14 1 LZWlzrw5 (192K) 50,721,610 479,044,732 174 14 1 LZW .4473 fcm1fcm1 is a free, open source file compressor by Ilia Muraviev, May 23, 2008. It mixes order 0 and order 1 models and uses bitwise arithmetic coding as in fpaq0 and paq. The bit predictions are combined by weighted averaging, with the order 1 model weighted 15/16 unless the model is in its initial state, in which case the order 0 model prediction is used. Each context is mapped to 2 16-bit counters in initial state 1/2. One counter is updated by 1/8 of the prediction error and the other by 1/32. The model prediction is the average of these two values. The compressed file has a 4 byte header containing the file size. 123Compressor enwik8 enwik9 prog Total Comp Deco Mem ALg------- ---------- ----------- ------- ----------- ---- ---- --- ---fcm1 45,402,225 447,305,681 1,116 s 447,306,797 228 261 1 CM1 .4581 runcoder1 runcoder1 is a free, open source (GPL) file compressor by Andrew Polar, Mar. 30, 2009. It uses an order 1 model with arithmetic coding. It takes no options. The program is available as source code (C++) only. For this test it was compiled with MinGW g++ 3.4.2 with options -O2 -march=pentiumpro -fomit-frame-pointer -s for 32-bit Vista as noted in note 26. .4598 data-shrinkerdata-shrinker is a free, open source file compressor by Siyuan Fu, Mar. 23, 2012. It uses a LZ77 format similer to LZ4 for high speed. It takes no options. No executable was provided. To test, the source code was compiled with g++ 4.5.1 -O3 -s under 32 bit Windows and process times measured with output to nul: 123Compressor Version Opt enwik8 enwik9 prog Total Comp Deco Mem Alg Note---------- --------- --- ---------- ----------- ------- ----------- ---- ---- --- ---- ----data-shrinker 23Mar2012 51,658,517 459,825,318 3,706 s 459,829,024 14 4 2 LZ77 26 .4638 lzwc lzwc 0.3 is a free, open source (GPL) file compressor by David Catt, Jan. 15, 2013. It uses LZW with dictionary entries coded using 2 bytes. There is also a version 0.1 which produces identical compressed files but is not as fast. The program takes no options. lzwc v0.7 fixes a bug in decompression of binary files, but does not change compressed size or speed. lzwc_bitwise is a version that uses less than 16 bits to encode symbols when the dictionary is small. 12345Compressor enwik8 enwik9 prog Total Comp Deco Mem Alg Note---------- ---------- ----------- ------- ----------- ---- ---- --- ---- ----lzwc 0.1 46,647,318 1,955 x 280 290 70 LZW 26lzwc 0.3 46,647,318 463,892,454 3,017 x 463,895,471 85 90 71 LZW 26lzwc_bitwise 0.7 46,639,414 463,884,550 4,183 x 463,888,733 123 134 71 LZW 26 .4798 exdupe exdupe v0.3.3 beta is a deduplicating archiver supporting full and incremental backups, under development by Lasse Reinhold, Oct. 20, 2011. When the beta phase ends, it will be a commercial program with source code available under restricted and non-permissive terms. Only 64 bit systems are supported. Partial source code is available for this version, although not for the compression and decompression code, which is derived from QuickLZ (LZ77). It was tested in Linux. A later version, 0.3.6 beta, was available only for 64 bit Windows on Oct. 30, 2012, and was not tested. 123Compressor Opt enwik8 enwik9 prog Total Comp Deco Mem ALg Note---------- --- ---------- ----------- ------- ----------- ---- ---- ---- ---- ----exdupe 0.3.3 53,717,422 478,788,378 1,092,986 x 479,881,364 27 5 1000 LZ77 48 .4884 lzvlzv 0.1.0 is a free, experimental file compressor for Windows by Valéry Croizier, Jan. 1, 2014. It takes no options. 12345Compressor Opt enwik8 enwik9 prog Total Comp Deco Mem ALg Note---------- --- ---------- ----------- ------- ----------- ---- ---- ---- ---- ----lzv 0.1.0 54,950,847 488,436,027 10,385 x 488,446,412 6 5 3 LZ77 62lzv 0.1.0 54,950,847 488,436,027 10,385 x 488,446,412 15 6 3 LZ77 26lzv 0.1.0 54,950,847 488,436,027 10,385 x 488,446,412 4 2.6 3 LZ77 48 .4930 FastLZ FastLZ is a free, open source compression library and file compressor by Ariya Hidayat, announced June 12, 2007 with no date or version number, and downloaded and tested on June 16, 2007. It uses byte-aligned LZ77. The software was released as source code only (in C). For this test it was compiled with MinGW gcc 3.4.5 as suggested by README.TXT (plus -s to strip debugging info): 12gcc -march=pentium -O3 -fomit-frame-pointer -mtune=pentium 6pack.c fastlz.c -o 6pack -sgcc -march=pentium -O3 -fomit-frame-pointer -mtune=pentium 6unpack.c fastlz.c -o 6unpack -s 6pack and 6unpack are the compressor and decompresser, respectively. They take no options. The compressed file name is stored without a path in the archive..4945 sharcsharc 0.9.6 beta is a free, open source (GPL v3) file compressor by Guillaume Voirin, Aug. 1, 2013. It uses dictionary coding. Option -c0 uses 1 pass and -c1 uses 2 passes for better compression. sharc 0.9.10 was released Dec. 12, 2013. sharc 0.9.11b, Dec. 14, 2013 has compression levels -c1 and -c2. -c0 selects no compression. -c1 selects dictionary encoding. -c2 selects LZP preprocessing followed by dictionary coding. The program uses the Density 0.9.12b compression library which is now a separate component. 12345678Compressor Opt enwik8 enwik9 prog Total Comp Deco Mem Alg Note------- ---- ---------- ----------- ------- ----------- ---- ---- --- --- ----sharc 0.9.6 -c0 63,290,900 625,090,400 25,822 s 625,116,222 14 11 14 Dict 26sharc 0.9.6 -c1 58,612,834 554,587,996 25,822 s 554,613,818 19 15 14 Dict 26sharc 0.9.10 -c0 61,798,570 610,691,896 11,765 s 610,703,661 13 11 4 Dict 26sharc 0.9.10 -c1 57,031,766 538,757,716 11,765 s 538,769,481 14 15 5 Dict 26sharc 0.9.11b -c1 61,611,730 608,740,104 81,001 s 608,821,105 12 9 5 Dict 26sharc 0.9.11b -c2 53,175,042 494,421,068 81,001 s 494,502,069 15 14 6 LZP 26 .4975 flzp flzp v1 is a free, open source file compressor by Matt Mahoney, June 18, 2008. It uses byte-oriented LZP. The input is divided into blocks such that at least 33 byte values never occur, or 64KB, whichever is smaller, then uses those bytes to code an end of block symbol plus match lengths from 2 up to the number of unused bytes - 1. A match length is decoded by finding the most recent context hash match in a 4 MB rotating buffer and outputting the bytes that follow. It uses a 1M hash table and an order 4 context hash. Each block begins with a 32 byte bitmap to distinguish symbols for matches from literals. flzp can be used as a preprocessor to a low order compressor like fpaq0 or ppmd -o3 to improve compression and speed. .5157 albaalba 0.1 is a free, open source, experimental file compressor by xezz, Feb. 4, 2014, updated Feb. 5, 2014 to fix a bug in the “C” option. It uses byte pair encoding. The option c32768 selects the maximum block size. The default is 4096. It has an “optimal” compression mode “C”. It was tested in Linux by compiling with gcc 4.8.1 -O3. alba 0.2, Feb. 6, 2014, adds extreme (e) mode. Modes c and C are unchanged. alba 0.5.1, Feb, 18, 2014, adds dynamic block sizing (cd). 12345678Compressor Opt enwik8 enwik9 prog Total Comp Deco Mem Alg Note------- ---- ---------- ----------- ------- ----------- ---- ---- --- --- ----alba 0.1 c 53,643,211 526,932,392 2,950 s 526,935,342 219 10 1 BPE 48 c32768 57,419,643 548,461,196 2,950 s 548,464,146 171 8 1 BPE 48 C 53,618,232 526,577,702 2,880 s 526,580,582 227 14 1 BPE 48 C32768 57,395,415 547,792,821 2,880 s 547,795,701 179 12 1 BPE 48alba 0.2 e 53,611,841 526,860,426 3,247 s 526,863,673 819 603 1 BPE 48alba 0.5.1 cd 52,728,620 515,760,096 4,870 s 515,764,966 239 10 4 BPE 48 .5277 snappy snappy 1.0.1 is a free, open source (Apache) compression library for Linux from Google, Mar. 25, 2011. It uses byte aligned LZ77, and is intended for high speed rather than good compression. Google uses snappy internally to compress its data structures for its search engine. The compressed data contains tag bytes such that the low 2 bits indicate literals and matches as follows: 123400 = literal01 = 1 byte match10 = 2 byte match11 = 4 byte match (not used) A literal of length 1 to 60 is encoded by storing the length - 1 in the upper 6 bits. Longer literals are coded by storing 60..63 in the upper 6 bits to indicate that the length is encoded in the next 1 to 4 bytes in little-endian (LSB first) format. This is followed by the uncompressed literals. Matches of length 4 to 11 with offsets of 1 to 2047 are encoded using a 1 byte match. The match length - 4 is stored in the middle 3 bits of the tag byte. The most significant 3 bits of the offset are stored in the most significant 3 bits of the tag byte. The lower 8 bits of the offset are stored in the next byte. A match may overlap the area to be copied. Thus, the string “abababa” could be written using a literal “ab” and a match with an offset of 2 and length of 5. This would be encoded as: 12345000001 00 (literal of length 2)01100001 (literal 'a')01100010 (literal 'b')000 001 01 (high bits of offset, match of length 5)00000010 (low 8 bits of offset) Matches of length 1 to 64 with offsets of 1 to 65535 are encoded using a 2 byte match. The length - 1 is encoded in the high 6 bits of the tag byte The offset is stored in the next 2 bytes with the least significant bit first. Longer matches are encoded as a series of 64 byte matches with a final shorter match of 4 to 63. If the final part of the match is less than 4 then it is encoded as a 60 byte match plus a 4 to 7 byte match. A 4 byte match allows offsets up to 232 - 1 to be encoded as with a 2 byte match. The decompresser will decode them but the compressor does not produce them because the input is compressed in 32K blocks such that a match does not span a block boundary. The entire sequence of matches and literals is preceded by the uncompressed length up to 232 - 1 written in base 128, LSB first, using 1 to 5 digits in the low 7 bits. The high bit is 1 to indicate that more digits follow. Compression searches for matches by comparing a hash of the 4 current bytes with previous occurrences of the same hash earlier in the 32K block. The hash function interprets the 4 bytes as a 32 bit value, LSB first, multiplies by 0x1e35a7bd, and shifts out the low bits. The hash table size is the smallest power of 2 in the range 256 to 16384 that is at least as large as the input string. As an optimization for hard to compress data, after 32 failures to find a match, the compressor checks only every second location in the input for the next 32 tests, then every third for the next 32 tests, and so on. When it finds a match, it goes back to testing every location. As another optimization for the x86-64 architecture, copies of 16 bytes or less are done using two 64-byte assignments rather than memcpy(). To support this, if 15 or fewer bytes remain after a match then they are encoded as literals with no further search. Snappy compresses from memory to memory rather than from file to file, so it was necessary to write a small test program (below), which was not included in the compressed size. The program loads the input into a string, compresses or decompresses it to a new string, and writes it to output. It gives the best possible compression but is not optimal for speed or memory. With this test, speed is 25 ns/byte for compression and 12 ns/byte for decompression (under 64 bit Linux). In a separate test (not shown), compressing in 32K chucks takes 9 ns/byte with very slightly larger size due to storing the size in each chunk. Decompression was not tested in this mode, but should be twice as fast. Memory usage for the test program is 2 GB to store the input and output, but actual memory usage by the library is at most 32K for the hash table. The test program was compiled with g++ 4.4.5 -O3 in 64 bit Ubuntu Linux and linked to Snappy after running “./configure; make”. Use -DMODE=Compress or -DMODE=Uncompress to create a compressor or decompresser respectively. 1234567891011#define NDEBUG 1 // turn off debugging checks#include &quot;snappy.h&quot;#include &lt;stdio.h&gt;int main() { std::string input, output; int c; while ((c=getchar())!=EOF) input+=char(c); // read from stdin snappy::MODE(input.c_str(), input.size(), &amp;output); // MODE = Compress or Uncompress fwrite(output.c_str(), 1, output.size(), stdout); // write to stdout return 0;} .5322 bpebpe is a free, experimental file compressor by Philip Gage. It was published as source code only in “The C Users Journal” in Feb. 1994. It uses byte pair encoding. The input is divided into blocks which are iteratively compressed by finding the most frequent byte pair and replacing it with another byte value that never occurs in the block, until all of the unused bytes are used up or no pair occurs more than a minumum number of times. For testing, I compiled with gcc 4.4.0 -s -O2 -march=pentiumpro -fomit-frame-pointer. I used the recommended compression options “5000 4096 200 3” and did not try to find a better combination. The options say to use a maximum block size of 5000, a hash table size of 4096 (it is recommended to be 5% to 20% smaller than the block size), a maximum of 200 different byte values per block, and do not replace pairs that occur less than 3 times. .5326 kwckwc (discussion) is a free GUI file compressor by sportman, Jan. 18, 2010. The input is divided into strings of 6 bytes each, and each value is replaced with a dictionary code. The dictionary size is not bounded, so usage increases with the size and randomness of the input. enwik9 uses 668 MB for compression and 333 MB for decompression. .5427 bpe2bpe2 v1 is a free, experimental, open source (public domain) file compressor by Will, Jan. 15, 2010. It uses byte pair encoding. It divides the input into blocks of 8192 bytes which are compressed independently. A block is compressed by finding the byte pair which occurs most frequently and a byte value which never occurs in the block, and then substituing that byte value for each occurrence of the pair. The byte pair and its replacement are appended to the block as a 3 byte header. The process is repeated until either there are no unused byte values left, or there is no pair that occurs at least 4 times. The block is output with an additional 2 byte header to indicate its size. bpe2 v2, Jan. 15, 2010, uses a faster algorithm to find the most frequent byte pair during compression. bpe2 v3, Feb. 12, 2010, has some optimizations. (discussion) The programs were tested by compiling with g++ 4.4.0 -O2 -s -march=pentiumpro -fomit-frame-pointer under Windows Vista on a 2.0 GHz T3200. 123456Compression Compressed size Decompresser Total size Time (ns/byte)Program enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem Alg Note------- ---------- ----------- ----------- ----------- ----- ----- --- --- ----bpe2 v1 55,390,822 545,319,505 1,621 s 545,321,126 2785 228 0.5 Dict 26bpe2 v2 55,389,832 545,268,425 1,635 s 545,270,060 1257 229 0.5 Dict 26bpe2 v3 55,289,197 542,748,980 2,979 s 542,751,959 518 132 0.5 Dict 26 .5586 fpaq0f2fpaq is a free, experimental command line file compressor with source code (in assembler) by Nikolay Petrov, Feb. 20, 2006. It is a faster implementation of fpaq0 by Matt Mahoney (Sept. 3, 2004) maintaining archive compatibility. fpaq is an order-0 arithmetic coder which models independent, identically distributed (i.i.d.) characters, and is not intended as a general purpose compressor. Its purpose is to test the efficiency of different arithmetic coding algorithms. There are several variants. 12345678910111213141516171819202122232425262728Compressor enwik8 enwik9 Comp Decomp Author Date---------- ---------- ---------- ---- ---- -------------- ----fpaq0 63,391,013 641,421,110 336 351 Matt Mahoney Sep 03 2004fpaq1 63,502,003 477 489 Matt Mahoney Jan 10 2006fpaq0b 63,375,460 457 437 Fabio Buffoni Jan 10 2006fpaq0s 63,375,457 427 417 David A. Scott Jan 16 2006fpaq 63,391,013 641,421,110 255 246 Nicolay Petrov Feb 20 2006fpaq0p 61,457,810 622,237,009 131 131 Ilia Muraviev Apr 15 2007fpaq02 63,501,997 644,561,596 1345 1325 David Anderson May 27 2007fpaqa 61,340,408 620,681,885 262 237 Matt Mahoney Dec 15 2007fpaqb 61,270,458 620,278,361 264 171 Matt Mahoney Dec 20 2007fpaq0m 61,389,879 621,285,504 153 135 Ilia Muraviev Dec 20 2007fpaq0mw 61,271,869 618,959,309 455 457 Eugene Shelwien Dec 21 2007fpaqc 61,270,455 620,278,358 252 177 Matt Mahoney Dec 24 2007fpaq0pv2 61,280,398 620,379,449 116 133 Ilia Muraviev Dec 26 2007fpaq0r 61,234,684 620,169,855 129 142 Alexander Rhatushnyak Jan 09 2008fpaq0rs 61,202,171 619,839,546 139 138 Alexander Rhatushnyak Jan 09 2008fpaq0f 58,088,230 581,053,251 265 251 Matt Mahoney Jan 28 2008fpaq0f2 56,916,872 558,645,708 222 207 Matt Mahoney Jan 30 2008fpaq0pv3 61,457,810 622,237,009 103 119 Nania Francesco Antonio Apr 04 2008fpaq0pv4 61,457,810 622,237,009 70 79 Eugene Shelwien Apr 06 2008fpaq0pv4nc 61,350,834 621,169,159 64 69 Eugene Shelwien Apr 06 2008fpaq0pv4nc0 61,287,662 620,506,072 68 74 Eugene Shelwien Apr 06 2008fpaq0pv5 61,457,810 622,237,009 81 87 Nania Francesco Antonio Apr 06 2008fpaq0pv4a 61,457,810 622,237,009 70 75 Eugene Shelwien Apr 07 2008fpaq0pv4anc 61,323,986 621,169,159 64 65 Eugene Shelwien Apr 07 2008fpaq0pv4anc0 61,287,662 620,506,072 66 66 Eugene Shelwien Apr 07 2008fpaq0pv4b1 61,287,234 620,488,244 56 60 Eugene Shelwien Apr 18 2008 fpaq0 uses a 32-bit carryless arithmetic coder to code binary decisions and output one byte at a time. fpaq1 uses a 64 bit coder. fpaq0b uses a 32 bit coder but counts carries and outputs a bit at a time to achieve greater internal precision. fpaq0s improves on fpaq0b by using the compressed EOF to encode the uncompressed EOF, unlike the other models which code an extra bit for each byte to indicate the end. fpaq02 extends this idea to 64 bits. All programs except fpaq are C++ source code and compiled as follows with MinGW 3.4.2 (where %1 is the program name): 1g++ -Wall %1.cpp -O2 -Os -march=pentiumpro -fomit-frame-pointer -s -o %1.exe fpaq0p by Ilia Muraviev, Apr. 15, 2007, uses an adaptive order 0 model. Instead of keeping a 0,1 count for each context, it keeps a probability and updates it by adjusting by 1/32 of the error. This is faster because it avoids a division instruction. fpaqa by Matt Mahoney, Dec. 15, 2007, is the first implementation of Jarek Duda’s asymmetric binary coder, described in section 3 of Optimal encoding on discrete lattice with translational invariant constrains using statistical algorithms, 2007. The model is based on fpaq0p (adaptive order 0), but with probabilities modeled with 16 bits resolution (instead of 12) to improve compression. The source (GPL) can be compiled with -DARITH to substitute the arithmetic coder from fpaq0 and fpaq0p for the asymmetric coder. An asymmetric coder has a single N-bit integer state variable x, as opposed to two variables (low and high) in an arithmetic coder, which allows a lookup table implementation. In fpaqa, N=10. A bit d (0 or 1) with probability q = P(d = 1) (0 &lt; q &lt; 1, a multiple of 2-N) is coded: 12if d = 0 then x := ceil((x+1)/(1-q)) - 1if d = 1 then x := floor(x/q) To decode, given x and q 123d = ceil((x+1)*q) - ceil(x*q) (1 if fract(x*q) &gt;= 1-q, else 0)if d = 0 then x := x - ceil(x*q)if d = 1 then x := ceil(x*q) x is maintained in the range 2N to 2N+1-1 by writing the low bits of x prior to encoding d and reading into the low bits of x after decoding. Because compression and decompression are reverse operations of each other, they must be performed in reverse order. The encoder divides the input into blocks of size B=500K bits, saves the predictions (q) in a stack, then encodes the bits in reverse order to a second stack. The block size and final state x are then written, followed by the compressed bits in the second stack in reverse order that they were coded. The decompresser runs everything in the forward direction, reading the saved x at the beginning of each block. To reduce the size of the coding tables, q is quantized to R=7 bits on a nonlinear scale with closer spacing near 0 and 1. The quantization is such that ln(q/(1-q)) is a multiple of 1/8 between -8 and 8. In the source, N, R, and B are adjustable parameters up to N=12, R=7. Larger values improve compression at the expense of speed and memory. fpaqa uses 2N+R+2 + 5*B/4 bytes for compression and 2N+R+1 bytes for decompression. fpaqb (Matt Mahoney, Dec. 17, 2007, updated to ver 2 on Dec. 20, 2007) is a revision of fpaqa, using the same model, but using an asymmetric coder that uses direct calculations in place of lookup tables to update the state. This allows higher precision to improve compression (eliminating a 0.03% penalty), saving memory, and allowing bytewise I/O (x in range 2N to 2N+8-1 for N=12). Compression is about the same speed as fpaqa but decompression is 28% faster. Ver. 2 is faster but maintains archive compatibility with ver. 1. fpaq0m by Ilia Muraviev, Dec. 20, 2007, uses arithmetic coding and 2 order 0 models averaged together, one with fast update (rate 1/16) and one slow (1/64). fpaq0mw by Eugene Shelwien, Dec. 21, 2007, modifies fpaq0m by using a weighted mix of a fast (1/16) and slow (1/256) adapting order 0 model, where the weight is adjusted dynamically to favor the better model. fpaqc (Matt Mahoney, Dec. 24, 2007) is fpaqb with some optimizations to the asymmetric coder. fpaq0pv2 (Ilia Muraviev, Dec. 26, 2007) is a speed optimized version of fpaq0p with arithmetic coding. fpaq0r by Alexander Rhatushnyak, Jan. 9, 2008, is an order 0 model with arithmetic coding. The model is tuned for better text compression. When compiled with -DSLOWER (fpaq0rs.exe), the arithmetic coder uses higher precision for better compression with a small speed penalty. fpaq0f by Matt Mahoney, Jan. 28, 2008, uses an adaptive order 0 model which includes the bit history (as an 8 bit state) in each context. (It is controversial whather this is really “order 0”). It uses arithmetic coding with 16 bit probabilities (rather than 12 bits). fpaq0f2 by Matt Mahoney, Jan. 30, 2008, uses a simplified bit history consisting of just the last 8 bits, plus some minor improvements. fpaq0pv3 by Nania Francesco Antonio, Apr 04, 2008, is compatible with fpaq0p but 20-30% faster. fpaq0pv4 including fpaq0pv4nc and fpaq0pv4nc0, are speed optimizations by Eugene Shelwien, Apr. 6, 2008, as discussed here. fpaq0pv4 is compatible with fpaq0p but faster. The nc and nc0 variants dispense with the extra EOF flags in each byte. fpaq0pv5 by Nania Francesco Antonio, Apr 6, 2008, is a modification to fpaq0pv4. fpaq0pv4a including fpaq0pv4anc and fpaq0pv4anc0 are bug fixes to fpaq0pv4 by Eugene Shelwien, Apr. 7, 2008, as discussed above. fpaq0pv4b by Eugene Shelwien, Apr. 18, 2008, replaces the arithmetic coder with sh_v1m port (uses carries), Windows I/O, and other optimizations as discussed here. The Intel-compiled .exe only runs on Intel machines. I tested fpaq0pv4b1 which was patched on May 19, 2008 to run on AMD machines. .5793 pppppp is the public domain file compressor specified in RFC 1978 for datagram compression using the Point-to-Point Protocol. The RFC includes an implementation in C written by Dave Rand with modifications by Ian Donaldson and Carsten Bormann, published in Aug. 1996. The program uses order-4 symbol ranking with a queue length of 1 with a 64K hash table without collision detection. Match flags are packed 8 to a byte, followed by up to 8 literals for each incorrect guess. The 16 bit context hash is updated by shifting left 4 bits and XORing with the current byte. The program reads from a file and outputs to stdout like this: 12ppp enwik9 &gt; enwik9.ppp (compress)ppp -d enwik9.ppp &gt; enwik9 (decompress) The original code opens both files in text mode, which does not work in Windows. For testing, I modified 3 lines of code to open the input and output files in binary mode as follows: 123#include &lt;fcntl.h&gt; // addedsetmode(fileno(stdout), O_BINARY); // addedFILE *f = fopen(*p, &quot;rb&quot;); // changed &quot;r&quot; to &quot;rb&quot; I compiled using gcc 3.4.2 -O3 -fomit-frame-pointer -march=pentiumpro and packed with UPX (linked above, Feb. 11 2008). Times are wall times. I did not use timer 3.01 because its output would be redirected to the output file. Process times are about 50% of wall time based on watching Task Manager..5805 kscksc (keyword shuffle compressor) is a free, experimental file compressor for Windows by Sportman, Feb. 13, 2014. It uses symbol ranking of 1, 2, 3, or 4 byte fixed length strings (user selected) encoded from a move-to-front queue with dictionary entries near the front encoded with half the bits of the maximum pointer length. Decoding is in reverse order and therefore requires reading the whole file into memory. Thus, decompression requires more memory than compression, depending on the file size. The option 1..4 selects the string length. The program uses a Windows GUI when run with no arguments. It was tested with command line arguments under Wine 1.6 in Ubuntu. 1234567Compressor Opt enwik8 enwik9 prog Total Comp Deco Cmem Dmem Alg Note------- --- ---------- ----------- ------- ----------- ---- ---- ---- ---- --- ----ksc 1 79,706,130 3250 2790 40 265 SR 48 2 67,676,824 3730 1480 40 227 SR 48 3 62,570,897 8560 1800 59 273 SR 48 4 59,511,259 32780 6670 62 220 SR 48 4 580,557,413 13,507 x 580,570,920 40050 7917 155 1700 SR 48 .5902 lzbw1lzbw1 0.8 is a free, command line file compressor by Bruno Wyttenbach, Apr. 26, 2009. It uses LZP and is derived from LZP2. It takes no options..5981 lzp2lzp2 0.1 is a free file compressor by Yann Collet, Apr. 17, 2009. It uses LZP. There are no compression options. There is a smaller, separate program (unlzp2) that only decompresses. lzp2 0.7c was released Oct. 10, 2009. Run times are dominated by disk access, not included below. 1234Compressor enwik8 enwik9 prog Total Comp Deco Mem Alg Note------- ---------- ----------- ------- ----------- ---- ---- --- --- ----lzp2 0.1 74,358,722 655,709,055 5,855 xd 655,714,910 11 9 15 LZP 26lzp2 0.7c 67,909,076 598,076,882 40,819 x 598,117,701 11 8 15 LZP 26 .6368 NTFS NTFS disk compression is used in Microsoft Windows when the “compress files to save disk space” checkbox is checked in the folder properties dialog box. Disk compression was introduced in NTFS v1.2 in mid 1995 according to Wikipedia. The compression format is called LZNT1. The algorithm is propretary. However, it was reverse engineered (in Russian, see also here). The algorithm is LZSS (similar to lzrw1). The format consists of groups of 8 symbols each preceded by 8 flag bits packed into a byte. A 0 bit indicates a literal symbol, which is decoded by copying it. A 1 bit indicates a 2 byte offset-length pair which is decoded by going back ‘offset’ bytes in the output and copying the next ‘length’+3 bytes. An offset-length pair uses a variable number of bits allocated to the offset (from 4 to 12) depending on the position in the file, and any remaining bits allocated to the length of the match. A 12 bit offset would correspond to a 4 KB block on disk. I tested by copying enwik9 between folders with the compression turned on in one folder, and compared with times to copy between two folders both with compression turned off. I tried each copy twice and took the second time, which was at most 1 second faster than the first copy. I used the test machine in note 26 running Windows Vista Home Premium SP1 32 bit with 3 GB memory and a 200 GB disk between folders on the same partition. Copying between two uncompressed folders takes 41 seconds. Copying to a compressed folder takes 51 seconds, or a difference of 10 seconds. Copying from a compressed folder takes 35 seconds. I estimated 9 seconds for decompression by assuming that copying the compressed file directly would take 26 seconds based on its size of 636 MB. (This is probably wrong because the file would be cached in memory uncompressed, but the alternative is a negative time for decompression. Copying either the compressed or uncompressed file to NUL: takes 2 seconds on the second try). Times were recorded with a watch because timer 3.01 will not time built-in commands like ‘copy’. Task Manager does not show any processes consuming CPU time or memory during copying. However, memory use should be insignificant (under 16 KB) for LZSS with 4 KB blocks. Sizes are as reported by right clicking on the compressed file in Explorer as ‘size on disk’. The size of the decompression program is not known. .6373 shindletshindlet (mirror) is a series of 3 free command line file compressors by Piotr Tarsa. All are order-0 arithmetic coders with identical models written in assembler (included). The three variants are fs (frequency sorting), bt (binary tree), and sl (linear search). All three produce identical sized compressed files. In addition, the compressed output of bt and sl are identical. Results for all 3 variations are below. Comp and Decomp show global times including disk I/O in ns/byte, with CPU (process) times in parenthesis. Date is the latest program timestamp in the distribution, not the release date. 12345Compressor Date enwik8 enwik9 prog Total size Comp Decomp----------- ------------ ----------- ---------- ------- ----------- --------- ---------shindlet_fs May 7, 2006 62,890,267 637,390,277 1,275 xd 637,391,552 185 (113) 123 (103)shindlet_bt May 27, 2006 62,890,267 637,390,277 1,387 xd 637,391,664 163 (85) 118 (96)shindlet_sl Apr 12, 2006 62,890,267 637,390,277 2,415 xd 637,392,692 166 (94) 121 (102) .6445 arb255arb255 is a free, experimental command line file compressor with source code availalbe by David A. Scott, July 28, 2004. It is a bijective order-0 arithmetic coder, best suited for i.i.d. bytes (like fpaq). It takes no arguments except the input and output filenames. The decompresser is unarb255.exe..6483 compact compact (man page) is a file compressor by Colin L. Mc Master, Feb. 28, 1979. It was written in K&amp;R C for VAX/PDP11 and SUN under Berkeley UNIX. It uses adaptive order-0 Huffman coding. The (separate) decompression program rebuilds the Huffman tree, so it need not be transmitted. Neither program takes options. compact deletes the input file and creates an output file with a .C extension. uncompact deletes the compressed file and restores the original. compact was later superceded by compress, which gives better compression. For this test, compact was compiled using the provided Makefile and tested under Ubuntu Linux. Minor source code corrections were needed to compile under gcc. However, the decompresser size is based on the original code. A port to Windows would be possible but would require more source code changes. .6942 TinyLZPTinyLZP is a free, open source (GPL v3) file compressor by David Werecat, Oct. 12, 2012. It uses LZP and takes no options. The first entry is compiled from source using “cl /O2 tinylzp.c /I.” using Microsoft (R) 32-bit C/C++ Optimizing Compiler Version 16.00.30319.01 for 80x86 and tested on a 2.0 GHz T3200 under 32 bit Vista. The second entry, TinyLZP-x86-SSE2.exe, is supplied and requires MSVCR110.dll (Visual Studio 2012 C++ runtime) to run. 1234Compressor enwik8 enwik9 prog Total size Comp Deco Mem Alg Note----------- ----------- ---------- ------- ----------- ---- ---- --- --- ----TinyLZP 0.1 79,220,546 694,274,932 2,811 s 694,277,743 58 46 10 LZP 26TinyLZP-x86-SSE2 79,220,546 694,274,932 2,811 s 694,277,743 32 38 10 LZP 26 .6955 smile smile (Nov. 5, 2004) and smile256 (Dec. 5, 2004) (discussion) are free, open source file compressors by Andrei Frolov. These programs are unique for their small executable size. smile consists of two programs: a 250 byte compressor, smile_e.com and a 207 byte decompresser, smile_d.com. smile256 is both a compressor and a decompresser in 256 bytes. This includes code to parse the command line and open the input and output files. Source code is in 16 bit assembler for DOS. Program size is given for the uncompressed .com files because zip makes them larger. Both programs use a move-to-front algorithm with the queue position encoded using an interleaved Elias Gamma code. The position of the current byte in the queue (1..256) is encoded by dropping the leading 1 bit, preceding each of the remaining bits with a 0 bit, then terminating with a 1 bit. After encoding, the byte value is moved to the front of the queue. smile256 also encodes EOF as 257, resulting in a file that is usually 1 byte larger than smile_e. 1234Compressor enwik8 enwik9 prog Total size Comp Deco Mem Alg Note----------- ----------- ---------- ------- ----------- ---- ---- --- --- ----smile_e/smile_d 71,154,788 695,562,502 207 xd 695,562,709 10517 10414 0.6 MTF 26smile256 71,154,789 256 x 11190 10840 0.6 MTF 26 .7594 barfbarf is a free, open source file compressor by Matt Mahoney, Sept. 21, 2003. It was written as a joke to debunk claims of recursive compression. The algorithm is as follows: If the input is one of the 14 files of the Calgary corpus, the output is coded as 1 byte to indicate which file. If not, then the input is compressed with a byte oriented LZ77 code, in which bytes 0-31 code a literal of that length, and 32-255 code a match of length 2 and offset 0-223. If step 2 does not compress, then the first byte is removed and a filename extension is added to encode that byte. The main table shows the size and total process time after 2 compression passes. Further passes will “compress” by one byte. The decompresser source code size includes the Calgary corpus, which is needed to build the executable. (barf.exe is 1,009,274 bytes after packing with UPX and zip). Results by pass are shown below. Times are process times (Timer 3.01) with actual wall times in parenthesis. 12345Pass enwik8 enwik9 size (zip) enwik9+prog Comp (wall) Decomp Mem Alg Filename---- ---------- ----------- ----------- ----------- ---------- ------- --- ---- --------1 76,450,126 763,918,762 983,782 s 764,902,544 315 (330) 30 (73) 4 LZ77 enwik9.x2 76,074,327 758,482,743 983,782 s 759,466,525 439 (462) 23 (60) 4 LZ77 enwik9.x.x3 76,074,326 758,482,742 983,782 s 759,466,524 488 (551) 18 (44) 4 copy enwik9.x.x.x9v A similar program, barfest.exe, compresses the million random digits file to 1 byte, rather than the Calgary corpus. The decompresser size is 455,755 bytes (zipped). .9956 arb2xarb2x v20060602 is a free, experimental command line file compressor with source code availalbe by David A. Scott, updated June 2, 2006. It is a bitwise bijective order-0 arithmetic coder, best suited for i.i.d. bits. It takes no arguments except the input and output filenames. The decompresser is unarb2x.exe.Failed and Pending Testshipp hipp v0.5819 is an experimental command line file compressor with source code available by Bogatov Roman, Aug. 19, 2005. It uses context mixing with ordinary and optionally sparse (fixed gap) contexts, using a suffix tree with path compression to store statistics. The options are /m to specify the memory limit in MB (default /m2048), /o to specify primary context order, i.e. the depth of the suffix tree with path compression (default /o256), /do to set max deterministic order (actual order with path decompression) (default /do256, do &gt;= o), /so to set the number of sparse contexts (default /so0). Sparse contexts are useful for binary data but generally not text. Memory usage increases with the size of the file and with /o and /so (but not /do). Also, if the memory limit is exceeded then an error occurs. Unfortunately enwik9 cannot be compressed at all because initialization requires more than 800 MB. Some results for enwik8: 1234hipp5819 enwik8 MB Mem Comp (ns/byte)------- ---------- ------ ----/o5 22,390,366 248.5 ~3710 /o8 20,555,951 719.5 ~4300 Zipped size: C++ source (commented in Russian) = 98,765, exe = 36,724.ppmz2 ppmz2 v0.81 is a free, experimental, open source file compressor by Charles Bloom, May 9, 2004. It uses PPM. It takes several compression options but only the defaults were tested. Memory usage grows as the program runs. On enwik9 it runs out of memory. XMillXMill 0.8 is an open source command line XML preprocessor/compressor by AT&amp;T, written by Dan Suciu, Hartmut Liefke, and Hedzer Westra in March, 2003. It works by sorting by XML tags to bring similar content together, then compressing with gzip, bzip2, or ppmd. Optionally it can (in theory) output the preprocessed data as input to another compressor. Unfortunately, the compressor will not accept truncated XML files such as this benchmark. It can be made to work by appending the following 38 bytes to enwik8 or enwik9 to create a properly formed XML file (a trailing newline is optional but was not used): 1&quot;&lt;/text&gt;&lt;/revision&gt;&lt;/page&gt;&lt;/mediawiki&gt; However, decompression succeeds for enwik8 but fails for enwik9. (Failed values in parenthesis, timed for enwik8). The decompresser (xdemill) reports “corrupt file”. 12345 Compression Compressed size Decompresser Total size Time (ns/byte)Program Options enwik8 enwik9 size (zip) enwik9+prog Comp Decomp Mem------- ------- ---------- ----------- ----------- ----------- ----- ----- ---xcmill 0.8 -w -P -9 -m800 26,579,004 (230,934,622) 114,764 xd (231,049,386) 616 (530) 800xcmill 0.9.1 -w -P -9 -m1700 26,579,004 (230,914,289) 108,845 xd (231,023,134) 711 984 The -w option preserves whitespace. Otherwise compression is lossy. -P selects ppmdi compression (bzip2, gzip and no compression are also available). -9 selects maximum compression. -m800 allows 800 MB of memory. In theory, using no compression (-N) would allow XMill to be used as a preprocessor to other compressors. However, the decompresser will not accept either enwik8 or enwik9 (with closing tags appended) if processed with -N (reports “corrupt file”). xmill 0.9.1 (Mar. 15, 2004) also fails to decompress enwik9 and fails to decompress either file with -N. lzp3o2lzp3o2 (LZP 3 with order 2 literal coding) is one of a family of open source file compressors by Charles Bloom, originally written in 1995. The algorithm is described in a paper submitted to DCC’96. lzp3o2 uses LZP compression with order 2 modeling of literals and arithmetic coding. The tested version of the source code is dated Aug. 25, 1996 and compiled for Windows Oct. 10, 1998. The compiled distribution from here was tested. 12345Program enwik8 Comp Deco Mem Alg------- ---------- ---- ---- --- ---lzp1 56,013,656 23 20 153 LZPlzp2 40,350,594 80 280 LZPlzp3o2 33,041,439 230 270 151 LZP All programs report “malloc failed” on enwik9. The LZP algorithms use very little memory themselves, but these implementations allocate input and output buffers all at once. This fails for enwik9 because of the 2 GB process limit in Windows. lzp1 is both a compressor and decompresser. To decompress, use -d as the third argument. lzp2 is a compressor only. There is a source code decompresser “lzp2d” but I was unsuccessful in compiling it. It allows an unexplained option “HuffType” which I did not experiment with. lzp3o2 has a separate decompresser “lzp3o2d.exe” included in the distribution. History123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694May 10 2006 - benchmark began with 1 month of testing about 2 compressors per day.Jun 10 2006 - began test data analysis.Jun 14 2006 - updated xml-wrt 2.0 14.06.06 | ppmonstr.Jun 17 2006 - reorganized website from 1 big page to 4 smaller pages.Jun 19 2006 - added xml-wrt 2.0 19.06.06 (standalone LZMA mode).Jun 20 2006 - added ocamyd 1.65 LTCB 1.0.Jun 21 2006 - updated TC 5.0 to dev 4 (compression unchanged but faster).Jul 19 2006 - updated TC 5.0 to dev 9, added dark 0.32b.Jul 20 2006 - added arbc2z.Jul 21 2006 - added TarsaLZP (July 4 2006).Jul 22 2006 - added uda 0.300.Jul 23 2006 - verified uda 0.300 decompression.Jul 24 2006 - updated TC 5.0 to dev 11.Jul 29 2006 - added CTW 0.1.Aug 01 2006 - updated TarsaLZP (July 30 2006), added ppmvc v1.1.Aug 06 2006 - added the Hutter Prize, renamed Large Text Compression Benchmark to Human Knowledge Compression Contest, added rules for the Hutter Prize, and updated rationale to add a section on AIXI.Aug 07 2006 - added link to paq8f, updated prize formula (Z might not decrease), and that prize committee members are not elibible for prize money. Added logo. Minor edit to rationale.Aug 08 2006 - the prize fund (Z) does not decrease.Aug 11 2006 - added a lexcial and string repetition analysis to the data study.Aug 13 2006 - typo in Rationale.Aug 14 2006 - updated dark v0.40. Edited Rationale (AIXI, compression does not seem like AI, lossy compression).Aug 16 2006 - raq8g and durilca 0.5(Hutter) submitted for Hutter prize, neither verified yet.Aug 17 2006 - verified durilca 0.5(Hutter) claim. Posted raq8g.exe for Windows.Aug 18 2006 - verified raq8h -7 on enwik8 under Windows. Tested paq8f -8 on enwik8 (not verified). Reported raq8h -8 result (Linux).Aug 19 2006 - updated ha, added Info-ZIP, ESP. Clarified rules 5 and 6.Aug 20 2006 - Removed rules and results for the Hutter prize. These may be found on the Hutter Prize website. Updated ha and Info-ZIP.Aug 22 2006 - added paq8hp1. Updated Info-ZIP. Added submission times and unzipped .exe sizes for Hutter prize candidates.Aug 23 2006 - updated paq8hp1 for enwik9 -8 (compress only). Tuned xml-wrt|ppmonstr for enwik8 at 2 GB. Added durilca4linux.Aug 26 2006 - updated dark 0.46. Fixed link to durilca4linux. Posted enwik8.bz2 and enwik9.bz2 on the data page.Aug 28 2006 - added paq8hp2 (enwik8, 1 GB, not checked). Updated ppmonstr, xmlwrt|ppmonstr, slim, and ash for 2 GB memory.Aug 29 2006 - verified paq8hp2 for enwik8 (1 GB and 2 GB).Aug 31 2006 - added bbb.Sep 01 2006 - updated bbb, TarsaLZP, paq8hp2 (as a preprocessor).Sep 02 2006 - corrected error in lexical analysis table on data page (found by Szymon Grabowski).Sep 03 2006 - added paq8hp3 -7 for enwik8 (Hutter prize candidate, verified).Sep 05 2006 - updated paq8hp3 (enwik9 -8, not verified).Sep 10 2006 - updated paq8hp4 (verified for enwik8), fixed links to PX and pimple.Sep 11 2006 - updated paq8hp4 for enwik9 (compression only), added paq1 and expanded PAQ series documentation.Sep 12 2006 - minor edits in paq8hp1, raq8g descriptions.Sep 13 2006 - updated paq8hp2 for enwik9.Sep 14 2006 - updated xml-wrt 3.0.Sep 15 2006 - updated xml-wrt 3.0|ppmonstr.Sep 20 2006 - updated paq8hp5 -7 enwik8. Verified paq8hp4 -8 enwik9.Sep 21 2006 - updated paq8hp5 -8 enwik8.Sep 23 2006 - updated paq8hp5 -8 enwik9 (not verified).Sep 24 2006 - added QuickLZ.Sep 29 2006 - added fpaq0x, fpaq0s2.Sep 30 2006 - clarified submission dates for paq8hp2 through paq8hp5. Posted paq8hp2 source code.Oct 01 2006 - updated fpaq0x1a, fpaq0s2b, tc 5.1 dev 1.Oct 02 2006 - updated tc 5.1 dev 2.Oct 06 2006 - posted paq8hp3 source code (now top ranked). Added fpaq0x1b.Oct 08 2006 - added fpaq0s3.Oct 10 2006 - posted paq8hp4 source code (now top ranked).Oct 12 2006 - added fpaq0s4.Oct 13 2006 - added tc 5.1 dev 5.Oct 15 2006 - verified paq8hp5 -8 enwik9 decompression. Added fpaq0s5.Oct 16 2006 - added durilca4linux_2 (now top ranked, not yet verified for enwik9).Oct 18 2006 - updated duricla4linux_2 (-t2(11) option).Oct 21 2006 - added fpaq2.Oct 22 2006 - updated QuickLZ 0.9.Oct 27 2006 - posted paq8hp5 source code (now ranked #2).Oct 30 2006 - updated fpaq0s6.Nov 03 2006 - mirrored enwik8.bz2 and enwik9.bz2 to mattmahoney.net/textNov 05 2006 - updated paq8hp6. Linked to FV results on data page.Nov 06 2006 - verified paq8hp6 -7 enwik9 decompression.Nov 07 2006 - updated fastari.Nov 10 2006 - added PeaZip.Nov 15 2006 - added paq8j.Nov 17 2006 - added paq8ja.Nov 20 2006 - added fpaq3.Nov 22 2006 - added paq8jb.Nov 29 2006 - added paq8jc.Dec 02 2006 - added fpaq3b.Dec 08 2006 - added paqh8p7a (enwik8 only), posted paq8hp6 source.Dec 10 2006 - updated paq8hp7a for enwik9 (not verified).Dec 12 2006 - added paq8hp7.Dec 13 2006 - updated paq8hp6 -8 enwik9.Dec 17 2006 - posted enwik8.pmd and enwik9.pmd (PPMD var. J format).Dec 21 2006 - added fpaq3c.Dec 24 2006 - added quad v1.01a, tc 5.1 dev 7.Dec 28 2006 - added fpaq3d.Jan 01 2007 - added paq8jd (enwik8 -7).Jan 02 2007 - updated paq8jd -8 enwik8 (not verified).Jan 08 2007 - added hook v0.2.Jan 11 2007 - added hook v0.3.Jan 12 2007 - added hook v0.3a.Jan 13 2007 - added tc 5.1dev7x. Fixed hook.zip archive.Jan 15 2007 - posted paq8hp7 source code. Added hook v0.4.Jan 17 2007 - completed dmc and Info-Zip 2.3.1.Jan 19 2007 - added paq8hp8.Jan 22 2007 - added hook v0.5b.Jan 27 2007 - added chile 0.4.Feb 03 2007 - added ocamyd-1.66.final (merged with ocamyd LTCB)Feb 07 2007 - added hook v0.6.Feb 08 2007 - added hook v0.6b, quad v1.04a, tc 5.2 dev 2.Feb 09 2007 - corrected error in tc 5.2 dev 2.Feb 12 2007 - added ccm_extra 1.03a.Feb 14 2007 - added hook v0.6c.Feb 15 2007 - added paq8k -8 enwik8 (not verified).Feb 20 2007 - added paq8hp9 -7 enwik8 (verified).Feb 22 2007 - updated paq8hp9 -7 enwik9.Feb 23 2007 - added link to paq8hp9any (revised paq8hp9, not tested), added quad 1.07b, ccm 1.1.1a.Mar 02 2007 - added ccm 1.1.2a.Mar 06 2007 - added LZPXj 1.2h.Mar 10 2007 - added paq8l enwik8.Mar 11 2007 - added hook v0.7.Mar 13 2007 - added hook v0.7b.Mar 14 2007 - added quad 1.08.Mar 17 2007 - added hook v0.8.Mar 18 2007 - added hook v0.8b.Mar 19 2007 - added hook v0.8c.Mar 21 2007 - added hook v0.8d, FreeArc 0.36.Mar 24 2007 - added quad 1.10.Mar 27 2007 - added paq8hp10 -7 enwik8, posted paq8hp9 source code, added hook v0.8e, M99.Mar 28 2007 - corrected M99 enwik8 result, updated FreeArc description, removed unsupported quad versions from main table.Mar 31 2007 - added paq8hp10any -8 enwik8.Apr 01 2007 - added dark 0.51, opendark.Apr 02 2007 - updated paq8hp10any -8 enwik9 (decompression not verified), added DGCA 1.10.Apr 05 2007 - added quad 1.11, quad 1.11HASH2, ccm 1.20a, updated FreeArc description.Apr 06 2007 - added hook v0.9.Apr 08 2007 - added freehook 0.2, ccm 1.20d.Apr 09 2007 - added xmill 0.9.1 (fails), barf, quad 1.12.Apr 10 2007 - added hook 0.9b, freehook 0.3.Apr 19 2007 - added M99 v2.1, QuickLZ 1.20 and 1.30beta, lzpm 0.02, tornado 0.1.Apr 22 2007 - added thor 0.94a.Apr 23 2007 - added ccm (ccmx) 1.21.Apr 27 2007 - added slug 1.1b.Apr 30 2007 - added paq8hp11 -7 enwik8. Posted paq8hp10any source code.May 03 2007 - added paq8hp11any -8 enwik8, fpaq0p.May 05 2007 - added lzpm 0.03 and 0.04. Fixed misleading description of DMC algorithm in hook.May 08 2007 - added lzc 0.01, hook0.9c.May 09 2007 - added pucrunch, TarsaLZP May 6 2007, thor 0.95, srank 1.1.May 10 2007 - added paq8hp11any -8 enwik9 (decompression not verified).May 11 2007 - added lzc 0.03, updated table description (time, memory, algorithms).May 14 2007 - added paq8hp12 -7 enwik8.May 16 2007 - added uc2, lzc 0.04.May 18 2007 - added BriefLZ 1.05.May 20 2007 - added paq8hp12any -8 enwik8/9 (decompression not verified), lzpm 0.06. Updated times in main table to process times.May 21 2007 - added paq8hp12any -7/-8 enwik8 (decompression verified), 7zip 4.46a.May 26 2007 - added lzc 0.05b.May 29 2007 - added fpaq02.Jun 01 2007 - added turtle 0.01.Jun 02 2007 - added turtle 0.02.Jun 05 2007 - added turtle 0.03.Jun 08 2007 - added turtle 0.04.Jun 12 2007 - posted paq8hp11any source code, added turtle 0.05.Jun 16 2007 - added TarsaLZP ver. Jun 17 2007, FastLZ ver. Jun 12 2007, pim 2.01.Jun 23 2007 - added turtle 0.07.Jul 24 2007 - added lpaq1, pim 2.04b, TarsaLZP Jul 18 2007, posted paq8hp12any source code.Jul 30 2007 - added TarsaLZP Jul 30 2007. Updated rules to allow 1800 MB memory.Jul 31 2007 - added pim 2.10.Aug 03 2007 - added sr2.Aug 07 2007 - added lzpm 0.07. Underlined times and memory to indicate records.Aug 08 2007 - added pimple2.Aug 09 2007 - added lzpm 0.08, TarsaLZP Aug 8 2007.Aug 11 2007 - added TarsaLZP Aug 10 2007.Aug 13 2007 - added gziphack, retested gzip 1.3.5, Info-ZIP 2.32 Win32.Aug 14 2007 - added QuickLZ 1.30, compact.Aug 15 2007 - added lzturbo 0.01, WinTurtle 1.2.Aug 16 2007 - added paq8fthis2 -8 enwik8, WinTurtle 1.21, lzpm 0.09.Aug 23 2007 - added paq8n -8 enwik8, paq8osse -8 enwik8, thor 0.96a, lzpm 0.10.Aug 24 2007 - added paq8o -8 enwik8.Aug 29 2007 - added lzc 0.06b.Aug 30 2007 - added HKCC-2 enwik8 decompresser, added link to paq8o ver. 2, added WinTurtle 1.30, qazar 0.0pre5.Aug 31 2007 - added qc 0.050.Sep 02 2007 - added HKCC-2 Sep 01 2007 version, WinRK 3.03 SFX.Sep 06 2007 - added lzpm 0.11.Sep 13 2007 - added lzpmlite 0.11.Sep 14 2007 - added paq8o3 -8 enwik8.Sep 20 2007 - added lpaq2, hook 1.0.Sep 22 2007 - added paq8o4 v1, rings 0.1.Sep 29 2007 - added paq8o6 -8 enwik8.Sep 30 2007 - added lpaq3, elpaq3, lprepaq 1.2.Oct 01 2007 - added lpaq3a, lpaq3e.Oct 04 2007 - added lpaq4, lpaq4e.Oct 05 2007 - added lzturbo 0.1.Oct 16 2007 - added lpaq5, lpaq5e, withdrew HKCC-2.Oct 20 2007 - added paq8o7 -8 enwik8.Oct 23 2007 - added lpaq6, lpaq6e.Oct 24 2007 - added paq8o8 -8 enwik8.Oct 25 2007 - added lzc 0.07.Oct 28 2007 - added rule that benchmark results will be delayed 30 days after the latest version of the program is published.Nov 09 2007 - added lpaq7, lpaq7e*, xwrt 3.2*, sr3*.Nov 22 2007 - added quickLZ 1.40, rings 0.2, hook 1.1, lzc 0.08*.Nov 23 2007 - added lzpm 0.12.Dec 03 2007 - ranked lpaq7e, xwrt 3.2, sr3, lzc 0.08.Dec 04 2007 - added and ranked xwrt 3.2|ppmonstr J.Dec 05 2007 - added symbra 0.2*.Dec 11 2007 - added lpaq8*, lpaq8e*.Dec 13 2007 - added lcssr 0.2*.Dec 16 2007 - uploaded symbra 0.2, lcssr 0.2 mirrors, added fpaqa*, hook 1.3, lzpm 1.3, cmm1, cmm2.Dec 17 2007 - corrected cmm1, cmm2, ranked cmm1.Dec 18 2007 - added fpaqb*.Dec 20 2007 - updated fpaqb v2*, added fpaq0m, bit 0.1*.Dec 21 2007 - added lpaq1a.Dec 24 2007 - added fpaqc*.Dec 25 2007 - added lpq1, rings 0.3*.Dec 26 2007 - added FreeArc 0.40-pre-4*.Jan 09 2008 - added fpaq0r, fpaq0rs*, ranked lpaq8e, lcssr 0.2.Jan 11 2008 - added flashzip 0.01, flashzip 0.02*, winturtle 1.60*, ccmx 1.30*.Jan 13 2008 - added lzpm 0.14, cmm 080113*. Updated pkzip 2.04 -ex.Jan 17 2008 - added lzpm 0.15.Jan 25 2008 - added fpaq0pv2, ranked FreeArc 0.40-pre-4, bit 0.1, rings 0.3, fpaq0mw.Jan 28 2008 - added fpaq0f*.Jan 30 2008 - added fpaq0f2*.Jan 31 2008 - added lzw 0.1, paq9a. Repealed 30 day wait rule and ranked pending compressors marked with *.Feb 04 2008 - added flashzip 0.3.Feb 08 2008 - added lzw 0.2, rings 1.0.Feb 09 2008 - added cmm3 080207.Feb 11 2008 - added ppp.Feb 12 2008 - added lzp3o2, updated ppp description.Feb 13 2008 - added rings 1.1, lzrw1.Feb 14 2008 - added lzrw1-a, lzrw2, lzrw3, lzrw3-a, lzrw5, updated lzrw1.Feb 17 2008 - updated lzrw1-a, lzrw2, lzrw3, lzrw3-a, lzrw5 (new .exe sizes).Feb 21 2008 - added durilca4linux_3.Feb 22 2008 - added drt|lpaq9e.Feb 25 2008 - added lzturbo 0.9.Mar 04 2008 - added rings 1.2.Mar 09 2008 - added balz 1.02, rzm 0.06c, tornado 0.3.Mar 13 2008 - added Stuffit 12.0.0.17.Mar 14 2008 - added cmm4 v0.0.Apr 02 2008 - added rings 1.3.Apr 04 2008 - added fpaq0pv3.Apr 06 2008 - added fpaq0pv5.Apr 14 2008 - added rings 1.4c.Apr 15 2008 - updated rings 1.4c description.Apr 21 2008 - added rings 1.5.Apr 22 2008 - added durilca4linux_3 v2 (new dictionary).Apr 28 2008 - added lpaq9f.May 09 2008 - added balz 1.06.May 11 2008 - added packet 0.01, slug 1.27, rzm 0.07h.May 14 2008 - added balz 1.07.May 18 2008 - added packet 0.02.May 19 2008 - added fpaq0pv4, fpaq0pv4nc, fpaq0pv4nc0, fpaq0pv4a, fpaq0pv4anc, fpaq0pv4and0.May 20 2008 - added packet 0.03b, balz 1.08, fpaq0pv4b1.May 21 2008 - added balz 1.09.May 22 2008 - added durilca4linux3 v3, cmm4 v0.1e.May 23 2008 - updated cmm4 v0.1e description, lpaq9g, fcm1.Jun 03 2008 - added balz 1.12.Jun 04 2008 - added lpaq9h.Jun 10 2008 - added paq8o8-intel -1, paq8o8z-jun7 -1.Jun 12 2008 - added paq8o10t (enwik8 only), balz 1.13.Jun 13 2008 - added lpaq9i.Jun 14 2008 - added drt|ppmonstr (under lpaq9i).Jun 17 2008 - updated paq8o8z (note 25), durilca4linux_3 v3 (2 GB).Jun 18 2008 - added flzp v1.Jun 19 2008 - added packet 0.90b.Jul 17 2008 - added lzgt, lzgt1, lzgt2, lzgt3.Jul 19 2008 - added nanozip 0.01a, balz 1.15.Jul 20 2008 - updated nanozip 0.01a -txt, clarified method of creating zip archive of decompresser.Jul 22 2008 - added pim 2.50, tornado 0.4a, M99 v2.2.1.Jul 24 2008 - added 4x4 0.2a, bit 0.2b.Jul 25 2008 - added nanozipltcb.Jul 26 2008 - added flashzip 0.9.Jul 28 2008 - corrected Pareto frontier.Aug 02 2008 - added nanozip 0.03a, lzss 0.01.Aug 18 2008 - added flashzip 0.91, lpaq9j.Sep 05 2008 - added size vs. speed and memory graphs.Sep 26 2008 - added bzp 0.2, ppms J.Oct 02 2008 - added lpaq9k.Oct 27 2008 - added nanozip 0.05a.Oct 28 2008 - added lzgt3a.Nov 21 2008 - added bit 0.7. Updated test computer (note 26).Nov 27 2008 - added ppmx 0.01, sr3c.Nov 28 2008 - added mcomp 2.00.Dec 02 2008 - added lpaq9l, ppmx 0.02.Dec 22 2008 - added ppmx 0.03.Dec 29 2008 - added M1 0.2a.Jan 02 2009 - added M1 0.3.Jan 05 2009 - added ppmx 0.04.Jan 09 2009 - updated link to paq8hp12any.Jan 28 2009 - added xdelta 3.0u.Feb 09 2009 - added bcm 0.03.Feb 11 2009 - added bcm 0.04.Feb 21 2009 - added drt|lpaq9m.Mar 02 2009 - added Stuffit 2009 13.0.0.19, nanozip 0.06a, NTFS (LZNT1).Mar 05 2009 - added bcm 0.05.Mar 06 2009 - updated bcm 0.05.Mar 10 2009 - added flashzip 0.93a, fixed links to winturtle, flashzip, rings, hook, packet, bzp.Mar 12 2009 - added bwmonstr 0.00.Mar 15 2009 - added bcm 0.07.Mar 20 2009 - added bwmonstr 0.01.Mar 26 2009 - added flashzip 0.94, decomp8.Apr 01 2009 - added runcoder1.Apr 13 2009 - added lzturbo 0.94, M1 0.3b.Apr 14 2009 - added lzuf.Apr 16 2009 - added M1 0.3b parameter e8-m103b1-mh.Apr 17 2009 - added lzp2.Apr 18 2009 - added csc2.Apr 21 2009 - added paq8p3, paq8p3 v2.Apr 22 2009 - added decomp8b.Apr 22 2009 - added lzbw1 0.8.Apr 29 2009 - added hook 1.4.May 08 2009 - updated opendark-A.May 26 2009 - added decmprs8.Jun 01 2009 - added bcm 0.08.Jun 02 2009 - added reorder_v2|bcm 0.08.Jun 05 2009 - updated reorder_v2|bcm 0.08 xlt.Jul 14 2009 - added bwmonstr 0.02Jul 16 2009 - updated bwmonstr 0.02 comments.Jul 21 2009 - added durilca'kingsizeJul 23 2009 - moved website to http://mattmahoney.net/dc/ added paq8px_v60_turbo, split paq from paq8hp entries, moved decompr8 series to lpaq, added flashzip 0.99, updated sr3.exe to remove antivirus false alarms due to upack.Aug 07 2009 - added packet 0.91b.Aug 14 2009 - added csc3 v.2009.8.12, combined with csc2.Aug 16 2009 - added and corrected rings 1.6.Aug 26 2009 - added flashzip 0.99b4.Sep 14 2009 - added zpaq 1.03.Sep 15 2009 - updated zpaq 1.03 cmax3.cfg.Sep 16 2009 - updated zpaq 1.03 cmax4.cfg, updated paq8hp12 links,Sep 17 2009 - added rule that each compressor can only be listed once, so removed xwrt|ppmonstr. Updated zpaq 1.03 with drt|cmax4.cfg (not in main table), updated zpaq 1.03 cmax_enwik9.Sep 18 2009 - updated zpaq 1.03 o0.cfg, o1.cfg, o2.cfg, drt|max_enwik9drt.cfg.Sep 23 2009 - added csc31.Oct 01 2009 - added zpipe 1.00 (zpaq).Oct 07 2009 - added zpaq cbwt_j2.cfg,18.Oct 11 2009 - added M03 v0.2a, lzp2 0.7c.Oct 13 2009 - added bcm 0.09.Oct 15 2009 - added zpaq v1.08 cbwt_slowmode1_1GB_block.cfg.Oct 15 2009 - added lz4 0.2.Oct 26 2009 - added zpaq v1.09 ocbwt_j1.cfg and corrected memory usage.Oct 29 2009 - corrections to Pareto frontier.Nov 12 2009 - added durilca'kingsize_4 (new dictionary).Nov 27 2009 - added lrzip 0.40.Nov 29 2009 - added tests for durilca'kingsize.Nov 30 2009 - added tests for durilca'kingsize_4, added lrzip 0.42.Dec 07 2009 - added 7zip 9.04a.Dec 15 2009 - added zhuff 0.1, bcm 0.10.Dec 17 2009 - added M1x2 v0.5-1.Dec 29 2009 - updated bcm 0.10.Jan 15 2010 - added bpe2 v1, bpe2 v2.Jan 17 2010 - updated shindlet link.Jan 19 2010 - added kwc.Jan 21 2010 - added acb 2.00c.Feb 01 2010 - added ulz 0.01.Feb 06 2010 - added ulz 0.02.Feb 08 2010 - added m1x2 0.6.Feb 12 2010 - added bpe, bpe2v3.Feb 14 2010 - updated bpe2v3 description.Feb 16 2010 - updated srank link.Feb 19 2010 - added ppmx 0.05.Feb 24 2010 - added szip 1.12a, fixed typos.Mar 01 2010 - added flashzip 0.99b8.Mar 03 2010 - added nanozipltcb 0.08.Mar 30 2010 - added etincelle alpha 3.Apr 07 2010 - added bsc 1.0.0.Apr 08 2010 - updated bsc 1.0.0.Apr 11 2010 - added bsc 1.0.3.Apr 23 2010 - corrections to ppmvc, ctxf.May 03 2010 - added yzx 0.01, bsc 2.00, fp8_v1, plzip.May 10 2010 - added csc32 a2, yzx 0.02, nanozipltcb 0.09.May 21 2010 - added yzx 0.03.May 27 2010 - added yzx 0.04.Jun 06 2010 - added nanozip 0.08a.Jun 09 2010 - updated lpaq9m.Jun 11 2010 - updated nanozip 0.08a, cmm4 0.2b, 7ip 9.12b (note 42).Jun 15 2010 - added bsc 2.20.Jun 21 2010 - updated winrk 3.03, ppmonstr J.Jun 22 2010 - added bcm 0.11.Jun 26 2010 - updated bcm 0.11, drt (lpaq9m).Jun 28 2010 - updated paq8hp12any (note 41), bcm link.Jul 16 2010 - added zp 1.00.Jul 28 2010 - added ppmx 0.06, bsc 2.26. Updated links to pimple2, ocamyd.Aug 05 2010 - updated zp 1.00 (zpaq).Aug 26 2010 - added lzham alpha 2.Aug 30 2010 - added lzham alpha 3.Sep 01 2010 - updated lzham alpha 3.Sep 26 2010 - added irolz.Oct 15 2010 - added st 0.51.Nov 02 2010 - added bcm 0.12.Dec 16 2010 - added bwtsdc v1.Jan 06 2011 - added bsc 2.4.5.Jan 23 2011 - added pzpaq 0.01.Jan 24 2011 - updated pzpaq 0.01.Jan 25 2011 - added lz4 0.6, lz4hc 0.9.Jan 31 2011 - added xz 5.0.1.Feb 19 2011 - added stz 0.7.2.Feb 23 2011 - added ppmx 0.07.Mar 02 2011 - added BWTmix v1.Mar 04 2011 - added stz 0.8.Mar 22 2011 - added csc32 final, zhuff 0.7.Mar 23 2011 - added bsc 2.5.0.Apr 27 2011 - added snappy 1.0.1.May 17 2011 - added crush 0.01.May 20 2011 - added zp 1.02.May 28 2011 - updated bwtsdc description.Jun 01 2011 - added flashzip 0.99c1. updated bcm 0.12.Aug 29 2011 - added bsc 3.0.0.Aug 30 2011 - corrections to bsc 3.0.0 description.Sep 01 2011 - added enwik8.zip and enwik9.zip to textdata.html.Sep 27 2011 - added comprox_ba 20110927, comprox_sa 20110927.Sep 28 2011 - added dzo beta, comprox_ba 20110928, comprox_sa 20110928.Sep 29 2011 - added comprox_ba 20110929, comprox_sa 20110929.Sep 30 2011 - added KuaiZip 2.3.2 x86, 7zip 9.20, Info-ZIP 3.00.Oct 02 2011 - added lzsr 0.01.Oct 10 2011 - added comprox 0.1.1, flashzip 0.99c3.Oct 12 2011 - added lz4 v1.2.Oct 20 2011 - added xpv5.Oct 31 2011 - added flashzip 0.99d1.Nov 02 2011 - added M03 v1.1b.Nov 05 2011 - added nanozip 0.09a. Added link to enwik8 ranking on compressionratings.com.Nov 13 2011 - added zpaq v4.00, merged with zp.Nov 24 2011 - added RangeCoderC v1.2.Nov 26 2011 - added RangeCoderC v1.3.Nov 29 2011 - added zhuff v0.8, RangeCoderC v1.4 and v1.5, link to dark.Dec 05 2011 - added RangeCoderC v1.6, v1.7a.Dec 09 2011 - added RangeCoderC v1.7.Dec 13 2011 - added RangeCoderC v1.8.Dec 17 2011 - added zcm v0.01.Dec 23 2011 - added zcm v0.02.Dec 31 2011 - added ppmx v0.08.Jan 01 2012 - updated ppmx v0.08.Jan 04 2012 - added yzx 0.11, zcm 0.03.Jan 17 2012 - added pigz 2.2.3, updated gzip 1.3.5.Jan 24 2012 - added MTCompressor 1.0.Jan 26 2012 - added paq8pxd.Jan 29 2012 - added TarsaLZP 29 Jan 2012.Jan 30 2012 - added zcm v0.04.Feb 11 2012 - added paq8pxd_v2.Feb 17 2012 - added paq8px_v69.Feb 19 2012 - added zcm 0.11.Mar 01 2012 - added fbc v1.0.Mar 02 2012 - added fbc v1.1. Converted decmprs8, decomp8, decomp8b, all_HKCC, lpaq9* to .zpaqMar 05 2012 - added crook v0.1.Mar 18 2012 - added lrzip 0.612.Mar 22 2012 - corrected lrzip options.Mar 23 2012 - added data-shrinker 23Mar2012.Apr 04 2012 - added zcm 0.20b.Apr 11 2012 - added fp8 v2, FreeArc 0.666.Apr 19 2012 - added paq8pxd_v3.Apr 23 2012 - added paq8pxd_v4.May 02 2012 - added zcm 0.30.May 15 2012 - added fp8 v3.May 16 2012 - added zcm 0.40.May 17 2012 - updated zcm 0.40.Jun 02 2012 - added zcm 0.50a.Jun 12 2012 - changed spelling &quot;Ratushnyak&quot; to &quot;Rhatushnyak&quot; due to name change.Jun 17 2012 - added urban.Jul 10 2012 - added bsc 3.1.0.Aug 05 2012 - added diz.Aug 24 2012 - added comprox 0.6.0.Sep 01 2012 - added st 0.81.Sep 10 2012 - added comprox 0.7.0.Sep 11 2012 - updated comprox 0.7.0, added zcm 0.60d.Sep 26 2012 - added comprox 0.8.0.Sep 27 2012 - added comprox 0.8.0-bugfix1.Oct 05 2012 - added flashzip 1.0.0.Oct 07 2012 - added comprolz 0.1.0.Oct 10 2012 - added lazy 1.00.Oct 12 2012 - added TinyLZP 0.1, TinyCM 0.1.Oct 14 2012 - updated TinyLZP 0.1, added zcm 0.70b.Oct 18 2012 - added comprox 0.9.0, comprolz 0.2.0.Oct 21 2012 - added smile.Oct 22 2012 - updated smile.Oct 23 2012 - added zpaq 6.12.Oct 30 2012 - added exdupe 0.3.3 beta.Nov 19 2012 - added TarsaLZP 18.nov.2012.Nov 20 2012 - updated link to dmc.Nov 26 2012 - added comprox 0.10.0, comprolz 0.10.0.Dec 12 2012 - added flashzip 1.1.2.Dec 17 2012 - added comprox 0.11.0, comprolz 0.11.0.Dec 18 2012 - added comprox 0.11.0-bugfix1, comprolz 0.11.0-bugfix1.Jan 15 2013 - added lzwc 0.1, lzwc 0.3, lzwc_bitwise 0.7, lzip 1.14-rc3.Jan 17 2013 - added plzma_v3p, plzma_v3c.Jan 18 2013 - updated plzma_v3b (not v3p), plzma_v3c.Jan 23 2013 - added smac 1.8.Jan 24 2013 - added zpaq 6.19.Jan 31 2013 - added smac 1.9.Feb 01 2013 - added WinRAR 4.20.Feb 07 2013 - added smac 1.10.Feb 24 2013 - added smac 1.11.Mar 11 2013 - added smac 1.12a.Mar 15 2013 - added pigz 2.3.Mar 25 2013 - added smac 1.13.Apr 15 2013 - updated bwmonstr description.Apr 20 2013 - added smac 1.14.Apr 21 2013 - added paq8pxd_v5.Apr 30 2013 - added WinRAR 5.00b2.May 01 2013 - updated WinRAR 5.00b2.May 14 2013 - added lzturbo 1.1.May 15 2013 - updated lzturbo 1.1.May 16 2013 - added zcm 0.80.May 21 2013 - added smac 1.15.Jun 04 2013 - added mcm 0.0.Jun 13 2013 - added mcm 0.2.Jun 18 2013 - added tangelo 1.0 (fp8).Jun 22 2013 - added bcm 0.14, zcm 0.88.Jun 26 2013 - added zpaq 6.34.Jun 27 2013 - updated crush 0.01, added mcm 0.3.Jun 28 2013 - updated crush 0.01 description.Jun 30 2013 - updated bsc 3.10 description.Jul 01 2013 - added crush 1.00.Jul 02 2013 - updated crush 1.00.Jul 06 2013 - added tangelo 2.0 (fp8).Jul 08 2013 - updated tangelo 2.0.Jul 11 2013 - added rings 2.0.Jul 14 2013 - added bwtdisk 0.9.0.Jul 15 2013 - added crushm.Jul 17 2013 - added mcm 0.4.Jul 20 2013 - added tangelo 2.1.Jul 24 2013 - added tangelo 2.3.Jul 31 2013 - added smac 1.16, sharc 0.9.5b.Aug 01 2013 - updated sharc 0.9.6.Aug 20 2013 - added packet 1.0, paq8pxd_v7, zlite.Aug 28 2013 - added ppmz2 0.81.Oct 14 2013 - added zpaq 6.42, zpaqd 6.32 max5.cfg.Oct 16 2013 - added arj 3.10, zpaq 6.42 max6.cfg.Oct 28 2013 - added lzf 1.00.Oct 30 2013 - added lzf 1.01.Nov 01 2013 - added zling.Nov 04 2013 - added smac 1.17.Nov 19 2013 - added smac 1.17a.Dec 10 2013 - added smac 1.18, packet 1.1, packARC 0.7RC11, mtari 0.2.Dec 11 2013 - added cm0_ext (includes cm0, cm1, bwcm).Dec 12 2013 - added sharc 0.9.10.Dec 13 2013 - added sharc 0.9.11b.Dec 14 2013 - updated sharc 0.9.11b description.Dec 19 2013 - added smac 1.19.Dec 26 2013 - added zling Dec-25-2013.Jan 02 2014 - added lzv 0.1.0.Jan 08 2014 - added doboz 0.1.Jan 17 2014 - added smac 1.20.Jan 21 2014 - added zling Jan-21-2013.Jan 23 2014 - added cm4_ext.Feb 04 2014 - added zhuff 0.95b, 0.97 beta, alba 0.1.Feb 05 2014 - updated alba 0.1.Feb 06 2014 - added alba 0.2.Feb 10 2014 - added lzss 0.2.Feb 11 2014 - updated lzss 0.2.Feb 17 2014 - added RH, RH2.Feb 18 2014 - added alba 0.5.1.Feb 22 2014 - added ksc.Feb 27 2014 - added RH2 20Feb2014.Mar 02 2014 - added zling (libzling) 20140219.Mar 10 2014 - added tornado 0.6.Mar 15 2014 - added freearc 0.67a.Mar 23 2014 - added RH4_x64 22Mar2014.Mar 24 2014 - added libzling 20140324.Mar 25 2014 - added ppmx 0.09, zpaq 6.50.Apr 01 2014 - added tree 0.1.Apr 02 2014 - updated tree 0.1.Apr 04 2014 - updated tree 0.1.Apr 14 2014 - added libzling 20140414.Apr 16 2014 - added cmix v1.Apr 28 2014 - added tree 0.3.Apr 29 2014 - added RH4 24Apr2014.May 04 2014 - added zcm 0.90.May 05 2014 - added zling (libzling) 20140430-bugfix.May 12 2014 - updated gzip124hack description and link.May 16 2014 - added zcm 0.92.May 27 2014 - added tree 0.4, tree 0.5.May 29 2014 - added cmix v2.Jun 02 2014 - added lza 0.01.Jun 18 2014 - added paq8pxd_v8.Jun 27 2014 - added cmix v3.Jun 29 2014 - added paq8pxd_v10.Jun 30 2014 - added lza 0.10.Jul 05 2014 - added lza_x64 0.10.Jul 06 2014 - added tree 0.9.Jul 07 2014 - added zcm_x64 0.92.Jul 09 2014 - updated zcm_x64 0.92.Jul 23 2014 - added cmix v4.Jul 27 2014 - updated st (obsolete).Jul 31 2014 - added paq8pxd_v12.Aug 08 2014 - added lzturbo 1.2.Aug 11 2014 - updated lzturbo 1.2 (levels 3x).Aug 13 2014 - added paq8pxd_v12-skbuild, cmix v5.Aug 15 2014 - updated cmix (typo).Aug 17 2014 - added tree v10.0, paq8pxd_v12-skbuild.Aug 18 2014 - updated tree v0.10.Aug 22 2014 - updated paqp8xd_v12-skbuild description.Aug 28 2014 - added paq8pxd_v13_x64.Sep 03 2014 - added tree v0.11, cmix v6.Sep 07 2014 - updated tree v0.11.Sep 08 2014 - updated tree v0.11.Sep 09 2014 - added lza 0.51.Sep 10 2014 - added lza_x64 0.51.Sep 11 2014 - added xeloz 0.3.5.3.Sep 12 2014 - added xeloz 0.3.5.3a.Sep 14 2014 - removed st at request of author.Sep 18 2014 - updated stuffit link.Sep 19 2014 - added paq8pxd_v15.Sep 23 2014 - updated paq8pxd_v15 for enwik9.Oct 04 2014 - added tree 0.12.Oct 06 2014 - added lzf 1.02.Oct 13 2014 - added tree 0.13.Oct 14 2014 - updated main table typo (libzling).Oct 18 2014 - added lza 0.61.Oct 20 2014 - added lza 0.62.Oct 28 2014 - added paq8pxd_v12_biondivers1_x64.Oct 31 2014 - added tree 0.14.Nov 13 2014 - added rh5.Nov 20 2014 - added lza 0.70b.Nov 22 2014 - added tree 0.15a.Nov 23 2014 - updated tree 0.15a.Dec 09 2014 - added tree 0.16b.Dec 12 2014 - updated tree 0.16b.Dec 16 2014 - added tree 0.17.Dec 18 2014 - updated tree 0.17.Jan 11 2015 - added lza 0.80test.Jan 19 2015 - added tree 0.18.Jan 25 2015 - added zstd.Jan 26 2015 - added lzhamtest (lzham) v1.0.Feb 04 2015 - added tree 0.19.Feb 05 2015 - added cmix v7, mcm 0.8.Feb 09 2015 - added pcompress 3.1.Mar 03 2015 - added bcm 1.00, mcm 0.82.Mar 04 2015 - updated bcm 1.00.Mar 06 2015 - added balz 1.20.Mar 10 2015 - added lza 0.82b.Mar 18 2015 - added bce3.Mar 23 2015 - added csarc 3.3.Apr 22 2015 - added mcm 0.83.Apr 24 2015 - added xz 5.2.1.Apr 27 2015 - added glza 0.1 (formerly tree).Apr 28 2015 - corrected Pareto frontier in main table.Apr 29 2015 - corrected Pareto frontier for lzham.May 13 2015 - added zcm 0.93.May 27 2015 - added glza 0.2.May 28 2015 - added rings 2.1 and 2.2.Jun 08 2015 - added rings 2.5.Jul 13 2015 - added glza 0.3.Jul 20 2015 - added packet 1.2.Sep 15 2015 - added cmv 00.01.00, updated nanozip 0.09a.Sep 16 2015 - updated cmv 00.01.00, nanozip 0.09a.Sep 23 2015 - added brotli 21 Sep 2015.Sep 25 2015 - added brieflz 1.1.0.Nov 11 2015 - added cmix v8.Nov 18 2015 - added glza 0.3b.Dec 04 2015 - added zstd 0.4.0, 0.4.2.Dec 05 2015 - updated zstd 0.4.2.Dec 06 2015 - added zstd_no_legacy 0.4.2.Jan 05 2016 - added lz5 1.3.3.Feb 09 2016 - added libzling 20160107, lz4opt 1.00.Feb 18 2016 - added zstd 0.5.1, brotli 18-Feb-2016.Feb 20 2016 - updated brotli 18-Feb-2016.Mar 10 2016 - added emma 0.1.3.Mar 11 2016 - added glza 0.4.Mar 12 2016 - updated glza 0.4.Mar 14 2016 - added emma 0.1.4.Mar 20 2016 - added cmv 00.01.01.Mar 30 2016 - updated cmv 00.01.01.Apr 08 2016 - added lz4x 1.02.Apr 13 2016 - added zstd 0.6.0.Apr 15 2016 - added cmix v9.May 05 2016 - updated link to m1x2.Jun 17 2016 - added cmix v10.Jun 28 2016 - added ulz 0.03.Jul 01 2016 - added plzip 1.5 (lzip).Jul 07 2016 - added cmix v11.Jul 19 2016 - added emma 0.1.12.Aug 08 2016 - added paq8pxd_v18.Aug 12 2016 - updated paq8pxd_v18.Aug 23 2016 - added emma 0.1.16.Aug 24 2016 - updated emma 0.1.16.Aug 29 2016 - corrected emma 0.1.16 version to 0.1.6.Sep 05 2016 - added packet 1.9.Sep 27 2016 - added glza 0.8.Nov 08 2016 - added cmix v12.Apr 25 2017 - added cmix v13.Apr 28 2017 - added emma 0.1.22.Jun 27 2017 - added lstm-compress.Jul 13 2017 - added ulz 0.06.Jul 19 2017 - added paq8px_v77.Sep 24 2017 - added emma 1.23, paq8pxd_v32, paq8px_v96.Nov 23 2017 - added cmix v14.Dec 14 2017 - added lstm-compress (cmix).Jan 05 2018 - added phda9 1.0, cmve 0.2.0.Feb 01 2018 - moved lstm-compress to own section.Mar 28 2018 - added phda9 1.2.Apr 30 2018 - added phda9 1.3.May 20 2018 - added cmix v15, phda9 1.4.Aug 09 2018 - added phda9 1.5, paq8pxd_v47, glza 0.10.1, fixed cmve 0.2.0.Oct 11 2018 - added cmix v16.Oct 25 2018 - added phda9 1.6.Oct 26 2018 - typo.Feb 22 2019 - added phda9 1.7.Mar 27 2019 - added cmix v17.Apr 01 2019 - added lstm-compress v3.May 10 2019 - added nncp 2019-05-08.May 11 2019 - updated nncp 2019-05-08.Jul 09 2019 - added phda9 1.8.Jul 25 2019 - replaced links to encode.ru to encode.su throughout. Added paq8pxd_v48_bwt1, paq8pxd_v61.Aug 07 2019 - added cmix v18.Aug 10 2019 - added nakamichi 2019-Jul-01.Aug 12 2019 - added HP_2017_October.rar (2017 Hutter prize winner) under phda9.Nov 19 2019 - added nncp 2019-11-16.Mar 09 2020 - updated description of Hutter prize. This page is maintained by Matt Mahoney, mattmahoneyfl (at) gmail (dot) com.","link":"/p/1a2d/"},{"title":"记一下hexo_new的打開bug","text":"一个小bug 参考链接： https://blog.csdn.net/scimence/article/details/52816878 https://blog.csdn.net/deepfuture/article/details/83560384 https://blog.csdn.net/qq_40945965/article/details/86756380 1234567891011121314151617181920rem 更改文件名set name=%name: =-%set name=%name:.=-%set name=%name:·=-%set name=%name:_=-%set name=%name:：=-%set name=%name:《= %set name=%name:》=-%set name=%name:！=-%set name=%name:!=-%set name=%name:？=-%set name=%name:?=-%set name=%name:--=-%---（这里是运行 hexo n 的地方，改名字放最前面）---rem 定位到文章目录并开启文章cd source\\_postsstart explorer .start %name%.md 添加了几个set，不然打开错误。 6.15更新 增加了几个set 增加了打开explorer（资源管理器） 6.16更新 增加了多个标点符号set，增加了–变为- 把set移回最上面（起名下面）","link":"/p/d8a4/"},{"title":"李小龙-生活的艺术家-美约翰-里特-译刘军平-南海出版公司-2008","text":"首页显示摘要内容（替换成自己的） 正文内容（替换成自己的）","link":"/p/9711/"},{"title":"深蓝词库-v2-8-一款输入法词库转换软件","text":"一款开源免费的输入法词库转换程序 https://github.com/studyzy/imewlconverter 一款输入法词库转换软件，支持以下超过20种的输入法工具和词库： 搜狗拼音（文本词库、Bin格式备份词库和scel格式细胞词库） QQ拼音（文本词库和qpyd格式分类词库） 百度PC拼音（文本词库、bdict格式） 谷歌拼音 微软拼音2010 Win10微软拼音 拼音加加 必应输入法 紫光拼音（文本词库和uwl格式分类词库） 手心输入法 新浪拼音 libpinyin(Linux) Chinese-pyim(Linux) QQ五笔 搜狗五笔 小鸭五笔 极点五笔 Win10微软五笔 极点郑码 小小输入法（拼音、五笔、郑码、二笔） FIT输入法(Mac) MacOS自带简体拼音 Rime输入法(Linux中州韻、Windows小狼毫、Mac OS鼠鬚管) 雅虎奇摩输入法（注音） 灵格斯词库ld2 仓颉平台 自定义格式 手机端： QQ手机拼音 百度手机拼音（文本词库和bcd格式） 谷歌拼音输入法 该软件支持6种以上的输入法编码方法： 拼音（全拼、双拼） 五笔（五笔86、五笔98） 郑码 二笔（超强二笔，青松二笔等） 仓颉 注音 自定义 本程序支持批量转换（一次拖拽多个词库文件，或者按住Ctrl选择多个文件），支持命令行模式（在命令行下使用-?命令查看帮助），支持Windows、Linux、MacOS。 Windows：https://github.com/studyzy/imewlconverter/releases/download/v2.8.0/imewlconverter_Windows.zipMac/Linux：https://github.com/studyzy/imewlconverter/releases/download/v2.8.0/imewlconverter_Linux_Mac.tar.gz 蓝奏：Windows：https://alittlebear.lanzous.com/iWvM1dn8qmhMac/Linux：https://alittlebear.lanzous.com/iYKcUdn8qoj 有能力的请给作者一个star~[/md]","link":"/p/5dc1/"},{"title":"桥梁建造师2-Poly-Bridge-2-v1.06","text":"游戏名称：桥梁建造师2 英文名称：Poly Bridge 2 游戏类型：模拟经营SIM 游戏制作：Dry Cactus 游戏发行：Dry Cactus 游戏平台：PC 游戏语言：中文,英文,日文,其他 发售日期：2020年5月28日 【游戏介绍】 《桥梁建造师2（Poly Bridge 2）》是独立开发团队Dry Cactus旗下的作品，是一款益智模拟类游戏。玩家必须制作一座或多座桥来让车辆过河，看似简单但要让桥能支撑车辆的重量并不是一件容易的事。除此之外也会有其他要素会前来考验玩家，让这款游戏变得相当具挑战性，也进而吸引了不少奇才前来尝试，打造出相当荒谬或有趣的桥。 【关于这款游戏】备受赞誉的桥梁建设模拟游戏以更优秀的面貌强势回归啦！ 此次为您带来全新关卡、全新游戏机制、自定义物理引擎、创作室战役及更多内容！更长游戏时间，更多解谜乐趣，重新发现自己的工程创意！ Adrian Talens 也携完整长度的全新原声带回来啦！13 首崭新音轨，还有 18 首重制的《Poly Bridge》原作曲目，让您在游戏中放松，享受大家交口称赞的音乐！轻快熟悉的民谣吉他声响起，时长超过一个半小时，余音绕梁，三月不绝。 使用全新弹簧材料添加缓冲，一蹦一跳地冲向关卡胜利。您也可以用弹簧增强桥梁的弹性！ 我们这一次竭尽全力，为您打造了一款自定义物理引擎，专为桥梁模拟优化、微调。该引擎效果准确可预测，保证每个人都有相同的模拟结果，在同一个起跑线上竞争，更加公平、欢乐！ 在相互独立的全新通用和无坍塌排行榜上，与其他玩家一决雌雄！排行榜条目在提交时会进行审核认证，确保所有人都有公平的游戏体验。 和您心仪的主播一起建造桥梁！《Poly Bridge 2》Twitch 拓件可让观众与主播合作，前者设计并直接将桥梁提交给自己最爱的主播，后者可以在游戏中进行桥梁测试！欢迎访问 http://twitch.polybridge2.com 了解详情。 使用优化过的沙盘关卡编辑器，用全新物体、可自定义的坡道和超过二十种车辆，从头打造自己独特的关卡，并提交至游戏中的创作室！炫出自己的创意，打造自己的谜题，发现其他玩家的无尽不同关卡！ 在全新创作室战役中，编组自己的创作室关卡！您可以设计采用同一主题的完整战役世界，其中包括多个关卡和逐渐增加的难度。我们还加入了《Poly Bridge》原作的 100 余个关卡，供您在创作室的创作室战役中重温之前的体验！ 首个断裂点指示器：桥梁坍塌的时候，或许很难看清楚倒底哪里出现了问题。新工具首个断裂点指示器操作简单，能高亮显示第一个发生断裂的地方，让您轻松诊断并修复问题。 三向分离接点：吊桥和液压设备现可通过三向分离接点增强。您可以用多个可移动组件，在自己的桥梁中加入复杂精巧的移动设计。 更高分辨率的视频回放：录制高分辨率视频回放，给好友展示，或在社交媒体上分享自己搞笑和疯狂的失败，以及令人惊叹的成功。今天就与世界分享您的桥梁吧！ 最低配置: 操作系统: 10 处理器: 64-bit 内存: 4 GB RAM 显卡: 3D Capable Graphics Card DirectX 版本: 10 存储空间: 需要 500 MB 可用空间 steam链接：https://store.steampowered.com/app/1062160/Poly_Bridge_2/ 很好玩，很烧脑，并且很著名（应该把）的游戏，欢迎体验~~相信这些“难关”都会被挨踢男轻轻松松克服的 （蓝奏是二压，不推荐）蓝奏链接：[url=https://alittlebear.lanzous.com/b00tlunba]https://alittlebear.lanzous.com/b00tlunba[/url]蓝奏密码：1uog OneDrive直链： https://alilin-my.sharepoint.com/personal/alittlebear_yam_ink/_layouts/52/download.aspx?share=EdsEgTdkNSdBoOP0rkzcwIkBPoc2Udob74z-gHP_krWNxg https://alilin-my.sharepoint.com/personal/alittlebear_yam_ink/_layouts/52/download.aspx?share=EckdQROcPBdIom6KNiDKHJcByqVQ3uoA-Pa1PNet_Q8DbQ 奶牛链接：https://c-t.work/s/6855d881fff44c]https://c-t.work/s/6855d881fff44c取件码：ixnqax 文叔叔：https://ws28.cn/f/2pwlnq1bb1k]https://ws28.cn/f/2pwlnq1bb1k GoogleDrive：https://drive.google.com/file/d/1C8QaguMoGuHfOxX9PflajWAw3GIDulBl/view?usp=sharinghttps://drive.google.com/file/d/1ubplHdgR7d9pYys75e5yK4VdFfTCj22s/view?usp=sharing 备用网盘：https://wp.alittlebear.tk/f879/Poly.Bridge.2.7z.001.7zhttps://wp.alittlebear.tk/f879/Poly.Bridge.2.7z.002.7z 重要说明！用了.7z高压，650MB的游戏被我压缩到了137MB左右如果解压器不支持.7z，请务必换一个，比如说7z, Bandicam还有一定要把结尾的.7z删掉，原结尾：.7z.001现结尾：.7z.001.7z（蓝奏先解压zip再改）","link":"/p/f879/"},{"title":"滚动的天空-RollingSky-电脑版-官方简中","text":"滚动的天空是一款集合音乐律动与趣味性于一体的球类跑酷游戏。 关于这款游戏挑战你的速度与反应力的极限，超炫酷的3D特效场景，简单操作、控制小球、躲避障碍、征服世界！ 怎么玩？•您可以选择以体感的方式体验, 您也可以摇摆您的手把，做出左右闪避的动作、或是直接使用手把上的摇杆来控制小球的左右移动。•控制小球的方向，躲避障碍物的同时避免坠落！体验每个音乐故事！ 特色•操作简单又充满挑战性。•令人惊叹的3D场景和游戏特效。•丰富的游戏场景变化，每个游戏场景的挑战都是全新的体验。•随着游戏场景更换的多首乐曲，在挑战过程中享受音乐带来的震撼效果。 系统需求操作系统: Windows7处理器: Intel i5-6500 3.2 GHz内存: 1 GB RAM显卡: Intel® HD Graphics 530DirectX 版本: 11存储空间: 需要 1 GB 可用空间 下载蓝奏（刚好压缩到了99.17MB哈哈） https://alittlebear.lanzous.com/iGZ2sdew4ad","link":"/p/f146/"},{"title":"巨型水族馆-Megaquarium-v2-0-3","text":"关于这款游戏Big Pharma开发商推出的全新模拟经营游戏。大水族馆沿用经典管理大亨游戏的模式，并加入了水下世界的多彩内容！ 栩栩如生的模拟环境从几个水族箱和最基本的鱼类开始，您将把这里发展成为有大批管理人员、游客络绎不绝的大型水族馆。水族馆的物种多样，每一种都需要独特的照料方法 设计场馆展示内容水族馆提供近100种不同的海洋生物，包括观赏鱼、鲨鱼、甲壳动物、珊瑚、水母、其他无脊椎动物、甚至还有海龟！您在设计、装饰和布置水族箱时会发现：选择真的是太多了！ 雇用合适的管理人员不雇用合适的管理人员是发展不下去的。根据技能和未来的潜能来选择要雇用的员工。您能培养出一支多才多艺的管理员团队吗？或是培养出一批超级专才？您必须权衡每种策略的利弊，找出适合您水族馆运营方法。 研究新的动物和科技当游客欣赏您的展出内容时，您就能获得点数，您需要用点数来解锁新的物种和设备。不断提升和扩张您的水族馆，一步一步做大做强，致力于展出水族馆行业内独一无二的物种。 管理财务最新解锁的鱼类看起来很酷，但您是否考虑过它对水族馆财务状况的影响？引入新的物种可能需要新的管理员、昂贵的鱼食或补给才能维持运营。另外，最好的水族箱也是最贵的！作为馆长，您需要掌控吸引力和财务的平衡，才能取得成功。 接待游客！为游客提供座位、食物、饮料和卫生间，让其感到满意。在游客参观完毕时，指引他们进入礼品店，以增加您的利润！ 馆长学校在剧情模式中开始您的职业生涯，您将从中学习到有关水族馆设计和管理的所有知识。10关中的每一关都会要求您根据独特的游戏条件和目标去建设水族馆，在建设的同时您将学会新的功能和概念。 沙盒磨合在沙盒模式中，通过可自定义的设置和随机挑战生成器，您可以获得无限种可能的游戏体验！ 易学难精管理效率低下的水族馆并不难。但要面对终极挑战从而真正成功运营，您需要有非线性思维的能力和关注细节的习惯。您会根据食物种类、水质或其他因素将物种分组吗？您是否会使用泵将设备集中放在一个位置，还是将它们分散到不同区域中？您将如何优化馆內的布局，在便于游客观赏的同时，也方便管理人员的维护？ 您在大水族馆中所作出的每一个决定，都会产生影响。您选择的物种、过滤器、水族箱、管理员和场馆布置，都会造成微妙但深远的影响。尝试、调整、学习、改进，最重要的是，玩得开心！ 功能特点 10关「剧情」模式 提供完全自定义设置和随机挑战生成器的沙盒模式 97种具有独特生存需求的生物 超过100种的不同物件，包括过滤器、蛋白质分离器、硝酸盐反应器、冷却器、加热器、配食器、工具站、门、闸门、食品和饮料贩卖机、气球架、装饰品、涂料等等！ 决定管理员演说的主题、时间和频率，以进一步提高您的点数收入！ 礼品店和游客设施 完整的主题和装饰系统 系统需求 需要 64 位处理器和操作系统 操作系统: Windows 7 64 bit 处理器: Intel Core i5-4690 or AMD Ryzen 7 2700U 内存: 8 GB RAM 显卡: GeForce GTX 560 or AMD Radeon HD 7770 存储空间: 需要 1 GB 可用空间 下载主体：https://wp.alittlebear.tk/d3de/setup_megaquarium_v2.0.4g_(64bit)_(38792).exe DLC：https://wp.alittlebear.tk/d3de/setup_megaquarium_freshwater_frenzy_v2.0.4g_(64bit)_(38792).exe","link":"/p/d3de/"},{"title":"男生尿尿时如何防止液体溅到脚上？","text":"男生尿尿时如何防止液体溅到脚上？","link":"/p/678e/"},{"title":"Github开源便签管理程序 NotesMan v1.0.1 汉化","text":"Notes Man是用于Windows的简单且便携式的便笺管理应用程序。 特色 添加，查看注释，删除单个或多个注释。 为笔记创建单独的组。 在组之间轻松切换。 快速搜索以使用其标题搜索笔记。 查找选项以在笔记中搜索文本。 便携程序，无需安装。 Github地址：https://github.com/OnlyDeLtA/NotesMan 官方下载：https://github.com/OnlyDeLtA/NotesMan/releases/ 蓝奏：https://alittlebear.lanzous.com/ib7xpdcenmj 备用网盘：https://wp.alittlebear.tk/699e/NotesMan64.exe","link":"/p/699e/"},{"title":"死难塔-Tricky-Towers-v25.05.2018-简体中文-俄罗斯方块魔改游戏","text":"有了辉煌的战袍和魔力， 是时候建造一些Tricky塔了！ 在这片寓言的土地之上堆叠砖块， 您能否建造出最稳固的奇迹之塔？ 施展魔法支撑您建造的塔， 防御黑暗法术，以免遭破坏。 在这个疯狂的多人物理游戏中， 与您的朋友对战， 声名鹊起。 关于这款游戏最多可以有 4 位玩家进入本地多玩家游戏，也可与世界各地的玩家在线战斗。通过丰富的单人玩家练习训练技能，争取获得高分进入排行榜前列。 法术四处横飞，砖块不停倒塌下来，Tricky Towers 营造的混乱世界让您纵情享受游戏时光！ 特性： 疯狂的物理动作益智游戏 2-4 位玩家多人本地或在线游戏 3 种不同的多人模式：竞赛、生存和拼图 具有挑战性的单人练习 排行榜模式：对比您的堆叠成果 17 种强大的光明魔法和黑暗魔法 系统需求最低配置: 操作系统: Windows XP 处理器: 1.73 GHz Intel Pentium M or higher 内存: 1 GB RAM DirectX 版本: 10 网络: 宽带互联网连接 存储空间: 需要 400 MB 可用空间 附注事项: Controllers needed for local multiplayer 图片 下载蓝奏：https://alittlebear.lanzous.com/iat2Rdba49c 备用网盘：https://wp.alittlebear.tk/9dac/Tricky.Towers.v25.05.2018.zip","link":"/p/9dac/"},{"title":"《俄罗斯方块效应（Tetris-Effect）》简体中文免安装版","text":"游戏介绍《俄罗斯方块：效应（Tetris Effect）》是一款让人耳目一新的俄罗斯方块游戏，让人欲罢不能。在标准屏幕上游玩时，可自由调节分辨率，帧数不设上限。该作是玩家不断游玩俄罗斯方块的绝佳理由，音乐、背景、音效、特效，一切都尽善尽美。这是一场思维的挑战，感官的盛宴！ 游戏特色支持VR：在PC端或VR环境下均可游玩，使用Oculus Rift或HTC VIVE以及配套控制器(完全支持标准游戏手柄、Vive控制器、Oculus Remote和Oculus Touch控制器)体验沉浸式VR效果。 全新“安全区(Zone)”机制：进入“安全区”后，玩家可以暂停时间流逝(以及方块下落)，从而打破僵局，避免“游戏结束”，或是额外清空几栏方块以获取积分奖励。” 超过30个不同关卡：每个关卡都有独特的音乐、音效、画面风格和背景，并会根据您的游玩进度不断进化演变。 PC视觉效果增强以及更多：不锁定分辨率，帧数不设上限(启用垂直同步时最高200fps)，增加材质和颗粒效果选项，支持超高分辨率和超宽显示器，以及更多内容。 IGN评分评分：8.5 卓越 《俄罗斯方块：效应》为你熟悉的游戏赋予了前所未有的体验。 总评：虽然它的基本规则没有变，但它却将声音、颜色、震动等方面很好地融合在了一起，视觉效果绚丽无比堪称艺术品。它还拥有一系列的任务，越往后难度越高；每一关都拥有风格不同的画面、配乐、甚至规则，有的关卡里玩家仿佛是在水下，还能看到炫光效果构成的鲸鱼在附近游动，还有的关卡是沙漠风格，甚至是月面场景。特效感十足。 游戏说明《俄罗斯方块》其如梦似幻的场景相信看过的玩家难以忘怀，毕竟如何演绎《俄罗斯方块》这一传奇级别的经典IP是很有压力的。 而水口哲也表示本作创新性的引入现实虚幻化场景，游戏的3D世界将根据你的玩法作出不同的反应，游戏的音乐，背景，声效，特效都将同步改变，将带给玩家完全没有体验过的新奇俄罗斯方块玩法。 用一个字概括本作的独特个性，就是“旅”，如何将简单枯燥的方块堆积演化到更吸引玩家的效果，本作将拥有30个美轮美奂的“旅”场景，值得期待，水口哲也本人更推荐PSVR版本，更加适合本作的意境。 配置要求​ 最低配置 推荐配置 操作系统 Windows 7/8/10（64位） Windows 7/8/10（64位） CPU Intel i3-4340 Intel i5-4590（VR环境需要） 内存 4 GB内存 8 GB RAM 显卡 NVIDIA GTX 750 Ti同等或更高性能产品 NVIDIA GTX 970同等性能产品（VR环境需要） 存储空间 5 GB可用存储空间 5 GB可用存储空间 图片 下载iso镜像安装版（zip压缩了一下）：https://wp.alittlebear.tk/3633/Tetris.Effect.zip免安装版：https://wp.alittlebear.tk/3633/Tetris-Effect.zip","link":"/p/3633/"},{"title":"俄罗斯方块元素-Tetris-Elements","text":"俄罗斯方块元素是俄罗斯方块的一个版本，包含不同的游戏模式。 玩了一会，很好玩，十分推荐，英文跟中文感觉没啥分别，都是俄罗斯方块嘛~哈哈 蓝奏：https://alittlebear.lanzous.com/iUr6Ydb9yif 备用网盘：https://wp.alittlebear.tk/9b1e/Tetris_Element.zip","link":"/p/9b1e/"},{"title":"《甘蔗俄罗斯方块》V1.12 简体中文免安装版","text":"游戏介绍《甘蔗俄罗斯方块》是由甘蔗网络制作的一款休闲益智类游戏，俄罗斯方块对我们每个人都有着深刻的记忆，她是非常经典耐玩的小游戏，简单的几种方块却有着变化多端的游戏乐趣。 游戏信息游戏名称：甘甘蔗俄罗斯方块 游戏类型：休闲益智类游戏 游戏制作：甘蔗网络 游戏发行：甘蔗网络 游戏平台：PC 发售时间：2010 游戏特色1、人性化的游戏设计，操作简单方便; 2、每次开始可以选择关卡，选择适合您的游戏难度; 3、排行榜功能; 4、充满乐趣的背景音乐和声音效果 系统最低要求PII 400Mhz 或者更高128 MB 内存20M 空闲磁盘空间显卡支持DirectDraw声卡兼容DirectSound显示器支持800*600分辨率或者更高 图片 下载蓝奏：https://alittlebear.lanzous.com/i0oqrdb9tob 备用网盘：https://wp.alittlebear.tk/d3c7/ggzelsfk.CHS.Green.zip","link":"/p/d3c7/"},{"title":"《俄罗斯方块(Triptych)》v1.10-英文免安装版","text":"游戏介绍《俄罗斯方块(Triptych)》是一款消除类游戏，不过比经典俄罗斯方块游戏还好玩！游戏的玩法和原版的差不多，只是画面和音乐上有很大的变化，喜欢的玩家不要错过。 游戏规则1、一个用于摆放小型正方形的平面虚拟场地，其标准大小：行宽为10，列高为20，以每个小正方形为单位。2、一组由4个小型正方形组成的规则图形，英文称为Tetromino，中文通称为方块共有7种，分别以S、Z、L、J、I、O、T这7个字母的形状来命名。 I：一次最多消除四层 J(左右)：最多消除三层，或消除二层 L：最多消除三层，或消除二层 O：消除一至二层 S(左右)：最多二层，容易造成孔洞 Z (左右)：最多二层，容易造成孔洞 T：最多二层 (1)部分游戏有单格方块， 可以穿透固定的方块到达最下层空位。其他的改版中出现更多特别的造型。 方块会从区域上方开始缓慢继续落下。 (2)玩家可以做的操作有：以90度为单位旋转方块，以格子为单位左右移动方块，让方块加速落下。 (3)方块移到区域最下方或是着地到其他方块上无法移动时，就会固定在该处，而新的方块出现在区域上方开始落下。 (4)当区域中某一列横向格子全部由方块填满，则该列会消失并成为玩家的得分。同时删除的列数越多，得分指数上升。 (5)当固定的方块堆到区域最上方而无法消除层数时，则游戏结束。 (6)一般来说，游戏还会提示下一个要落下的方块，熟练的玩家会计算到下一个方块，评估要如何进行。由于游戏能不断进行下去对商业用游戏不太理想，所以一般还会随着游戏的进行而加速提高难度。 3、通过设计者预先设置的随机发生器不断地输出单个方块到场地顶部，以一定的规则进行移动、旋转、下落和摆放，锁定并填充到场地中。每次摆放如果将场地的一行或多行完全填满，则组成这些行的所有小正方形将被消除，并且以此来换取一定的积分或者其他形式的奖励。而未被消除的方块会一直累积，并对后来的方块摆放造成各种影响。 4、如果未被消除的方块堆放的高度超过场地所规定的最大高度(并不一定是20或者玩家所能见到的高度)，则游戏结束。 具体到每一款不同的游戏，其中的细节规则都可能有千差万别，但是以上的基本规则是相同的。 图片 下载蓝奏：https://alittlebear.lanzous.com/ihqXddb9ryj 备用网盘：https://wp.alittlebear.tk/b64d/Triptych.EN.Green.zip","link":"/p/b64d/"},{"title":"全局鼠标手势软件 MouseInc v2.10.18","text":"我们知道，国产浏览器一般都支持鼠标手势功能，合理利用鼠标手势，能给我们带来非常便捷的操作体验，比如“↓→”手势可以快捷关闭网页。但是很可惜的是，谷歌自家浏览器却没有鼠标手势功能，一般需要安装插件才能实现。 现在，有一款完全免费的全局鼠标手势软件，不仅仅能在浏览器中使用，而且可以在Windows系统全局里使用。它就是耍下开发的MouseInc——一款小巧好用的全局鼠标手势软件。 MouseInc非常小巧，压缩后只有200KB左右，小小身材，大大能量。作者承诺MouseInc永久免费，无广告，不扫描硬盘，不上传隐私。便携化设计，单执行文件，无运行库依赖，不需要安装就能运行。首次运行时会在当前目录释放MouseInc.json配置文件（注意保证目录可写哦）。 功能介绍1、鼠标手势：其实就是按下鼠标右键不放开，然后开始移动就行了，到放开的时候会根据画的手势执行一组动作。 功能非常强大，比如我这里选中了文字然后画一个S，就可以直接打开浏览器搜索关键词。 想修改hosts？不必那么麻烦，只需要画一个h就能迅速打开hosts文件！ 2、高质量截图：可以保留窗口阴影，半透明（包括Win7和Win10的毛玻璃特效）。 可以保留鼠标指针形状，可以加入透明网格特效。 按下Ctrl+PrtSc就可以截下一张下面的图。 3、贴图：可以把截图半透明置顶显示在屏幕上，方便参考内容或对比。鼠标手势画一个四边形（下右上左）即可体验。 4、按键回显：开启以后可以屏幕上显示您所有的键盘按键，方便您在录制视频包含按键信息。 5、边缘滚动：鼠标在屏幕四个边滚动时触发的功能。比如这里在屏幕左边缘滚动就可以对音量进行调节。 6、复制增强：选中文字快速按下两次Ctrl+C后，会弹出一个快捷操作菜单，可以进行搜索等。 7、还有更多：还有一些其它功能我就不一一截图了，欢迎亲自体验。 常见问题 安全软件提示监控键盘？事实上MouseInc确实监控了键盘和鼠标，这是软件功能所必须的。如果信任我，加入白名单即可。如果信不过，那就不要使用。 软件运行后右键无法使用？请确保使用管理员权限启动。有时候安全软件即使不报毒，也阻止了MouseInc正常运行，具体操作自行研究。 设置了开机启动但偶尔开机不启动？开机启动实际由系统完成，不启动原因未知，可以尝试用上面的办法手动设置启动。更大的可能是被安全软件拦截，请自行解决。 打开设置后提示拒绝访问？暂时不支持IE浏览器，推荐安装Chrome或Firefox浏览器。 没有网络怎么设置？不好意思，那就只能手动编辑MouseInc.json文件了。如果你会开发，还可以在本地用nodejs运行设置界面。 如何导入导出设置？所有设置都储存在MouseInc.json文件中，只需要备份，覆盖这个文件就可以导出导入设置了。 作者说 个人作者没有能力和精力解决报毒的问题，只能承诺永无任何恶意行为。 杀软报毒，如果信任我，请加入白名单。如果信不过，就不要使用，不要找我反馈！！！ 更新日志docs.shuax.com/MouseInc/#/update 继续优化多显示器支持 Alt拖拽移动窗口修改为中键 下载官网：https://shuax.com/project/mouseinc/ 官网下载：https://shuax.com/mi 蓝奏：https://alittlebear.lanzous.com/iEc3Bdajd0f","link":"/p/ce22/"},{"title":"用喜欢的方式吃一生：一份美食索引","text":"⚠️一份忠告：睡前不要读！睡前不要读！睡前不要读！ 有一本书叫「爱就是在一起，吃好多好多顿饭」，对于这句话，我深以为然。萧伯纳曾言：“对食物的爱是世上最诚实的爱。”美食家蔡澜也说“我从来不“养生”，而是先把心养好，而养好心，最简单的办法就是吃很多你喜欢吃的东西，保持精神抖擞！”就连知名哲学家银时老师都说“我已经决定吃喜欢的东西，过短命的人生了！” 食物能带来不仅仅是味觉上的满足，还会给人很多慰藉，至少对我是这样的，压力特别大的时候喜欢在B站看美食UP主，仅仅是看着就能被抚慰到。食物也会和记忆绑在一起。我考研的那一年数学特别难，从考场出来的时候心情很低落，在回去路上看到路边卖煎饼果子的，鬼使神差的就走了过去，吃到的那一刻突然有一种奇异的满足和平静，暂时忘记了考试的不顺利。从此以后，每每再吃到煎饼果子的时候，我都会回忆起那个时刻，回忆起当时的心境。 人以食为天，但温饱不愁的现在，食物承载了更多的意义。这份书单是我整理的一份美食索引，兼具文学性和操作性，读来轻松又治愈。 至味在人间：贴一身五湖四海的膘 作者：陈晓卿 出品方：理想国 说起美食纪录片，一定绕不开陈晓卿，他是国内最会吃，也最会拍食物的导演，最出名的作品就是「舌尖上的中国」了，离开央视后，执导拍摄的「风味人间」也备受好评，在豆瓣收获了9.1的高分，相信看过的都能体会到，他的纪录片里拍摄、剪辑、配乐，文案都是一流。 早在十几年前，陈晓卿就开始写美食专栏，这本书是他这些年来专栏的精选结集。不管是吃的东西还是文字风格，都是很「接地气」的，描述的都是平民食物，字里行间里除了满满的烟火气息，还存着有意无意的乡愁。各种地方的民俗食物，完全可以当索引在用，描写家乡食物的时候得到了本地人（我）的认可。虽然文字很接地气，他的语言很具个人特色，又不失幽默，把馋虫勾出来的时候还时不时能让我「哈哈哈笑死我了」，还频频有金句冒出，比如「菜单是人类进餐的电动扶梯」、「赠人玫瑰酱菜，手留鱼香肉丝」、「无边菜苔萧萧下，不尽鸡汤滚滚开」😂，很有趣，值得一读。 描述内蒙古人吃羊尾巴： 整只羊在锅里煮，主人拎着刀过去，挑出羊尾，环视一圈，然后向最尊贵的客人走来，摊开他的掌心，那是颤巍巍白花花一坨油脂！客人受宠若惊地站起，把袖子卷到肘部，看着主人的蒙古刀转着圈，把羊油削成薄片。细长、几乎透明的油脂片粘贴在客人小臂的内侧，由着你从手掌心开始吸，一直吸到右臂高高举起。饱满的膏腴，稍加咀嚼便汁水奔涌，滑溜溜朝喉头而去。这时候最好来一口草原白，高度的，一大口，四周的喧嚣像被拉上绒布窗帘，瞬间万籁寂静，你只需天人合一地向后方倒下。 一切不能拌饭的菜，都是耍流氓： 关于菜汤拌米饭这件事，我讲三点。第一，主食崇拜和祖先崇拜一样，是中华民族的传统；第二，只有小麦和水稻才配叫主食，其他只配叫歧视性的名称：杂粮；第三，孔子云，菜汤拌饭鼎锅刮烂，可见其美味。最后总结下观点：一切不能拌饭的菜，都是耍流氓。（赞同！🙋） 这个胖子好有趣： 我甚至突然清晰地想起1977年的那个寒假，大雪纷飞中，姑父带我去街上第一次“克（方言，音kei，意为吃）啥”的情形。那时候，我刚刚下了决心，要好好读书，将来做一个科学家，甚至为此蹲了一班。但一碗啥汤落肚，顿时让我觉得，其实……当一个宿县人不用做科学家，也怪不错的……娘的，一碗汤让国家少了一个钱学森。(xswl😂)尽管不属兔，但我是一个萝卜爱好者。我喜欢北京天源酱园的甜辣干、萧山钱江牌萝卜干、扬州四美酱菜的萝卜头，也喜欢东北的萝卜炖腔骨、江西的大锅萝卜片、广东的萝卜煲牛腩以及南点中的萝卜丝饼……我甚至因为萝卜而喜欢上了好莱坞的朱莉娅·萝卜丝——那个美丽的长着一张气吞山河大嘴的美国女青年（萝卜丝可还行哈哈哈哈！）。我能像灰太狼一样非常愉快地面对喜羊羊美羊羊暖羊羊沸羊羊……不管是喀什烤羊腿、西安水盆羊肉、吴忠冷手抓、西宁开锅肉，还是遵义羊肉粉、海口东山羊、宁波白切羊肉、梅州羊肉边炉，我都一概……哦天哪！我差点儿用“视同己出”这样的词儿，来表达对他们同样的喜欢程度。 皮归皮，美食专家不是白来的：他写“过年肉下白菜苔”🥬： 具体的做法应当是穷人家发明的：过年肉（没有烟熏过的白腊肉）过于肥腻而且珍贵，先用土鸡汤把数片腊肉煮沸，油腻便均匀地解了一半。上桌后，底火照常汤滚依旧，此时再汆入新鲜的白菜苔，—汤味迅速浸入菜苔，取两片入口，你会立刻发现，青菜的清香与腊肉的醇香以及鸡汤的鲜香齐齐地集中在筷箸的顶端，青菜和腊肉鸡汤已经由外及内地搞好了“三结合”。 说起羊汤🤤： 比如说羊汤。各地的羊汤前期程序几乎相同，都是用羊骨架长时间慢炖，出浓汤后，因为所加羊肉、配菜以及作料的差别，而催生了橘枳之变。甘肃武威羊汤有名，是用枸杞香菇炖的，羊肉还是块状；到了山东单县，羊肉则切成大片汆制了，肉熟而不烂；山西运城的羊汤里喜欢放粉条、羊血豆腐和白豆腐，略苦回甜；河南平顶山则在羊汤里加冬瓜，是另一种鲜美；四川简阳羊肉汤索性做成火锅了，羊肉羊杂一锅烩，捞出蘸海椒或青椒碟子吃…… 他的文字里不光饱含了对食物的热爱，还清清淡淡的透露出一种乡愁，就像他说的“每个人的肠胃实际上都有一扇门，而钥匙正是童年时期父母长辈给你的食物编码。无论你漂泊到哪里，或许那扇门早已残破不堪，但门上的密码锁仍然紧闭着，等待你童年味觉想象的唤醒。” 我喜欢这本书，就是因为接地气，喜欢平民的、简单的食物，就像厨艺选秀里厨师们比的难分高下的时候，考官或许会让他们比个蛋炒饭——在电影《食神》里面，也是最简单的蛋炒饭打败了后脑和熊掌，让刻薄的女评审边吃边流泪。享受食物带来最简单最真诚的感动。 今天也要好好吃饭：热爱生活，从好好吃饭开始 作者：蔡澜 说蔡澜是吃喝玩乐的行家，这点不会有人反对吧？这本书其实是没有什么文学性可言的，写的比较随意但很有烟火气息，还是先生的微博更好看，书里呢也有一些对北方食物的偏见和误解（来自一个北方人的抗议），书名很俗套又实在，权当增广见闻的读物来看，这本书里记录了各地美食感受和一些日常食材的分享，不止讲各种食物，写口味如何，还讲食物背后的文化传统，向我们描述了很多风土人情和人生体味，一辈子太短了，好好吃饭才是头等大事，行走在这热闹的人世间，要感受柴米油盐酱醋茶带来的美好才不虚此行呀。 私心想推荐这本书，是觉得先生是个有趣的人，有趣的人，自然说的话也是有趣的，我在看的时候时不时有隔空对上话的感觉，还是挺好玩的。比如原来蔡澜喝的也是立顿茶包🌝！他说“一直喝太好的茶，就不能随街坐下来喝普通的茶，人生减少许多乐趣。茶是平民的饮品，我是平民，这一点，我一直没有忘记。”原来他也是「面痴」（很喜欢吃面🍜），“’一年三百六十五日，天天给你吃面好不好？’妈妈笑着问。我很严肃地大力点头。”我妈妈也问过同样的话呢！ 最后，先生说，“爱吃的人才是爱生活的人，只有爱生活才能有快乐。”一个人也要好好吃饭呀！ 鱼翅与花椒：人间烟火，异国食客 作者：【英】扶霞·邓洛普 这本书是一个曾经留学川大的英国人写的，陈晓卿评价说是外国人写中国食物的书籍里极为鲜活有趣和精准的，我还是认同这个评价的，书里后面谈论到zz确实让人反感，虽然极力隐藏，但还是有作为英国人的傲慢在，可以选择跳过这部分，整体来讲还是易读性很强的，翻译的也地道。这本书里能证实一个观点，食物是和文化密不可分的，一定程度上食物代表着文化归属和身份认同。 作者一开始从英国来的时候，本能的抗拒中国食物，越想要严格地坚持自己故国的规矩，这样比较安全，因为可能“一筷子下肚，你就不可避免地失去自己的文化归属、动摇最根本的身份认同”。 她在成都学做菜，这一部分写的有滋有味又很地道： 成都就是个特别温柔的城市了。这里的生活不是整天同天气与陡峭的山坡做斗争，而是一场甜蜜懒散的美梦。菜里的辣椒也放得没那么“暴力”，只是要唤醒和刺激味觉，让它活跃起来，去感知别的丰富滋味。调味还有点暗暗的甜，加上豆制品发酵后的腥香，或者一点点芳醇的陈醋酸味，勾引诱惑着你，让你满心欢喜。成都的川菜，完全没有外国人成见中的那些原始和粗野，而是一点一点地挑逗着你，曲径通幽，去往极乐之旅。 她用「在中国的故乡」来描述成都，有朋友评论到「我想给扶霞发成都市户口😂」： 辣子鸡：外焦里嫩的爆炒鸡块，埋在一堆爆得焦香的辣椒之中，翻找也是种乐趣；鱼香茄饼：肥厚多汁的茄子切片，夹着碎肉入油锅炸熟，配上丰富醇厚的酸甜酱汁；回锅肉：二刀肉（后腿近臀部处）整块煮好，切片后再配蒜苗爆炒，调味用的是豆瓣酱，那美味难以形容……其实辣椒无处不在：卤鸭心肝的蘸料（干辣椒面）、鸡丝上鲜艳欲滴的红油、猪肉和茄子的酱料，整个的、切碎的、红色的、绿色的、新鲜的、晒干的、捶成粉的、泡过的、浸了油的，种类花样数也数不清。但是，成都菜绝对不像中国其他地区的人们面带恐惧地说起的那么辣。真要尝尝那魔鬼一样的“变态辣”，你得坐好几个小时的大巴，来到当时四川的第二大城市、长江边的大都会重庆。 在她的眼里，不同地方的食物拥有其独一无二的气质，川菜的辣带着一丝丝甜，就像悠闲的四川人，总是带着甜甜的体贴；湘菜直接又毫无妥协余地，就跟那里培养出来的领袖人物一样；扬州菜则是太平盛世的食物，温暖而抚慰人心。 这样看起来，可能是一个被同化成中国人的英国人？不过书里透露的些些傲慢还是能被捕捉到： 那些日子，我在中国也有烦恼，其中一件就是我见到的每个人说起“西餐”时态度都相当粗暴无礼。这边厢，我温良恭俭让，拿出外交礼仪的架势，尽量去看他们残忍屠杀生灵的光明面，迎合他们对软骨内脏的喜好，强迫自己吃下猪脑花；结果呢，没有人，真的是没有一个人，用同样的礼貌来对待我。 不过说到底，认同了食物，一定程度上也是认同了文化吧： 我妈多年来循循善诱、润物无声地苦心为我培养起来的英式餐桌礼仪，被中国的那些年毁得一干二净。在中国吃饭，我会直接把骨头吐出来，会把饭碗举到嘴边，会和所有人一起心满意足地咂吧嘴。“你都算半个中国人了。”中国的朋友都这么对我说。我瞪圆自己那双白种人特征显著的眼睛看着他们，却也不得不承认，我心中的那个自己，再也不可能是个百分之百的英国人了。我甚至都不确定，自己到底还知不知道这两种文化的界限在哪里。 米，面，鱼 ： 美国人写的「舌尖上的日本」 作者：【美】米，面，鱼 出品方：理想国 理想国出品，光是这个背书，够不够说服你去看？日本人对待食物的态度无疑是全世界最虔诚的，他们有无数的职人，料理专家，一辈子只做好这一件事，深夜食堂、寿司之神等影视作品也让这一观点更加深入人心。日本米其林餐厅数量居世界之首，匠心独运的小店更是数不胜数，这本书是美国一位美食作家走访走访东京、大阪、京都、福冈、广岛、北海道、能登七座日本饮食重镇，品尝每个城市的代表性食物所写的观察和感受，看到「便利店🏪八大惊奇」忍不住想「这都有？」，可太全了，但因为文案太好，说一句日本美食索引地图我都觉得辜负，索性就叫「舌尖上的日本」吧。 看的时候一直忍不住赞叹作者太会了，真不愧是美食作家。比如他说日本俩料理之音： 这些声响并非来自一般的厨房，或是手忙脚乱的餐厅后场——至少和你习以为常的声音都不尽相同。你听到的，不是排队等着上菜的服务人员询问肋排何时烤好；不是炸炉内被炸至酥脆的结球马铃薯丝发出的嗞嗞响声；不是将酱汁以汤匙背面抹过盘面的声音；亦不是厨师用镊子夹起另一精选的香草，妥置在餐盘上的细微声响。这些声音，是来自每晚花好几个钟头不断用绒布巾擦拭硬木纹理的摩擦声，只为了去除为顾客提供寿司时积累在扁柏吧台上的细微鱼油污渍；是指间掠过绿色咖啡生豆的沙沙声响，如一阵轻风拂林，好在烘焙前挑出有瑕疵的豆子；是挥动着手工扇子，调控备长炭火力的咻咻声响；抑或是以擦亮的木头捶打西红柿的细柔果肉所发出的低音；或是将细长的刀具划穿海鳗鱼身时演出的静谧节奏。 他描述食物，看得我食指大动： 日本也有以肥美多汁的猪五花肉蘸上薄薄面包粉油炸，佐以大量浓稠的伍斯特酱和些微呛辣的芥末后端上桌的菜色。大锅煮的咖喱里则加入了苹果、洋葱和厚实的肉块炖上几小时甚至几天，锅里尽是一片深邃沉浊，好似一场突如其来的夏日风暴。此外还有由碳水化合物、高丽菜和猪油形成的巨大块御好烧，比起摆在日式榻榻米之上，这道菜摆在大麻瘾君子的咖啡桌上还更显协调。 鲜红鲔鱼块配上成堆新鲜芥末泥；圆滚滚的海葡萄在入口后有如鱼子酱在口中迸裂，刺激着上颚；或是用薄脆的海苔包住一粒粒晶莹剔透的鲑鱼卵。…鲔鱼在他的巧手之下，变成了拌炒版的炭烧刺身，在烤过的鱼肉上淋一些酸橘醋，再拌以大量青葱。鱼头以猛火烤至颊肉微焦、鱼皮嗞嗞作响，而鱼眼则化至适度的浓稠状，方便用筷子夹食。就连海味满盈、呈现橘色舌状的海胆，也在阿丰先生的喷火枪下，被赋予了如烤布蕾一般的口感。要知道，由于海胆的甜味极为淡雅，随便加热烹调海胆在料理界常被视为邪门歪道。 去日本旅行或许可以带上这本书。 咬一口昭和回忆：食物是记忆的载体 作者：【日】森下典子 出品方：世纪文景 这是一本很典型的日式文学书，作者森下典子是一名日本生活美学家，她在这本书里记录了21道昭和味平民美食，是家家都能做的淳朴食物，正统派蛋包饭、番味噌拉面、爱神水羊羹、包着一大颗栗子的馒头、嚼起来“啪嚓啪嚓”的松茸—、世上很好吃的沙拉—、烧卖便当，太会写了，每一道美食看了都会发出「好想吃」的感叹，丝毫不怀疑就算是最普通的清水面在她笔下也会变得让人很想吃。森下典子温柔细腻笔触，让这本书变得温暖熨帖，同时又很幽默，很多惊艳又好玩的比喻让读书的时候变得有画面起来，比如把咸鱼干说成「黑道男子危险又性感的诱惑」「舞台剧中反串女角的男演员抛出的媚眼」，蒜头加味噌拉面是「命运的邂逅」。虽然不是一本菜谱，不过可操作性很好，想把这本书称作是「纸质版小森林」。补充：插画也是作者画的！ 没有奢华的文字，但是温暖又美好，她写普普通通的长崎蛋糕： 牛奶和长崎蜂蜜蛋糕真的很对味。吃长崎蜂蜜蛋糕，喝牛奶，牛奶深深渗进毛毛的海绵中，自然的芳香甘甜也随之而生。乳脂的温和轻柔地包住长崎蜂蜜蛋糕，让人有种尖锐的部分被抚平，仿佛襁褓中的婴孩饱受呵护的感觉。我将蛋糕塞进嘴里，感受到湿湿黏黏的甘甜，蛋的风味也穿过鼻腔，让我心神荡漾。我默默地动嘴咀嚼，吞了下去，并感到花儿在我的脑袋里绽放开来。 当看她说写的不是美食，而是对身边食物回忆时，我产生了强烈的共鸣，比如鸡蛋呱嗒，是每周六爸爸带我去他学校的时候，一定会做的早餐；比如打卤面，是每年爸爸给我的「生日限定」 在我想吃什么东西的瞬间，经常出现不可思议的感觉：接触到食物的口味和气味时，过去在某个地方感觉到的快乐和悲伤，就会流贯全身，当接触这种肉体记忆的时候，我会觉得身为“生物”的自己很可爱。把食物放进口中的瞬间，人类一定会连那一天、那个时刻的心情和印象，一起吃下去 把这些东西和食物一起放入口中，在身体深处累积，某天遇上相同或类似的味道时，就会像拉着书签的绳子翻开书页一般，鲜明地苏醒。 食物是记忆的载体，能给我们慰藉的，不会是山珍海味、「高档美食」，反而是平平常常总会出现在我们餐桌上的平民食物，或许并没有很美味，也或许没有卖相，但是和我们有联结的，这对我来说才是最珍贵的食物吧。 饮膳札记:美味与优雅并存的食谱 这本书看起来很像食谱，每一篇的题目也像是食谱，比如潮州鱼翅」、「清炒虾仁」、「台湾肉粽」、「炒米粉」等，但作者强调是「一本用食谱型式去包装的散文」，那我们姑且就叫散文好了，（不过我觉得作为一本食谱来看操作性已经足够了）。 作者林文月最为人知的身份应该是作为翻译，但其实她的文字清新自然，毫无匠气，娓娓道来，读起来很舒服，作为一本食谱文学性爆表了，食谱写的又清楚又不枯燥，又是一本光看就感觉饥肠辘辘的书。 她的文章里不止是在介绍食物，更多的是和长辈师友的回忆。比如她说红烧蹄膀，只记得女主人那一道不小心烧糊了的蹄髈的美味，以及那一晚师生不醉无归的情谊兴致，其他的全都忘却了。 美和终于有些羞赧地端出一碗红烧蹄髈来，一面忙着解释：“这一道菜本来是不想拿出来的，因为不小心烧糊了。真是不好意思。”那个蹄髈，盛放在一个蓝白瓷碗内，油亮鲜香，只是底下靠锅的部分焦糊脱皮，却另有一种焦香诱人。于是，以那软腻的蹄髈佐酒，十箸齐下，酒兴与谈兴更浓，不一会儿，竟也碗底朝天。 她写卤蛋，回忆到的却是童年观察母亲绞脸的景象： 这样浸泡出来的卤蛋，要对半剖开，才能显现其特色。但因为蛋心未凝固（与溏心皮蛋类似），所以剖切之际宜取棉线而不宜用刀，否则蛋黄容易沾黏于刀背上，致形体损坏。用棉线剖分水晶卤蛋的方法，颇饶原始趣味。用棉线剖开蛋的动作，有些像记忆中妇人为母亲绞脸的手势。也是取一根较韧的棉线，一头咬在齿间，左手小心捧取仍然颇软的卤蛋，右手捉住线的另一头，瞄准 蛋的中央部位，将线在那位置上面环绕一圈，轻轻一拉，蛋就在左手掌上整齐完好地分为两半了。每回我做这个动作的时候，脑际总是一次又一次地浮现童年观察母亲绞脸的景象，遂有一种说不出的甜蜜的感觉荡漾着。 再一次印证那句话，“食物是记忆的载体”啊，我们吃的不是食物，而是回忆罢了。 感谢食物日剧里面开动前都要说一句「いただきます」（我要开动了），这种对食物的虔诚和尊重，让人觉得可爱。谢谢食物，谢谢你们好好生长结出了果实，谢谢你用自己的生命，来延续我的生命，谢谢你们让我有一顿饱饭可食，我认真地对待每一餐，就像我认真地感谢你们的一生。感谢食物，静下心来享受食物的本味吧。今天也要好好吃饭哦！ 转载：https://sspai.com/post/60276","link":"/p/1359/"},{"title":"hexo懒人必备：自动创建文章+自动部署博客","text":"懒人必备，很简单，但是花了大半天的美好时光 记得修改代码中的路径 C:cd /d %userprofile%\\Desktop\\myblog 这个%userprofile%对应的目录是：C:\\Users\\xxx 相关指令1234567891011@echo off #不显示运行代码chcp 65001 #修改cmd窗口字符编码为UTF-8（由于中文乱码，所以添加了 chcp 65001。）set /p aaaa=bbbb #“aaaa”是变量名，“bbbb”是输入文字；指令是显示bbbb，等待输入，然后设置变量aaaa为（你输入的东西）%aaaa% #这个就是调用变量了，比如说上面输入了123，那么第一个生成指令就是hexo new 123cd xxx #我也不好形容，应该就是移动cmd到xxx目录（hiahiahia），跟你直接在博客目录shift+右键cmd一个效果#（下面我也不知道为啥要加。。。hh）hexo clean #清理博客public目录（一般不用）hexo g #生成博客public目录（部署之前都最好来一次）hexo s #本地部署博客（localhost:4000这个，调试啥可以用这个边看边弄）hexo d #部署博客到云端hexo a &amp;&amp; hexo b #就是先运行hexo a，运行完了再hexo b，懒人必学，比如说不用等hexo g半天之后再hexo d） 首先是自动生成文章（仅创建）123456@echo offchcp 65001C:cd %userprofile%\\Desktop\\myblogset /p name=起个名：hexo new %name% 自动生成文章加强版（创建后任意键直接打开）12345678910111213141516171819202122@echo offrem 解决中文乱码chcp 65001 set /p name=起个名： rem 定位到hexo源码地址C:cd /d %userprofile%\\Desktop\\myblog rem 运行hexo n 文件名start /min cmd /c &quot;hexo.cmd n %name%&quot; rem 等待hexo n完成choice /t 3 /d y /n &gt;nul echo 按任意键打开md（请等待hexo创建完）pause rem 定位到文章目录并开启文章cd source\\_postsstart %name%.md 因为我用了abbrlink，最好编辑之前hexo g一下 自动生成文章威力加强版（创建并生成后任意键直接打开）12345678910111213141516171819202122232425@echo offrem 解决中文乱码chcp 65001set /p name=起个名：rem 定位到hexo源码地址C:cd /d %userprofile%\\Desktop\\myblogrem 运行hexo n 文件名start /min cmd /c &quot;hexo.cmd n %name%&quot;rem 我需要hexo g来提前生成文章绝对路径start /min cmd /c &quot;hexo.cmd g&quot;rem 等待hexo n完成choice /t 3 /d y /n &gt;nul echo 按任意键打开md（请等待hexo创建完）pauserem 定位到文章目录并开启文章cd source\\_postsstart %name%.md 然后是自动部署博客（g+d）1234@echo offC:cd C:\\xxx\\Desktop\\mybloghexo g &amp;&amp; hexo d 自动部署博客加强版（c+g+d）1234@echo offC:cd C:\\xxx\\Desktop\\mybloghexo clean &amp;&amp; hexo g &amp;&amp; hexo d 自动部署博客魔改本地版（g+s）1234@echo offC:cd C:\\Users\\josep\\Desktop\\mybloghexo g -f &amp;&amp; hexo s 有需要的可以自己改。。 后记第一次发原创技术。。。很简单，学习的过程中学到了不少。 比如说代码中的：hexo.cmd 我明明没有这个文件为啥还能运行，因为hexo安装成功后npm路径下默认有hexo.cmd 和hexo.ps1两个脚本文件。","link":"/p/4327/"},{"title":"为什么有的人一定要午睡？","text":"现在中国大城市越来越多的白领有午睡的习惯，如果中午不休息，下午将会是一场“噩梦”。然而，午睡并不通行全世界。 目前保留午休习惯的国家大多位于低纬度地区。地中海沿岸的南欧国家西班牙、意大利、希腊都有着悠久的午休传统，会保证 3 个小时的充足午休时间，4 点以后才会开始下午的工作。当然，近年来经济不景气，西班牙已经在酝酿取消午休这一神圣“事业”了。 西班牙首届午睡国际竞标赛现场，医生会检测出 20 分钟内最快睡着的选手 北边的英国、法国、德国在工作日都没有午休的习惯。英语中直接就没有午休这个词，借用了西班牙语的“Siesta”，这个词源于拉丁语“hora sexta”，本意是指日出后的第六个小时。 美洲西班牙语国家，也和他们曾经的宗主国一样有午睡的习惯。气候炎热的中东和北非地区，每天午餐后，也有几个小时的午休时间。在亚洲，炎热的菲律宾和越南也存在午睡的习惯。 在中国，根据调查，87.56%的人都有午睡的习惯，而全年都午睡的人占 39.35%。然而，中国人民爱好午睡与气候的关系并不密切，政府的推动是一个重要因素：同一个调查也发现，在我国，部队是午睡最多的一个群体。 现代化程度较高的北京、上海、香港等城市大都没有午睡。而二三线城市则很多都有午睡。当然，生活在没有午睡的城市中的人，也并非不想午睡，由于工作时间的原因，他们不得不在下午工作开始前，靠一杯咖啡或者茶来提神。 对于繁重工作的人来说 ，午睡是相当必要的。 在保持了长时间高强度的工作后，人们很容易在一天的中点感到疲惫。而中午的饱食和午后让人昏昏欲睡的阳光，又会加剧这种疲惫感。 心理学的研究发现，午睡能够有效的减轻疲惫感，回复精力，提高下午的工作效率。15 分钟短睡就可以起到减轻疲劳，提高反应速度，提高推理任务表现的作用。在午睡之后的 1~2 个小时内，个体的逻辑推理能力，精力，心情以及觉醒水平都能获得相应的改善。 但是剥夺午睡，就会降低工作效率，对于涉及安全的行业，中午犯困甚至会带来比较严重的后果。一项针对北京某地铁线路司机的调查发现，有 60%的人都会在吃过午餐后的 13:00-15:00 犯困，而白天其他时间感到疲劳的平均比例只有 10%。南京交管部门的大数据显示，12 时至 14 时发生的轻微交通事故占全天总数的 17.8%，仅次于早晚高峰，属于事故高发时段。 那么只有工作是人们需要午睡的理由么？实际上这与个人的生理特性有着密切关系。 最直观的是人类身体的“生物钟”决定了你在什么时候犯困。国外的研究表明，在控制条件下人类的睡眠天然的区分为两个阶段：一段长睡眠和一段短睡眠，一般短睡眠是在长睡眠时间的中间时间点往后加 12 小时。 在现实生活中，午睡还可以使我们避开一天当中最热的时候，所以午睡的习惯在低纬度地区更加普遍。从进化的角度讲，这是相当经济的策略，可以节省大量的能量消耗。并非只有人类发现了这一点，猫科动物基本上整个白天都在打盹，这样可以使它们最大限度的保持体力。雄狮一天要睡够 20 个小时，家猫每天也要睡 15 个小时以上。 此外，午睡还可能与午餐有关。当血糖较高时，人类下丘脑分泌的下丘脑泌素减少，人就会觉得昏昏欲睡和不想运动。因此，如果中午吃了含糖较多的食物则容易让人犯困，含蛋白质较多的食物有助保持清醒。而中国人通常午餐吃的比较多，又是以精制米面为主，含淀粉较多，葡萄糖转化率比较高，自然吃完更容易犯困了。 这看起来相当神秘的人体“生物钟”，实际上是受人类的基因控制。只有极少数天赋禀异的人，可以一天只睡 5、6 个小时而不感到疲惫。 位于 ABCC9 基因上的 rs11046205 位点对一个人所需的睡眠时间有比较大的影响。这一位点为 A 型的个体，要比 G 型个体平均多睡 30 分钟。动物研究也发现，敲除 ABCC9 基因的果蝇，要比正常果蝇少睡 3 个小时。 你需要多长时间的睡眠？倾向于早睡还是晚睡？每天睡几小时才真正适合自己？ 转载自：https://zhidao.baidu.com/daily/view?id=206749","link":"/p/3a52/"},{"title":"阅读app书源","text":"https://gitee.com/vpq/yd 上面这个链接还是挺不错的。 另外说一下改背景：界面下方长按自定义。","link":"/p/2a8d/"},{"title":"Windows10 安卓模拟器 蓝屏解决","text":"网上全是关闭Hyper-V的，终于从一堆网页中找到了正确的。。。 这个是第一个找到的：https://blog.csdn.net/uddiqpl/article/details/85058407 我照做之后还是蓝屏，但是完完全全按照第二个的图片做，就没问题了 https://blog.csdn.net/qq_35272131/article/details/89843601 以前要开win10自带虚拟机，动过相关设置，好麻烦 Windows10兼容模拟器太差劲了（想开原版的每次都要调整设置）","link":"/p/78e1/"},{"title":"魔改版goindex","text":"https://github.com/Aicirou/goindex-theme-acrou 除了多盘切换、Http Basic Auth、分页加载、在线播放等功能外，还拥有、 网格视图模式、html渲染，并且支持快速部署 开发者demo https://oss.achirou.workers.dev/ 自己尝试搭建了一个：https://yun.alittlebear.tk/0:/ 功能挺齐全的，支持搜索不错，背景还是2233，还支持多国语言","link":"/p/480f/"},{"title":"《地球帝国2：霸权的艺术》简体中文免安装版","text":"《Empire Earth II: The Art of Supremacy》带玩家重返历史的舞台，上演各种文明的历史和伟大的战役，从冰雪覆盖的俄罗斯平原一直到灼热的非洲沙漠，你将在此成为伟大的领袖，穿越过去、现在和将来。Mad Doc的总裁Ian Davis博士说：“我们吸收了大量玩家建议，《Empire Earth II》将是本系列的革命。游戏中有更多的事情可以做，比如全新的拉锯模式，我认为玩家肯定会喜欢，游戏会给你彻底的全新体验。” 游戏介绍《Empire Earth II: The Art of Supremacy》带玩家重返历史的舞台，上演各种文明的历史和伟大的战役，从冰雪覆盖的俄罗斯平原一直到灼热的非洲沙漠，你将在此成为伟大的领袖，穿越过去、现在和将来。Mad Doc的总裁Ian Davis博士说：“我们吸收了大量玩家建议，《Empire Earth II》将是本系列的革命。游戏中有更多的事情可以做，比如全新的拉锯模式，我认为玩家肯定会喜欢，游戏会给你彻底的全新体验。” 游戏新模式《地球帝国2：霸权的艺术》新加入了两个模式，一个是“效忠模式”(Fealty Mode)，玩家可以宣布效忠另外一个玩家，成为另外的玩家的同盟国或者附庸国，还有一个模式为“拔河模式”(Tug-of-War Mode)，这个模式需要在3张、5张甚至7张地图上进行战斗，在对方的大本营地图上战胜对方才算胜利。 《地球帝国2：霸权的艺术》加入了三个新的全球性战役，可以使玩家体验人类历史上最为伟大的战争，从法老王时期到拿破仑统治时期。游戏加入了10种新的作战单位，包括祖鲁战士、俄国榴弹炮、法国阵风战斗机等等。玩家可以与本地的部落结盟或者干脆吸收他们。 游戏特色全新的实时操作指挥系统 根据不同的季节和天气制订战术 新的固定建筑可以在多人关卡中升级 可以征服、吸收或者和本土部族联盟 可由10名玩家以9种不同的模式进行多人游戏 新的模式中可以利用新单位和文明使用新的战术 战斗胜利后你的普通单位会升级成为强力的英雄级别 3个全新的全球战役将允许玩家体验从法老王一直到拿破仑大军等传说中的时刻 10个新的战斗单位，包括祖鲁战士、俄罗斯榴弹炮、“阵风”，帮助玩家征服世界 在长达12000年的征服历程中，你将能够制造和指挥超过500种独特的作战单位和建筑 2种新模式：效忠模式，当玩家被俘虏，可以宣布“效忠”，并成为另一个玩家的永久盟友或者臣子； 拉锯模式，多人战役中，穿越3、5或者7张地图的战斗，最终在敌对方的地图上彻底击败对手的将获胜 游戏下载OneDrive：https://alilin-my.sharepoint.com/personal/alittlebear_yam_ink/_layouts/52/download.aspx?share=EX3oJ5HwbuNPpn7Idc6gG9sBnIMR1VXgglF_bafnGGXl8A 备用网盘：http://pan.alittlebear.tk/0:/f814/Empire.Earth.II.The.Art.of.Supremacy.CHS.Green.zip 神秘代码：RUB7-WYG4-FEN5-RAB6-3594 游戏作弊码// messages db_cheat_sysdisabled， 密技关闭！ // Enable cheat system db_cheat_enable_system， dakai db_cheat_enable_system_d， ** 密技启用 ** // Disable cheat system db_cheat_disable_system， guanbi db_cheat_disable_system_d， ** 密技停用 ** // Add 10，000 of each resource db_cheat_tons_resources， 10000 db_cheat_tons_resources_d， 资源增加10，000 // Subtract 100 of each resource db_cheat_lose_resources， 100 db_cheat_lose_resources_d， 资源减少100 // Inflict 20 points of damage on selected unit db_cheat_hurt_selection， bianta db_cheat_hurt_selection_d， 使被选择的部队受到伤害 // Convert selected unit db_cheat_convert_selection， guolai db_cheat_convert_selection_d， 使被选择的部队变节到你的阵营中 // Instant recharge power db_cheat_instant_recharge_pow， recharge me db_cheat_instant_recharge_pow_d， 使被选择的部队能力恢复为100% // Instantly win scenario db_cheat_win_game， win db_cheat_win_game_d， 你在此剧本中获胜！ // Toggle the fog of war on\\off db_cheat_toggle_fogofwar， toggle fog db_cheat_toggle_fogofwar_d， 切换战争迷雾。 // Toggle instant build on\\off db_cheat_toggle_instantbuild， kuaidian db_cheat_toggle_instantbuild_d， 切换为立即完成建设 // Advance an epoch without meeting any of the requirements db_cheat_advance_epoch， shenji db_cheat_advance_epoch_d， 你已经进入下一个纪元！ // Add 50 technology points db_cheat_add_techpoints， 50 db_cheat_add_techpoints_d， 科技点数增加50 // God Mode db_cheat_god_mode， god db_cheat_god_mode_d， 切换为天神模式","link":"/p/f814/"},{"title":"《地球帝国》繁体中文免安装版","text":"《地球帝国》是一款经典即时战斗策略单机游戏《帝国时代》的第三部，玩家需要引导自己的文明从史前文明进化到未来文明，每一个过程中的所有改观都会能让你耳目一新，并且将其中各类元素和不同作战单位也进行了创新设计，感兴趣的朋友可以下载试玩！ 游戏介绍《地球帝国》是一款经典即时战斗策略单机游戏《帝国时代》的第三部，玩家需要引导自己的文明从史前文明进化到未来文明，每一个过程中的所有改观都会能让你耳目一新，并且将其中各类元素和不同作战单位也进行了创新设计，感兴趣的朋友可以下载试玩！ 游戏背景《地球帝国》给我们带来的是真正意义上的立体作战，从中世纪的铁甲骑士，到20世纪的全机械化部队，再到未来的巨型钢铁机器人。海军则从木筏，帆船到航空母舰，核子潜艇。而空军拥有像阿帕奇(武装直升机)，F-15，以及B-2隐形战略轰炸机等战机。相信，这也是许多武器爱好者们所梦寐以求的。 在《地球帝国》中，特殊人物也是能左右战争胜负的关键环节。 其中一类就是神秘的宗教人物，他们可以借助“神的力量”制造地震，火山爆发，飓风，瘟疫等灾难，给敌人以致命的打击。 而另一类人物就是历史上著名的军事英雄，他们包括了拿破仑，亚历山大大帝，丘吉尔，巴顿将军等。 他们分别属于不同的民族，而他们的出现将使你军队的士气大大提高，激增部队的战斗力。 而想到那些哧诧风云的英雄在你的麾下时，是不是觉得兴奋异常呢? 游戏内容《地球帝国》的另一大卖点是它浓重的历史感，它把人类历史上几乎每一场重大战争都毫无保留地呈现在玩家们的面前。 从特里木战争，到第2次世界大战，都是那么壮观，那么真实。 当你的装甲部队威风八面地驰骋在欧洲大陆上时，有没有当年巴顿将军的雄风呢? 游戏所附带的战役编辑器更让玩家有了创建自己梦想中的战争的机会，去吧，争霸世界的道路就在脚下，世界霸主的宝座就在前方。 游戏下载OneDrive：https://alilin-my.sharepoint.com/personal/alittlebear_yam_ink/_layouts/52/download.aspx?share=Ecibqx2ec7dKuUnY3qB-e-sBPW1RiMTXxr5bIEg220JddA 备用网盘：http://pan.alittlebear.tk/0:/d5ec/Empire_Earth.CHT.Green.zip","link":"/p/d5ec/"},{"title":"《龙腾三国》 繁体中文免安装版","text":"《吞食天地2》取得成功后，当人们在期待《吞食天地3》时，同样采用RPG类型的《龙腾三国》率先于1996年推出。玩家将会成为君主，率领自己的军队征战天下！ 游戏介绍《吞食天地2》取得成功后，当人们在期待《吞食天地3》时，同样采用RPG类型的《龙腾三国》率先于1996年推出。玩家将会成为君主，率领自己的军队征战天下！ 游戏简介智冠公司于1996年推出的角色扮演加战略的三国游戏。游戏可从21位君主中挑选出一位，在类似冒险的模式下，可带领自己的将领、军队到处游戏，进入城池的宫殿中可选择策略性指令，与部属交谈可得知他们的想法。君令模式的指令包括内政、外交、军事、领地、商贾、人事、谋略、系统几大项，每个大项中又有一些小项目。是一款有新意的作品。 游戏亮点与《吞食天地》系列相比，《龙腾三国》的战略性更高。在本作中，玩家可以从21位君主中挑选其一。 游戏主要分为行军模式和军令模式，行军模式即RPG部分，而军令模式即为SLG部分。在RPG形态下带领部将到处探索，进入城池的宫殿中就可以选择战略指令。 游戏中的军令模式包括内政、外交、军事、领地、商贾、人事、谋略等传统SLG的策略项目，每个大项目又由一些小项目构成，复杂程度并不亚于专业的SLG游戏。 两种模式都由将、城、贤、强4项。在行军模式下，你可以与普通RPG一样在城镇收集信息购买道具，并且还可以发掘在野的武将。 下载链接OneDrive：https://alilin-my.sharepoint.com/:u:/g/personal/alittlebear_yam_ink/EV56GyCitu1PmeHBLIG5tGsBFW0ipXoSJelTpG9HD-zeNg 备用网盘：https://pan.alittlebear.tk/0:/183b/ltsg.CHT.Green.zip","link":"/p/183b/"},{"title":"剑侠情缘2 白金版","text":"《剑侠情缘贰》是金山软件股份有限公司下属西山居工作室制作的一款单机动作角色扮演游戏，上承《剑侠情缘》。剑侠情缘二的豪华版，增加了隐藏任务、武功，另外还增加了一个完美的结局。喜欢仙侠类型的玩家千万不要错过。 游戏介绍《剑侠情缘贰》是金山软件股份有限公司下属西山居工作室制作的一款单机动作角色扮演游戏，上承《剑侠情缘》。剑侠情缘二的豪华版，增加了隐藏任务、武功，另外还增加了一个完美的结局。喜欢仙侠类型的玩家千万不要错过。 新增内容增加了柴嵩，赵无双，唐离，秋依水不死的剧情； 增加了很多支线剧情，譬如杀土匪，汉阳杀恶霸； 增加雪一刀支线任务； 还能拿到攻击力最强的武器； 增加了一个完美结局； 游戏背景《剑侠情缘2》的故事，是一个全新的小说情节。以历史战争为背景，发展出一个曲折的故事。有豪气乾云的侠客情义，有肝肠寸断的儿女情长，看南宫飞云如何带着一身的绝技独闯江湖，看智勇双全的柴嵩如何成为左右世局的关键人物，看燕如雪的美，看赵无双的痴、独孤剑的狂……一个让你如同在看一部武侠巨作的游戏，让你亲身体验中国的武侠世界 游戏特色游戏采最新式的实时绘图引擎，拥有最流畅的游戏画面，玩家在进入游戏后，不会因为要等下一个画面而失去游戏的娱乐性。648*480的分辨率，16位高彩显示，可适应目前国内99.99%的计算机平台，不需再加装任何软硬件设备，即可立即享受一流的游戏品质。45度俯视，可将地图画面以最完整、最清晰的方式呈现。游戏人物可依玩家操控习惯，向四面八方行走，没有方向限制，较一般滚动条式进行的游戏，拥有具高的自主性。另外游戏中的人物、场景、物品等图像，都是用3D绘图的方式制作，因此有较高的分辨率及真实性，甚至游戏角色的表情变化都做到微妙微肖的地步。 超劲的武功招式：游戏中的武功效果大量使用即时光影效果，透过16位高彩仿真特效，使原本只存在小说中的虚幻神功，重现各位玩家的面前！战斗系统采实时作战的方式进行，不必再浪费时间等待游戏进入战斗画面，同时由于游戏没有方向性的限制，故主角可以向任何方何的敌人施展武功招式。游戏中的实时绘图引擎，可同时处理1000幅以上的游戏贴图，因此玩家不用使用3D加速卡就可以体验深入敌境，力挑整个金营，实现百人大混战的快感，也不会因此而使游戏延迟。 超浓厚的民族色彩剧情及音乐：《剑侠情缘2》拥有超浓厚的民族文化色彩，所有的寰宇楼阁、人物服饰、庭园造景，完全依据中国传统的风格绘制让玩家在一进入游戏之初，就可以感觉彷佛进入时光隧道，回到当时的情景一般。而游戏的音乐更是按照古风乐谱重新编写，另外还加入了一点New Age的味道，强化了二胡、笛、三弦、古争、琵琶等传统乐器的特色，使这套游戏玩起来更有古色古香的感觉。音乐文件采用MP3格式播放，档案较WAV文件的档案容量小，品质更好。其它音交更全部采用高品的声采样，并根据游戏中的人物位置自动进行声场定位，且支持A-3D效果，只要有双声道的喇叭，就可以仿真出超真实的立体环绕音响效果，使游戏更逼真！ 配置要求操作系统 Windows 98 or better Windows 98 or betterCPU 奔腾III 1G以上 奔腾III 1G以上内存 256MB RAM 256MB RAM显卡 32MB VRAM 32MB VRAM存储空间 需要1.5GB可用空间 需要1.5GB可用空间 下载链接OneDrive：https://alilin-my.sharepoint.com/personal/alittlebear_yam_ink/_layouts/52/download.aspx?share=EWXMEelNmPxGmgozZGkLje4Bxom_ITMSUoWBDfRTDeJElQ 备用网盘：http://pan.alittlebear.tk/0:/9a7f/moon2.CHS.Green.7z","link":"/p/9a7f/"},{"title":"点击英雄 Clicker Heroes v1.0e12","text":"好奇16位数的每秒伤害是什么感觉吗？不用再想了！踏上征程，马上体验！点击怪兽开始杀怪，获得金子。用金子来雇佣新英雄，造成更多伤害。造成的伤害越多，获得的金子也就越多。 点击英雄游戏英雄 雇佣45位独一无二的英雄帮你造成伤害，你甚至可以不用点击！认识各种传说神话中的传奇人物，比如雅典娜、阿孟和蒂法老、米达斯王、还有更多！他们都能伸出援手祝你一臂之力，只要你付出些费用。 这些大神的每秒伤害绝对秒杀各种MMO游戏。花费财宝进行升级，获得特殊能力帮助你获得更多金子！ 要洗个衣服？给狗狗洗个澡？别发愁！你不在的时候，你的英雄同样会自动去收获怪兽，获取金子，就算关掉游戏也不影响。不过别忘了随时回来，用闪闪的金子去买新的英雄和升级哟！ 点击英雄游戏怪物 狂点不要停，击败强大怪兽。超过100个不同的怪，个个造型精美生动。 当心Boss出没！ steam：https://store.steampowered.com/app/363970/Clicker_Heroes/ OneDrive：https://alilin-my.sharepoint.com … RgYSAzA-VmQ-ax-c5Kg steam上面免费（才发现hh） 修改游戏语言为中文：进入游戏后点击右上角设置(扳手图标)，再点击右上角Language，选择中文即可。","link":"/p/f35a/"},{"title":"10个硬币问题","text":"能否放下第十枚硬币","link":"/p/19a5/"},{"title":"英语口语","text":"看了一会挺不错的，年代有点久远，所以这个画质。。。别在意haha","link":"/p/1736/"},{"title":"Biped 只只大冒险 v1.4","text":"《biped / 只只大冒险》是一个具有物理特性的合作冒险游戏。 游戏中，你和伙伴将扮演“阿古”和“茜拉”，两个双足外星机器人，并在地球上展开有趣又燃情的大冒险。 下载：https://wp.alittlebear.tk/73e6/ （游戏解压后6.09GB） 关于这款游戏《biped / 只只大冒险》是一个具有物理特性的合作冒险游戏。 游戏中，你和伙伴将扮演“阿古”和“茜拉”，两个双足外星机器人，并在地球上展开有趣又燃情的大冒险。你们将前往一个个景色迥异的秘境，相互配合相互帮助，解开谜题克服挑战！ 只需用到两个摇杆的有趣操作游戏中角色的操控非常有趣，只需用到手柄的两个摇杆，就能控制角色完成所有动作，简单明了，但又具有极高的自由度，实现种种不可思议的奇妙操作和走位。使用手柄能获得最佳的游戏体验，我们极力推荐使用手柄来玩“只只大冒险”， 双人合作，默契度大作战 游戏支持双人合作，及单人游玩，但双人合作才是biped 只只大冒险的乐趣所在。独特的角色操控，紧密的双人合作闯关，各个场景不但风格不同，所要求的合作方式也截然不同。有的强调同步率，有的突出配合度，甚至还有同伴之间信任和耐心的考验。各种奇思妙想的双人合作挑战，既能提升同伴间的默契度，也是对友情爱情的千锤百炼。 30个充满乐趣的美丽场景 故事发生在一个美丽的星球上，这里保留着完好的自然生态，到处都是biped星人架设的道路和装置，偶尔也有类似人造建筑的痕迹。两只可爱的biped就是在这样的世界中展开冒险。人迹罕至的古老遗迹，险象横生的冰川峭壁，奔流不息的峡谷瀑布，鸟语花香的神秘森林…… 30个风格各异的美丽场景，充满乐趣的各式关卡，等你们来挑战。 收集宝物，装扮你的个性只只 游戏中除了各种奇思妙想的机关挑战之外，还有很多散落在各处的宝物，等着玩家们去收集。每一个宝物都是对勇气与智慧，操作与配合的综合考验。游戏中有大量的只只个性装扮，都可用宝物去换取哦～ 最低配置 需要 64 位处理器和操作系统 操作系统: Windows 7 SP1 / 8.1 / 10 处理器: i3 Sandy Bridge Dual Core or Equivalent 内存: 4 GB RAM 显卡: NVIDIA GeForce GTX 660 存储空间: 需要 8 GB 可用空间 附注事项: 游戏支持手柄及鼠标操作，使用前请先在Steam设置里勾选对应的手柄配置。本地双人模式下，需使用1个手柄1个鼠标，或2个手柄。","link":"/p/73e6/"},{"title":"季羡林作品珍藏集（数字首发14册套装）","text":"下载：https://wp.alittlebear.tk/2461/ 链接：https://pan.baidu.com/s/16gg5Jnwhwp7KXhjAFMekDA 提取码：gz8i 套装书目：《牛棚杂忆》《一花一世界》《对号入座》《我和北大》《行者无疆》《留德十年》《清华园日记》《病榻杂记》《天竺心影》《朗润集》《因梦集》《集外集》《大师远去》《人生小品》作者简介：国学大师季羡林生前最佳作品合集。季羡林（1911年8月6日—2009年7月11日），中国山东省聊城市临清人，字希逋，又字齐奘。国际著名东方学大师、语言学家、文学家、国学家、佛学家、史学家、教育家和社会活动家。历任中国科学院哲学社会科学部委员、聊城大学名誉校长、北京大学副校长、中国社会科学院南亚研究所所长，是北京大学的终身教授。","link":"/p/2461/"},{"title":"世界名著名家经典译本·译文40 (套装共40册)","text":"“译文40”是上海译文出版社时值四十周年社庆之际，经过精心挑选出版的一套文学史上地位显赫的世界名著、名家翻译作品，并就此创立“译文40”书系。“译文40”作品涵盖了英、法、德、日、俄等多国文学经典，囊括了如《基督山伯爵》、《红与黑》、《傲慢与偏见》、《安娜•卡列尼娜》、《乱世佳人》、《浮士德》在内的40部作品，经过重新排版设计，以崭新的形式推出。译文名著系列从此开启了“译文40”的新纪元。 下载：https://wp.alittlebear.tk/808/ 链接：https://pan.baidu.com/s/1fPkbvSkSMp0E7_dmHkLCvQ 提取码：4q3x 《浮士德》歌德是近代杰出的诗人、作家和思想家。世人公认他是继但丁和莎士比亚之后西方精神文明最为卓越的代表，在世界文学史上占有重要的地位。《浮士德》是歌德的代表作，为诗体悲剧，全书由一系列叙事诗、抒情诗、戏剧、歌剧以及舞剧组成，涉及神学、神话学、哲学、科学、美学、文学、音乐以及政治经济学。它根据十六世纪—民间传说创作而成，是歌德倾注了毕生心血写成的宏篇巨著；它描写主人公浮士德一生探求真理的痛苦经历，反映了从文艺复兴到十九世纪初整个欧洲的历史，提示了光明与黑暗，进步与落后，科学与迷信两种势力的不断斗争。歌德借助浮士德的抱负和追求，表达了他本人对人类未来的远大而美好的理想。 《变形记: 卡夫卡中短篇小说全集》本书囊括了卡夫卡所有的中短篇小说，其中《变形记》、《在流放地》、《在法的大门前》、《饥饿的艺术家》、《乡村教师》等都是脍炙人口的名篇。它们均采用象征、隐喻、夸张等手法，情节生动，语言简洁流畅；故事怪诞离奇，无确定的时间和地点，无前因后果，给人以梦幻、神秘、奇特的感觉。作品的主人公几乎都处于一种身不由己的境地，他们在离奇古怪的世界中都有自己的目标，但往往又以失败而告终。 《情人》杜拉斯是法国当代著名的小说家、剧作家、记者和电影艺术家。《情人》是一部带有自传色彩的作品，以法国殖民者在越南的生活为背景，描写了一名贫穷的法国少女与富有的华裔少爷之间深沉而无望的爱情，笔触深达人性中某些最根本、最隐秘的特质，催人深思。小说中自始至终涌动的情感力量甚至超越了高超的写作技巧，具有极强的感染力。 《局外人》加缪是法国声名卓著的小说家、散文家和剧作家，荒诞存在哲学的文学大师。1957年因“热情而冷静地阐明了当代向人类良知提出的种种问题”而获诺贝尔文学奖，是有史以来最年轻的诺奖获奖作家之一。 加缪在他的小说、戏剧、随笔和论著中深刻地揭示出人在异己的世界中的孤独、个人与自身的日益异化，以及罪恶和死亡的不可避免，但他在揭示出世界的荒诞的同时却并不绝望和颓丧，他主张要在荒诞中奋起反抗，在绝望中坚持真理和正义，他为世人指出了一条基督教和马克思主义以外的自由人道主义道路。他直面惨淡人生的勇气，他“知其不可而为之”的大无畏精神使他在第二次世界大战之后不仅在法国，而且在欧洲并最终在全世界成为他那一代人的代言人和下一代人的精神导师。《局外人》是加缪的小说成名作和代表作之一，堪称20世纪整个西方文坛具有划时代意义的最著名的小说之一，“局外人”也由此成为整个西方文学-哲学中最经典的人物形象和最重要的关键词之一。 《动物农场》奥威尔是英国伟大的人道主义作家、新闻记者和社会评论家，著名的英语文体家。《动物农场》是奥威尔最优秀的作品之一，是一则入骨三分的反乌托邦的政治讽喻寓言。农场的一群动物成功地进行了一场“革命”，将压榨他们的人类东家赶出农场，建立起一个平等的动物社会。然而，动物领袖，那些聪明的猪们最终却篡夺了革命的果实，成为比人类东家更加独裁和极权的统治者。“多一个人看奥威尔，就多了一分自由的保障”，有论家如是说。 《蝇王》戈尔丁，英国二十世纪最伟大的小说家之一，他的小说富含寓意，广泛地融入了古典文学，神话、基督教文化以及象征主义，一九八三年因其小说“具有清晰的现实主义叙述艺术以及神话的多样性与普遍性，揭示了当今世界的人性状况”而荣获诺贝尔文学奖；一九八八年获封爵士，二〇〇八年《泰晤士报》在“一九四五年以来最伟大的五十位英国作家”名单中将戈尔丁名列为第三位。《蝇王》是戈尔丁最重要的代表作，是一部著名的哲理小说，借小孩的天真来探讨人性的恶这一严肃主题。故事发生于想象中的第三次世界大战，一群六岁至十二岁的儿童在撤退途中因飞机失事被困在一座荒岛上，起先尚能和睦相处，后来由于恶的本性膨胀起来，便互相残杀，发生悲剧性的结果。作者将抽象的哲理命题具体化，让读者通过阅读引人入胜的故事和激动人心的争斗场面来加以体悟，人物、场景、故事、意象等等都深具象征意味，被公认为二十世纪最伟大的文学巨著之一。 《罗生门》本书共收录了13篇芥川龙之介的中短篇小说。《罗生门》以风雨不透的布局将人推向生死抉择的极限，从而展示了“恶”的无可回避，第一次传递出作者对人的理解，对人的无奈与绝望。 《基督山伯爵 (全2册)》大仲马，法国著名通俗历史小说家。《基督山伯爵》是他的代表作。法老号大副唐泰斯年轻有为，还有美人芳心暗许，不料因此遭人嫉恨，被陷害入狱。顿失一切的唐泰斯陷入绝望的深渊，幸而结识了狱友法里亚神甫，并从他那里得知了基督山岛上宝藏的秘密。唐泰斯越狱后找到了宝藏，成为巨富。然而，十四年过后，物是人非：仇人功成名就，恋人嫁作他人妇。唐泰斯化身为神秘的基督山伯爵，踏入巴黎上流社会，展开复仇行动。本书充满浪漫的传奇色彩，章章奇特新颖，引人入胜。 《乱世佳人 (全2册)》《乱世佳人》称得上有史以来最经典的爱情巨著之一，由费雯丽和克拉克•盖博主演的影片亦成为影史上“不可逾越的”的最著名的爱情片经典。小说以美国南北战争为背景，主线是好强、任性的庄园主小姐斯佳丽纠缠在几个男人之间的爱恨情仇，与之相伴的还有社会、历史的重大变迁，旧日熟悉的一切的一去不返……《乱世佳人》既是一首人类爱情的绝唱，又是一幅反映社会政治、经济、道德诸多方面的巨大而深刻变化的宏大历史画卷。 《傲慢与偏见》美国文学评论巨匠爱德蒙•威尔逊说：“在英国文学近一又四分之一世纪的历史上，曾发生过几次趣味的革命，惟独莎士比亚和简•奥斯丁经久不衰。”本书是奥斯丁最为著名的一部作品。班纳特太太的毕生大志就是把五个闺女体面地嫁掉，故而总是把近旁有财产的单身汉看成某个女儿应得的一笔财产，于是有了几对青年男女跌宕起伏的分分合合。最终男女主人公放下了各自的傲慢与偏见，做出合乎自己道德的选择。作品充分表达了作者本人的婚姻观，强调经济利益和门第观念对婚恋的影响。本书所辑50余幅原版插图生动再现经典场景，系19世纪末爱尔兰裔英国画家休•汤姆森所作，也是流传最广、魅力独具的一套奥斯丁作品插画。","link":"/p/808/"},{"title":"哲学启蒙系列（套装共5册）","text":"“哲学启蒙系列”是一部十分好懂的哲学启蒙著作，包含了5册哲学入门作品，在故事与问答中体味人生哲学。《哲学·科学·常识》是陈嘉映的代表作之一，这本书既是对历史上人类求知历程的回顾，也是对人之本、知识之本的追问。 下载：https://wp.alittlebear.tk/adde/ 链接：https://pan.baidu.com/s/1gMJtXuHL8WfHNVoibkoZog 提取码：5rvb 《哲学·科学·常识》是陈嘉映站在人类认知发展前端的一次回望：回到我们探求真理的本意：我们究竟是要探索未知的领域，拓展人类认识的边界？还是要理解我们存在于其中的世界，在纷繁的人世间消解困惑，更好地生活？” 《世界第一好懂的哲学课》讲述了对哲学有兴趣的高中女生纯子，对人生感到苦恼的上班族一郎，和刚退休正准备展开人生第二个阶段的稻夫，他们三位带着人生的疑惑走进了“哲学蜀黍小川”的哲学教室。 通过他们的问与答，哲学变得亲切了许多，我们会发现，哲学其实来自生活、无处不在。从亚里士多德、笛卡儿，到现代的罗尔斯、桑德尔，原来每个哲学家的思想都能为我们所用，帮助我们追求美好、有意义的生活，以及创造更美好的社会。 《你的第一本哲学书》是享誉世界的哲学入门小书，在这本书中当代著名哲学家托马斯•内格尔用不可思议的精简篇幅和明白的语言，为我们打开了哲学世界的大门。 本书的目的不是要给出正确答案，而是用非常平易的方式把你引向哲学的思考方式，教你用它来捕捉心中迸发的迷惑与感悟，积累智慧。希望你对生活的审视，就从你的首本哲学书开始。” 《生活的哲学》这本书中，“街头哲学家”朱尔斯·埃文斯找来了人类历史上几位最伟大的智者。苏格拉底、伊壁鸠鲁、亚里士多德、毕达哥拉斯……十二位古希腊哲学家聚成梦想中的人生学园，一起探秘人的心灵和情感，教给我们控制情绪、享受当下、规划生涯、面对波折等各方面的生活智慧。哲学，可以成为一种生活的方式，哲学帮助人们荡涤信念上的灰尘，走出各自生活的窘境，让心灵强大起来。 《哲学家，请回答！——小孩子的哲学大问题》是日本哲学家野矢茂树召集22位哲学教授为孩子创作的一本哲学图书。我什么时候会成为长大？人一定要念书吗？聪明跟愚笨是什么？幸福是什么？必须要学习吗？……野矢茂树从真实的生活出发，通过孩子常问的22个哲学问题入手，请两位哲学家从不同角度分别作答每个问题，为孩子解答自我、他人、工作、梦想等基础哲学问题，让孩子从此开始辩证地看待世界和人生。","link":"/p/adde/"},{"title":"废土:西方名家末世故事集","text":"核战、生化灾难、宇宙浩劫，末日都有结束的时候。你游荡在人烟稀少的世界中，四处搜寻食物，对抗变种人，试图重建文明。你偶尔会为死者垂泪，可内心深处却庆幸自己是活下来的那个。人人都爱看末日后的故事，因为我们暗暗盼望成为幸存者，盼望一切能重头再来。废土的故事无非就是这样。 下载：https://wp.alittlebear.tk/6ca0/ 链接：https://pan.baidu.com/s/1iCT60hQ4nYWFqIqLYa5QiA 提取码：9j41 编辑推荐：※斯蒂芬•金、乔治•R. R.马丁、奥森•斯科特•卡德和保罗•巴奇加卢皮，他们也写末日故事！22位西方类型文学名家，22篇风格不一的废土故事，满足你的废土幻想~※你担心核战爆发或者气候灾难吗？是游戏《辐射》的忠实玩家吗？喜欢电影《疯狂麦克斯》吗？你有勇气在末日继续生存吗？如果答案是YES，你就是本书苦苦寻找的知音啦！--名人推荐：这部合集中的22则末日故事有多一半发表于2000年之后，反映出当代国际政治的压力。人类要适应末日后的生存环境必须有所改变，作者们生动地描绘出了这些令人不安的社会、生理和心理状态。——《出版人周刊》这些后末日故事主编亚当斯选得很好，从荒凉的、空荡荡的世界，到悲惨境地中的希望之光，“废土”题材中最棒的东西都涉及了。——美国图书馆协会《书目》杂志","link":"/p/6ca0/"},{"title":"最地道的天津话","text":"嗦起“天津话”，您了肯定不陌生， 今儿咱们就来唠唠， 咱天津卫自己的语言—— 天津话！ 天津人 请说 天津话！ 但是，你造么？ 哪儿的天津话最纯正？ 一般是认为南开区、 南市地区和娘娘宫附近的天津话最纯， 但天津市其他区的人可能并不酱紫认为…… 天津方言是如何形成的呢？ 天津方言与附近地区的方言有许多差别。 住在市区的人到郊区去，走一段路就会发现语言变了。 这是因为天津方言区， 它的东南西三面都被静海方言区包围着， 这种现象在语言学上就称为“方言岛”。 等腰三角形的“天津方言岛” 虽然天津各个区县的天津话都有那么点差别， 但是要说起最接地气， 最哏儿的天津话， 绝对是生活在胡同里的 老辈天津人的“土语”最地道！ 下面这段对话， 都能看懂算你厉害！ 邻居：诶，老刘，昨天你嫩么的了？ 老刘：嗨，甭提了，也是倒霉催的！ 邻居：嫩么的了？ 嗦嗦、嗦嗦…… 老刘：夜儿个黑歇，我骑车碰了个老坦儿，一下车就跟我诈唬，说半天归其也没说清碰他哪儿呵儿了，跟我矫情起来没完了。我一看，界四个碰瓷儿的。想讹我？没门儿啊。一下把我火儿给拱丧来了。 邻居：结果呢，嫩么解决的？ 老刘：我吓唬他啊：“告你啊，别恣歪，你看好了宝贝儿，介是我们地界儿！不信我给你拿拿龙！”老坦儿听完直接尿儿了，屁没敢放，溜溜儿跑了。 邻居：好么，这银也倒霉，碰你介么个愣子。 老刘：界银哪，就界德性，不糊他一顿他难叟。 邻居：诶，老刘，昨天你嫩么的了？ 老刘：嗨，甭提了，也是倒霉催的！ 邻居：嫩么的了？ 嗦嗦、嗦嗦…… 老刘：夜儿个黑歇，我骑车碰了个老坦儿，一下车就跟我诈唬，说半天归其也没说清碰他哪儿呵儿了，跟我矫情起来没完了。我一看，界四个碰瓷儿的。想讹我？没门儿啊。一下把我火儿给拱丧来了。 邻居：结果呢，嫩么解决的？ 老刘：我吓唬他啊：“告你啊，别恣歪，你看好了宝贝儿，介是我们地界儿！不信我给你拿拿龙！”老坦儿听完直接尿儿了，屁没敢放，溜溜儿跑了。 邻居：好么，这银也倒霉，碰你介么个愣子。 老刘：界银哪，就界德性，不糊他一顿他难叟。 OMG！地道的天津腔一开， 年轻点的天津人估摸着就和听天书一样， 可这逗趣的“天津方言” 听的不就是个**乐呵**嘛。 天津人乐呵，天津话哏儿， 天津人就爱说天津话， 但有时候天津话却让天津人尴尬的要命。 为嘛呢？ 会说不会写，说的时候倍儿溜， 别人一问那字肿么写，麻利儿的就**苶**了。 不信的话你试试，根据拼音写汉字， 不过才十个而已， 只要你都能填出来就服你是个天津学霸！ 倍儿牛叉！ （hāo）羊毛 （xǐng）鼻涕 你别老（dèn）着我 把饭（tēng）热了再吃 （liào）蹶子 这菜（hōu）咸 他（chāo）起个酒瓶子就砸了上去 （chuāi）点面晚上吃饺子 再不听话当心我（kēi）你 （tā）拉着鞋子 （身为天津人，我已绝望） 有人说 我们天津话“侉” 呸！ 我们天津话 嗦起来，倍儿浪漫！ 有一种表白叫我耐你， 有一种溺爱叫护犊子， 有一种讨好叫献绻儿， 有一种角落叫旮旯儿， 有一种散步叫遛早儿， 有一种作弊叫玩儿赖。 当天津话遇上经典的电影桥段， 会碰出怎样的火花呢？ 准备好了吗？ Ready Go——！ ▲看的时候表喝水哟！ 天津话版《大话西游》 原文是这个样子的： 至尊宝：曾经有一份真诚的爱情放在我面前，我没有珍惜。 等我失去的时候我才后悔莫及，人世间最痛苦的事莫过于此。 你的剑在我的咽喉上割下去吧！不用再犹豫了！ 如果上天能够给我一个再来一次的机会，我会对那个女孩子说三个字：我爱你。 如果非要在这份爱上加上一个期限，我希望是一万年！ 用天津话“翻译”完就成了介个样子了…… 天津至尊宝：说介话可是那阵了，有一份倍儿真的感情摆在我眼皮底下，我倒霉催的，愣没当回事。 等没了吧倒醒过闷来了，唉没法儿啊，世界上最点背的事儿也就介意思了。 你内刀片子赶紧在我脖子上拉吧，肉呼嘛？！ 不过如果老天爷能再让我来一回的话啊，我跟你说我豁出去了我非跟那闺女说仨字儿：“我耐你！” 如果非死乞白赖要在前面弄个头的话啊，我估摸着大概其是一万年？ 如果《泰坦尼克号》的主角都是天津人， 那绝不会有什么凄美的爱情故事， 因为主角都笑死了…… 原文是这个样子的： 杰克：答应我你要活下去，永不放弃……无论发生什么事情……无论多么绝望……答应我，永不放弃。 罗斯：我答应你 杰克：决不放弃 罗斯：我答应你，不放弃，杰克。我不会放弃的。 天津话证明了再感人的对白**经** 天津话一翻译就只剩下哏儿了！ 杰克：你得跟我保证，不管有嘛事儿，都板儿定足足崩崩的活下去，你快应给我啊！别糊弄我啊！真格儿的，我耐你！ 罗斯：行！就嫩么地了！ 厉害吗？ 反正小编是服了！ 天津方言比“专利”还厉害， 介些个东西被天津人一说， 立刻就成为天津独有的物件儿了。 ▲给你个眼神你自己体会 梳子叫“拢子” 门上方的玻璃窗叫“上亮子” 油条叫“果子” 棒棒糖叫“嗦了蜜” 拖鞋叫“鞋蹋邋” 膝盖叫 “玻璃盖” 西红柿叫“火柿子” 啤酒叫“罐儿啤” 零食叫“零嘴儿” 衣袖叫“脑袖儿” 大巴掌叫“大脖溜” 哎呀，要让我聊天津话， 我能聊一下午不带重样儿的！ 奏问你天津话厉害不厉害？！ 不服谁也得服天津话啊！ 您嗦是不！ 转自：https://www.sohu.com/a/165868932_355365","link":"/p/d072/"},{"title":"图片浏览器 XnView MP v0.96.2","text":"XnView MP是XnView Classic的增强版本。它是功能强大的跨平台媒体浏览器，查看器和转换器。兼容500多种格式。 特征：无与伦比的兼容性XnView MP支持500多种图像格式（包括多页和动画静态格式APNG，TIFF，GIF，ICO等），并可以导出为大约70种不同的文件格式。 批量转换XnView MP带有易于使用但功能强大的批处理转换模块。该模块也为XnConvert供电 优化性能在性能方面已进行了相当大的改进（速度优化的加载，改进的缓存，多核处理，64位版本等）。 多平台现在支持32位和64位版本的Windows，Mac OS X和Linux 全球兼容XnView MP最终提供了Unicode支持。多种语言的增强翻译以及全新便捷的模块化界面。 以及更多…几乎所有标准XnView最受欢迎的功能都保留在XnView MP中，并且实际上已经对许多功能进行了调整和增强。 需要更多系统（Mac+Linux）请去官网下载 官网：https://www.xnview.com/en/ 下载：https://www.xnview.com/en/xnviewmp/ 32位安装：https://download.xnview.com/XnViewMP-win.exe 64位安装：https://download.xnview.com/XnViewMP-win-x64.exe 32位便携：https://download.xnview.com/XnViewMP-win.zip 64位安装：https://download.xnview.com/XnViewMP-win-x64.zip OneDrive：https://alilin-my.sharepoint.com/:f:/g/personal/alittlebear_yam_ink/Eo0bKv27I9REviqQUzcuVO8BA-V_96tHFjyrTXw6o0Reqg 备用网盘：https://wp.alittlebear.tk/6536/","link":"/p/6536/"},{"title":"图片浏览器 XnView v2.49.3 Extended 官方中文","text":"XnView 支持查看大约150种文件格式(比如说ping、jpeg、targa、tiff、gif、bmp等)。XnView同时还支持动画gif、多页面tiff、多图像图标以及mpeg、avi、wav、aiff和Quicktime格式的文件。XnView是老牌好用的图片浏览工具了。优点是滚轮友好、界面简洁、自带大量的滤镜和照片拼接等功能，缺点开启高质量缩放后太卡（采样太高）没有实际操作意义。鼠标模式是框选（可修改）。 官网：https://www.xnview.com/en/ 官方下载页面：https://www.xnview.com/en/xnview/#downloads 官方最新版下载（安装版）：https://download.xnview.com/XnView-win-full.exe 官方最新版下载（便携版）：https://download.xnview.com/XnView-win-full.zip OneDrive：https://alilin-my.sharepoint.com/:f:/g/personal/alittlebear_yam_ink/Enc4KNw_G-1Foal7lZ7AE90BPpFDWcFANRbvWwOhgbOrUQ 备用网盘：https://wp.alittlebear.tk/4cde/ 软件特色： 打开图片速度极快 功能齐全,且很实用 基本不占资源 界面美观,支持换肤 其具有的右键预览功能非常实用(可通过提供的XnShellEx.exe自主安装) 体积小,不占什么空间","link":"/p/4cde/"},{"title":"电子书阅读器 Calibre v4.16","text":"Calibre电子书阅读器是一个“一站式”的电子书解决方案，它可以全面满足你的电子书需求。Calibre是免费的，源代码开放，拥有跨平台的设计，可在Linux， OS X和Windows操作系统中运行。Calibre电子书阅读器它是一个完整的电子图书馆，包括图书馆管理，格式转换，新闻，将材料转换为电子书，以及电子书阅读器同步功能、整合进电子图书阅读器。 主页：https://calibre-ebook.com/更新日志：https://calibre-ebook.com/whats-new Windows 便携+64位 下载OneDrive下载; https://alilin-my.sharepoint.com … gM8dgK8U5p1hIrR-2kg备用网盘下载：https://wp.alittlebear.tk/2212/ Windows:https://www.fosshub.com/Calibre.html/calibre-4.16.0.msihttps://github.com/kovidgoyal/calibre/releases/download/v4.16.0/calibre-4.16.0.msi Windows x64:https://www.fosshub.com/Calibre.html/calibre-64bit-4.16.0.msihttps://github.com/kovidgoyal/calibre/releases/download/v4.16.0/calibre-64bit-4.16.0.msi Mac:https://www.fosshub.com/Calibre.html/calibre-4.16.0.dmghttps://github.com/kovidgoyal/calibre/releases/download/v4.16.0/calibre-4.16.0.dmg Linux:https://calibre-ebook.com/download_linux 便携版:https://www.fosshub.com/Calibre.html/calibre-portable-installer-4.16.0.exehttps://github.com/kovidgoyal/calibre/releases/download/v4.16.0/calibre-portable-installer-4.16.0.exe","link":"/p/2212/"},{"title":"Markdown编辑器 Typora v0.9.86","text":"Typora 是一款 Markdown 编辑器，拥有 Windows、macOS 客户端。可以算作一款 Windows 下难得的好看、优美的客户端。 链接官网：https://www.typora.io/ 下载页面：https://www.typora.io/#windows 官网64x下载（持续更新）：https://www.typora.io/windows/typora-setup-x64.exe 0.9.86下载： https://wp.alittlebear.tk/198a/typora-setup-x64.exe https://alilin-my.sharepoint.com/personal/alittlebear_yam_ink/_layouts/52/download.aspx?share=EZ3TKTpCl6hIp-tjrZ4EWqYBxXHMRqyBebFY-AkWZJGLWg 可读可写Typora给您既是读者又是作家的无缝体验。 它删除了预览窗口，模式切换器，降价源代码的语法符号以及所有其他不必要的干扰。 相反，它提供了真正的实时预览功能，可帮助您专注于内容本身。 分心免费 无缝实时预览 您所看到的就是您的意思 效果 更新日志0.9.861.修复选项“还原最近关闭的文件和文件夹”不起作用。 2.在Linux下修复“将映像复制到”。 3.更新波兰语翻译和信用文件。 4.对样式的小修正。 0.9.84在https://support.typora.io/What-s-New-0.9.84/中了解更多信息 1.支持通过PicGo和自定义命令上传图像。 2.更新某些语言的i18n翻译。 3.支持在脚注定义和参考之间快速跳转。 4.改进美人鱼饼图样式。 5.修复了mXSS漏洞。 6.修复与光标和箭头键相关的错误。 7.修复有关软件更新的错误。 8.改进拼写检查。 9.改进查找和替换功能。 10.提高稳定性。 11.其他小修正。","link":"/p/198a/"},{"title":"gif录制软件 ScreenToGif v2.20.1","text":"Screen To Gif是一个高度直观的应用程序，旨在帮助用户生成自己的动画。该程序具有多种自定义选项，例如添加文本字符串或棕褐色效果。 官网：https://www.screentogif.com/?l=zh_cn下载页面：https://www.screentogif.com/downloads.html?l=zh_cn便携版：https://github.com/NickeManarin/ … 2.24.2.Portable.zip 或者：OneDrive直链 或者：自己搭建的网盘安装版：https://github.com/NickeManarin/ … if.2.24.2.Setup.msi 或者：OneDrive直链 或者：自己搭建的网盘 定制的整个世界 该应用程序记录当前的显示屏幕，将每个屏幕截图保存为一个框架，并允许用户在生成输出文件之前编辑这些图片。 该工具非常不错的功能之一是内置的“编辑器”功能非常强大，并且可以进行很多用户自定义。 可以插入简短的文字说明或标题。一个真正伟大的功能是用户可以完全控制显示计时器。例如，可以创建一个动画，在短短几帧内显示特定消息。 还支持导入或导出帧，这意味着可以将常用图像（BMP，JPG，GIF和PNG）插入到新创建的动画中。 所有基本的图像修改工具均可用该程序具有高度的灵活性，并允许用户通过添加逐帧裁剪，旋转和翻转效果来调整其屏幕记录。 认为这些选项过于严格的用户还应该知道Screen To Gif可以添加棕褐色，像素化，模糊，负片，彩色和灰度滤镜。而且，如果所有其他方法都失败了，则可以使用“自由绘图”选项来完全解放用户的想象力！ 一个有趣的选项是“速度修改器”。这使用户可以加快或减慢其动画。这是模糊动画无关部分的完美方法！ 生成高度定制的动画的整体优秀程序Screen To Gif包含许多功能，无论是高级用户还是休闲用户都将发现它很棒。有很多功能可以在输出文件中添加特定的样式，并且干净的界面确实非常适合当前的工作。","link":"/p/1f78/"},{"title":"电脑版 愤怒的小鸟 七件套 英文官方原版","text":"《愤怒的小鸟收藏》是Rovio Entertainment独立发行的游戏的汇编。 它包括以下游戏：愤怒的小鸟，愤怒的小鸟里约热内卢，愤怒的小鸟四季，愤怒的小鸟空间，愤怒的小鸟星球大战，愤怒的小鸟星球大战II，坏小猪。 比赛围绕一群鸟，它们的鸡蛋被一群想吃它们的绿猪偷走了。 下载：https://wp.alittlebear.tk/b6aa/ 备用： Angry Birds Angry Birds Rio Angry Birds Seasons Angry Birds Space Angry Birds Star Wars Angry Birds Star Wars II Bad Piggies","link":"/p/b6aa/"},{"title":"《皇家守卫军：起源》 Kingdom Rush Origins v4.2.10","text":"《皇家守卫军：起源》是经典塔防游戏《皇家守卫军》系列的续作，玩家在游戏中要面对的是一批古老的恶魔，精灵与女巫等古老的种族，它们在这场“起源”战中占据了主角的重要领地。 这三位新英雄分别是擅使弓箭的精灵、以巨石为武器的战士还有能够操纵魔法的魔女，结合各类防御塔的攻击特色，它们都能够发挥自己的特殊能力。 官网：http://www.kingdomrushorigins.com/ steam：https://store.steampowered.com/app/816340/Kingdom_Rush_Origins/ 下载：https://wp.alittlebear.tk/3c5a/ 更新日志：https://github.com/cigumo/krli/wiki/Changelog 关于这款游戏令人废寝忘食的塔防游戏荣耀回归，推出全新冒险前传——欢迎来到《王国保卫战：起源》的世界！ 《王国保卫战：起源》是《王国保卫战》系列获奖冒险游戏的第三作，该系列在全球范围内已受到数百万玩家和评论家的喜爱和追捧。在这部作品中，您将回到整个故事的开始，那时维兹南还未曾起意要用力量宝石来胁迫王国。您将领略到这一不可不玩的塔防游戏系列的精髓，体验更加痛快利落而摄人心魄的游戏玩法。这部激动人心的前传将让您率领精灵军队，在全新防御塔、英雄和法术的帮助下，击退海蛇、邪恶术士和豺狼族人一波又一波的进攻，与坏人们血战到底，保卫神秘大陆的安全。 《王国保卫战：起源》将众多新内容和新特性融为一炉，同时也保持着让数百万玩家挚爱至今的系列经典画风。 核心特性 再次进入《王国保卫战》的世界：遍览神秘的精灵森林、魔法仙境，甚至浮在空中的古代都市遗迹！ 用全新的防御塔和部队释放精灵之力！精灵弓箭手、秘法师、石环德鲁伊和精灵步兵将成为您的麾下主力。 全新推出的专门防御塔有着多达18种以上的独特能力，正等待着您去发现！用精灵神箭手、符文巨熊、催动魔法的巫师甚至活体巨树，将敌人消灭殆尽吧。 拿起武器，抗击全新类型的敌人，投身史诗级的头目战！您所面对的将是豺狼部族、巨型蜘蛛和可怕的暮光军队。 征服并升级传奇英雄，还有他们非凡的能力与法术！ 降下闪电，召唤援军，利用各个英雄的独特能力，一口气灭掉几十个敌人！ 70多种成就，三种分别适合新手和老手的游戏难度，让您好几个小时都沉浸在游戏中浑然忘返。 选择不同的游戏模式（包括经典、钢铁和英雄模式），证明自己战术大师的气概。 利用游戏内置的百科全书，研究敌人和我方防御塔，做到知己知彼。 《王国保卫战：起源》更新日程表12月的最后一周 - 1.1版更新小心啊！有一支实力强劲的食人魔军队正在筹划入侵，想要将一切夷为平地！此次更新的内容有： “笨重的狂怒”扩展包 将与你并肩作战，共同抗击侵略者的英雄（杜拉斯、莉莉斯、瑞兹与大瑞格） 1月的最后一周 - 1.2版更新玛莉西娅麾下忠心耿耿的最后一名副官陷入了疯癫状态，现在正在密谋复仇。趁他还没来得及毁掉这一路上的一切，快去率领精灵军队，阻止“憎恶者”巴杰尼蒙的计划！ 此次更新的内容有： “苦涩的怨恨”扩展包 强力英雄（布鲁斯、莉恩） 3月7日 - 1.3版更新虽然王国已经恢复了往日的平静和繁荣，但我们此前派去矮人那边求援的信使仍未回返。如果说有什么比大声喧哗的矮人更可怕，那就是沉默不语的矮人了！请你务必去他们那边找寻答案。 此次更新的内容有： “被遗忘的宝藏”扩展包 英雄（威尔伯、火凤凰） 系统要求： OS: Windows 7 Processor: Dual Core CPU Memory: 1 GB RAM Graphics: OpenGL 3.0 compliant with 512MB of video RAM. Storage: 500 MB available space","link":"/p/3c5a/"},{"title":"使命召唤6：现代战争2 重制版","text":"使命召唤6：现代战争2 重制版 （Call Of Duty: Modern Warfare 2） 下载（46.99GB）：https://wp.alittlebear.tk/e6c1/ steam：https://store.steampowered.com/app/10180/Call_of_Duty_Modern_Warfare_2/ 游戏名称：使命召唤6：现代战争2重制版英文名称：Call Of Duty: Modern Warfare 2 Campaign Remastered游戏类型：第一人称射击FPS游戏制作：Beenox游戏发行：Activision游戏平台：PS4,XBOX ONE,PC游戏语言：英文,中文发售日期：2020-04-30 【游戏介绍】动视为新世代玩家进行了彻底高清重制，让玩家重新体验2009年年度大作《使命召唤：现代战争2》犹如史诗的单人剧情战役。《使命召唤6：现代战争2》的剧情战役进行了完整重制，大幅改进了贴图和动画，添加了基于物理渲染、高动态光照渲染以及其他华丽特效。 【游戏配置】最低配置处理器 : Intel Core i3-4340 or AMD FX-6300图形显卡: NVIDIA® GeForce® GTX 670 / NVIDIA® GeForce® GTX 1650 or AMD Radeon™ HD 7950 - DirectX 11.0 compatible system内存容量: 8 GB RAM硬盘空间: 80 GB available hard drive space 推荐配置处理器 : Intel® Core™ i5-2500K or AMD Ryzen™ R5 1600X Processor图形显卡: NVIDIA® GeForce® GTX 970 / NVIDIA® GeForce® GTX 1660 or AMD Radeon™ R9 390 / AMD Radeon™ RX 580 - DirectX 11.0 compatible system内存容量: 12 GB RAM硬盘空间: 80 GB available hard drive space","link":"/p/e6c1/"},{"title":"Microsoft Edge v81.0.416.72 绿色增强版本","text":"微软Edge浏览器独立发行版于2020年1月15日正式上线。Microsoft Edge，基于谷歌Chromium内核，全新界面更加清爽现代化，全面支持全局翻译、阅读模式、第三方扩展插件以及人声语音朗读等各种功能。此外，全新独立版内存占用大幅优化，相对来说更省电、流畅，较适合笔记本用户，全面支持兼容所有平台。 下载地址（可用idm多线程）：https://wp.alittlebear.tk/dda0/ 此版特点 微软Edge浏览器增强版，由shuax基于官方正式版打包而成，绑定便携化注入模块Edge++增强软件，强制实现flash插件支持，解除了Adobe Flash Player地区不相容限制和移除警告提示，增强了标签页功能。 增强功能： 双击关闭标签页保留最后标签页（点X不行）（防止关闭最后一个标签页时关闭浏览器）鼠标悬停标签栏滚动按住右键时滚轮滚动标签栏移除flash锁区，移除2020年过期警告（下载、加载flash需要你自己处理）移除管理员运行警告移除开发者模式警告便携设计，程序放在App目录，数据放在Data目录（兼容原版数据，但重装系统换电脑会丢数据）移除更新错误警告（因为是便携版没有自动更新功能） 如何使用？解压后运行App/msedge.exe即可。由于是便携版，不会和其它版本冲突，不想用了可以直接删掉整个文件夹。 如何更新？升级先把老版本App重命名为App2。然后把新下载的所有文件覆盖到老文件夹内。包括App、Data和说明.txt。运行测试正常后可以安全删除App2老版本。建议保留上个版本压缩包以便出问题时还原。 增强功能通过edge++.dll实现，并修改了msedge.exe主程序，可能会报毒。鼠标手势推荐使用全局手势软件，比如MouseInc。","link":"/p/dda0/"},{"title":"那些古怪又让人忧心的问题","text":"前NASA成员、美国最火科普博客xkcd幽默问答集 What If ?: Serious Scientific Answers to Absurd Hypothetical Questions http://wp.alittlebear.tk/cb11/ 内容简介 · · · · · ·「未读•探索家」重磅推出，2015年最有趣的书!再荒诞的问题都可能有一个科学答案！牛排从多高的地方掉下来正好能烤熟？哭多了会脱水吗？如果把一辈子亲吻所用的力气用在一个亲吻，会产生多大引力？全人类搬离地球需要几步？所有好奇心都值得被满足2014年全美最畅销趣味科普书：美国亚马逊畅销书榜NO.1持续2周，入选2014年度最佳图书，上市后横扫《纽约时报》《出版人周刊》《华尔街时报》等各大图书榜，迄今稳居各大排行榜前列！天才作者，前NASA员工、网络最火科普专栏What If合集：作者曾在NASA制造机器人，后来成为科普漫画家，玩转物理、天文、生物、化学、数学各学科知识，轻松接招粉丝们提出的脑洞大开的问题，配上xkcd风格的火柴人漫画，幽默机智的答案让人拍案叫绝！国内外人气爆棚，粉丝众多：国外诸多一线媒体、TED演讲人、天文学家、科普作家联… 作者简介 · · · · · ·兰道尔•门罗（Randall Munroe），曾在NASA工作，制造机器人。2006年成为全职网络漫画家，是美国最热门科普漫画网站xkcd的创立者。本书就是他的What If科普问答专栏合集。国际天文学联合会最近将小行星4942命名为“门罗”。如果“门罗小行星”撞上地球，很可能会导致大灭绝。 目录 · · · · · ·免责声明 1简介 1No.1 全球风暴 2No.2相对论棒球 5No.3乏燃料游泳池 7No.4那些古怪而又让人忧心的问题合集 一 9No.5纽约式时间机器 9No.6随机伴侣 15No.7激光笔 18No.8元素周期墙 23No.9大家一起跳 28No.10一摩尔鼹鼠 31No.11疯狂电吹风 35No.12那些古怪而又让人忧心的问题合集 二 40No.13最后的人类之光 41No.14机枪飞行背包 46No.15匀速上升 49No.16 那些古怪而又让人忧心的问题合集 三 51No.17太空潜水艇 53No.18短回答环节 56No.19闪电 60No.20那些古怪而又让人忧心的问题合集 四 63No.21人力计算机 63No.22小世界 68No.23牛排坠落 70No.24冰球一击 74No. 25普通感冒 76No.26半空的杯子 81No.27那些古怪而又让人忧心的问题合集 五 89No.28外星天文学家 90No.29消失的DNA 94No.30星级塞斯纳 99No.31那些古怪而又让人忧心的问题合集 六 105No.32尤达大师 107No.33飞越州 110No.34氦气球降落伞 115No.35人类大迁徙 118No.36那些古怪而又让人忧心的问题合集 七 121No.37自体繁殖 122No.38高掷比赛 129No.39致命中微子 135No.40那些古怪而又让人忧心的问题合集 八 139No.41飞越减速带 141No.42走失的人 145No.43轨道速度 149No.44联邦快递VS互联网 154No.45自由落体 157No.46那些古怪而又让人忧心的问题合集 九 163No.47斯巴达勇士 164No.48把海水抽干 168No.49把海水抽干（续集） 175No.50论Twitter的无穷性 188No.51乐高大桥 193No.52最长的落日 198No.53随机祝福电话 204No.54那些古怪而又让人忧心的问题合集 十 209No.55地球扩张 209No.56无重力射箭 218No.57太阳熄灭之日 223No.58纸质版维基百科 228No.59 Facebook之死亡国 233No.60日不落帝国的日落 239No.61搅拌加热 244No.62汇聚闪电 250No.63最孤独的人 256No.64那些古怪而又让人忧心的问题合集 十一 260No.65雨滴 262No.66 SAT靠猜 268No.67中子子弹 270No.68那些古怪而又让人忧心的问题合集 十二 282No.69里氏15级地震 283致谢 291","link":"/p/cb11/"},{"title":"Goindex","text":"https://www.moerats.com/archives/1001/ 这位大佬的教程十分详细（原作者删库，请参考大佬文章下方评论） 网盘实测：https://wp.alittlebear.tk/","link":"/p/1714/"},{"title":"GDindex","text":"搭了一个GD，用的GDIndex（本来用的是Goindex的） 又搭了一个GD，用的GDIndex（本来用的是Goindex的） https://github.com/maple3142/GDIndex/blob/master/README.zh.md 只要用第一个Goindex找到相关token啥的，其他就很方便了，找到js源码，修改相关数值，就可以部署了。 网盘实测（由于隐私，自己私人用）：https://gd.alittlebear.tk/ 隐藏其他盘：https://github.com/maple3142/GDIndex/issues/15","link":"/p/c12/"},{"title":"OneDrive-Index","text":"OneDrive-Index-Cloudflare-Worker OneDrive refresh token 地址：https://service-36wivxsc-1256127833.ap-hongkong.apigateway.myqcloud.com/release/scf_onedrive_filelistor 网盘实测：https://od.alittlebear.tk/ OneDrive的，后台各种设置也很不错，推荐。","link":"/p/916b/"},{"title":"Goindex-Drive","text":"https://github.com/kulokenci/goindex-drive 网盘实测（私人团队盘不方便公开）：https://gdwp.alittlebear.tk/","link":"/p/4aac/"},{"title":"OneDrive-FODI","text":"https://logi.im/front-end/scf-fodi.html OneDrive refresh token 地址：https://service-36wivxsc-1256127833.ap-hongkong.apigateway.myqcloud.com/release/scf_onedrive_filelistor 网盘实测：https://alittlebear.tk/onedrive/ OneDrive的，很简单，但是过于简陋（无嘲讽之意），留着备用。","link":"/p/e9f1/"},{"title":"修改版Goindex","text":"https://github.com/yanzai/goindex 作者demo：https://yanzai-goindex.java.workers.dev/0:/ 网盘实测：https://pan.alittlebear.tk/","link":"/p/2985/"},{"title":"Html5开发工具","text":"如今，HTML5发展飞速，被看做是web开发者创建流行web应用的利器。用HTML5开发的优势主要是这个技术可以进行跨平台进行使用。例如你开发了一款HTML5的游戏，你可以很轻易地移植到UC的开放平台、Opera的游戏中心、Facebook应用平台，甚至可以通过封装的技术发放到App Store或Google Play上，所以它的跨平台性非常强大，这也是大多数人对HTML5有兴趣的主要原因。而且随着各大浏览器对HTML5技术支持的不断完善以及 HTML5技术的不断成熟，未来 HTML5必将改变我们创建Web应用程序的方式。下面就向大家推荐多款优秀的HTML5开发工具，帮助你更高效的编写HTML5应用。 1. Adobe Dreamweaver CS6Dreamweaver CS6是世界顶级软件厂商Adobe推出的一套拥有可视化编辑界面，用于制作并编辑网站和移动应用程序的网页设计软件。由于Dreamweaver支持代码、拆分、设计、实时视图等多种方式来创作、编写和修改网页，对于初级人员，你可以无需编写任何代码就能快速创建Web页面。其成熟的代码编辑工具更适用于Web开发高级人员的创作！ ** 2. Adobe EdgeAdobe Edge是一个用HTML5、CSS、Java开发动态互动内容的设计工具。它的一个重要功能是web工具包界面，用于方便确保在不同浏览器中架构的一致性，此外，Adobe Edge还将整合TypeKit这样的字体服务。通过Edge设计的内容可以兼容iOS和Android设备，也可以运行在火狐、Chrome、Safari和IE9等主流浏览器上。 3. DevExtremeDevExtreme Complete Subion是性能最优的HTML5,CSS和Java移动开发框架，可以直接在Visual Studio集成开发环境，构建iOS，Android，Tizen和Windows Phone 8应用程序。DevExtreme包含 PhoneJS 和 ChartJS 两个原生UI组件，并且提供源代码。目前，DevExtreme支持VS2010/2012/2013集成开发环境，兼容Android 4+、iOS5+、Windows 8、Window Phone 8、Tizen五大移动平台，是Visual Studio开发人员开发跨平台移动产品的首选工具。 4. JetBrains WebStormWebStorm 是jetbrains公司旗下一款JavaScript开发工具。被广大中国JS开发者誉为“Web前端开发神器”、“最强大的HTML5编辑器”、“最智能的JavaS IDE”等。与IntelliJ IDEA同源，继承了IntelliJ IDEA强大的JS部分的功能。 5. Sencha Architect在开发移动和桌面应用的工具中，Sencha的定位是HTML5可视化应用开发。开发团队可以在一个单一集成的环境中完成应用的设计、开发和部署。开发者还可以开发Sencha Touch2和Ext JS4 Java应用，并实时预览。 6、InitializrInitializr 是制作 HTML5 网站最好的入门辅助开发工具，你可以使用提供的特色模板快速生成网站，也可以自定义，Initializr 会为你生成代码简洁的可定制的网页模板。 7、HTML5demos想知道你的浏览器是否支持 HTML5 Canvas 吗？想知道 Safari 是否可以运行简单的 HTML5 聊天客户端吗？HTML5demos 会告诉你每一个HTML5特性在哪些浏览器中支持。 8、HTML5 Tracker想了解 HTML5的最新动向吗? 使用 HTML5 Tracker 吧，它可以跟踪 HTML5 最新修订信息。 9、HTML5 visual cheat sheet想要快速超找一个标签或者属性吗？看看这个非常酷的速查手册吧，每个Web开发人员的必备。 10、Switch To HTML5Switch To HTML5 是一个基础而实用的模板生成工具。如果你开始一个新项目，可以到这里获取免费的 HTML5 网站模板。 11、HTML5 Test你浏览器准备好迎接 HTML5 革命了吗？HTML5 Test 将告诉你。这个网站会为你当前使用的浏览器生成一份对video、audio、canvas等等特性的支持情况的完整报告。 12、Lime JSLimeJS 是一个 HTML5 游戏开发框架，用于快速构建运行于触屏设备和桌面浏览器的游戏。非常棒的HTML5开发工具，一定要用用试试。","link":"/p/8230/"},{"title":"博客相关的经验（ps：超级乱)","text":"一些最后解决博客相关问题的答案 （懒得维护，太累了，所以取消置顶嘿嘿） 博客透明 https://www.wolfdan.cn/Hexo-Next-Gemini%E4%B8%BB%E9%A2%98%E9%80%8F%E6%98%8E%E5%8C%96%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E7%9A%84%E6%9B%B4%E6%94%B9/ hexo文章内toc生成https://yelog.org/2019/09/24/3-hexo-toc/ Hexo设置跳过渲染https://alaxn.github.io/a819c9cf/ 一些html游戏源码https://www.w3cschool.cn/html5/html5-game2.html https://blog.csdn.net/weixin_30493401/article/details/96779316 The requested URL returned error: 500:https://blog.csdn.net/github_38851471/article/details/89478755 在Markdown中实现内容及代码块折叠操作：https://blog.csdn.net/qq_40802448/article/details/103136825?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-4 Markdown语法大全：https://www.cnblogs.com/liugang-vip/p/6337580.html 重装node，hexo提示：no layout:index.html:https://www.52pojie.cn/thread-1182369-1-1.html https://github.com/hexojs/hexo/issues/4281 小地球：https://leflacon.top/783cca3a/ 关于博客园内嵌入bilibili视频JS如何在页面中插入HTML代码https://bbs.csdn.net/topics/330255909 开仓库的问题： Git遇到Unable to create ‘E:/xxx/.git/index.lock’: File exists.的解决办法https://blog.csdn.net/tangkthh/article/details/90412139 github 用git bash上传项目 最后提示 Everything up-to-date 但没传上去https://www.cnblogs.com/wenbinshen/p/9069851.html git身份验证失败https://blog.csdn.net/linyunping/article/details/80694863 FTP上传： https://blog.csdn.net/suny2020/article/details/88785016 php上传到服务器打不开（No input file specified）： https://yq.aliyun.com/articles/34240 discuz：目录未找到或者无法访问./data/template https://blog.csdn.net/CityzenOldwang/article/details/60586992 html： markdown文本居中，段首缩进的方法 https://blog.csdn.net/ramfmy/article/details/51852075 设置图片大小 https://support.typora.io/Resize-Image/ 文字超链接 https://zhidao.baidu.com/question/567088203.html 插入图片 https://www.w3school.com.cn/tags/tag_img.asp css: CSS3 backdrop-filter() 实现背景毛玻璃效果，区别于 blur() https://blog.csdn.net/KimBing/article/details/99083613 https://www.imaegoo.com/2019/css-backdrop-blur/ CSS实现背景图片固定 https://blog.csdn.net/aalinsy/article/details/26461729 分割线： https://www.zfuhao.com/p/114720 VS Code注释快捷键: https://blog.csdn.net/correlate/article/details/85230757 CSS实现网页背景图片自适应全屏 https://www.cnblogs.com/neromaycry/p/8088828.html","link":"/p/d4ad/"},{"title":"郭沫若的读书经验","text":"读书读到57岁了，当然有些经验可谈，希望能提供读者一些参考。读书的方法大体上要看自己是为了什么目的，有为学习而读书，有为研究而读书，有为创作而读书，有为娱乐而读书。目的不同，方法也就不免有些差异。 为学习而读书可以说是每一个人的基本要求。一个人自发蒙以采，到学成一种技艺，养成一种人格为止，所受的教育，都是为了这个目的。学校的课程，大体上都是强迫性的，非读不可。进步的国家要培养健全的国民，一定有周密的国民教育课程，每个人都必须经历，这是无庸置疑的。一个人有相对的择业的自由，但所学的课程，一经择定，便必须完成一定的职业教育课程，这是不由自主的。例如我在大学时代学的是医学，则解剖学、生理学、病理学、药理学、细菌学以及各种临床或应用医学的教科书，便非读不可，不读你便不能成为医学家。即使学校毕了业，学问也不能毕业，你必须向这方面锲而不舍地追求，然后才能进步，不然你便只好落伍了。我自己因为两耳重听的关系，大学毕业后便中止了医学，故今天不敢自命为医学家，别人也不这样看待我。 为研究而读书这或许是狭义的读书方式。譬如研究一门特殊学问，或者特殊问题，凡关于那门学问或那个问题的一切书籍和资料，必须尽可能把它们全都搜罗，把它们读到滚瓜烂熟，这样，你对于那个问题便有了充分的把握，你就可以成为该门学问的权威。在研究上，你自然有充分的自由，但如果你是有责任心的人，你的自由依然是相对的而非绝对的。例如我有研究古代史的志趣，为了完成这志趣，我下了一番苦功，把甲骨文字和青铜器上的铭文完全征服了。这些都是进步人士视为落后的东西，一向被人认为是一些吃饱了饭没事做的古董家拿来消磨时日的东西，因此当我在研究这些资料的时候，也曾受过进步人士的非难，指责我为玩物丧志的人。然而我忍受着这些斥责，把我的志趣贯彻了。在今天凡是有志于古代文化研究的人，似乎都沿着我的旧路走。为研究而读书，我的方法是(一)直探本源，不受前人的束缚；(二)搜罗一切资料，集腋成裘；(三)对于资料毫不容情、毫不惜力地加以检查，而且必须彻底，绝不放松。这样研究才会有成绩。 为创作而读书实际上就是观摩的意思。我也是搞文艺工作的人，不自量力，差不多一切的文艺形式都尝试过。诗歌、小说、戏剧、评论，我都大胆地写过一些。为了培养写作能力，我曾耽读过古今中外一些名人的作品。这样的读书，自可以说是为创作而读书，但在这儿我有一些体会，我想把它表白出来。我自己在写作上每每有这样的一种准备的步骤。譬如我要写剧本，我便先把莎士比亚或莫里哀的剧本读它一两本；要写小说，我便先把托尔斯泰或福楼拜的小说读它一两篇。读时也不必全部读完，有时仅仅读几页或几行，便可以得到一些启示，而不可遏止地刺激我写作的兴趣。别的朋友有没有这种习性，我不知道，但我感觉到这的确是很有效的一种读书方法。 为娱乐而读书这应该是人人所有的经验。那些在街头巷尾贪读公仔书的朋友们，应该都是这种类型的读书人。的确，读书本身就是一种娱乐。文体轻松的书，插图多的书，读熟了自己喜欢的书，版本好、装潢精美的书，研究有素而资料丰富的书……，在工作的闲暇，读起采的确可以使人忘却疲劳而增进生活乐趣。当然，这是应该有限制的。书本种类繁多，质素不一，必须加以选择。滥读一些无病呻吟，而又对身心有害的读物，反而会得不偿失，弄巧反拙。我拉杂地写了这些，不愿再从这儿总结出教条来，请读者们自己去吸取吧。","link":"/p/18sd/"},{"title":"殖民者生存 Colony Survival v0.7.2.2","text":"Colony Survival是由两个人组成的团队开发的独特的第一人称战略游戏。 在体素世界中建立自己的殖民地。 司令员，农民，矿工和其他殖民者。 保卫您的殖民地，抵御每天晚上袭击的成群的怪物！ 关于这款游戏 动态3D寻路殖民者和怪物都可以在您的世界中找到自己的出路。 建造桥梁，隧道，楼梯，立交桥和地下通道，以确保您的殖民者能够到达他们想去的地方，而怪物却不会！ 种植横幅以开始您的殖民地。 随着您招募更多的殖民者，更多的怪物会尝试入侵您的殖民地！ 建造城墙，挖护城河并建造要塞，以应对不断增加的威胁。 数十种不同的工作，可通过科学解锁使用广泛的科学系统解锁工作，封锁，升级和新武器！ 您的殖民地开始时会很小，有几个浆果农户，投石者和一个铜矿工。 扩大您的殖民地并开始使用新的金属，例如青铜，铁和钢。 生产它们将需要新的燃料，如木炭和焦炭。 使用更高级的金属为警卫解锁match和火柴枪！ 向您的殖民地添加小麦农，面包师，亚麻农，裁缝和许多其他工作。 探索和建立一个广阔而多样的世界大型高级殖民地能够解锁滑翔机和殖民地入门套件，从而使他们能够定居新的土地。 飞向天空，探索拥有多个大洲和生物群落的世界。 在遥远的土地上建立殖民地，以获得新的工作，庄稼和资源。 合作：与朋友一起玩没有问题从主菜单轻松启动合作服务器，并邀请朋友加入您的世界。 与多个朋友共享一个殖民地的所有权，或建立自己的殖民地以及贸易物品和科学。 也可以使用我们的高级服务器工具来设置更复杂的系统。 广泛的mod支持使玩家能够完全根据自己的需要自定义其体验。 最低配置 操作系统: Windows Vista SP1 &amp; newer, 64-bit 处理器: Intel Pentium G620 (2.5 Ghz dual core) or equivalent 内存: 2 GB RAM 显卡: Intel HD Graphics 5000, 1280x720 display DirectX 版本: 11 存储空间: 需要 300 MB 可用空间 附注事项: Work in progress: new features may raise the bar, optimizations may lower the bar 链接steam: https://store.steampowered.com/app/366090/Colony_Survival/ 蓝奏：https://www.lanzous.com/i9e5w6b","link":"/p/7b7d/"},{"title":"迷你地铁 Mini Metro v0.6.01.2020","text":"Mini Metro 是关于在城市规划中设计地铁线路的策略模拟游戏。通过在站点之间连线让列车通过，还要随着新站点的建设和开放，不断调整线路。你需要利用有限的资源做出最好的设计。 简介Mini Metro 是关于在城市规划中设计地铁线路的策略模拟游戏。通过在站点之间连线让列车通过，还要随着新站点的建设和开放，不断调整线路。你需要利用有限的资源做出最好的设计。 在 Mini Metro 中，你将肩负起在飞速发展的城市中涉及地铁的重要任务。城市最初只有三个地铁站，在此基础上，你需要建立新的站点，并在站点之间设计线路，让上下班的通勤者们在路上少花时间。每个站点能容纳的等车乘客数量是有限的，所以你的地铁网络必须设计精密，避免发生拥堵和旅行延误的情况。 城市在不断扩张的进程中，需要更多的站点，以帮助更多的通勤乘客。对地铁网络的要求也会越来越高。你需要经常重新规划线路，使运输效率最大化。你每周获得的新资源都对建设有所帮助，但你得决定如何分配。 大多数的地铁方案都会以失败告终。也许站点建设的太快了，也许大量乘客滞留在了站台上。你的地铁线路能维持多长时间运营呢？ 主要功能* 游戏既紧张又轻松，既复杂又简单。这怎么可能呢？你自己来玩玩看就知道了。* 三种游戏模式：快速得分的正常模式、没有限制的无尽模式、挑战自我的极限模式。* 在全新的创意模式中按你自己的想法建设地铁网络。* 全球 20 座真实城市（伦敦、纽约、巴黎、柏林、墨尔本、香港、大阪、圣彼得堡、蒙特利尔、旧金山、圣保罗、首尔、华盛顿（哥伦比亚特区）、开罗、伊斯坦布尔、上海、新加坡、斯德哥尔摩、孟买、奥克兰）供您设计地铁线路。每座城市都有独特的颜色主题、设计障碍及生活节奏。* 城市发展具有随机性。每个游戏都不一样。上一个游戏中成功的战略在新的游戏中可能就没什么用了。* 每张地图都是大师之作，你可以达到伦敦地铁之父哈利·贝克那样的水准。你可随心所欲的调整地铁方案，还可把你的杰作作为电脑桌面！* 由 Disasterpeace （Fez 配乐师！）亲自操刀的自动配乐程序，让音乐随管网无尽变化。* 提供夜间模式和色盲模式。* 还有棒棒的列车呢！ 最低配置操作系统: Windows XP, Vista, 7, 8, 10 or later处理器: 2 GHz or faster processor内存: 2 GB RAM显卡: Shader Model 4.0DirectX 版本: 9.0c存储空间: 需要 350 MB 可用空间 链接Steam：https://store.steampowered.com/app/287980 更新日志：https://store.steampowered.com/news/?appids=287980 Google Drive：https://drive.google.com/file/d/1vboucZ8CeKvp5KW5xbl1hIETRyoK_h4H/view?usp=sharing （需要我帮你转存到国内可访问盘）","link":"/p/b54f/"}],"tags":[{"name":"开发工具","slug":"开发工具","link":"/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"},{"name":"网站","slug":"网站","link":"/tags/%E7%BD%91%E7%AB%99/"},{"name":"经验","slug":"经验","link":"/tags/%E7%BB%8F%E9%AA%8C/"},{"name":"书籍","slug":"书籍","link":"/tags/%E4%B9%A6%E7%B1%8D/"},{"name":"MD编辑器","slug":"MD编辑器","link":"/tags/MD%E7%BC%96%E8%BE%91%E5%99%A8/"},{"name":"浏览器","slug":"浏览器","link":"/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"录像软件","slug":"录像软件","link":"/tags/%E5%BD%95%E5%83%8F%E8%BD%AF%E4%BB%B6/"},{"name":"图片浏览器","slug":"图片浏览器","link":"/tags/%E5%9B%BE%E7%89%87%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"阅读软件","slug":"阅读软件","link":"/tags/%E9%98%85%E8%AF%BB%E8%BD%AF%E4%BB%B6/"},{"name":"俄罗斯方块","slug":"俄罗斯方块","link":"/tags/%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/"},{"name":"其他","slug":"其他","link":"/tags/%E5%85%B6%E4%BB%96/"}],"categories":[{"name":"影视推荐","slug":"影视推荐","link":"/categories/%E5%BD%B1%E8%A7%86%E6%8E%A8%E8%8D%90/"},{"name":"其他","slug":"其他","link":"/categories/%E5%85%B6%E4%BB%96/"},{"name":"视频","slug":"影视推荐/视频","link":"/categories/%E5%BD%B1%E8%A7%86%E6%8E%A8%E8%8D%90/%E8%A7%86%E9%A2%91/"},{"name":"书籍","slug":"书籍","link":"/categories/%E4%B9%A6%E7%B1%8D/"},{"name":"书源","slug":"其他/书源","link":"/categories/%E5%85%B6%E4%BB%96/%E4%B9%A6%E6%BA%90/"},{"name":"游戏","slug":"游戏","link":"/categories/%E6%B8%B8%E6%88%8F/"},{"name":"阅读经验","slug":"书籍/阅读经验","link":"/categories/%E4%B9%A6%E7%B1%8D/%E9%98%85%E8%AF%BB%E7%BB%8F%E9%AA%8C/"},{"name":"电子书","slug":"书籍/电子书","link":"/categories/%E4%B9%A6%E7%B1%8D/%E7%94%B5%E5%AD%90%E4%B9%A6/"},{"name":"网盘","slug":"其他/网盘","link":"/categories/%E5%85%B6%E4%BB%96/%E7%BD%91%E7%9B%98/"},{"name":"软件","slug":"软件","link":"/categories/%E8%BD%AF%E4%BB%B6/"},{"name":"工具","slug":"软件/工具","link":"/categories/%E8%BD%AF%E4%BB%B6/%E5%B7%A5%E5%85%B7/"},{"name":"浏览器","slug":"软件/浏览器","link":"/categories/%E8%BD%AF%E4%BB%B6/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"工具","slug":"书籍/工具","link":"/categories/%E4%B9%A6%E7%B1%8D/%E5%B7%A5%E5%85%B7/"},{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"hexo","slug":"技术/hexo","link":"/categories/%E6%8A%80%E6%9C%AF/hexo/"}]}